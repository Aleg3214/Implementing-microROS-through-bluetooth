
f401_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000166a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  08016840  08016840  00017840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017ab4  08017ab4  00019860  2**0
                  CONTENTS
  4 .ARM          00000008  08017ab4  08017ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017abc  08017abc  00019860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017abc  08017abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ac8  08017ac8  00018ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000860  20000000  08017acc  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010bac  20000860  0801832c  00019860  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001140c  0801832c  0001a40c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019860  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd23  00000000  00000000  00019890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000430d  00000000  00000000  000355b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  000398c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115d  00000000  00000000  0003af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d393  00000000  00000000  0003c0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e53b  00000000  00000000  00059448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8850  00000000  00000000  00077983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001201d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b40  00000000  00000000  0012024c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00126d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000860 	.word	0x20000860
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016828 	.word	0x08016828

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000864 	.word	0x20000864
 80001dc:	08016828 	.word	0x08016828

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800064c:	f005 fbae 	bl	8005dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000650:	4b5a      	ldr	r3, [pc, #360]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000658:	f000 f986 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800065c:	4b58      	ldr	r3, [pc, #352]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4013      	ands	r3, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	f040 8090 	bne.w	800078a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01e      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000670:	2208      	movs	r2, #8
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2b00      	cmp	r3, #0
 8000680:	d015      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f023 0307 	bic.w	r3, r3, #7
 8000688:	3308      	adds	r3, #8
 800068a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00b      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d06a      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
 80006b4:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d865      	bhi.n	800078a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c8:	e004      	b.n	80006d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d903      	bls.n	80006e6 <pvPortMallocMicroROS+0xa6>
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f1      	bne.n	80006ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d04c      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2208      	movs	r2, #8
 80006f6:	4413      	add	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	2308      	movs	r3, #8
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	429a      	cmp	r2, r3
 8000710:	d920      	bls.n	8000754 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	f003 0307 	and.w	r3, r3, #7
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	613b      	str	r3, [r7, #16]
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	f000 f96c 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a19      	ldr	r2, [pc, #100]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d203      	bcs.n	8000776 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800078a:	f005 fb1d 	bl	8005dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	60fb      	str	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007b0:	69fb      	ldr	r3, [r7, #28]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20004484 	.word	0x20004484
 80007c0:	20004490 	.word	0x20004490
 80007c4:	20004488 	.word	0x20004488
 80007c8:	2000447c 	.word	0x2000447c
 80007cc:	2000448c 	.word	0x2000448c

080007d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d04a      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e2:	2308      	movs	r3, #8
 80007e4:	425b      	negs	r3, r3
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4013      	ands	r3, r2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000802:	f383 8811 	msr	BASEPRI, r3
 8000806:	f3bf 8f6f 	isb	sy
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	60fb      	str	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	e7fd      	b.n	8000812 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <vPortFreeMicroROS+0x66>
	__asm volatile
 800081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000822:	f383 8811 	msr	BASEPRI, r3
 8000826:	f3bf 8f6f 	isb	sy
 800082a:	f3bf 8f4f 	dsb	sy
 800082e:	60bb      	str	r3, [r7, #8]
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f005 faa6 	bl	8005dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f005 faa8 	bl	8005dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20004490 	.word	0x20004490
 8000884:	20004488 	.word	0x20004488

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20004490 	.word	0x20004490

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f005 fa6d 	bl	8005dac <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feb4 	bl	8000640 <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f015 f8ba 	bl	8015a7e <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff60 	bl	80007d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f005 fa5a 	bl	8005dc8 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f005 fa40 	bl	8005dac <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe82 	bl	8000640 <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f005 fa36 	bl	8005dc8 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000087c 	.word	0x2000087c
 8000a18:	2000447c 	.word	0x2000447c
 8000a1c:	20004484 	.word	0x20004484
 8000a20:	2000448c 	.word	0x2000448c
 8000a24:	20004488 	.word	0x20004488
 8000a28:	20004490 	.word	0x20004490

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000447c 	.word	0x2000447c
 8000adc:	20004484 	.word	0x20004484

08000ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <MX_DMA_Init+0x4c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a0f      	ldr	r2, [pc, #60]	@ (8000b2c <MX_DMA_Init+0x4c>)
 8000af0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <MX_DMA_Init+0x4c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2105      	movs	r1, #5
 8000b06:	203a      	movs	r0, #58	@ 0x3a
 8000b08:	f001 f8c4 	bl	8001c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b0c:	203a      	movs	r0, #58	@ 0x3a
 8000b0e:	f001 f8dd 	bl	8001ccc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2105      	movs	r1, #5
 8000b16:	2046      	movs	r0, #70	@ 0x46
 8000b18:	f001 f8bc 	bl	8001c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000b1c:	2046      	movs	r0, #70	@ 0x46
 8000b1e:	f001 f8d5 	bl	8001ccc <HAL_NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b3e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b44:	4904      	ldr	r1, [pc, #16]	@ (8000b58 <cubemx_transport_open+0x28>)
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f002 fe2c 	bl	80037a4 <HAL_UART_Receive_DMA>
    return true;
 8000b4c:	2301      	movs	r3, #1
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20004494 	.word	0x20004494

08000b5c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b6a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f002 fe3e 	bl	80037ee <HAL_UART_DMAStop>
    return true;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b90:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b20      	cmp	r3, #32
 8000b9c:	d11c      	bne.n	8000bd8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f002 fd8c 	bl	80036c4 <HAL_UART_Transmit_DMA>
 8000bac:	4603      	mov	r3, r0
 8000bae:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bb0:	e002      	b.n	8000bb8 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f004 f8b8 	bl	8004d28 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bb8:	7cfb      	ldrb	r3, [r7, #19]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d105      	bne.n	8000bca <cubemx_transport_write+0x4e>
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b20      	cmp	r3, #32
 8000bc8:	d1f3      	bne.n	8000bb2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000bca:	7cfb      	ldrb	r3, [r7, #19]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <cubemx_transport_write+0x58>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	e002      	b.n	8000bda <cubemx_transport_write+0x5e>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e000      	b.n	8000bda <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000bd8:	2300      	movs	r3, #0
    }
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bf8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfe:	b672      	cpsid	i
}
 8000c00:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c80 <cubemx_transport_read+0x9c>)
 8000c10:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c12:	b662      	cpsie	i
}
 8000c14:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f004 f883 	bl	8004d28 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <cubemx_transport_read+0xa0>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <cubemx_transport_read+0x9c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d103      	bne.n	8000c36 <cubemx_transport_read+0x52>
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dbe3      	blt.n	8000bfe <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c3a:	e011      	b.n	8000c60 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <cubemx_transport_read+0xa0>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	440b      	add	r3, r1
 8000c46:	4910      	ldr	r1, [pc, #64]	@ (8000c88 <cubemx_transport_read+0xa4>)
 8000c48:	5c8a      	ldrb	r2, [r1, r2]
 8000c4a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <cubemx_transport_read+0xa0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c56:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <cubemx_transport_read+0xa0>)
 8000c58:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <cubemx_transport_read+0xa0>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <cubemx_transport_read+0x9c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d003      	beq.n	8000c74 <cubemx_transport_read+0x90>
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d3e3      	bcc.n	8000c3c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c74:	69bb      	ldr	r3, [r7, #24]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20004c98 	.word	0x20004c98
 8000c84:	20004c94 	.word	0x20004c94
 8000c88:	20004494 	.word	0x20004494

08000c8c <subscription_callback>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void (* rclc_subscription_callback)(const void *);

void subscription_callback(const void * msgin){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	    // Cast received message to used type
	    const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60fb      	str	r3, [r7, #12]
	    //HAL_GPIO_TogglePin(LD1_GPIO_Port , LD1_Pin);

	    // Process message
	    //printf("Received: %d\n", msg->linear.x);
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	e9c7 2300 	strd	r2, r3, [r7]
	RCLC_UNUSED(last_call_time);
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <MX_FREERTOS_Init+0x18>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <MX_FREERTOS_Init+0x1c>)
 8000cc6:	f003 ff9d 	bl	8004c04 <osThreadNew>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a03      	ldr	r2, [pc, #12]	@ (8000cdc <MX_FREERTOS_Init+0x20>)
 8000cce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08016970 	.word	0x08016970
 8000cd8:	08000ce1 	.word	0x08000ce1
 8000cdc:	20004c9c 	.word	0x20004c9c

08000ce0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ce4:	b0ec      	sub	sp, #432	@ 0x1b0
 8000ce6:	af02      	add	r7, sp, #8
 8000ce8:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000cec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000cf0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

		  rmw_uros_set_custom_transport(
 8000cf2:	4bb3      	ldr	r3, [pc, #716]	@ (8000fc0 <StartDefaultTask+0x2e0>)
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	4bb3      	ldr	r3, [pc, #716]	@ (8000fc4 <StartDefaultTask+0x2e4>)
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	4bb3      	ldr	r3, [pc, #716]	@ (8000fc8 <StartDefaultTask+0x2e8>)
 8000cfc:	4ab3      	ldr	r2, [pc, #716]	@ (8000fcc <StartDefaultTask+0x2ec>)
 8000cfe:	49b4      	ldr	r1, [pc, #720]	@ (8000fd0 <StartDefaultTask+0x2f0>)
 8000d00:	2001      	movs	r0, #1
 8000d02:	f009 fc69 	bl	800a5d8 <rmw_uros_set_custom_transport>
		    cubemx_transport_open,
		    cubemx_transport_close,
		    cubemx_transport_write,
		    cubemx_transport_read);

		  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d06:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f009 faee 	bl	800a2ec <rcutils_get_zero_initialized_allocator>
		  freeRTOS_allocator.allocate = microros_allocate;
 8000d10:	4bb0      	ldr	r3, [pc, #704]	@ (8000fd4 <StartDefaultTask+0x2f4>)
 8000d12:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
		  freeRTOS_allocator.deallocate = microros_deallocate;
 8000d16:	4bb0      	ldr	r3, [pc, #704]	@ (8000fd8 <StartDefaultTask+0x2f8>)
 8000d18:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
		  freeRTOS_allocator.reallocate = microros_reallocate;
 8000d1c:	4baf      	ldr	r3, [pc, #700]	@ (8000fdc <StartDefaultTask+0x2fc>)
 8000d1e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
		  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000d22:	4baf      	ldr	r3, [pc, #700]	@ (8000fe0 <StartDefaultTask+0x300>)
 8000d24:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

		  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000d28:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 faeb 	bl	800a308 <rcutils_set_default_allocator>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f083 0301 	eor.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <StartDefaultTask+0x66>
		      printf("Error on default allocators (line %d)\n", __LINE__);
 8000d3e:	21ad      	movs	r1, #173	@ 0xad
 8000d40:	48a8      	ldr	r0, [pc, #672]	@ (8000fe4 <StartDefaultTask+0x304>)
 8000d42:	f014 fcd5 	bl	80156f0 <iprintf>
		  }

		  // micro-ROS app

		  rcl_subscription_t subscriber;
		  const char * topic_name = "cmd_vel";
 8000d46:	4ba8      	ldr	r3, [pc, #672]	@ (8000fe8 <StartDefaultTask+0x308>)
 8000d48:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		  rclc_support_t support;
		  rcl_allocator_t allocator;
		  rcl_node_t node;

		  allocator = rcl_get_default_allocator();
 8000d4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d50:	4618      	mov	r0, r3
 8000d52:	f009 faf7 	bl	800a344 <rcutils_get_default_allocator>
 8000d56:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000d5a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8000d5e:	f507 7580 	add.w	r5, r7, #256	@ 0x100
 8000d62:	461c      	mov	r4, r3
 8000d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	602b      	str	r3, [r5, #0]

		  //create init_options
		  rclc_support_init(&support, 0, NULL, &allocator);
 8000d6c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d70:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	f009 f992 	bl	800a0a0 <rclc_support_init>

		  // create node
		  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000d7c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000d80:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8000d84:	4a99      	ldr	r2, [pc, #612]	@ (8000fec <StartDefaultTask+0x30c>)
 8000d86:	499a      	ldr	r1, [pc, #616]	@ (8000ff0 <StartDefaultTask+0x310>)
 8000d88:	f009 f9d4 	bl	800a134 <rclc_node_init_default>

		  // create publisher
		  rclc_publisher_init_default(
 8000d8c:	f00a f97e 	bl	800b08c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8000d96:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8000d9a:	4b96      	ldr	r3, [pc, #600]	@ (8000ff4 <StartDefaultTask+0x314>)
 8000d9c:	f009 fa06 	bl	800a1ac <rclc_publisher_init_default>
		      &node,
		      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		      "cubemx_publisher");

		  // create subscriber for Twist messages
		  rclc_subscription_init_default(
 8000da0:	f006 fc92 	bl	80076c8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8000daa:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8000dae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000db2:	f009 fa2f 	bl	800a214 <rclc_subscription_init_default>
		    &subscriber, &node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), topic_name);

		  //Add subscription to the executor
		  rcl_timer_t timer = rcl_get_zero_initialized_timer();
 8000db6:	f008 f961 	bl	800907c <rcl_get_zero_initialized_timer>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		  	const unsigned int timer_timeout = 200;
 8000dc0:	23c8      	movs	r3, #200	@ 0xc8
 8000dc2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
		  	rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(timer_timeout), timer_callback);
 8000dc6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000dca:	2200      	movs	r2, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000dce:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000dd0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000dd4:	4622      	mov	r2, r4
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	f04f 0000 	mov.w	r0, #0
 8000ddc:	f04f 0100 	mov.w	r1, #0
 8000de0:	0159      	lsls	r1, r3, #5
 8000de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000de6:	0150      	lsls	r0, r2, #5
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4621      	mov	r1, r4
 8000dee:	ebb2 0801 	subs.w	r8, r2, r1
 8000df2:	4629      	mov	r1, r5
 8000df4:	eb63 0901 	sbc.w	r9, r3, r1
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8000e04:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8000e08:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8000e0c:	4690      	mov	r8, r2
 8000e0e:	4699      	mov	r9, r3
 8000e10:	4623      	mov	r3, r4
 8000e12:	eb18 0a03 	adds.w	sl, r8, r3
 8000e16:	462b      	mov	r3, r5
 8000e18:	eb49 0b03 	adc.w	fp, r9, r3
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000e30:	ebb2 010a 	subs.w	r1, r2, sl
 8000e34:	61b9      	str	r1, [r7, #24]
 8000e36:	eb63 030b 	sbc.w	r3, r3, fp
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e40:	4603      	mov	r3, r0
 8000e42:	4622      	mov	r2, r4
 8000e44:	189b      	adds	r3, r3, r2
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e48:	462b      	mov	r3, r5
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	eb42 0303 	adc.w	r3, r2, r3
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000e56:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 8000e5a:	f107 05f4 	add.w	r5, r7, #244	@ 0xf4
 8000e5e:	4b66      	ldr	r3, [pc, #408]	@ (8000ff8 <StartDefaultTask+0x318>)
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4621      	mov	r1, r4
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f009 fa07 	bl	800a27c <rclc_timer_init_default>

		  	// create executor
		  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8000e6e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000e72:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000e76:	4618      	mov	r0, r3
 8000e78:	f008 fe04 	bl	8009a84 <rclc_executor_get_zero_initialized_executor>
		  	rclc_executor_init(&executor, &support.context, 2, &allocator);
 8000e7c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e80:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8000e84:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8000e88:	2202      	movs	r2, #2
 8000e8a:	f008 fe05 	bl	8009a98 <rclc_executor_init>

		  	unsigned int rcl_wait_timeout = 1000;   // in ms
 8000e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e92:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
		  	rclc_executor_set_timeout(&executor, RCL_MS_TO_NS(rcl_wait_timeout));
 8000e96:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000ea0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000ea4:	4622      	mov	r2, r4
 8000ea6:	462b      	mov	r3, r5
 8000ea8:	f04f 0000 	mov.w	r0, #0
 8000eac:	f04f 0100 	mov.w	r1, #0
 8000eb0:	0159      	lsls	r1, r3, #5
 8000eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000eb6:	0150      	lsls	r0, r2, #5
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4621      	mov	r1, r4
 8000ebe:	1a51      	subs	r1, r2, r1
 8000ec0:	6139      	str	r1, [r7, #16]
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	024b      	lsls	r3, r1, #9
 8000eda:	4641      	mov	r1, r8
 8000edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8000ee0:	4641      	mov	r1, r8
 8000ee2:	024a      	lsls	r2, r1, #9
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4622      	mov	r2, r4
 8000eec:	189b      	adds	r3, r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	462a      	mov	r2, r5
 8000ef4:	eb42 0303 	adc.w	r3, r2, r3
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000f06:	4649      	mov	r1, r9
 8000f08:	018b      	lsls	r3, r1, #6
 8000f0a:	4641      	mov	r1, r8
 8000f0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000f10:	4641      	mov	r1, r8
 8000f12:	018a      	lsls	r2, r1, #6
 8000f14:	4641      	mov	r1, r8
 8000f16:	1a51      	subs	r1, r2, r1
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	4649      	mov	r1, r9
 8000f1c:	eb63 0301 	sbc.w	r3, r3, r1
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f26:	4603      	mov	r3, r0
 8000f28:	4622      	mov	r2, r4
 8000f2a:	189b      	adds	r3, r3, r2
 8000f2c:	623b      	str	r3, [r7, #32]
 8000f2e:	462b      	mov	r3, r5
 8000f30:	460a      	mov	r2, r1
 8000f32:	eb42 0303 	adc.w	r3, r2, r3
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f3c:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8000f40:	4608      	mov	r0, r1
 8000f42:	f008 fe19 	bl	8009b78 <rclc_executor_set_timeout>
		  	rclc_executor_add_timer(&executor, &timer);
 8000f46:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8000f4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f008 fe55 	bl	8009c00 <rclc_executor_add_timer>
		  	rclc_executor_add_subscription(&executor, &subscriber, &twist_msg, subscription_callback, ON_NEW_DATA);
 8000f56:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000f5a:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8000f5e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8000f62:	2300      	movs	r3, #0
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <StartDefaultTask+0x31c>)
 8000f68:	f008 fe16 	bl	8009b98 <rclc_executor_add_subscription>

		  	//rclc_executor_spin(&executor); //Blocking subscriber

		  msg.data = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
		  for(;;)
		  {
			  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100)); //Non blocking spin for subscriber
 8000f72:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8000f76:	a310      	add	r3, pc, #64	@ (adr r3, 8000fb8 <StartDefaultTask+0x2d8>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	f009 f855 	bl	800a02c <rclc_executor_spin_some>
			  rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8000f82:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8000f86:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 ff95 	bl	8008ebc <rcl_publish>
 8000f92:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
			  	  if (ret != RCL_RET_OK){
 8000f96:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <StartDefaultTask+0x2c6>
			  		  printf("Error publishing (line %d)\n", __LINE__);
 8000f9e:	21e8      	movs	r1, #232	@ 0xe8
 8000fa0:	4817      	ldr	r0, [pc, #92]	@ (8001000 <StartDefaultTask+0x320>)
 8000fa2:	f014 fba5 	bl	80156f0 <iprintf>
			  	  }


			  msg.data = msg.data + 5;
 8000fa6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000faa:	3305      	adds	r3, #5
 8000fac:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			  osDelay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f003 feb9 	bl	8004d28 <osDelay>
		  {
 8000fb6:	e7dc      	b.n	8000f72 <StartDefaultTask+0x292>
 8000fb8:	05f5e100 	.word	0x05f5e100
 8000fbc:	00000000 	.word	0x00000000
 8000fc0:	08000be5 	.word	0x08000be5
 8000fc4:	08000b7d 	.word	0x08000b7d
 8000fc8:	08000b5d 	.word	0x08000b5d
 8000fcc:	08000b31 	.word	0x08000b31
 8000fd0:	20007c34 	.word	0x20007c34
 8000fd4:	080011d5 	.word	0x080011d5
 8000fd8:	08001219 	.word	0x08001219
 8000fdc:	08001251 	.word	0x08001251
 8000fe0:	080012bd 	.word	0x080012bd
 8000fe4:	0801684c 	.word	0x0801684c
 8000fe8:	08016874 	.word	0x08016874
 8000fec:	0801687c 	.word	0x0801687c
 8000ff0:	08016880 	.word	0x08016880
 8000ff4:	0801688c 	.word	0x0801688c
 8000ff8:	08000ca5 	.word	0x08000ca5
 8000ffc:	08000c8d 	.word	0x08000c8d
 8001000:	080168a0 	.word	0x080168a0

08001004 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a24      	ldr	r2, [pc, #144]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a16      	ldr	r2, [pc, #88]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	4811      	ldr	r0, [pc, #68]	@ (80010b8 <MX_GPIO_Init+0xb4>)
 8001074:	f001 fbbe 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001078:	2301      	movs	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <MX_GPIO_Init+0xb4>)
 800108c:	f001 fa2e 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001090:	2302      	movs	r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <MX_GPIO_Init+0xb4>)
 80010a8:	f001 fa20 	bl	80024ec <HAL_GPIO_Init>

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40021c00 	.word	0x40021c00

080010bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c0:	f000 fcee 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c4:	f000 f80e 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c8:	f7ff ff9c 	bl	8001004 <MX_GPIO_Init>
  MX_DMA_Init();
 80010cc:	f7ff fd08 	bl	8000ae0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80010d0:	f000 fbda 	bl	8001888 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010d4:	f003 fd4c 	bl	8004b70 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010d8:	f7ff fdf0 	bl	8000cbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010dc:	f003 fd6c 	bl	8004bb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <main+0x24>

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	@ 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	2230      	movs	r2, #48	@ 0x30
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f014 fbe8 	bl	80158c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <SystemClock_Config+0xb8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a22      	ldr	r2, [pc, #136]	@ (800119c <SystemClock_Config+0xb8>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
 8001118:	4b20      	ldr	r3, [pc, #128]	@ (800119c <SystemClock_Config+0xb8>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <SystemClock_Config+0xbc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001130:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <SystemClock_Config+0xbc>)
 8001132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <SystemClock_Config+0xbc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114c:	2310      	movs	r3, #16
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fb65 	bl	8002828 <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001164:	f000 f830 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fdc8 	bl	8002d18 <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800118e:	f000 f81b 	bl	80011c8 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3750      	adds	r7, #80	@ 0x50
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000

080011a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011b6:	f000 fc95 	bl	8001ae4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010000 	.word	0x40010000

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <microros_allocate+0x3c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <microros_allocate+0x3c>)
 80011ec:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <microros_allocate+0x40>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <microros_allocate+0x40>)
 80011fc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fa1e 	bl	8000640 <pvPortMallocMicroROS>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20007bdc 	.word	0x20007bdc
 8001214:	20007be0 	.word	0x20007be0

08001218 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fb2d 	bl	8000888 <getBlockSize>
 800122e:	4603      	mov	r3, r0
 8001230:	4a06      	ldr	r2, [pc, #24]	@ (800124c <microros_deallocate+0x34>)
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	461a      	mov	r2, r3
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <microros_deallocate+0x34>)
 800123a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fac7 	bl	80007d0 <vPortFreeMicroROS>
  }
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20007be0 	.word	0x20007be0

08001250 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <microros_reallocate+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	4413      	add	r3, r2
 8001266:	461a      	mov	r2, r3
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <microros_reallocate+0x64>)
 800126a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <microros_reallocate+0x68>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	4413      	add	r3, r2
 8001276:	461a      	mov	r2, r3
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <microros_reallocate+0x68>)
 800127a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d104      	bne.n	800128c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f7ff f9dc 	bl	8000640 <pvPortMallocMicroROS>
 8001288:	4603      	mov	r3, r0
 800128a:	e00e      	b.n	80012aa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff fafb 	bl	8000888 <getBlockSize>
 8001292:	4603      	mov	r3, r0
 8001294:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <microros_reallocate+0x68>)
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	461a      	mov	r2, r3
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <microros_reallocate+0x68>)
 800129e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff fb0e 	bl	80008c4 <pvPortReallocMicroROS>
 80012a8:	4603      	mov	r3, r0
  }
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20007bdc 	.word	0x20007bdc
 80012b8:	20007be0 	.word	0x20007be0

080012bc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <microros_zero_allocate+0x48>)
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <microros_zero_allocate+0x48>)
 80012da:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	4a08      	ldr	r2, [pc, #32]	@ (8001308 <microros_zero_allocate+0x4c>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <microros_zero_allocate+0x4c>)
 80012ee:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff fb13 	bl	800091e <pvPortCallocMicroROS>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20007bdc 	.word	0x20007bdc
 8001308:	20007be0 	.word	0x20007be0
 800130c:	00000000 	.word	0x00000000

08001310 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001322:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001326:	a320      	add	r3, pc, #128	@ (adr r3, 80013a8 <UTILS_NanosecondsToTimespec+0x98>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7fe ffc0 	bl	80002b0 <__aeabi_ldivmod>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800133a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800133e:	a31a      	add	r3, pc, #104	@ (adr r3, 80013a8 <UTILS_NanosecondsToTimespec+0x98>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7fe ffb4 	bl	80002b0 <__aeabi_ldivmod>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	da20      	bge.n	8001396 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <UTILS_NanosecondsToTimespec+0x90>)
 800135a:	fb82 1203 	smull	r1, r2, r2, r3
 800135e:	1712      	asrs	r2, r2, #28
 8001360:	17db      	asrs	r3, r3, #31
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	6979      	ldr	r1, [r7, #20]
 8001370:	17c8      	asrs	r0, r1, #31
 8001372:	460c      	mov	r4, r1
 8001374:	4605      	mov	r5, r0
 8001376:	ebb2 0804 	subs.w	r8, r2, r4
 800137a:	eb63 0905 	sbc.w	r9, r3, r5
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	4906      	ldr	r1, [pc, #24]	@ (80013a4 <UTILS_NanosecondsToTimespec+0x94>)
 800138c:	fb01 f303 	mul.w	r3, r1, r3
 8001390:	441a      	add	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	609a      	str	r2, [r3, #8]
    }
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013a0:	44b82fa1 	.word	0x44b82fa1
 80013a4:	3b9aca00 	.word	0x3b9aca00
 80013a8:	3b9aca00 	.word	0x3b9aca00
 80013ac:	00000000 	.word	0x00000000

080013b0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80013b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013b4:	b08e      	sub	sp, #56	@ 0x38
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80013ba:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80013bc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80013c0:	2300      	movs	r3, #0
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80013d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 ff72 	bl	80062c0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80013dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013de:	17da      	asrs	r2, r3, #31
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	61fa      	str	r2, [r7, #28]
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	69b9      	ldr	r1, [r7, #24]
 80013ee:	000b      	movs	r3, r1
 80013f0:	2200      	movs	r2, #0
 80013f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80013f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f8:	2200      	movs	r2, #0
 80013fa:	461c      	mov	r4, r3
 80013fc:	4615      	mov	r5, r2
 80013fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001402:	1911      	adds	r1, r2, r4
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	416b      	adcs	r3, r5
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800140e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001412:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	f04f 0500 	mov.w	r5, #0
 8001422:	015d      	lsls	r5, r3, #5
 8001424:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001428:	0154      	lsls	r4, r2, #5
 800142a:	4622      	mov	r2, r4
 800142c:	462b      	mov	r3, r5
 800142e:	ebb2 0800 	subs.w	r8, r2, r0
 8001432:	eb63 0901 	sbc.w	r9, r3, r1
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001442:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001446:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800144a:	4690      	mov	r8, r2
 800144c:	4699      	mov	r9, r3
 800144e:	eb18 0a00 	adds.w	sl, r8, r0
 8001452:	eb49 0b01 	adc.w	fp, r9, r1
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001462:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001466:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800146a:	ebb2 040a 	subs.w	r4, r2, sl
 800146e:	603c      	str	r4, [r7, #0]
 8001470:	eb63 030b 	sbc.w	r3, r3, fp
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800147a:	4623      	mov	r3, r4
 800147c:	181b      	adds	r3, r3, r0
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	462b      	mov	r3, r5
 8001482:	eb41 0303 	adc.w	r3, r1, r3
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	6a3a      	ldr	r2, [r7, #32]
 800148a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148e:	f7ff ff3f 	bl	8001310 <UTILS_NanosecondsToTimespec>

    return 0;
 8001492:	2300      	movs	r3, #0
 8001494:	4618      	mov	r0, r3
 8001496:	3738      	adds	r7, #56	@ 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_MspInit+0x54>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_MspInit+0x54>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_MspInit+0x54>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_MspInit+0x54>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_MspInit+0x54>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_MspInit+0x54>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	210f      	movs	r1, #15
 80014e2:	f06f 0001 	mvn.w	r0, #1
 80014e6:	f000 fbd5 	bl	8001c94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <HAL_InitTick+0xd0>)
 800150e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001510:	4a2d      	ldr	r2, [pc, #180]	@ (80015c8 <HAL_InitTick+0xd0>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6453      	str	r3, [r2, #68]	@ 0x44
 8001518:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <HAL_InitTick+0xd0>)
 800151a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001524:	f107 020c 	add.w	r2, r7, #12
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fdd2 	bl	80030d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001534:	f001 fdbc 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 8001538:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800153a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153c:	4a23      	ldr	r2, [pc, #140]	@ (80015cc <HAL_InitTick+0xd4>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	3b01      	subs	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001548:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <HAL_InitTick+0xd8>)
 800154a:	4a22      	ldr	r2, [pc, #136]	@ (80015d4 <HAL_InitTick+0xdc>)
 800154c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800154e:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <HAL_InitTick+0xd8>)
 8001550:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001554:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001556:	4a1e      	ldr	r2, [pc, #120]	@ (80015d0 <HAL_InitTick+0xd8>)
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800155c:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <HAL_InitTick+0xd8>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_InitTick+0xd8>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_InitTick+0xd8>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800156e:	4818      	ldr	r0, [pc, #96]	@ (80015d0 <HAL_InitTick+0xd8>)
 8001570:	f001 fde4 	bl	800313c <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800157a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11b      	bne.n	80015ba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001582:	4813      	ldr	r0, [pc, #76]	@ (80015d0 <HAL_InitTick+0xd8>)
 8001584:	f001 fe34 	bl	80031f0 <HAL_TIM_Base_Start_IT>
 8001588:	4603      	mov	r3, r0
 800158a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800158e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001592:	2b00      	cmp	r3, #0
 8001594:	d111      	bne.n	80015ba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001596:	2019      	movs	r0, #25
 8001598:	f000 fb98 	bl	8001ccc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	d808      	bhi.n	80015b4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80015a2:	2200      	movs	r2, #0
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	2019      	movs	r0, #25
 80015a8:	f000 fb74 	bl	8001c94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_InitTick+0xe0>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e002      	b.n	80015ba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3730      	adds	r7, #48	@ 0x30
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	431bde83 	.word	0x431bde83
 80015d0:	20007be4 	.word	0x20007be4
 80015d4:	40010000 	.word	0x40010000
 80015d8:	20000008 	.word	0x20000008

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	@ 0x30
 80015e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN HardFault_IRQn 0 */
    uint32_t* hardfault_stack_frame;
    __asm volatile (
 80015ea:	f01e 0f04 	tst.w	lr, #4
 80015ee:	bf0c      	ite	eq
 80015f0:	f3ef 8308 	mrseq	r3, MSP
 80015f4:	f3ef 8309 	mrsne	r3, PSP
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
        "MRSNE %0, PSP \n"            // Process Stack Pointer
        : "=r" (hardfault_stack_frame)
    );

    // Now you can inspect hardfault_stack_frame to get registers
    uint32_t stacked_r0 = hardfault_stack_frame[0]; // R0
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	623b      	str	r3, [r7, #32]
    uint32_t stacked_r1 = hardfault_stack_frame[1]; // R1
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	61fb      	str	r3, [r7, #28]
    uint32_t stacked_r2 = hardfault_stack_frame[2]; // R2
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
    uint32_t stacked_r3 = hardfault_stack_frame[3]; // R3
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	617b      	str	r3, [r7, #20]
    uint32_t stacked_r12 = hardfault_stack_frame[4]; // R12
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	613b      	str	r3, [r7, #16]
    uint32_t stacked_lr = hardfault_stack_frame[5];  // Link Register (LR)
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	60fb      	str	r3, [r7, #12]
    uint32_t stacked_pc = hardfault_stack_frame[6];  // Program Counter (PC)
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	60bb      	str	r3, [r7, #8]
    uint32_t stacked_xpsr = hardfault_stack_frame[7]; // xPSR
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	607b      	str	r3, [r7, #4]

    // Output these values for debugging
    printf("HardFault occurred at address: 0x%08X\n", stacked_pc);
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	4809      	ldr	r0, [pc, #36]	@ (8001654 <HardFault_Handler+0x70>)
 800162e:	f014 f85f 	bl	80156f0 <iprintf>
    printf("R0: 0x%08X, R1: 0x%08X, R2: 0x%08X, R3: 0x%08X\n", stacked_r0, stacked_r1, stacked_r2, stacked_r3);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	6a39      	ldr	r1, [r7, #32]
 800163c:	4806      	ldr	r0, [pc, #24]	@ (8001658 <HardFault_Handler+0x74>)
 800163e:	f014 f857 	bl	80156f0 <iprintf>
    printf("R12: 0x%08X, LR: 0x%08X, xPSR: 0x%08X\n", stacked_r12, stacked_lr, stacked_xpsr);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	6939      	ldr	r1, [r7, #16]
 8001648:	4804      	ldr	r0, [pc, #16]	@ (800165c <HardFault_Handler+0x78>)
 800164a:	f014 f851 	bl	80156f0 <iprintf>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	bf00      	nop
 8001650:	e7fd      	b.n	800164e <HardFault_Handler+0x6a>
 8001652:	bf00      	nop
 8001654:	080168bc 	.word	0x080168bc
 8001658:	080168e4 	.word	0x080168e4
 800165c:	08016914 	.word	0x08016914

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <MemManage_Handler+0x4>

08001668 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <UsageFault_Handler+0x4>

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800168e:	f001 fe11 	bl	80032b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20007be4 	.word	0x20007be4

0800169c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <USART1_IRQHandler+0x10>)
 80016a2:	f002 f923 	bl	80038ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20007c34 	.word	0x20007c34

080016b0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <DMA2_Stream2_IRQHandler+0x10>)
 80016b6:	f000 fcaf 	bl	8002018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20007c7c 	.word	0x20007c7c

080016c4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <DMA2_Stream7_IRQHandler+0x10>)
 80016ca:	f000 fca5 	bl	8002018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20007cdc 	.word	0x20007cdc

080016d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_kill>:

int _kill(int pid, int sig)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f2:	f014 f98f 	bl	8015a14 <__errno>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2216      	movs	r2, #22
 80016fa:	601a      	str	r2, [r3, #0]
  return -1;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_exit>:

void _exit (int status)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001710:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffe7 	bl	80016e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800171a:	bf00      	nop
 800171c:	e7fd      	b.n	800171a <_exit+0x12>

0800171e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e00a      	b.n	8001746 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001730:	f3af 8000 	nop.w
 8001734:	4601      	mov	r1, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	60ba      	str	r2, [r7, #8]
 800173c:	b2ca      	uxtb	r2, r1
 800173e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	429a      	cmp	r2, r3
 800174c:	dbf0      	blt.n	8001730 <_read+0x12>
  }

  return len;
 800174e:	687b      	ldr	r3, [r7, #4]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e009      	b.n	800177e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	60ba      	str	r2, [r7, #8]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	dbf1      	blt.n	800176a <_write+0x12>
  }
  return len;
 8001786:	687b      	ldr	r3, [r7, #4]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_close>:

int _close(int file)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b8:	605a      	str	r2, [r3, #4]
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_isatty>:

int _isatty(int file)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f014 f8f4 	bl	8015a14 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	@ (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20018000 	.word	0x20018000
 8001858:	00000400 	.word	0x00000400
 800185c:	20007c30 	.word	0x20007c30
 8001860:	20011410 	.word	0x20011410

08001864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <MX_USART1_UART_Init+0x4c>)
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <MX_USART1_UART_Init+0x50>)
 8001890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <MX_USART1_UART_Init+0x4c>)
 8001894:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MX_USART1_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <MX_USART1_UART_Init+0x4c>)
 80018c0:	f001 feb0 	bl	8003624 <HAL_UART_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ca:	f7ff fc7d 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20007c34 	.word	0x20007c34
 80018d8:	40011000 	.word	0x40011000

080018dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001a30 <HAL_UART_MspInit+0x154>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	f040 8094 	bne.w	8001a28 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	4b4b      	ldr	r3, [pc, #300]	@ (8001a34 <HAL_UART_MspInit+0x158>)
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	4a4a      	ldr	r2, [pc, #296]	@ (8001a34 <HAL_UART_MspInit+0x158>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001910:	4b48      	ldr	r3, [pc, #288]	@ (8001a34 <HAL_UART_MspInit+0x158>)
 8001912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4b44      	ldr	r3, [pc, #272]	@ (8001a34 <HAL_UART_MspInit+0x158>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001924:	4a43      	ldr	r2, [pc, #268]	@ (8001a34 <HAL_UART_MspInit+0x158>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6313      	str	r3, [r2, #48]	@ 0x30
 800192c:	4b41      	ldr	r3, [pc, #260]	@ (8001a34 <HAL_UART_MspInit+0x158>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001938:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800194a:	2307      	movs	r3, #7
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4838      	ldr	r0, [pc, #224]	@ (8001a38 <HAL_UART_MspInit+0x15c>)
 8001956:	f000 fdc9 	bl	80024ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800195a:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 800195c:	4a38      	ldr	r2, [pc, #224]	@ (8001a40 <HAL_UART_MspInit+0x164>)
 800195e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001960:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 8001962:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001966:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001968:	4b34      	ldr	r3, [pc, #208]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b33      	ldr	r3, [pc, #204]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 8001976:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800197a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001982:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001988:	4b2c      	ldr	r3, [pc, #176]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 800198a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001990:	4b2a      	ldr	r3, [pc, #168]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 8001992:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001996:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001998:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800199e:	4827      	ldr	r0, [pc, #156]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 80019a0:	f000 f9a2 	bl	8001ce8 <HAL_DMA_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80019aa:	f7ff fc0d 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a22      	ldr	r2, [pc, #136]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 80019b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019b4:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <HAL_UART_MspInit+0x160>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80019ba:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019bc:	4a22      	ldr	r2, [pc, #136]	@ (8001a48 <HAL_UART_MspInit+0x16c>)
 80019be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80019c0:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019ca:	2240      	movs	r2, #64	@ 0x40
 80019cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019da:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e2:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80019e8:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019f4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f6:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019fc:	4811      	ldr	r0, [pc, #68]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 80019fe:	f000 f973 	bl	8001ce8 <HAL_DMA_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8001a08:	f7ff fbde 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 8001a10:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a12:	4a0c      	ldr	r2, [pc, #48]	@ (8001a44 <HAL_UART_MspInit+0x168>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	2025      	movs	r0, #37	@ 0x25
 8001a1e:	f000 f939 	bl	8001c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a22:	2025      	movs	r0, #37	@ 0x25
 8001a24:	f000 f952 	bl	8001ccc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	@ 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	20007c7c 	.word	0x20007c7c
 8001a40:	40026440 	.word	0x40026440
 8001a44:	20007cdc 	.word	0x20007cdc
 8001a48:	400264b8 	.word	0x400264b8

08001a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a50:	f7ff ff08 	bl	8001864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a54:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a56:	490d      	ldr	r1, [pc, #52]	@ (8001a8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a58:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f013 ffd1 	bl	8015a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7e:	f7ff fb1d 	bl	80010bc <main>
  bx  lr    
 8001a82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	20000860 	.word	0x20000860
  ldr r2, =_sidata
 8001a90:	08017acc 	.word	0x08017acc
  ldr r2, =_sbss
 8001a94:	20000860 	.word	0x20000860
  ldr r4, =_ebss
 8001a98:	2001140c 	.word	0x2001140c

08001a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <HAL_Init+0x40>)
 8001aaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <HAL_Init+0x40>)
 8001ab6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <HAL_Init+0x40>)
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f8d8 	bl	8001c7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f7ff fd12 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fce4 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	2000000c 	.word	0x2000000c
 8001b08:	20007d3c 	.word	0x20007d3c

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	@ (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20007d3c 	.word	0x20007d3c

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	@ (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	@ 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff4c 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca6:	f7ff ff61 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001caa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	6978      	ldr	r0, [r7, #20]
 8001cb2:	f7ff ffb1 	bl	8001c18 <NVIC_EncodePriority>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff80 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff54 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff ff0a 	bl	8001b0c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e099      	b.n	8001e38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d24:	e00f      	b.n	8001d46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d26:	f7ff fef1 	bl	8001b0c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d908      	bls.n	8001d46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e078      	b.n	8001e38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e8      	bne.n	8001d26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4b38      	ldr	r3, [pc, #224]	@ (8001e40 <HAL_DMA_Init+0x158>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d107      	bne.n	8001db0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	4313      	orrs	r3, r2
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f023 0307 	bic.w	r3, r3, #7
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d117      	bne.n	8001e0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00e      	beq.n	8001e0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fb01 	bl	80023f4 <DMA_CheckFifoParam>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2240      	movs	r2, #64	@ 0x40
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e06:	2301      	movs	r3, #1
 8001e08:	e016      	b.n	8001e38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fab8 	bl	8002388 <DMA_CalcBaseAndBitshift>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e20:	223f      	movs	r2, #63	@ 0x3f
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	f010803f 	.word	0xf010803f

08001e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_DMA_Start_IT+0x26>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e040      	b.n	8001eec <HAL_DMA_Start_IT+0xa8>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d12f      	bne.n	8001ede <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 fa4a 	bl	800232c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9c:	223f      	movs	r2, #63	@ 0x3f
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0216 	orr.w	r2, r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0208 	orr.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e005      	b.n	8001eea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f02:	f7ff fe03 	bl	8001b0c <HAL_GetTick>
 8001f06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d008      	beq.n	8001f26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2280      	movs	r2, #128	@ 0x80
 8001f18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e052      	b.n	8001fcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0216 	bic.w	r2, r2, #22
 8001f34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <HAL_DMA_Abort+0x62>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0208 	bic.w	r2, r2, #8
 8001f64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f76:	e013      	b.n	8001fa0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f78:	f7ff fdc8 	bl	8001b0c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d90c      	bls.n	8001fa0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e015      	b.n	8001fcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1e4      	bne.n	8001f78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	223f      	movs	r2, #63	@ 0x3f
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d004      	beq.n	8001ff2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2280      	movs	r2, #128	@ 0x80
 8001fec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00c      	b.n	800200c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002024:	4b8e      	ldr	r3, [pc, #568]	@ (8002260 <HAL_DMA_IRQHandler+0x248>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a8e      	ldr	r2, [pc, #568]	@ (8002264 <HAL_DMA_IRQHandler+0x24c>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0a9b      	lsrs	r3, r3, #10
 8002030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	2208      	movs	r2, #8
 8002044:	409a      	lsls	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	2208      	movs	r2, #8
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	2201      	movs	r2, #1
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d012      	beq.n	80020ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2201      	movs	r2, #1
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b2:	f043 0202 	orr.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020be:	2204      	movs	r2, #4
 80020c0:	409a      	lsls	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d012      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	2204      	movs	r2, #4
 80020de:	409a      	lsls	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e8:	f043 0204 	orr.w	r2, r3, #4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	2210      	movs	r2, #16
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d043      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03c      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	2210      	movs	r2, #16
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d018      	beq.n	800215a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d108      	bne.n	8002148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d024      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
 8002146:	e01f      	b.n	8002188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e016      	b.n	8002188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0208 	bic.w	r2, r2, #8
 8002176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	2220      	movs	r2, #32
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 808f 	beq.w	80022b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8087 	beq.w	80022b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ae:	2220      	movs	r2, #32
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d136      	bne.n	8002230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0216 	bic.w	r2, r2, #22
 80021d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x1da>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0208 	bic.w	r2, r2, #8
 8002200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	223f      	movs	r2, #63	@ 0x3f
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002222:	2b00      	cmp	r3, #0
 8002224:	d07e      	beq.n	8002324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
        }
        return;
 800222e:	e079      	b.n	8002324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01d      	beq.n	800227a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002250:	2b00      	cmp	r3, #0
 8002252:	d031      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e02c      	b.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
 800225e:	bf00      	nop
 8002260:	20000004 	.word	0x20000004
 8002264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
 8002278:	e01e      	b.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10f      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0210 	bic.w	r2, r2, #16
 8002296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d032      	beq.n	8002326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d022      	beq.n	8002312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2205      	movs	r2, #5
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d307      	bcc.n	8002300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f2      	bne.n	80022e4 <HAL_DMA_IRQHandler+0x2cc>
 80022fe:	e000      	b.n	8002302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
 8002322:	e000      	b.n	8002326 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002324:	bf00      	nop
    }
  }
}
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002348:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b40      	cmp	r3, #64	@ 0x40
 8002358:	d108      	bne.n	800236c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800236a:	e007      	b.n	800237c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	60da      	str	r2, [r3, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3b10      	subs	r3, #16
 8002398:	4a14      	ldr	r2, [pc, #80]	@ (80023ec <DMA_CalcBaseAndBitshift+0x64>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a2:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <DMA_CalcBaseAndBitshift+0x68>)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d909      	bls.n	80023ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80023c8:	e007      	b.n	80023da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	aaaaaaab 	.word	0xaaaaaaab
 80023f0:	080169ac 	.word	0x080169ac

080023f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11f      	bne.n	800244e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d856      	bhi.n	80024c2 <DMA_CheckFifoParam+0xce>
 8002414:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <DMA_CheckFifoParam+0x28>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	0800242d 	.word	0x0800242d
 8002420:	0800243f 	.word	0x0800243f
 8002424:	0800242d 	.word	0x0800242d
 8002428:	080024c3 	.word	0x080024c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d046      	beq.n	80024c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243c:	e043      	b.n	80024c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002446:	d140      	bne.n	80024ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244c:	e03d      	b.n	80024ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002456:	d121      	bne.n	800249c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d837      	bhi.n	80024ce <DMA_CheckFifoParam+0xda>
 800245e:	a201      	add	r2, pc, #4	@ (adr r2, 8002464 <DMA_CheckFifoParam+0x70>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	0800247b 	.word	0x0800247b
 800246c:	08002475 	.word	0x08002475
 8002470:	0800248d 	.word	0x0800248d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      break;
 8002478:	e030      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d025      	beq.n	80024d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248a:	e022      	b.n	80024d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002494:	d11f      	bne.n	80024d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800249a:	e01c      	b.n	80024d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d903      	bls.n	80024aa <DMA_CheckFifoParam+0xb6>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d003      	beq.n	80024b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024a8:	e018      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      break;
 80024ae:	e015      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00e      	beq.n	80024da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e00b      	b.n	80024da <DMA_CheckFifoParam+0xe6>
      break;
 80024c2:	bf00      	nop
 80024c4:	e00a      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e008      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e006      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e004      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
 80024d4:	e002      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;   
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024da:	bf00      	nop
    }
  } 
  
  return status; 
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e159      	b.n	80027bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	f040 8148 	bne.w	80027b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d005      	beq.n	800253e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	2b02      	cmp	r3, #2
 800253c:	d130      	bne.n	80025a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 0201 	and.w	r2, r3, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d017      	beq.n	80025dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a2 	beq.w	80027b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b57      	ldr	r3, [pc, #348]	@ (80027d4 <HAL_GPIO_Init+0x2e8>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_GPIO_Init+0x2e8>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002680:	6453      	str	r3, [r2, #68]	@ 0x44
 8002682:	4b54      	ldr	r3, [pc, #336]	@ (80027d4 <HAL_GPIO_Init+0x2e8>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268e:	4a52      	ldr	r2, [pc, #328]	@ (80027d8 <HAL_GPIO_Init+0x2ec>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a49      	ldr	r2, [pc, #292]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x202>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a48      	ldr	r2, [pc, #288]	@ (80027e0 <HAL_GPIO_Init+0x2f4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x1fe>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a47      	ldr	r2, [pc, #284]	@ (80027e4 <HAL_GPIO_Init+0x2f8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x1fa>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a46      	ldr	r2, [pc, #280]	@ (80027e8 <HAL_GPIO_Init+0x2fc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x1f6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a45      	ldr	r2, [pc, #276]	@ (80027ec <HAL_GPIO_Init+0x300>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x1f2>
 80026da:	2304      	movs	r3, #4
 80026dc:	e008      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026de:	2307      	movs	r3, #7
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e004      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026ee:	2300      	movs	r3, #0
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f002 0203 	and.w	r2, r2, #3
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	4093      	lsls	r3, r2
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002700:	4935      	ldr	r1, [pc, #212]	@ (80027d8 <HAL_GPIO_Init+0x2ec>)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270e:	4b38      	ldr	r3, [pc, #224]	@ (80027f0 <HAL_GPIO_Init+0x304>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002732:	4a2f      	ldr	r2, [pc, #188]	@ (80027f0 <HAL_GPIO_Init+0x304>)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002738:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <HAL_GPIO_Init+0x304>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800275c:	4a24      	ldr	r2, [pc, #144]	@ (80027f0 <HAL_GPIO_Init+0x304>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002762:	4b23      	ldr	r3, [pc, #140]	@ (80027f0 <HAL_GPIO_Init+0x304>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002786:	4a1a      	ldr	r2, [pc, #104]	@ (80027f0 <HAL_GPIO_Init+0x304>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278c:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <HAL_GPIO_Init+0x304>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b0:	4a0f      	ldr	r2, [pc, #60]	@ (80027f0 <HAL_GPIO_Init+0x304>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	f67f aea2 	bls.w	8002508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3724      	adds	r7, #36	@ 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e267      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d075      	beq.n	8002932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002846:	4b88      	ldr	r3, [pc, #544]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b04      	cmp	r3, #4
 8002850:	d00c      	beq.n	800286c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002852:	4b85      	ldr	r3, [pc, #532]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800285a:	2b08      	cmp	r3, #8
 800285c:	d112      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b82      	ldr	r3, [pc, #520]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800286a:	d10b      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d05b      	beq.n	8002930 <HAL_RCC_OscConfig+0x108>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d157      	bne.n	8002930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e242      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x74>
 800288e:	4b76      	ldr	r3, [pc, #472]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a75      	ldr	r2, [pc, #468]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b70      	ldr	r3, [pc, #448]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 80028c0:	4b69      	ldr	r3, [pc, #420]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a68      	ldr	r2, [pc, #416]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b66      	ldr	r3, [pc, #408]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a65      	ldr	r2, [pc, #404]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff f914 	bl	8001b0c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7ff f910 	bl	8001b0c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e207      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xc0>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7ff f900 	bl	8001b0c <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7ff f8fc 	bl	8001b0c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1f3      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	4b51      	ldr	r3, [pc, #324]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0xe8>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d063      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800293e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294a:	4b47      	ldr	r3, [pc, #284]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002952:	2b08      	cmp	r3, #8
 8002954:	d11c      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002956:	4b44      	ldr	r3, [pc, #272]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d116      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	4b41      	ldr	r3, [pc, #260]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e1c7      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4937      	ldr	r1, [pc, #220]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	e03a      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002998:	4b34      	ldr	r3, [pc, #208]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7ff f8b5 	bl	8001b0c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a6:	f7ff f8b1 	bl	8001b0c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1a8      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b28      	ldr	r3, [pc, #160]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4925      	ldr	r1, [pc, #148]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]
 80029d8:	e015      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7ff f894 	bl	8001b0c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e8:	f7ff f890 	bl	8001b0c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e187      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d036      	beq.n	8002a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <HAL_RCC_OscConfig+0x248>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7ff f874 	bl	8001b0c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a28:	f7ff f870 	bl	8001b0c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e167      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x200>
 8002a46:	e01b      	b.n	8002a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a48:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <HAL_RCC_OscConfig+0x248>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7ff f85d 	bl	8001b0c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	e00e      	b.n	8002a74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a56:	f7ff f859 	bl	8001b0c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d907      	bls.n	8002a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e150      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	42470000 	.word	0x42470000
 8002a70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	4b88      	ldr	r3, [pc, #544]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ea      	bne.n	8002a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8097 	beq.w	8002bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a92:	4b81      	ldr	r3, [pc, #516]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aae:	4b7a      	ldr	r3, [pc, #488]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b77      	ldr	r3, [pc, #476]	@ (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4b74      	ldr	r3, [pc, #464]	@ (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a73      	ldr	r2, [pc, #460]	@ (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7ff f819 	bl	8001b0c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7ff f815 	bl	8001b0c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e10c      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2ea>
 8002b04:	4b64      	ldr	r3, [pc, #400]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b08:	4a63      	ldr	r2, [pc, #396]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b10:	e01c      	b.n	8002b4c <HAL_RCC_OscConfig+0x324>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x30c>
 8002b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b20:	f043 0304 	orr.w	r3, r3, #4
 8002b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b26:	4b5c      	ldr	r3, [pc, #368]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0x324>
 8002b34:	4b58      	ldr	r3, [pc, #352]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b38:	4a57      	ldr	r2, [pc, #348]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b40:	4b55      	ldr	r3, [pc, #340]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b44:	4a54      	ldr	r2, [pc, #336]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fe ffda 	bl	8001b0c <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fe ffd6 	bl	8001b0c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0cb      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ee      	beq.n	8002b5c <HAL_RCC_OscConfig+0x334>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b80:	f7fe ffc4 	bl	8001b0c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b88:	f7fe ffc0 	bl	8001b0c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0b5      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ee      	bne.n	8002b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b39      	ldr	r3, [pc, #228]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	4a38      	ldr	r2, [pc, #224]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a1 	beq.w	8002d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc6:	4b34      	ldr	r3, [pc, #208]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d05c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d141      	bne.n	8002c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b31      	ldr	r3, [pc, #196]	@ (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe ff94 	bl	8001b0c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe ff90 	bl	8001b0c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e087      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	4b27      	ldr	r3, [pc, #156]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	491b      	ldr	r1, [pc, #108]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fe ff69 	bl	8001b0c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe ff65 	bl	8001b0c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e05c      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x416>
 8002c5c:	e054      	b.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe ff52 	bl	8001b0c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe ff4e 	bl	8001b0c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e045      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x444>
 8002c8a:	e03d      	b.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e038      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_RCC_OscConfig+0x4ec>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d028      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d121      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d11a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d111      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800

08002d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0cc      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b68      	ldr	r3, [pc, #416]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d90c      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b65      	ldr	r3, [pc, #404]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b63      	ldr	r3, [pc, #396]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b8      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b59      	ldr	r3, [pc, #356]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a58      	ldr	r2, [pc, #352]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b50      	ldr	r3, [pc, #320]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	494d      	ldr	r1, [pc, #308]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d044      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d119      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e06f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e067      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b37      	ldr	r3, [pc, #220]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4934      	ldr	r1, [pc, #208]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7fe fe80 	bl	8001b0c <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7fe fe7c 	bl	8001b0c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e04f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d20c      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b22      	ldr	r3, [pc, #136]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e032      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4916      	ldr	r1, [pc, #88]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	490e      	ldr	r1, [pc, #56]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e9e:	f000 f821 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	490a      	ldr	r1, [pc, #40]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a09      	ldr	r2, [pc, #36]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002eba:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fb1a 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023c00 	.word	0x40023c00
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	08016994 	.word	0x08016994
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	20000008 	.word	0x20000008

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b090      	sub	sp, #64	@ 0x40
 8002eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002efc:	4b59      	ldr	r3, [pc, #356]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d00d      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x40>
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	f200 80a1 	bhi.w	8003050 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x34>
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f16:	e09b      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b53      	ldr	r3, [pc, #332]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f1c:	e09b      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1e:	4b53      	ldr	r3, [pc, #332]	@ (800306c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f22:	e098      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f24:	4b4f      	ldr	r3, [pc, #316]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2e:	4b4d      	ldr	r3, [pc, #308]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d028      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	2200      	movs	r2, #0
 8002f42:	623b      	str	r3, [r7, #32]
 8002f44:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4b47      	ldr	r3, [pc, #284]	@ (800306c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f50:	fb03 f201 	mul.w	r2, r3, r1
 8002f54:	2300      	movs	r3, #0
 8002f56:	fb00 f303 	mul.w	r3, r0, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4a43      	ldr	r2, [pc, #268]	@ (800306c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f5e:	fba0 1202 	umull	r1, r2, r0, r2
 8002f62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f64:	460a      	mov	r2, r1
 8002f66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f6a:	4413      	add	r3, r2
 8002f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f70:	2200      	movs	r2, #0
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	61fa      	str	r2, [r7, #28]
 8002f76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f7e:	f7fd f9e7 	bl	8000350 <__aeabi_uldivmod>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4613      	mov	r3, r2
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f8a:	e053      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8c:	4b35      	ldr	r3, [pc, #212]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	2200      	movs	r2, #0
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	617a      	str	r2, [r7, #20]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f9e:	f04f 0b00 	mov.w	fp, #0
 8002fa2:	4652      	mov	r2, sl
 8002fa4:	465b      	mov	r3, fp
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	ebb2 080a 	subs.w	r8, r2, sl
 8002fbe:	eb63 090b 	sbc.w	r9, r3, fp
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fd6:	ebb2 0408 	subs.w	r4, r2, r8
 8002fda:	eb63 0509 	sbc.w	r5, r3, r9
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	00eb      	lsls	r3, r5, #3
 8002fe8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fec:	00e2      	lsls	r2, r4, #3
 8002fee:	4614      	mov	r4, r2
 8002ff0:	461d      	mov	r5, r3
 8002ff2:	eb14 030a 	adds.w	r3, r4, sl
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	eb45 030b 	adc.w	r3, r5, fp
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800300a:	4629      	mov	r1, r5
 800300c:	028b      	lsls	r3, r1, #10
 800300e:	4621      	mov	r1, r4
 8003010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003014:	4621      	mov	r1, r4
 8003016:	028a      	lsls	r2, r1, #10
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301e:	2200      	movs	r2, #0
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	60fa      	str	r2, [r7, #12]
 8003024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003028:	f7fd f992 	bl	8000350 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x180>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003044:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800304e:	e002      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x184>)
 8003052:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003058:	4618      	mov	r0, r3
 800305a:	3740      	adds	r7, #64	@ 0x40
 800305c:	46bd      	mov	sp, r7
 800305e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	00f42400 	.word	0x00f42400
 800306c:	017d7840 	.word	0x017d7840

08003070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003074:	4b03      	ldr	r3, [pc, #12]	@ (8003084 <HAL_RCC_GetHCLKFreq+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800308c:	f7ff fff0 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0a9b      	lsrs	r3, r3, #10
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	@ (80030ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	080169a4 	.word	0x080169a4

080030b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030b4:	f7ff ffdc 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0b5b      	lsrs	r3, r3, #13
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	@ (80030d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	080169a4 	.word	0x080169a4

080030d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	220f      	movs	r2, #15
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030e8:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0203 	and.w	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800310c:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	08db      	lsrs	r3, r3, #3
 8003112:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800311a:	4b07      	ldr	r3, [pc, #28]	@ (8003138 <HAL_RCC_GetClockConfig+0x60>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	601a      	str	r2, [r3, #0]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	40023c00 	.word	0x40023c00

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f839 	bl	80031da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 f9b2 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d001      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e044      	b.n	8003292 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d018      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x6c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003232:	d013      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x6c>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1a      	ldr	r2, [pc, #104]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00e      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x6c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a19      	ldr	r2, [pc, #100]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x6c>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a17      	ldr	r2, [pc, #92]	@ (80032ac <HAL_TIM_Base_Start_IT+0xbc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x6c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a16      	ldr	r2, [pc, #88]	@ (80032b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d111      	bne.n	8003280 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d010      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	e007      	b.n	8003290 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40014000 	.word	0x40014000

080032b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d020      	beq.n	8003318 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01b      	beq.n	8003318 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0202 	mvn.w	r2, #2
 80032e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8d2 	bl	80034a8 <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8c4 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8d5 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d020      	beq.n	8003364 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01b      	beq.n	8003364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0204 	mvn.w	r2, #4
 8003334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8ac 	bl	80034a8 <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f89e 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8af 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d020      	beq.n	80033b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0208 	mvn.w	r2, #8
 8003380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2204      	movs	r2, #4
 8003386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f886 	bl	80034a8 <HAL_TIM_IC_CaptureCallback>
 800339c:	e005      	b.n	80033aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f878 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f889 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d020      	beq.n	80033fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0210 	mvn.w	r2, #16
 80033cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2208      	movs	r2, #8
 80033d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f860 	bl	80034a8 <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f852 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f863 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0201 	mvn.w	r2, #1
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fec2 	bl	80011a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8e6 	bl	8003610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f834 	bl	80034d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0220 	mvn.w	r2, #32
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8b8 	bl	80035fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3a      	ldr	r2, [pc, #232]	@ (80035e0 <TIM_Base_SetConfig+0xfc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00f      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003502:	d00b      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a37      	ldr	r2, [pc, #220]	@ (80035e4 <TIM_Base_SetConfig+0x100>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a36      	ldr	r2, [pc, #216]	@ (80035e8 <TIM_Base_SetConfig+0x104>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a35      	ldr	r2, [pc, #212]	@ (80035ec <TIM_Base_SetConfig+0x108>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d108      	bne.n	800352e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2b      	ldr	r2, [pc, #172]	@ (80035e0 <TIM_Base_SetConfig+0xfc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01b      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800353c:	d017      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a28      	ldr	r2, [pc, #160]	@ (80035e4 <TIM_Base_SetConfig+0x100>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a27      	ldr	r2, [pc, #156]	@ (80035e8 <TIM_Base_SetConfig+0x104>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00f      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a26      	ldr	r2, [pc, #152]	@ (80035ec <TIM_Base_SetConfig+0x108>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00b      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a25      	ldr	r2, [pc, #148]	@ (80035f0 <TIM_Base_SetConfig+0x10c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a24      	ldr	r2, [pc, #144]	@ (80035f4 <TIM_Base_SetConfig+0x110>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a23      	ldr	r2, [pc, #140]	@ (80035f8 <TIM_Base_SetConfig+0x114>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d108      	bne.n	8003580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0e      	ldr	r2, [pc, #56]	@ (80035e0 <TIM_Base_SetConfig+0xfc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d105      	bne.n	80035d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]
  }
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800

080035fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e042      	b.n	80036bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe f946 	bl	80018dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	@ 0x24
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 ffc9 	bl	8004600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800367c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800368c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800369c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08c      	sub	sp, #48	@ 0x30
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d156      	bne.n	800378c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_UART_Transmit_DMA+0x26>
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e04f      	b.n	800378e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	88fa      	ldrh	r2, [r7, #6]
 80036fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2221      	movs	r2, #33	@ 0x21
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	4a21      	ldr	r2, [pc, #132]	@ (8003798 <HAL_UART_Transmit_DMA+0xd4>)
 8003714:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371a:	4a20      	ldr	r2, [pc, #128]	@ (800379c <HAL_UART_Transmit_DMA+0xd8>)
 800371c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	4a1f      	ldr	r2, [pc, #124]	@ (80037a0 <HAL_UART_Transmit_DMA+0xdc>)
 8003724:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372a:	2200      	movs	r2, #0
 800372c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373a:	6819      	ldr	r1, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3304      	adds	r3, #4
 8003742:	461a      	mov	r2, r3
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	f7fe fb7d 	bl	8001e44 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003752:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3314      	adds	r3, #20
 800375a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	617b      	str	r3, [r7, #20]
   return(result);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3314      	adds	r3, #20
 8003772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003774:	627a      	str	r2, [r7, #36]	@ 0x24
 8003776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6a39      	ldr	r1, [r7, #32]
 800377a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	61fb      	str	r3, [r7, #28]
   return(result);
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e5      	bne.n	8003754 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3730      	adds	r7, #48	@ 0x30
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	08003e8d 	.word	0x08003e8d
 800379c:	08003f27 	.word	0x08003f27
 80037a0:	080040ab 	.word	0x080040ab

080037a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d112      	bne.n	80037e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_UART_Receive_DMA+0x26>
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e00b      	b.n	80037e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fcb0 	bl	8004140 <UART_Start_Receive_DMA>
 80037e0:	4603      	mov	r3, r0
 80037e2:	e000      	b.n	80037e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b090      	sub	sp, #64	@ 0x40
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003804:	2b80      	cmp	r3, #128	@ 0x80
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b21      	cmp	r3, #33	@ 0x21
 800381a:	d128      	bne.n	800386e <HAL_UART_DMAStop+0x80>
 800381c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d025      	beq.n	800386e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3314      	adds	r3, #20
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	623b      	str	r3, [r7, #32]
   return(result);
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003838:	63bb      	str	r3, [r7, #56]	@ 0x38
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3314      	adds	r3, #20
 8003840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003842:	633a      	str	r2, [r7, #48]	@ 0x30
 8003844:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e5      	bne.n	8003822 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fb46 	bl	8001ef4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fd03 	bl	8004274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b22      	cmp	r3, #34	@ 0x22
 800388e:	d128      	bne.n	80038e2 <HAL_UART_DMAStop+0xf4>
 8003890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d025      	beq.n	80038e2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3314      	adds	r3, #20
 800389c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3314      	adds	r3, #20
 80038b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038b6:	61fa      	str	r2, [r7, #28]
 80038b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	69b9      	ldr	r1, [r7, #24]
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	617b      	str	r3, [r7, #20]
   return(result);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e5      	bne.n	8003896 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fb0c 	bl	8001ef4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fcf1 	bl	80042c4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3740      	adds	r7, #64	@ 0x40
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b0ba      	sub	sp, #232	@ 0xe8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800391e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800392a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_UART_IRQHandler+0x66>
 800393e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fd99 	bl	8004482 <UART_Receive_IT>
      return;
 8003950:	e25b      	b.n	8003e0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80de 	beq.w	8003b18 <HAL_UART_IRQHandler+0x22c>
 800395c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800396c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80d1 	beq.w	8003b18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_UART_IRQHandler+0xae>
 8003982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	f043 0201 	orr.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <HAL_UART_IRQHandler+0xd2>
 80039a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	f043 0202 	orr.w	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HAL_UART_IRQHandler+0xf6>
 80039ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f043 0204 	orr.w	r2, r3, #4
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d011      	beq.n	8003a12 <HAL_UART_IRQHandler+0x126>
 80039ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f043 0208 	orr.w	r2, r3, #8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 81f2 	beq.w	8003e00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_UART_IRQHandler+0x14e>
 8003a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fd24 	bl	8004482 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a44:	2b40      	cmp	r3, #64	@ 0x40
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_UART_IRQHandler+0x17a>
 8003a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d04f      	beq.n	8003b06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fc2c 	bl	80042c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a76:	2b40      	cmp	r3, #64	@ 0x40
 8003a78:	d141      	bne.n	8003afe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1d9      	bne.n	8003a7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d013      	beq.n	8003af6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ccc <HAL_UART_IRQHandler+0x3e0>)
 8003ad4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe fa7a 	bl	8001fd4 <HAL_DMA_Abort_IT>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003af0:	4610      	mov	r0, r2
 8003af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e00e      	b.n	8003b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f9b2 	bl	8003e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e00a      	b.n	8003b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9ae 	bl	8003e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e006      	b.n	8003b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9aa 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b12:	e175      	b.n	8003e00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	bf00      	nop
    return;
 8003b16:	e173      	b.n	8003e00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	f040 814f 	bne.w	8003dc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8148 	beq.w	8003dc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8141 	beq.w	8003dc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5e:	2b40      	cmp	r3, #64	@ 0x40
 8003b60:	f040 80b6 	bne.w	8003cd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8145 	beq.w	8003e04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b82:	429a      	cmp	r2, r3
 8003b84:	f080 813e 	bcs.w	8003e04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b9a:	f000 8088 	beq.w	8003cae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1d9      	bne.n	8003b9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e1      	bne.n	8003bea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3314      	adds	r3, #20
 8003c46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e3      	bne.n	8003c26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c7e:	f023 0310 	bic.w	r3, r3, #16
 8003c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e3      	bne.n	8003c6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe f923 	bl	8001ef4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8d5 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cca:	e09b      	b.n	8003e04 <HAL_UART_IRQHandler+0x518>
 8003ccc:	0800438b 	.word	0x0800438b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 808e 	beq.w	8003e08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8089 	beq.w	8003e08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e3      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3314      	adds	r3, #20
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e3      	bne.n	8003d2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0310 	bic.w	r3, r3, #16
 8003d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d98:	61fa      	str	r2, [r7, #28]
 8003d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	69b9      	ldr	r1, [r7, #24]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	617b      	str	r3, [r7, #20]
   return(result);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e3      	bne.n	8003d74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003db2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f85b 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dbe:	e023      	b.n	8003e08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_UART_IRQHandler+0x4f4>
 8003dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 faea 	bl	80043b2 <UART_Transmit_IT>
    return;
 8003dde:	e014      	b.n	8003e0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <HAL_UART_IRQHandler+0x51e>
 8003dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fb2a 	bl	8004452 <UART_EndTransmit_IT>
    return;
 8003dfe:	e004      	b.n	8003e0a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e00:	bf00      	nop
 8003e02:	e002      	b.n	8003e0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e08:	bf00      	nop
  }
}
 8003e0a:	37e8      	adds	r7, #232	@ 0xe8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b090      	sub	sp, #64	@ 0x40
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d137      	bne.n	8003f18 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eaa:	2200      	movs	r2, #0
 8003eac:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ece:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e5      	bne.n	8003eae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f02:	61fa      	str	r2, [r7, #28]
 8003f04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e5      	bne.n	8003ee2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f16:	e002      	b.n	8003f1e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003f18:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003f1a:	f7ff ff79 	bl	8003e10 <HAL_UART_TxCpltCallback>
}
 8003f1e:	bf00      	nop
 8003f20:	3740      	adds	r7, #64	@ 0x40
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff ff75 	bl	8003e24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b09c      	sub	sp, #112	@ 0x70
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d172      	bne.n	8004044 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f60:	2200      	movs	r2, #0
 8003f62:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fb8:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e5      	bne.n	8003f98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	623b      	str	r3, [r7, #32]
   return(result);
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003fec:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	2b01      	cmp	r3, #1
 800400e:	d119      	bne.n	8004044 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004030:	61fa      	str	r2, [r7, #28]
 8004032:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	69b9      	ldr	r1, [r7, #24]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	617b      	str	r3, [r7, #20]
   return(result);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004046:	2200      	movs	r2, #0
 8004048:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	2b01      	cmp	r3, #1
 8004050:	d106      	bne.n	8004060 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004054:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004056:	4619      	mov	r1, r3
 8004058:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800405a:	f7ff ff0b 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800405e:	e002      	b.n	8004066 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004060:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004062:	f7ff fee9 	bl	8003e38 <HAL_UART_RxCpltCallback>
}
 8004066:	bf00      	nop
 8004068:	3770      	adds	r7, #112	@ 0x70
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	2b01      	cmp	r3, #1
 8004088:	d108      	bne.n	800409c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	4619      	mov	r1, r3
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff feed 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800409a:	e002      	b.n	80040a2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fed5 	bl	8003e4c <HAL_UART_RxHalfCpltCallback>
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b80      	cmp	r3, #128	@ 0x80
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b21      	cmp	r3, #33	@ 0x21
 80040dc:	d108      	bne.n	80040f0 <UART_DMAError+0x46>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80040ea:	68b8      	ldr	r0, [r7, #8]
 80040ec:	f000 f8c2 	bl	8004274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fa:	2b40      	cmp	r3, #64	@ 0x40
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b22      	cmp	r3, #34	@ 0x22
 8004110:	d108      	bne.n	8004124 <UART_DMAError+0x7a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800411e:	68b8      	ldr	r0, [r7, #8]
 8004120:	f000 f8d0 	bl	80042c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004128:	f043 0210 	orr.w	r2, r3, #16
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004130:	68b8      	ldr	r0, [r7, #8]
 8004132:	f7ff fe95 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b098      	sub	sp, #96	@ 0x60
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	88fa      	ldrh	r2, [r7, #6]
 8004158:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2222      	movs	r2, #34	@ 0x22
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416c:	4a3e      	ldr	r2, [pc, #248]	@ (8004268 <UART_Start_Receive_DMA+0x128>)
 800416e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	4a3d      	ldr	r2, [pc, #244]	@ (800426c <UART_Start_Receive_DMA+0x12c>)
 8004176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	4a3c      	ldr	r2, [pc, #240]	@ (8004270 <UART_Start_Receive_DMA+0x130>)
 800417e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004184:	2200      	movs	r2, #0
 8004186:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004188:	f107 0308 	add.w	r3, r7, #8
 800418c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	f7fd fe50 	bl	8001e44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d019      	beq.n	80041f6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80041e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80041e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80041f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e5      	bne.n	80041c2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3314      	adds	r3, #20
 80041fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	657b      	str	r3, [r7, #84]	@ 0x54
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004216:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004218:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800421c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e5      	bne.n	80041f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3314      	adds	r3, #20
 8004230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	617b      	str	r3, [r7, #20]
   return(result);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004240:	653b      	str	r3, [r7, #80]	@ 0x50
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800424a:	627a      	str	r2, [r7, #36]	@ 0x24
 800424c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6a39      	ldr	r1, [r7, #32]
 8004250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	61fb      	str	r3, [r7, #28]
   return(result);
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e5      	bne.n	800422a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3760      	adds	r7, #96	@ 0x60
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	08003f43 	.word	0x08003f43
 800426c:	0800406f 	.word	0x0800406f
 8004270:	080040ab 	.word	0x080040ab

08004274 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	60bb      	str	r3, [r7, #8]
   return(result);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	61ba      	str	r2, [r7, #24]
 800429e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	613b      	str	r3, [r7, #16]
   return(result);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80042b8:	bf00      	nop
 80042ba:	3724      	adds	r7, #36	@ 0x24
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b095      	sub	sp, #84	@ 0x54
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80042ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e5      	bne.n	80042cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3314      	adds	r3, #20
 800431e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	2b01      	cmp	r3, #1
 800433a:	d119      	bne.n	8004370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	60bb      	str	r3, [r7, #8]
   return(result);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f023 0310 	bic.w	r3, r3, #16
 8004352:	647b      	str	r3, [r7, #68]	@ 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800435c:	61ba      	str	r2, [r7, #24]
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6979      	ldr	r1, [r7, #20]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	613b      	str	r3, [r7, #16]
   return(result);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800437e:	bf00      	nop
 8004380:	3754      	adds	r7, #84	@ 0x54
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f7ff fd5b 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b21      	cmp	r3, #33	@ 0x21
 80043c4:	d13e      	bne.n	8004444 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ce:	d114      	bne.n	80043fa <UART_Transmit_IT+0x48>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d110      	bne.n	80043fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	1c9a      	adds	r2, r3, #2
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	621a      	str	r2, [r3, #32]
 80043f8:	e008      	b.n	800440c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	1c59      	adds	r1, r3, #1
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6211      	str	r1, [r2, #32]
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	4619      	mov	r1, r3
 800441a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10f      	bne.n	8004440 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800442e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800443e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	e000      	b.n	8004446 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004444:	2302      	movs	r3, #2
  }
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004468:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fccc 	bl	8003e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b08c      	sub	sp, #48	@ 0x30
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b22      	cmp	r3, #34	@ 0x22
 8004494:	f040 80ae 	bne.w	80045f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a0:	d117      	bne.n	80044d2 <UART_Receive_IT+0x50>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d113      	bne.n	80044d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ca:	1c9a      	adds	r2, r3, #2
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80044d0:	e026      	b.n	8004520 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e4:	d007      	beq.n	80044f6 <UART_Receive_IT+0x74>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <UART_Receive_IT+0x82>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	e008      	b.n	8004516 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004510:	b2da      	uxtb	r2, r3
 8004512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004514:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29b      	uxth	r3, r3
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	4619      	mov	r1, r3
 800452e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004530:	2b00      	cmp	r3, #0
 8004532:	d15d      	bne.n	80045f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0220 	bic.w	r2, r2, #32
 8004542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	2b01      	cmp	r3, #1
 8004578:	d135      	bne.n	80045e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	613b      	str	r3, [r7, #16]
   return(result);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f023 0310 	bic.w	r3, r3, #16
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a0:	623a      	str	r2, [r7, #32]
 80045a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	69f9      	ldr	r1, [r7, #28]
 80045a6:	6a3a      	ldr	r2, [r7, #32]
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e5      	bne.n	8004580 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d10a      	bne.n	80045d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fc48 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
 80045e4:	e002      	b.n	80045ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fc26 	bl	8003e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e002      	b.n	80045f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3730      	adds	r7, #48	@ 0x30
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b0c0      	sub	sp, #256	@ 0x100
 8004606:	af00      	add	r7, sp, #0
 8004608:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461c:	68d9      	ldr	r1, [r3, #12]
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	ea40 0301 	orr.w	r3, r0, r1
 8004628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	431a      	orrs	r2, r3
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	431a      	orrs	r2, r3
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004658:	f021 010c 	bic.w	r1, r1, #12
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004666:	430b      	orrs	r3, r1
 8004668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	6999      	ldr	r1, [r3, #24]
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	ea40 0301 	orr.w	r3, r0, r1
 8004686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b8f      	ldr	r3, [pc, #572]	@ (80048cc <UART_SetConfig+0x2cc>)
 8004690:	429a      	cmp	r2, r3
 8004692:	d005      	beq.n	80046a0 <UART_SetConfig+0xa0>
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b8d      	ldr	r3, [pc, #564]	@ (80048d0 <UART_SetConfig+0x2d0>)
 800469c:	429a      	cmp	r2, r3
 800469e:	d104      	bne.n	80046aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fe fd06 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 80046a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046a8:	e003      	b.n	80046b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046aa:	f7fe fced 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 80046ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046bc:	f040 810c 	bne.w	80048d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046d2:	4622      	mov	r2, r4
 80046d4:	462b      	mov	r3, r5
 80046d6:	1891      	adds	r1, r2, r2
 80046d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046da:	415b      	adcs	r3, r3
 80046dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046e2:	4621      	mov	r1, r4
 80046e4:	eb12 0801 	adds.w	r8, r2, r1
 80046e8:	4629      	mov	r1, r5
 80046ea:	eb43 0901 	adc.w	r9, r3, r1
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004702:	4690      	mov	r8, r2
 8004704:	4699      	mov	r9, r3
 8004706:	4623      	mov	r3, r4
 8004708:	eb18 0303 	adds.w	r3, r8, r3
 800470c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004710:	462b      	mov	r3, r5
 8004712:	eb49 0303 	adc.w	r3, r9, r3
 8004716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004726:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800472a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800472e:	460b      	mov	r3, r1
 8004730:	18db      	adds	r3, r3, r3
 8004732:	653b      	str	r3, [r7, #80]	@ 0x50
 8004734:	4613      	mov	r3, r2
 8004736:	eb42 0303 	adc.w	r3, r2, r3
 800473a:	657b      	str	r3, [r7, #84]	@ 0x54
 800473c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004744:	f7fb fe04 	bl	8000350 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4b61      	ldr	r3, [pc, #388]	@ (80048d4 <UART_SetConfig+0x2d4>)
 800474e:	fba3 2302 	umull	r2, r3, r3, r2
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	011c      	lsls	r4, r3, #4
 8004756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004760:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	1891      	adds	r1, r2, r2
 800476e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004770:	415b      	adcs	r3, r3
 8004772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004778:	4641      	mov	r1, r8
 800477a:	eb12 0a01 	adds.w	sl, r2, r1
 800477e:	4649      	mov	r1, r9
 8004780:	eb43 0b01 	adc.w	fp, r3, r1
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004798:	4692      	mov	sl, r2
 800479a:	469b      	mov	fp, r3
 800479c:	4643      	mov	r3, r8
 800479e:	eb1a 0303 	adds.w	r3, sl, r3
 80047a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047a6:	464b      	mov	r3, r9
 80047a8:	eb4b 0303 	adc.w	r3, fp, r3
 80047ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047c4:	460b      	mov	r3, r1
 80047c6:	18db      	adds	r3, r3, r3
 80047c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ca:	4613      	mov	r3, r2
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047da:	f7fb fdb9 	bl	8000350 <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	4b3b      	ldr	r3, [pc, #236]	@ (80048d4 <UART_SetConfig+0x2d4>)
 80047e6:	fba3 2301 	umull	r2, r3, r3, r1
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2264      	movs	r2, #100	@ 0x64
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	1acb      	subs	r3, r1, r3
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047fa:	4b36      	ldr	r3, [pc, #216]	@ (80048d4 <UART_SetConfig+0x2d4>)
 80047fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004808:	441c      	add	r4, r3
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004814:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	1891      	adds	r1, r2, r2
 8004822:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004824:	415b      	adcs	r3, r3
 8004826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800482c:	4641      	mov	r1, r8
 800482e:	1851      	adds	r1, r2, r1
 8004830:	6339      	str	r1, [r7, #48]	@ 0x30
 8004832:	4649      	mov	r1, r9
 8004834:	414b      	adcs	r3, r1
 8004836:	637b      	str	r3, [r7, #52]	@ 0x34
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004844:	4659      	mov	r1, fp
 8004846:	00cb      	lsls	r3, r1, #3
 8004848:	4651      	mov	r1, sl
 800484a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484e:	4651      	mov	r1, sl
 8004850:	00ca      	lsls	r2, r1, #3
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	4603      	mov	r3, r0
 8004858:	4642      	mov	r2, r8
 800485a:	189b      	adds	r3, r3, r2
 800485c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004860:	464b      	mov	r3, r9
 8004862:	460a      	mov	r2, r1
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004878:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800487c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004880:	460b      	mov	r3, r1
 8004882:	18db      	adds	r3, r3, r3
 8004884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004886:	4613      	mov	r3, r2
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800488e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004896:	f7fb fd5b 	bl	8000350 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4b0d      	ldr	r3, [pc, #52]	@ (80048d4 <UART_SetConfig+0x2d4>)
 80048a0:	fba3 1302 	umull	r1, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	2164      	movs	r1, #100	@ 0x64
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	3332      	adds	r3, #50	@ 0x32
 80048b2:	4a08      	ldr	r2, [pc, #32]	@ (80048d4 <UART_SetConfig+0x2d4>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	f003 0207 	and.w	r2, r3, #7
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4422      	add	r2, r4
 80048c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048c8:	e106      	b.n	8004ad8 <UART_SetConfig+0x4d8>
 80048ca:	bf00      	nop
 80048cc:	40011000 	.word	0x40011000
 80048d0:	40011400 	.word	0x40011400
 80048d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048ea:	4642      	mov	r2, r8
 80048ec:	464b      	mov	r3, r9
 80048ee:	1891      	adds	r1, r2, r2
 80048f0:	6239      	str	r1, [r7, #32]
 80048f2:	415b      	adcs	r3, r3
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048fa:	4641      	mov	r1, r8
 80048fc:	1854      	adds	r4, r2, r1
 80048fe:	4649      	mov	r1, r9
 8004900:	eb43 0501 	adc.w	r5, r3, r1
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	00eb      	lsls	r3, r5, #3
 800490e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004912:	00e2      	lsls	r2, r4, #3
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	4643      	mov	r3, r8
 800491a:	18e3      	adds	r3, r4, r3
 800491c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004920:	464b      	mov	r3, r9
 8004922:	eb45 0303 	adc.w	r3, r5, r3
 8004926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004936:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004946:	4629      	mov	r1, r5
 8004948:	008b      	lsls	r3, r1, #2
 800494a:	4621      	mov	r1, r4
 800494c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004950:	4621      	mov	r1, r4
 8004952:	008a      	lsls	r2, r1, #2
 8004954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004958:	f7fb fcfa 	bl	8000350 <__aeabi_uldivmod>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4b60      	ldr	r3, [pc, #384]	@ (8004ae4 <UART_SetConfig+0x4e4>)
 8004962:	fba3 2302 	umull	r2, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	011c      	lsls	r4, r3, #4
 800496a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800496e:	2200      	movs	r2, #0
 8004970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004974:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800497c:	4642      	mov	r2, r8
 800497e:	464b      	mov	r3, r9
 8004980:	1891      	adds	r1, r2, r2
 8004982:	61b9      	str	r1, [r7, #24]
 8004984:	415b      	adcs	r3, r3
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800498c:	4641      	mov	r1, r8
 800498e:	1851      	adds	r1, r2, r1
 8004990:	6139      	str	r1, [r7, #16]
 8004992:	4649      	mov	r1, r9
 8004994:	414b      	adcs	r3, r1
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a4:	4659      	mov	r1, fp
 80049a6:	00cb      	lsls	r3, r1, #3
 80049a8:	4651      	mov	r1, sl
 80049aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ae:	4651      	mov	r1, sl
 80049b0:	00ca      	lsls	r2, r1, #3
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	4642      	mov	r2, r8
 80049ba:	189b      	adds	r3, r3, r2
 80049bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049c0:	464b      	mov	r3, r9
 80049c2:	460a      	mov	r2, r1
 80049c4:	eb42 0303 	adc.w	r3, r2, r3
 80049c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049e4:	4649      	mov	r1, r9
 80049e6:	008b      	lsls	r3, r1, #2
 80049e8:	4641      	mov	r1, r8
 80049ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ee:	4641      	mov	r1, r8
 80049f0:	008a      	lsls	r2, r1, #2
 80049f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049f6:	f7fb fcab 	bl	8000350 <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	4b38      	ldr	r3, [pc, #224]	@ (8004ae4 <UART_SetConfig+0x4e4>)
 8004a02:	fba3 2301 	umull	r2, r3, r3, r1
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2264      	movs	r2, #100	@ 0x64
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	1acb      	subs	r3, r1, r3
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	3332      	adds	r3, #50	@ 0x32
 8004a14:	4a33      	ldr	r2, [pc, #204]	@ (8004ae4 <UART_SetConfig+0x4e4>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a20:	441c      	add	r4, r3
 8004a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a26:	2200      	movs	r2, #0
 8004a28:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a30:	4642      	mov	r2, r8
 8004a32:	464b      	mov	r3, r9
 8004a34:	1891      	adds	r1, r2, r2
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	415b      	adcs	r3, r3
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a40:	4641      	mov	r1, r8
 8004a42:	1851      	adds	r1, r2, r1
 8004a44:	6039      	str	r1, [r7, #0]
 8004a46:	4649      	mov	r1, r9
 8004a48:	414b      	adcs	r3, r1
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a58:	4659      	mov	r1, fp
 8004a5a:	00cb      	lsls	r3, r1, #3
 8004a5c:	4651      	mov	r1, sl
 8004a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a62:	4651      	mov	r1, sl
 8004a64:	00ca      	lsls	r2, r1, #3
 8004a66:	4610      	mov	r0, r2
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	189b      	adds	r3, r3, r2
 8004a70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a72:	464b      	mov	r3, r9
 8004a74:	460a      	mov	r2, r1
 8004a76:	eb42 0303 	adc.w	r3, r2, r3
 8004a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a86:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a94:	4649      	mov	r1, r9
 8004a96:	008b      	lsls	r3, r1, #2
 8004a98:	4641      	mov	r1, r8
 8004a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	008a      	lsls	r2, r1, #2
 8004aa2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004aa6:	f7fb fc53 	bl	8000350 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <UART_SetConfig+0x4e4>)
 8004ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	2164      	movs	r1, #100	@ 0x64
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	3332      	adds	r3, #50	@ 0x32
 8004ac2:	4a08      	ldr	r2, [pc, #32]	@ (8004ae4 <UART_SetConfig+0x4e4>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	f003 020f 	and.w	r2, r3, #15
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4422      	add	r2, r4
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae4:	51eb851f 	.word	0x51eb851f

08004ae8 <__NVIC_SetPriority>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	6039      	str	r1, [r7, #0]
 8004af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	db0a      	blt.n	8004b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	490c      	ldr	r1, [pc, #48]	@ (8004b34 <__NVIC_SetPriority+0x4c>)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b10:	e00a      	b.n	8004b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	4908      	ldr	r1, [pc, #32]	@ (8004b38 <__NVIC_SetPriority+0x50>)
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	3b04      	subs	r3, #4
 8004b20:	0112      	lsls	r2, r2, #4
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	440b      	add	r3, r1
 8004b26:	761a      	strb	r2, [r3, #24]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000e100 	.word	0xe000e100
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b40:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <SysTick_Handler+0x1c>)
 8004b42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b44:	f001 fd40 	bl	80065c8 <xTaskGetSchedulerState>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b4e:	f002 fb3b 	bl	80071c8 <xPortSysTickHandler>
  }
}
 8004b52:	bf00      	nop
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	e000e010 	.word	0xe000e010

08004b5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b60:	2100      	movs	r1, #0
 8004b62:	f06f 0004 	mvn.w	r0, #4
 8004b66:	f7ff ffbf 	bl	8004ae8 <__NVIC_SetPriority>
#endif
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b76:	f3ef 8305 	mrs	r3, IPSR
 8004b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b82:	f06f 0305 	mvn.w	r3, #5
 8004b86:	607b      	str	r3, [r7, #4]
 8004b88:	e00c      	b.n	8004ba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <osKernelInitialize+0x44>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b92:	4b08      	ldr	r3, [pc, #32]	@ (8004bb4 <osKernelInitialize+0x44>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	e002      	b.n	8004ba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ba4:	687b      	ldr	r3, [r7, #4]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20007d40 	.word	0x20007d40

08004bb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bbe:	f3ef 8305 	mrs	r3, IPSR
 8004bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8004bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004bca:	f06f 0305 	mvn.w	r3, #5
 8004bce:	607b      	str	r3, [r7, #4]
 8004bd0:	e010      	b.n	8004bf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <osKernelStart+0x48>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d109      	bne.n	8004bee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004bda:	f7ff ffbf 	bl	8004b5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bde:	4b08      	ldr	r3, [pc, #32]	@ (8004c00 <osKernelStart+0x48>)
 8004be0:	2202      	movs	r2, #2
 8004be2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004be4:	f001 f87a 	bl	8005cdc <vTaskStartScheduler>
      stat = osOK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	e002      	b.n	8004bf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bf4:	687b      	ldr	r3, [r7, #4]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20007d40 	.word	0x20007d40

08004c04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08e      	sub	sp, #56	@ 0x38
 8004c08:	af04      	add	r7, sp, #16
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c14:	f3ef 8305 	mrs	r3, IPSR
 8004c18:	617b      	str	r3, [r7, #20]
  return(result);
 8004c1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d17e      	bne.n	8004d1e <osThreadNew+0x11a>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d07b      	beq.n	8004d1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c26:	2380      	movs	r3, #128	@ 0x80
 8004c28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c2a:	2318      	movs	r3, #24
 8004c2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d045      	beq.n	8004cca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <osThreadNew+0x48>
        name = attr->name;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <osThreadNew+0x6e>
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b38      	cmp	r3, #56	@ 0x38
 8004c64:	d805      	bhi.n	8004c72 <osThreadNew+0x6e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <osThreadNew+0x72>
        return (NULL);
 8004c72:	2300      	movs	r3, #0
 8004c74:	e054      	b.n	8004d20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	089b      	lsrs	r3, r3, #2
 8004c84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00e      	beq.n	8004cac <osThreadNew+0xa8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b5b      	cmp	r3, #91	@ 0x5b
 8004c94:	d90a      	bls.n	8004cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d006      	beq.n	8004cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <osThreadNew+0xa8>
        mem = 1;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	e010      	b.n	8004cce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10c      	bne.n	8004cce <osThreadNew+0xca>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d108      	bne.n	8004cce <osThreadNew+0xca>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <osThreadNew+0xca>
          mem = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e001      	b.n	8004cce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d110      	bne.n	8004cf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cdc:	9202      	str	r2, [sp, #8]
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	6a3a      	ldr	r2, [r7, #32]
 8004ce8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fe1a 	bl	8005924 <xTaskCreateStatic>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e013      	b.n	8004d1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d110      	bne.n	8004d1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	f107 0310 	add.w	r3, r7, #16
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fe68 	bl	80059e4 <xTaskCreate>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d001      	beq.n	8004d1e <osThreadNew+0x11a>
            hTask = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d1e:	693b      	ldr	r3, [r7, #16]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3728      	adds	r7, #40	@ 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d30:	f3ef 8305 	mrs	r3, IPSR
 8004d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <osDelay+0x1c>
    stat = osErrorISR;
 8004d3c:	f06f 0305 	mvn.w	r3, #5
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e007      	b.n	8004d54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 ff8e 	bl	8005c70 <vTaskDelay>
    }
  }

  return (stat);
 8004d54:	68fb      	ldr	r3, [r7, #12]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a07      	ldr	r2, [pc, #28]	@ (8004d8c <vApplicationGetIdleTaskMemory+0x2c>)
 8004d70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4a06      	ldr	r2, [pc, #24]	@ (8004d90 <vApplicationGetIdleTaskMemory+0x30>)
 8004d76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2280      	movs	r2, #128	@ 0x80
 8004d7c:	601a      	str	r2, [r3, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20007d44 	.word	0x20007d44
 8004d90:	20007da0 	.word	0x20007da0

08004d94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a07      	ldr	r2, [pc, #28]	@ (8004dc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004da4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4a06      	ldr	r2, [pc, #24]	@ (8004dc4 <vApplicationGetTimerTaskMemory+0x30>)
 8004daa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004db2:	601a      	str	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	20007fa0 	.word	0x20007fa0
 8004dc4:	20007ffc 	.word	0x20007ffc

08004dc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f103 0208 	add.w	r2, r3, #8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004de0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f103 0208 	add.w	r2, r3, #8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f103 0208 	add.w	r2, r3, #8
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	601a      	str	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e80:	d103      	bne.n	8004e8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e00c      	b.n	8004ea4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e002      	b.n	8004e98 <vListInsert+0x2e>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d2f6      	bcs.n	8004e92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	601a      	str	r2, [r3, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6892      	ldr	r2, [r2, #8]
 8004ef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6852      	ldr	r2, [r2, #4]
 8004efc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d103      	bne.n	8004f10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	1e5a      	subs	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <xQueueGenericReset+0x2c>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	60bb      	str	r3, [r7, #8]
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f5c:	f002 f8a4 	bl	80070a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	441a      	add	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	441a      	add	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	22ff      	movs	r2, #255	@ 0xff
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	22ff      	movs	r2, #255	@ 0xff
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d114      	bne.n	8004fdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01a      	beq.n	8004ff0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3310      	adds	r3, #16
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 f91a 	bl	80061f8 <xTaskRemoveFromEventList>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d012      	beq.n	8004ff0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <xQueueGenericReset+0xd0>)
 8004fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	e009      	b.n	8004ff0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3310      	adds	r3, #16
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fef1 	bl	8004dc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3324      	adds	r3, #36	@ 0x24
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff feec 	bl	8004dc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ff0:	f002 f88c 	bl	800710c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ff4:	2301      	movs	r3, #1
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08e      	sub	sp, #56	@ 0x38
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <xQueueGenericCreateStatic+0x56>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <xQueueGenericCreateStatic+0x5a>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <xQueueGenericCreateStatic+0x5c>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	623b      	str	r3, [r7, #32]
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	e7fd      	b.n	8005078 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <xQueueGenericCreateStatic+0x84>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <xQueueGenericCreateStatic+0x88>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <xQueueGenericCreateStatic+0x8a>
 800508c:	2300      	movs	r3, #0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10b      	bne.n	80050aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	61fb      	str	r3, [r7, #28]
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	e7fd      	b.n	80050a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050aa:	2350      	movs	r3, #80	@ 0x50
 80050ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b50      	cmp	r3, #80	@ 0x50
 80050b2:	d00b      	beq.n	80050cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	61bb      	str	r3, [r7, #24]
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80050cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80050d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00d      	beq.n	80050f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80050e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f805 	bl	80050fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3730      	adds	r7, #48	@ 0x30
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e002      	b.n	8005120 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800512c:	2101      	movs	r1, #1
 800512e:	69b8      	ldr	r0, [r7, #24]
 8005130:	f7ff fefe 	bl	8004f30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08e      	sub	sp, #56	@ 0x38
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005152:	2300      	movs	r3, #0
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10b      	bne.n	8005178 <xQueueGenericSend+0x34>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005172:	bf00      	nop
 8005174:	bf00      	nop
 8005176:	e7fd      	b.n	8005174 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <xQueueGenericSend+0x42>
 800517e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <xQueueGenericSend+0x46>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <xQueueGenericSend+0x48>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xQueueGenericSend+0x64>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d103      	bne.n	80051b6 <xQueueGenericSend+0x72>
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <xQueueGenericSend+0x76>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <xQueueGenericSend+0x78>
 80051ba:	2300      	movs	r3, #0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <xQueueGenericSend+0x94>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	623b      	str	r3, [r7, #32]
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051d8:	f001 f9f6 	bl	80065c8 <xTaskGetSchedulerState>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <xQueueGenericSend+0xa4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <xQueueGenericSend+0xa8>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <xQueueGenericSend+0xaa>
 80051ec:	2300      	movs	r3, #0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10b      	bne.n	800520a <xQueueGenericSend+0xc6>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	61fb      	str	r3, [r7, #28]
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	e7fd      	b.n	8005206 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800520a:	f001 ff4d 	bl	80070a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <xQueueGenericSend+0xdc>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d129      	bne.n	8005274 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005226:	f000 fa0f 	bl	8005648 <prvCopyDataToQueue>
 800522a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800522c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	d010      	beq.n	8005256 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	3324      	adds	r3, #36	@ 0x24
 8005238:	4618      	mov	r0, r3
 800523a:	f000 ffdd 	bl	80061f8 <xTaskRemoveFromEventList>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d013      	beq.n	800526c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005244:	4b3f      	ldr	r3, [pc, #252]	@ (8005344 <xQueueGenericSend+0x200>)
 8005246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	e00a      	b.n	800526c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800525c:	4b39      	ldr	r3, [pc, #228]	@ (8005344 <xQueueGenericSend+0x200>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800526c:	f001 ff4e 	bl	800710c <vPortExitCritical>
				return pdPASS;
 8005270:	2301      	movs	r3, #1
 8005272:	e063      	b.n	800533c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800527a:	f001 ff47 	bl	800710c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800527e:	2300      	movs	r3, #0
 8005280:	e05c      	b.n	800533c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005288:	f107 0314 	add.w	r3, r7, #20
 800528c:	4618      	mov	r0, r3
 800528e:	f001 f83f 	bl	8006310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005292:	2301      	movs	r3, #1
 8005294:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005296:	f001 ff39 	bl	800710c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800529a:	f000 fd87 	bl	8005dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800529e:	f001 ff03 	bl	80070a8 <vPortEnterCritical>
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052a8:	b25b      	sxtb	r3, r3
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052ae:	d103      	bne.n	80052b8 <xQueueGenericSend+0x174>
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052c4:	d103      	bne.n	80052ce <xQueueGenericSend+0x18a>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052ce:	f001 ff1d 	bl	800710c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052d2:	1d3a      	adds	r2, r7, #4
 80052d4:	f107 0314 	add.w	r3, r7, #20
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f001 f82e 	bl	800633c <xTaskCheckForTimeOut>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d124      	bne.n	8005330 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052e8:	f000 faa6 	bl	8005838 <prvIsQueueFull>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d018      	beq.n	8005324 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	3310      	adds	r3, #16
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 ff2a 	bl	8006154 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005302:	f000 fa31 	bl	8005768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005306:	f000 fd5f 	bl	8005dc8 <xTaskResumeAll>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	f47f af7c 	bne.w	800520a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005312:	4b0c      	ldr	r3, [pc, #48]	@ (8005344 <xQueueGenericSend+0x200>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	e772      	b.n	800520a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005326:	f000 fa1f 	bl	8005768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800532a:	f000 fd4d 	bl	8005dc8 <xTaskResumeAll>
 800532e:	e76c      	b.n	800520a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005332:	f000 fa19 	bl	8005768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005336:	f000 fd47 	bl	8005dc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800533a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800533c:	4618      	mov	r0, r3
 800533e:	3738      	adds	r7, #56	@ 0x38
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	e000ed04 	.word	0xe000ed04

08005348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b090      	sub	sp, #64	@ 0x40
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10b      	bne.n	8005378 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d103      	bne.n	8005386 <xQueueGenericSendFromISR+0x3e>
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <xQueueGenericSendFromISR+0x42>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <xQueueGenericSendFromISR+0x44>
 800538a:	2300      	movs	r3, #0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d103      	bne.n	80053b6 <xQueueGenericSendFromISR+0x6e>
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <xQueueGenericSendFromISR+0x72>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <xQueueGenericSendFromISR+0x74>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10b      	bne.n	80053d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	623b      	str	r3, [r7, #32]
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053d8:	f001 ff46 	bl	8007268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053dc:	f3ef 8211 	mrs	r2, BASEPRI
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	61fa      	str	r2, [r7, #28]
 80053f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <xQueueGenericSendFromISR+0xc2>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d12f      	bne.n	800546a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800540a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005420:	f000 f912 	bl	8005648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005424:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800542c:	d112      	bne.n	8005454 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800542e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	d016      	beq.n	8005464 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005438:	3324      	adds	r3, #36	@ 0x24
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fedc 	bl	80061f8 <xTaskRemoveFromEventList>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00e      	beq.n	8005464 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00b      	beq.n	8005464 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e007      	b.n	8005464 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005454:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005458:	3301      	adds	r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	b25a      	sxtb	r2, r3
 800545e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005464:	2301      	movs	r3, #1
 8005466:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005468:	e001      	b.n	800546e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800546a:	2300      	movs	r3, #0
 800546c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005470:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005478:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800547a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800547c:	4618      	mov	r0, r3
 800547e:	3740      	adds	r7, #64	@ 0x40
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08c      	sub	sp, #48	@ 0x30
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <xQueueReceive+0x32>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	623b      	str	r3, [r7, #32]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d103      	bne.n	80054c4 <xQueueReceive+0x40>
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <xQueueReceive+0x44>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <xQueueReceive+0x46>
 80054c8:	2300      	movs	r3, #0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10b      	bne.n	80054e6 <xQueueReceive+0x62>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	61fb      	str	r3, [r7, #28]
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054e6:	f001 f86f 	bl	80065c8 <xTaskGetSchedulerState>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <xQueueReceive+0x72>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <xQueueReceive+0x76>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <xQueueReceive+0x78>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <xQueueReceive+0x94>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	61bb      	str	r3, [r7, #24]
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	e7fd      	b.n	8005514 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005518:	f001 fdc6 	bl	80070a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01f      	beq.n	8005568 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800552c:	f000 f8f6 	bl	800571c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	1e5a      	subs	r2, r3, #1
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00f      	beq.n	8005560 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	3310      	adds	r3, #16
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fe57 	bl	80061f8 <xTaskRemoveFromEventList>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d007      	beq.n	8005560 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005550:	4b3c      	ldr	r3, [pc, #240]	@ (8005644 <xQueueReceive+0x1c0>)
 8005552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005560:	f001 fdd4 	bl	800710c <vPortExitCritical>
				return pdPASS;
 8005564:	2301      	movs	r3, #1
 8005566:	e069      	b.n	800563c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800556e:	f001 fdcd 	bl	800710c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005572:	2300      	movs	r3, #0
 8005574:	e062      	b.n	800563c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800557c:	f107 0310 	add.w	r3, r7, #16
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fec5 	bl	8006310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005586:	2301      	movs	r3, #1
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800558a:	f001 fdbf 	bl	800710c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800558e:	f000 fc0d 	bl	8005dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005592:	f001 fd89 	bl	80070a8 <vPortEnterCritical>
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800559c:	b25b      	sxtb	r3, r3
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055a2:	d103      	bne.n	80055ac <xQueueReceive+0x128>
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055b2:	b25b      	sxtb	r3, r3
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055b8:	d103      	bne.n	80055c2 <xQueueReceive+0x13e>
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055c2:	f001 fda3 	bl	800710c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055c6:	1d3a      	adds	r2, r7, #4
 80055c8:	f107 0310 	add.w	r3, r7, #16
 80055cc:	4611      	mov	r1, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 feb4 	bl	800633c <xTaskCheckForTimeOut>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d123      	bne.n	8005622 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055dc:	f000 f916 	bl	800580c <prvIsQueueEmpty>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d017      	beq.n	8005616 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e8:	3324      	adds	r3, #36	@ 0x24
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fdb0 	bl	8006154 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055f6:	f000 f8b7 	bl	8005768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055fa:	f000 fbe5 	bl	8005dc8 <xTaskResumeAll>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d189      	bne.n	8005518 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005604:	4b0f      	ldr	r3, [pc, #60]	@ (8005644 <xQueueReceive+0x1c0>)
 8005606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	e780      	b.n	8005518 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005618:	f000 f8a6 	bl	8005768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800561c:	f000 fbd4 	bl	8005dc8 <xTaskResumeAll>
 8005620:	e77a      	b.n	8005518 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005624:	f000 f8a0 	bl	8005768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005628:	f000 fbce 	bl	8005dc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800562c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800562e:	f000 f8ed 	bl	800580c <prvIsQueueEmpty>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	f43f af6f 	beq.w	8005518 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800563a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800563c:	4618      	mov	r0, r3
 800563e:	3730      	adds	r7, #48	@ 0x30
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d14d      	bne.n	800570a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 ffc6 	bl	8006604 <xTaskPriorityDisinherit>
 8005678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	e043      	b.n	800570a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d119      	bne.n	80056bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6858      	ldr	r0, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005690:	461a      	mov	r2, r3
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	f010 f9f3 	bl	8015a7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	441a      	add	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d32b      	bcc.n	800570a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	e026      	b.n	800570a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68d8      	ldr	r0, [r3, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	461a      	mov	r2, r3
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	f010 f9d9 	bl	8015a7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	425b      	negs	r3, r3
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d207      	bcs.n	80056f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	425b      	negs	r3, r3
 80056f2:	441a      	add	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d105      	bne.n	800570a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	3b01      	subs	r3, #1
 8005708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005712:	697b      	ldr	r3, [r7, #20]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	441a      	add	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	d303      	bcc.n	8005750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68d9      	ldr	r1, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	461a      	mov	r2, r3
 800575a:	6838      	ldr	r0, [r7, #0]
 800575c:	f010 f98f 	bl	8015a7e <memcpy>
	}
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005770:	f001 fc9a 	bl	80070a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800577a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800577c:	e011      	b.n	80057a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d012      	beq.n	80057ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3324      	adds	r3, #36	@ 0x24
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fd34 	bl	80061f8 <xTaskRemoveFromEventList>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005796:	f000 fe35 	bl	8006404 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	3b01      	subs	r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	dce9      	bgt.n	800577e <prvUnlockQueue+0x16>
 80057aa:	e000      	b.n	80057ae <prvUnlockQueue+0x46>
					break;
 80057ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	22ff      	movs	r2, #255	@ 0xff
 80057b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80057b6:	f001 fca9 	bl	800710c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057ba:	f001 fc75 	bl	80070a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057c6:	e011      	b.n	80057ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d012      	beq.n	80057f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3310      	adds	r3, #16
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fd0f 	bl	80061f8 <xTaskRemoveFromEventList>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057e0:	f000 fe10 	bl	8006404 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057e4:	7bbb      	ldrb	r3, [r7, #14]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	dce9      	bgt.n	80057c8 <prvUnlockQueue+0x60>
 80057f4:	e000      	b.n	80057f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	22ff      	movs	r2, #255	@ 0xff
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005800:	f001 fc84 	bl	800710c <vPortExitCritical>
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005814:	f001 fc48 	bl	80070a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e001      	b.n	800582a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800582a:	f001 fc6f 	bl	800710c <vPortExitCritical>

	return xReturn;
 800582e:	68fb      	ldr	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005840:	f001 fc32 	bl	80070a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	429a      	cmp	r2, r3
 800584e:	d102      	bne.n	8005856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e001      	b.n	800585a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800585a:	f001 fc57 	bl	800710c <vPortExitCritical>

	return xReturn;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e014      	b.n	80058a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005878:	4a0f      	ldr	r2, [pc, #60]	@ (80058b8 <vQueueAddToRegistry+0x50>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005884:	490c      	ldr	r1, [pc, #48]	@ (80058b8 <vQueueAddToRegistry+0x50>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800588e:	4a0a      	ldr	r2, [pc, #40]	@ (80058b8 <vQueueAddToRegistry+0x50>)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4413      	add	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800589a:	e006      	b.n	80058aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b07      	cmp	r3, #7
 80058a6:	d9e7      	bls.n	8005878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	200083fc 	.word	0x200083fc

080058bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80058cc:	f001 fbec 	bl	80070a8 <vPortEnterCritical>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058d6:	b25b      	sxtb	r3, r3
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058dc:	d103      	bne.n	80058e6 <vQueueWaitForMessageRestricted+0x2a>
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058ec:	b25b      	sxtb	r3, r3
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058f2:	d103      	bne.n	80058fc <vQueueWaitForMessageRestricted+0x40>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058fc:	f001 fc06 	bl	800710c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	3324      	adds	r3, #36	@ 0x24
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fc45 	bl	80061a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7ff ff26 	bl	8005768 <prvUnlockQueue>
	}
 800591c:	bf00      	nop
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08e      	sub	sp, #56	@ 0x38
 8005928:	af04      	add	r7, sp, #16
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	623b      	str	r3, [r7, #32]
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10b      	bne.n	800596e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	61fb      	str	r3, [r7, #28]
}
 8005968:	bf00      	nop
 800596a:	bf00      	nop
 800596c:	e7fd      	b.n	800596a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800596e:	235c      	movs	r3, #92	@ 0x5c
 8005970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b5c      	cmp	r3, #92	@ 0x5c
 8005976:	d00b      	beq.n	8005990 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	61bb      	str	r3, [r7, #24]
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	e7fd      	b.n	800598c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005990:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01e      	beq.n	80059d6 <xTaskCreateStatic+0xb2>
 8005998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01b      	beq.n	80059d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800599e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059b0:	2300      	movs	r3, #0
 80059b2:	9303      	str	r3, [sp, #12]
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	9302      	str	r3, [sp, #8]
 80059b8:	f107 0314 	add.w	r3, r7, #20
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f850 	bl	8005a6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059d0:	f000 f8de 	bl	8005b90 <prvAddNewTaskToReadyList>
 80059d4:	e001      	b.n	80059da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059da:	697b      	ldr	r3, [r7, #20]
	}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	@ 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08c      	sub	sp, #48	@ 0x30
 80059e8:	af04      	add	r7, sp, #16
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fc77 	bl	80072ec <pvPortMalloc>
 80059fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a06:	205c      	movs	r0, #92	@ 0x5c
 8005a08:	f001 fc70 	bl	80072ec <pvPortMalloc>
 8005a0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a1a:	e005      	b.n	8005a28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a1c:	6978      	ldr	r0, [r7, #20]
 8005a1e:	f001 fd33 	bl	8007488 <vPortFree>
 8005a22:	e001      	b.n	8005a28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d017      	beq.n	8005a5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9303      	str	r3, [sp, #12]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	9302      	str	r3, [sp, #8]
 8005a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a42:	9301      	str	r3, [sp, #4]
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f80e 	bl	8005a6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a52:	69f8      	ldr	r0, [r7, #28]
 8005a54:	f000 f89c 	bl	8005b90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	e002      	b.n	8005a64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a64:	69bb      	ldr	r3, [r7, #24]
	}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b088      	sub	sp, #32
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	461a      	mov	r2, r3
 8005a86:	21a5      	movs	r1, #165	@ 0xa5
 8005a88:	f00f ff1e 	bl	80158c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a96:	3b01      	subs	r3, #1
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	f023 0307 	bic.w	r3, r3, #7
 8005aa4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	617b      	str	r3, [r7, #20]
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	e7fd      	b.n	8005ac4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01f      	beq.n	8005b0e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e012      	b.n	8005afa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	7819      	ldrb	r1, [r3, #0]
 8005adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3334      	adds	r3, #52	@ 0x34
 8005ae4:	460a      	mov	r2, r1
 8005ae6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d006      	beq.n	8005b02 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	2b0f      	cmp	r3, #15
 8005afe:	d9e9      	bls.n	8005ad4 <prvInitialiseNewTask+0x66>
 8005b00:	e000      	b.n	8005b04 <prvInitialiseNewTask+0x96>
			{
				break;
 8005b02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b0c:	e003      	b.n	8005b16 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	2b37      	cmp	r3, #55	@ 0x37
 8005b1a:	d901      	bls.n	8005b20 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b1c:	2337      	movs	r3, #55	@ 0x37
 8005b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b24:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	2200      	movs	r2, #0
 8005b30:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b34:	3304      	adds	r3, #4
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff f966 	bl	8004e08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3e:	3318      	adds	r3, #24
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff f961 	bl	8004e08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	2200      	movs	r2, #0
 8005b60:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	69b8      	ldr	r0, [r7, #24]
 8005b70:	f001 f966 	bl	8006e40 <pxPortInitialiseStack>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b86:	bf00      	nop
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b98:	f001 fa86 	bl	80070a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8005c54 <prvAddNewTaskToReadyList+0xc4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8005c54 <prvAddNewTaskToReadyList+0xc4>)
 8005ba4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8005c58 <prvAddNewTaskToReadyList+0xc8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bae:	4a2a      	ldr	r2, [pc, #168]	@ (8005c58 <prvAddNewTaskToReadyList+0xc8>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bb4:	4b27      	ldr	r3, [pc, #156]	@ (8005c54 <prvAddNewTaskToReadyList+0xc4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d110      	bne.n	8005bde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005bbc:	f000 fc46 	bl	800644c <prvInitialiseTaskLists>
 8005bc0:	e00d      	b.n	8005bde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005bc2:	4b26      	ldr	r3, [pc, #152]	@ (8005c5c <prvAddNewTaskToReadyList+0xcc>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bca:	4b23      	ldr	r3, [pc, #140]	@ (8005c58 <prvAddNewTaskToReadyList+0xc8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d802      	bhi.n	8005bde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c58 <prvAddNewTaskToReadyList+0xc8>)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bde:	4b20      	ldr	r3, [pc, #128]	@ (8005c60 <prvAddNewTaskToReadyList+0xd0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c60 <prvAddNewTaskToReadyList+0xd0>)
 8005be6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005be8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c60 <prvAddNewTaskToReadyList+0xd0>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c64 <prvAddNewTaskToReadyList+0xd4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d903      	bls.n	8005c04 <prvAddNewTaskToReadyList+0x74>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	4a18      	ldr	r2, [pc, #96]	@ (8005c64 <prvAddNewTaskToReadyList+0xd4>)
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4a15      	ldr	r2, [pc, #84]	@ (8005c68 <prvAddNewTaskToReadyList+0xd8>)
 8005c12:	441a      	add	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3304      	adds	r3, #4
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f7ff f901 	bl	8004e22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c20:	f001 fa74 	bl	800710c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c24:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <prvAddNewTaskToReadyList+0xcc>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00e      	beq.n	8005c4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c58 <prvAddNewTaskToReadyList+0xc8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d207      	bcs.n	8005c4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c6c <prvAddNewTaskToReadyList+0xdc>)
 8005c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c4a:	bf00      	nop
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20008910 	.word	0x20008910
 8005c58:	2000843c 	.word	0x2000843c
 8005c5c:	2000891c 	.word	0x2000891c
 8005c60:	2000892c 	.word	0x2000892c
 8005c64:	20008918 	.word	0x20008918
 8005c68:	20008440 	.word	0x20008440
 8005c6c:	e000ed04 	.word	0xe000ed04

08005c70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c82:	4b14      	ldr	r3, [pc, #80]	@ (8005cd4 <vTaskDelay+0x64>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00b      	beq.n	8005ca2 <vTaskDelay+0x32>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	60bb      	str	r3, [r7, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ca2:	f000 f883 	bl	8005dac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fd1b 	bl	80066e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cae:	f000 f88b 	bl	8005dc8 <xTaskResumeAll>
 8005cb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d107      	bne.n	8005cca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005cba:	4b07      	ldr	r3, [pc, #28]	@ (8005cd8 <vTaskDelay+0x68>)
 8005cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20008938 	.word	0x20008938
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	@ 0x28
 8005ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cea:	463a      	mov	r2, r7
 8005cec:	1d39      	adds	r1, r7, #4
 8005cee:	f107 0308 	add.w	r3, r7, #8
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff f834 	bl	8004d60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	9202      	str	r2, [sp, #8]
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	2300      	movs	r3, #0
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	2300      	movs	r3, #0
 8005d08:	460a      	mov	r2, r1
 8005d0a:	4922      	ldr	r1, [pc, #136]	@ (8005d94 <vTaskStartScheduler+0xb8>)
 8005d0c:	4822      	ldr	r0, [pc, #136]	@ (8005d98 <vTaskStartScheduler+0xbc>)
 8005d0e:	f7ff fe09 	bl	8005924 <xTaskCreateStatic>
 8005d12:	4603      	mov	r3, r0
 8005d14:	4a21      	ldr	r2, [pc, #132]	@ (8005d9c <vTaskStartScheduler+0xc0>)
 8005d16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d18:	4b20      	ldr	r3, [pc, #128]	@ (8005d9c <vTaskStartScheduler+0xc0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d20:	2301      	movs	r3, #1
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	e001      	b.n	8005d2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d102      	bne.n	8005d36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d30:	f000 fd2c 	bl	800678c <xTimerCreateTimerTask>
 8005d34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d116      	bne.n	8005d6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	613b      	str	r3, [r7, #16]
}
 8005d4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d50:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <vTaskStartScheduler+0xc4>)
 8005d52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d58:	4b12      	ldr	r3, [pc, #72]	@ (8005da4 <vTaskStartScheduler+0xc8>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d5e:	4b12      	ldr	r3, [pc, #72]	@ (8005da8 <vTaskStartScheduler+0xcc>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d64:	f001 f8fc 	bl	8006f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d68:	e00f      	b.n	8005d8a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d70:	d10b      	bne.n	8005d8a <vTaskStartScheduler+0xae>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	60fb      	str	r3, [r7, #12]
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	e7fd      	b.n	8005d86 <vTaskStartScheduler+0xaa>
}
 8005d8a:	bf00      	nop
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	0801693c 	.word	0x0801693c
 8005d98:	0800641d 	.word	0x0800641d
 8005d9c:	20008934 	.word	0x20008934
 8005da0:	20008930 	.word	0x20008930
 8005da4:	2000891c 	.word	0x2000891c
 8005da8:	20008914 	.word	0x20008914

08005dac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005db0:	4b04      	ldr	r3, [pc, #16]	@ (8005dc4 <vTaskSuspendAll+0x18>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	4a03      	ldr	r2, [pc, #12]	@ (8005dc4 <vTaskSuspendAll+0x18>)
 8005db8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005dba:	bf00      	nop
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	20008938 	.word	0x20008938

08005dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dd6:	4b42      	ldr	r3, [pc, #264]	@ (8005ee0 <xTaskResumeAll+0x118>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <xTaskResumeAll+0x2e>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	603b      	str	r3, [r7, #0]
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	e7fd      	b.n	8005df2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005df6:	f001 f957 	bl	80070a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dfa:	4b39      	ldr	r3, [pc, #228]	@ (8005ee0 <xTaskResumeAll+0x118>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	4a37      	ldr	r2, [pc, #220]	@ (8005ee0 <xTaskResumeAll+0x118>)
 8005e02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e04:	4b36      	ldr	r3, [pc, #216]	@ (8005ee0 <xTaskResumeAll+0x118>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d162      	bne.n	8005ed2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e0c:	4b35      	ldr	r3, [pc, #212]	@ (8005ee4 <xTaskResumeAll+0x11c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d05e      	beq.n	8005ed2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e14:	e02f      	b.n	8005e76 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e16:	4b34      	ldr	r3, [pc, #208]	@ (8005ee8 <xTaskResumeAll+0x120>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3318      	adds	r3, #24
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f85a 	bl	8004edc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff f855 	bl	8004edc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e36:	4b2d      	ldr	r3, [pc, #180]	@ (8005eec <xTaskResumeAll+0x124>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d903      	bls.n	8005e46 <xTaskResumeAll+0x7e>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e42:	4a2a      	ldr	r2, [pc, #168]	@ (8005eec <xTaskResumeAll+0x124>)
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4a27      	ldr	r2, [pc, #156]	@ (8005ef0 <xTaskResumeAll+0x128>)
 8005e54:	441a      	add	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	f7fe ffe0 	bl	8004e22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e66:	4b23      	ldr	r3, [pc, #140]	@ (8005ef4 <xTaskResumeAll+0x12c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d302      	bcc.n	8005e76 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005e70:	4b21      	ldr	r3, [pc, #132]	@ (8005ef8 <xTaskResumeAll+0x130>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e76:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee8 <xTaskResumeAll+0x120>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1cb      	bne.n	8005e16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e84:	f000 fb80 	bl	8006588 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e88:	4b1c      	ldr	r3, [pc, #112]	@ (8005efc <xTaskResumeAll+0x134>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d010      	beq.n	8005eb6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e94:	f000 f846 	bl	8005f24 <xTaskIncrementTick>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e9e:	4b16      	ldr	r3, [pc, #88]	@ (8005ef8 <xTaskResumeAll+0x130>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f1      	bne.n	8005e94 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005eb0:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <xTaskResumeAll+0x134>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005eb6:	4b10      	ldr	r3, [pc, #64]	@ (8005ef8 <xTaskResumeAll+0x130>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8005f00 <xTaskResumeAll+0x138>)
 8005ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ed2:	f001 f91b 	bl	800710c <vPortExitCritical>

	return xAlreadyYielded;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20008938 	.word	0x20008938
 8005ee4:	20008910 	.word	0x20008910
 8005ee8:	200088d0 	.word	0x200088d0
 8005eec:	20008918 	.word	0x20008918
 8005ef0:	20008440 	.word	0x20008440
 8005ef4:	2000843c 	.word	0x2000843c
 8005ef8:	20008924 	.word	0x20008924
 8005efc:	20008920 	.word	0x20008920
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f0a:	4b05      	ldr	r3, [pc, #20]	@ (8005f20 <xTaskGetTickCount+0x1c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f10:	687b      	ldr	r3, [r7, #4]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20008914 	.word	0x20008914

08005f24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800606c <xTaskIncrementTick+0x148>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 8090 	bne.w	8006058 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f38:	4b4d      	ldr	r3, [pc, #308]	@ (8006070 <xTaskIncrementTick+0x14c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f40:	4a4b      	ldr	r2, [pc, #300]	@ (8006070 <xTaskIncrementTick+0x14c>)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d121      	bne.n	8005f90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f4c:	4b49      	ldr	r3, [pc, #292]	@ (8006074 <xTaskIncrementTick+0x150>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	603b      	str	r3, [r7, #0]
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	e7fd      	b.n	8005f6a <xTaskIncrementTick+0x46>
 8005f6e:	4b41      	ldr	r3, [pc, #260]	@ (8006074 <xTaskIncrementTick+0x150>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	4b40      	ldr	r3, [pc, #256]	@ (8006078 <xTaskIncrementTick+0x154>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a3e      	ldr	r2, [pc, #248]	@ (8006074 <xTaskIncrementTick+0x150>)
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8006078 <xTaskIncrementTick+0x154>)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	4b3e      	ldr	r3, [pc, #248]	@ (800607c <xTaskIncrementTick+0x158>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3301      	adds	r3, #1
 8005f88:	4a3c      	ldr	r2, [pc, #240]	@ (800607c <xTaskIncrementTick+0x158>)
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	f000 fafc 	bl	8006588 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f90:	4b3b      	ldr	r3, [pc, #236]	@ (8006080 <xTaskIncrementTick+0x15c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d349      	bcc.n	800602e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f9a:	4b36      	ldr	r3, [pc, #216]	@ (8006074 <xTaskIncrementTick+0x150>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa4:	4b36      	ldr	r3, [pc, #216]	@ (8006080 <xTaskIncrementTick+0x15c>)
 8005fa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005faa:	601a      	str	r2, [r3, #0]
					break;
 8005fac:	e03f      	b.n	800602e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fae:	4b31      	ldr	r3, [pc, #196]	@ (8006074 <xTaskIncrementTick+0x150>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d203      	bcs.n	8005fce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8006080 <xTaskIncrementTick+0x15c>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fcc:	e02f      	b.n	800602e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe ff82 	bl	8004edc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe ff79 	bl	8004edc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fee:	4b25      	ldr	r3, [pc, #148]	@ (8006084 <xTaskIncrementTick+0x160>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d903      	bls.n	8005ffe <xTaskIncrementTick+0xda>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffa:	4a22      	ldr	r2, [pc, #136]	@ (8006084 <xTaskIncrementTick+0x160>)
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4a1f      	ldr	r2, [pc, #124]	@ (8006088 <xTaskIncrementTick+0x164>)
 800600c:	441a      	add	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	3304      	adds	r3, #4
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f7fe ff04 	bl	8004e22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601e:	4b1b      	ldr	r3, [pc, #108]	@ (800608c <xTaskIncrementTick+0x168>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006024:	429a      	cmp	r2, r3
 8006026:	d3b8      	bcc.n	8005f9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006028:	2301      	movs	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800602c:	e7b5      	b.n	8005f9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800602e:	4b17      	ldr	r3, [pc, #92]	@ (800608c <xTaskIncrementTick+0x168>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006034:	4914      	ldr	r1, [pc, #80]	@ (8006088 <xTaskIncrementTick+0x164>)
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d901      	bls.n	800604a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006046:	2301      	movs	r3, #1
 8006048:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800604a:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <xTaskIncrementTick+0x16c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006052:	2301      	movs	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	e004      	b.n	8006062 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006058:	4b0e      	ldr	r3, [pc, #56]	@ (8006094 <xTaskIncrementTick+0x170>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	4a0d      	ldr	r2, [pc, #52]	@ (8006094 <xTaskIncrementTick+0x170>)
 8006060:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006062:	697b      	ldr	r3, [r7, #20]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20008938 	.word	0x20008938
 8006070:	20008914 	.word	0x20008914
 8006074:	200088c8 	.word	0x200088c8
 8006078:	200088cc 	.word	0x200088cc
 800607c:	20008928 	.word	0x20008928
 8006080:	20008930 	.word	0x20008930
 8006084:	20008918 	.word	0x20008918
 8006088:	20008440 	.word	0x20008440
 800608c:	2000843c 	.word	0x2000843c
 8006090:	20008924 	.word	0x20008924
 8006094:	20008920 	.word	0x20008920

08006098 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800609e:	4b28      	ldr	r3, [pc, #160]	@ (8006140 <vTaskSwitchContext+0xa8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060a6:	4b27      	ldr	r3, [pc, #156]	@ (8006144 <vTaskSwitchContext+0xac>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060ac:	e042      	b.n	8006134 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80060ae:	4b25      	ldr	r3, [pc, #148]	@ (8006144 <vTaskSwitchContext+0xac>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b4:	4b24      	ldr	r3, [pc, #144]	@ (8006148 <vTaskSwitchContext+0xb0>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	e011      	b.n	80060e0 <vTaskSwitchContext+0x48>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <vTaskSwitchContext+0x42>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	607b      	str	r3, [r7, #4]
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	e7fd      	b.n	80060d6 <vTaskSwitchContext+0x3e>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3b01      	subs	r3, #1
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	491a      	ldr	r1, [pc, #104]	@ (800614c <vTaskSwitchContext+0xb4>)
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0e3      	beq.n	80060bc <vTaskSwitchContext+0x24>
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4a13      	ldr	r2, [pc, #76]	@ (800614c <vTaskSwitchContext+0xb4>)
 8006100:	4413      	add	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	605a      	str	r2, [r3, #4]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3308      	adds	r3, #8
 8006116:	429a      	cmp	r2, r3
 8006118:	d104      	bne.n	8006124 <vTaskSwitchContext+0x8c>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	605a      	str	r2, [r3, #4]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	4a09      	ldr	r2, [pc, #36]	@ (8006150 <vTaskSwitchContext+0xb8>)
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4a06      	ldr	r2, [pc, #24]	@ (8006148 <vTaskSwitchContext+0xb0>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6013      	str	r3, [r2, #0]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	20008938 	.word	0x20008938
 8006144:	20008924 	.word	0x20008924
 8006148:	20008918 	.word	0x20008918
 800614c:	20008440 	.word	0x20008440
 8006150:	2000843c 	.word	0x2000843c

08006154 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60fb      	str	r3, [r7, #12]
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	e7fd      	b.n	8006178 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800617c:	4b07      	ldr	r3, [pc, #28]	@ (800619c <vTaskPlaceOnEventList+0x48>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3318      	adds	r3, #24
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fe fe70 	bl	8004e6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800618a:	2101      	movs	r1, #1
 800618c:	6838      	ldr	r0, [r7, #0]
 800618e:	f000 faa9 	bl	80066e4 <prvAddCurrentTaskToDelayedList>
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	2000843c 	.word	0x2000843c

080061a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	617b      	str	r3, [r7, #20]
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061ca:	4b0a      	ldr	r3, [pc, #40]	@ (80061f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3318      	adds	r3, #24
 80061d0:	4619      	mov	r1, r3
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7fe fe25 	bl	8004e22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80061de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	68b8      	ldr	r0, [r7, #8]
 80061e8:	f000 fa7c 	bl	80066e4 <prvAddCurrentTaskToDelayedList>
	}
 80061ec:	bf00      	nop
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	2000843c 	.word	0x2000843c

080061f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	60fb      	str	r3, [r7, #12]
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	e7fd      	b.n	8006222 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3318      	adds	r3, #24
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fe56 	bl	8004edc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006230:	4b1d      	ldr	r3, [pc, #116]	@ (80062a8 <xTaskRemoveFromEventList+0xb0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d11d      	bne.n	8006274 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	3304      	adds	r3, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe fe4d 	bl	8004edc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006246:	4b19      	ldr	r3, [pc, #100]	@ (80062ac <xTaskRemoveFromEventList+0xb4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d903      	bls.n	8006256 <xTaskRemoveFromEventList+0x5e>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	4a16      	ldr	r2, [pc, #88]	@ (80062ac <xTaskRemoveFromEventList+0xb4>)
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4a13      	ldr	r2, [pc, #76]	@ (80062b0 <xTaskRemoveFromEventList+0xb8>)
 8006264:	441a      	add	r2, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7fe fdd8 	bl	8004e22 <vListInsertEnd>
 8006272:	e005      	b.n	8006280 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	3318      	adds	r3, #24
 8006278:	4619      	mov	r1, r3
 800627a:	480e      	ldr	r0, [pc, #56]	@ (80062b4 <xTaskRemoveFromEventList+0xbc>)
 800627c:	f7fe fdd1 	bl	8004e22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006284:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <xTaskRemoveFromEventList+0xc0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628a:	429a      	cmp	r2, r3
 800628c:	d905      	bls.n	800629a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800628e:	2301      	movs	r3, #1
 8006290:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006292:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <xTaskRemoveFromEventList+0xc4>)
 8006294:	2201      	movs	r2, #1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e001      	b.n	800629e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800629e:	697b      	ldr	r3, [r7, #20]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20008938 	.word	0x20008938
 80062ac:	20008918 	.word	0x20008918
 80062b0:	20008440 	.word	0x20008440
 80062b4:	200088d0 	.word	0x200088d0
 80062b8:	2000843c 	.word	0x2000843c
 80062bc:	20008924 	.word	0x20008924

080062c0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	60fb      	str	r3, [r7, #12]
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80062e6:	f000 fedf 	bl	80070a8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062ea:	4b07      	ldr	r3, [pc, #28]	@ (8006308 <vTaskSetTimeOutState+0x48>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80062f2:	4b06      	ldr	r3, [pc, #24]	@ (800630c <vTaskSetTimeOutState+0x4c>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80062fa:	f000 ff07 	bl	800710c <vPortExitCritical>
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20008928 	.word	0x20008928
 800630c:	20008914 	.word	0x20008914

08006310 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006318:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <vTaskInternalSetTimeOutState+0x24>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006320:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <vTaskInternalSetTimeOutState+0x28>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20008928 	.word	0x20008928
 8006338:	20008914 	.word	0x20008914

0800633c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	613b      	str	r3, [r7, #16]
}
 800635e:	bf00      	nop
 8006360:	bf00      	nop
 8006362:	e7fd      	b.n	8006360 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	60fb      	str	r3, [r7, #12]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006382:	f000 fe91 	bl	80070a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006386:	4b1d      	ldr	r3, [pc, #116]	@ (80063fc <xTaskCheckForTimeOut+0xc0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800639e:	d102      	bne.n	80063a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e023      	b.n	80063ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b15      	ldr	r3, [pc, #84]	@ (8006400 <xTaskCheckForTimeOut+0xc4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d007      	beq.n	80063c2 <xTaskCheckForTimeOut+0x86>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d302      	bcc.n	80063c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063bc:	2301      	movs	r3, #1
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	e015      	b.n	80063ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d20b      	bcs.n	80063e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	1ad2      	subs	r2, r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff ff99 	bl	8006310 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	e004      	b.n	80063ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063ea:	2301      	movs	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063ee:	f000 fe8d 	bl	800710c <vPortExitCritical>

	return xReturn;
 80063f2:	69fb      	ldr	r3, [r7, #28]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20008914 	.word	0x20008914
 8006400:	20008928 	.word	0x20008928

08006404 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006408:	4b03      	ldr	r3, [pc, #12]	@ (8006418 <vTaskMissedYield+0x14>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
}
 800640e:	bf00      	nop
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	20008924 	.word	0x20008924

0800641c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006424:	f000 f852 	bl	80064cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006428:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <prvIdleTask+0x28>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d9f9      	bls.n	8006424 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006430:	4b05      	ldr	r3, [pc, #20]	@ (8006448 <prvIdleTask+0x2c>)
 8006432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006440:	e7f0      	b.n	8006424 <prvIdleTask+0x8>
 8006442:	bf00      	nop
 8006444:	20008440 	.word	0x20008440
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	e00c      	b.n	8006472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4a12      	ldr	r2, [pc, #72]	@ (80064ac <prvInitialiseTaskLists+0x60>)
 8006464:	4413      	add	r3, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fcae 	bl	8004dc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3301      	adds	r3, #1
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b37      	cmp	r3, #55	@ 0x37
 8006476:	d9ef      	bls.n	8006458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006478:	480d      	ldr	r0, [pc, #52]	@ (80064b0 <prvInitialiseTaskLists+0x64>)
 800647a:	f7fe fca5 	bl	8004dc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800647e:	480d      	ldr	r0, [pc, #52]	@ (80064b4 <prvInitialiseTaskLists+0x68>)
 8006480:	f7fe fca2 	bl	8004dc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006484:	480c      	ldr	r0, [pc, #48]	@ (80064b8 <prvInitialiseTaskLists+0x6c>)
 8006486:	f7fe fc9f 	bl	8004dc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800648a:	480c      	ldr	r0, [pc, #48]	@ (80064bc <prvInitialiseTaskLists+0x70>)
 800648c:	f7fe fc9c 	bl	8004dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006490:	480b      	ldr	r0, [pc, #44]	@ (80064c0 <prvInitialiseTaskLists+0x74>)
 8006492:	f7fe fc99 	bl	8004dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006496:	4b0b      	ldr	r3, [pc, #44]	@ (80064c4 <prvInitialiseTaskLists+0x78>)
 8006498:	4a05      	ldr	r2, [pc, #20]	@ (80064b0 <prvInitialiseTaskLists+0x64>)
 800649a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800649c:	4b0a      	ldr	r3, [pc, #40]	@ (80064c8 <prvInitialiseTaskLists+0x7c>)
 800649e:	4a05      	ldr	r2, [pc, #20]	@ (80064b4 <prvInitialiseTaskLists+0x68>)
 80064a0:	601a      	str	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20008440 	.word	0x20008440
 80064b0:	200088a0 	.word	0x200088a0
 80064b4:	200088b4 	.word	0x200088b4
 80064b8:	200088d0 	.word	0x200088d0
 80064bc:	200088e4 	.word	0x200088e4
 80064c0:	200088fc 	.word	0x200088fc
 80064c4:	200088c8 	.word	0x200088c8
 80064c8:	200088cc 	.word	0x200088cc

080064cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064d2:	e019      	b.n	8006508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064d4:	f000 fde8 	bl	80070a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d8:	4b10      	ldr	r3, [pc, #64]	@ (800651c <prvCheckTasksWaitingTermination+0x50>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe fcf9 	bl	8004edc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <prvCheckTasksWaitingTermination+0x54>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006520 <prvCheckTasksWaitingTermination+0x54>)
 80064f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <prvCheckTasksWaitingTermination+0x58>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006524 <prvCheckTasksWaitingTermination+0x58>)
 80064fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064fe:	f000 fe05 	bl	800710c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f810 	bl	8006528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006508:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <prvCheckTasksWaitingTermination+0x58>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e1      	bne.n	80064d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200088e4 	.word	0x200088e4
 8006520:	20008910 	.word	0x20008910
 8006524:	200088f8 	.word	0x200088f8

08006528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006536:	2b00      	cmp	r3, #0
 8006538:	d108      	bne.n	800654c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	4618      	mov	r0, r3
 8006540:	f000 ffa2 	bl	8007488 <vPortFree>
				vPortFree( pxTCB );
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 ff9f 	bl	8007488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800654a:	e019      	b.n	8006580 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006552:	2b01      	cmp	r3, #1
 8006554:	d103      	bne.n	800655e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 ff96 	bl	8007488 <vPortFree>
	}
 800655c:	e010      	b.n	8006580 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006564:	2b02      	cmp	r3, #2
 8006566:	d00b      	beq.n	8006580 <prvDeleteTCB+0x58>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	60fb      	str	r3, [r7, #12]
}
 800657a:	bf00      	nop
 800657c:	bf00      	nop
 800657e:	e7fd      	b.n	800657c <prvDeleteTCB+0x54>
	}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800658e:	4b0c      	ldr	r3, [pc, #48]	@ (80065c0 <prvResetNextTaskUnblockTime+0x38>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006598:	4b0a      	ldr	r3, [pc, #40]	@ (80065c4 <prvResetNextTaskUnblockTime+0x3c>)
 800659a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800659e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065a0:	e008      	b.n	80065b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a2:	4b07      	ldr	r3, [pc, #28]	@ (80065c0 <prvResetNextTaskUnblockTime+0x38>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	4a04      	ldr	r2, [pc, #16]	@ (80065c4 <prvResetNextTaskUnblockTime+0x3c>)
 80065b2:	6013      	str	r3, [r2, #0]
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	200088c8 	.word	0x200088c8
 80065c4:	20008930 	.word	0x20008930

080065c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065ce:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <xTaskGetSchedulerState+0x34>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065d6:	2301      	movs	r3, #1
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	e008      	b.n	80065ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065dc:	4b08      	ldr	r3, [pc, #32]	@ (8006600 <xTaskGetSchedulerState+0x38>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065e4:	2302      	movs	r3, #2
 80065e6:	607b      	str	r3, [r7, #4]
 80065e8:	e001      	b.n	80065ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065ea:	2300      	movs	r3, #0
 80065ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065ee:	687b      	ldr	r3, [r7, #4]
	}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	2000891c 	.word	0x2000891c
 8006600:	20008938 	.word	0x20008938

08006604 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d058      	beq.n	80066cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800661a:	4b2f      	ldr	r3, [pc, #188]	@ (80066d8 <xTaskPriorityDisinherit+0xd4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	429a      	cmp	r2, r3
 8006622:	d00b      	beq.n	800663c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	60fb      	str	r3, [r7, #12]
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	e7fd      	b.n	8006638 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10b      	bne.n	800665c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60bb      	str	r3, [r7, #8]
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006660:	1e5a      	subs	r2, r3, #1
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666e:	429a      	cmp	r2, r3
 8006670:	d02c      	beq.n	80066cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006676:	2b00      	cmp	r3, #0
 8006678:	d128      	bne.n	80066cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	3304      	adds	r3, #4
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fc2c 	bl	8004edc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006690:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669c:	4b0f      	ldr	r3, [pc, #60]	@ (80066dc <xTaskPriorityDisinherit+0xd8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d903      	bls.n	80066ac <xTaskPriorityDisinherit+0xa8>
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	4a0c      	ldr	r2, [pc, #48]	@ (80066dc <xTaskPriorityDisinherit+0xd8>)
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4a09      	ldr	r2, [pc, #36]	@ (80066e0 <xTaskPriorityDisinherit+0xdc>)
 80066ba:	441a      	add	r2, r3
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	3304      	adds	r3, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f7fe fbad 	bl	8004e22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066cc:	697b      	ldr	r3, [r7, #20]
	}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2000843c 	.word	0x2000843c
 80066dc:	20008918 	.word	0x20008918
 80066e0:	20008440 	.word	0x20008440

080066e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066ee:	4b21      	ldr	r3, [pc, #132]	@ (8006774 <prvAddCurrentTaskToDelayedList+0x90>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066f4:	4b20      	ldr	r3, [pc, #128]	@ (8006778 <prvAddCurrentTaskToDelayedList+0x94>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3304      	adds	r3, #4
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe fbee 	bl	8004edc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006706:	d10a      	bne.n	800671e <prvAddCurrentTaskToDelayedList+0x3a>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800670e:	4b1a      	ldr	r3, [pc, #104]	@ (8006778 <prvAddCurrentTaskToDelayedList+0x94>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4819      	ldr	r0, [pc, #100]	@ (800677c <prvAddCurrentTaskToDelayedList+0x98>)
 8006718:	f7fe fb83 	bl	8004e22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800671c:	e026      	b.n	800676c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4413      	add	r3, r2
 8006724:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006726:	4b14      	ldr	r3, [pc, #80]	@ (8006778 <prvAddCurrentTaskToDelayedList+0x94>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	429a      	cmp	r2, r3
 8006734:	d209      	bcs.n	800674a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006736:	4b12      	ldr	r3, [pc, #72]	@ (8006780 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b0f      	ldr	r3, [pc, #60]	@ (8006778 <prvAddCurrentTaskToDelayedList+0x94>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f7fe fb91 	bl	8004e6a <vListInsert>
}
 8006748:	e010      	b.n	800676c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800674a:	4b0e      	ldr	r3, [pc, #56]	@ (8006784 <prvAddCurrentTaskToDelayedList+0xa0>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4b0a      	ldr	r3, [pc, #40]	@ (8006778 <prvAddCurrentTaskToDelayedList+0x94>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3304      	adds	r3, #4
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f7fe fb87 	bl	8004e6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800675c:	4b0a      	ldr	r3, [pc, #40]	@ (8006788 <prvAddCurrentTaskToDelayedList+0xa4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	429a      	cmp	r2, r3
 8006764:	d202      	bcs.n	800676c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006766:	4a08      	ldr	r2, [pc, #32]	@ (8006788 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	6013      	str	r3, [r2, #0]
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20008914 	.word	0x20008914
 8006778:	2000843c 	.word	0x2000843c
 800677c:	200088fc 	.word	0x200088fc
 8006780:	200088cc 	.word	0x200088cc
 8006784:	200088c8 	.word	0x200088c8
 8006788:	20008930 	.word	0x20008930

0800678c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08a      	sub	sp, #40	@ 0x28
 8006790:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006796:	f000 fb13 	bl	8006dc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800679a:	4b1d      	ldr	r3, [pc, #116]	@ (8006810 <xTimerCreateTimerTask+0x84>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d021      	beq.n	80067e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067aa:	1d3a      	adds	r2, r7, #4
 80067ac:	f107 0108 	add.w	r1, r7, #8
 80067b0:	f107 030c 	add.w	r3, r7, #12
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fe faed 	bl	8004d94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	9202      	str	r2, [sp, #8]
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	2302      	movs	r3, #2
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	2300      	movs	r3, #0
 80067ca:	460a      	mov	r2, r1
 80067cc:	4911      	ldr	r1, [pc, #68]	@ (8006814 <xTimerCreateTimerTask+0x88>)
 80067ce:	4812      	ldr	r0, [pc, #72]	@ (8006818 <xTimerCreateTimerTask+0x8c>)
 80067d0:	f7ff f8a8 	bl	8005924 <xTaskCreateStatic>
 80067d4:	4603      	mov	r3, r0
 80067d6:	4a11      	ldr	r2, [pc, #68]	@ (800681c <xTimerCreateTimerTask+0x90>)
 80067d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80067da:	4b10      	ldr	r3, [pc, #64]	@ (800681c <xTimerCreateTimerTask+0x90>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80067e2:	2301      	movs	r3, #1
 80067e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10b      	bne.n	8006804 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	613b      	str	r3, [r7, #16]
}
 80067fe:	bf00      	nop
 8006800:	bf00      	nop
 8006802:	e7fd      	b.n	8006800 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006804:	697b      	ldr	r3, [r7, #20]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	2000896c 	.word	0x2000896c
 8006814:	08016944 	.word	0x08016944
 8006818:	08006959 	.word	0x08006959
 800681c:	20008970 	.word	0x20008970

08006820 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	@ 0x28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800682e:	2300      	movs	r3, #0
 8006830:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <xTimerGenericCommand+0x30>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	623b      	str	r3, [r7, #32]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006850:	4b19      	ldr	r3, [pc, #100]	@ (80068b8 <xTimerGenericCommand+0x98>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d02a      	beq.n	80068ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b05      	cmp	r3, #5
 8006868:	dc18      	bgt.n	800689c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800686a:	f7ff fead 	bl	80065c8 <xTaskGetSchedulerState>
 800686e:	4603      	mov	r3, r0
 8006870:	2b02      	cmp	r3, #2
 8006872:	d109      	bne.n	8006888 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006874:	4b10      	ldr	r3, [pc, #64]	@ (80068b8 <xTimerGenericCommand+0x98>)
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	f107 0110 	add.w	r1, r7, #16
 800687c:	2300      	movs	r3, #0
 800687e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006880:	f7fe fc60 	bl	8005144 <xQueueGenericSend>
 8006884:	6278      	str	r0, [r7, #36]	@ 0x24
 8006886:	e012      	b.n	80068ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006888:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <xTimerGenericCommand+0x98>)
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	f107 0110 	add.w	r1, r7, #16
 8006890:	2300      	movs	r3, #0
 8006892:	2200      	movs	r2, #0
 8006894:	f7fe fc56 	bl	8005144 <xQueueGenericSend>
 8006898:	6278      	str	r0, [r7, #36]	@ 0x24
 800689a:	e008      	b.n	80068ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800689c:	4b06      	ldr	r3, [pc, #24]	@ (80068b8 <xTimerGenericCommand+0x98>)
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	f107 0110 	add.w	r1, r7, #16
 80068a4:	2300      	movs	r3, #0
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	f7fe fd4e 	bl	8005348 <xQueueGenericSendFromISR>
 80068ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3728      	adds	r7, #40	@ 0x28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	2000896c 	.word	0x2000896c

080068bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c6:	4b23      	ldr	r3, [pc, #140]	@ (8006954 <prvProcessExpiredTimer+0x98>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe fb01 	bl	8004edc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d023      	beq.n	8006930 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	699a      	ldr	r2, [r3, #24]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	18d1      	adds	r1, r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	6978      	ldr	r0, [r7, #20]
 80068f6:	f000 f8d5 	bl	8006aa4 <prvInsertTimerInActiveList>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d020      	beq.n	8006942 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006900:	2300      	movs	r3, #0
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	2100      	movs	r1, #0
 800690a:	6978      	ldr	r0, [r7, #20]
 800690c:	f7ff ff88 	bl	8006820 <xTimerGenericCommand>
 8006910:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d114      	bne.n	8006942 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	60fb      	str	r3, [r7, #12]
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	e7fd      	b.n	800692c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	6978      	ldr	r0, [r7, #20]
 8006948:	4798      	blx	r3
}
 800694a:	bf00      	nop
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20008964 	.word	0x20008964

08006958 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006960:	f107 0308 	add.w	r3, r7, #8
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f859 	bl	8006a1c <prvGetNextExpireTime>
 800696a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4619      	mov	r1, r3
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f805 	bl	8006980 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006976:	f000 f8d7 	bl	8006b28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800697a:	bf00      	nop
 800697c:	e7f0      	b.n	8006960 <prvTimerTask+0x8>
	...

08006980 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800698a:	f7ff fa0f 	bl	8005dac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800698e:	f107 0308 	add.w	r3, r7, #8
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f866 	bl	8006a64 <prvSampleTimeNow>
 8006998:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d130      	bne.n	8006a02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <prvProcessTimerOrBlockTask+0x3c>
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d806      	bhi.n	80069bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069ae:	f7ff fa0b 	bl	8005dc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff ff81 	bl	80068bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069ba:	e024      	b.n	8006a06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d008      	beq.n	80069d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069c2:	4b13      	ldr	r3, [pc, #76]	@ (8006a10 <prvProcessTimerOrBlockTask+0x90>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <prvProcessTimerOrBlockTask+0x50>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <prvProcessTimerOrBlockTask+0x52>
 80069d0:	2300      	movs	r3, #0
 80069d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006a14 <prvProcessTimerOrBlockTask+0x94>)
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4619      	mov	r1, r3
 80069e2:	f7fe ff6b 	bl	80058bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80069e6:	f7ff f9ef 	bl	8005dc8 <xTaskResumeAll>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80069f0:	4b09      	ldr	r3, [pc, #36]	@ (8006a18 <prvProcessTimerOrBlockTask+0x98>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
}
 8006a00:	e001      	b.n	8006a06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a02:	f7ff f9e1 	bl	8005dc8 <xTaskResumeAll>
}
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20008968 	.word	0x20008968
 8006a14:	2000896c 	.word	0x2000896c
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a24:	4b0e      	ldr	r3, [pc, #56]	@ (8006a60 <prvGetNextExpireTime+0x44>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <prvGetNextExpireTime+0x16>
 8006a2e:	2201      	movs	r2, #1
 8006a30:	e000      	b.n	8006a34 <prvGetNextExpireTime+0x18>
 8006a32:	2200      	movs	r2, #0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a40:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <prvGetNextExpireTime+0x44>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	e001      	b.n	8006a50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a50:	68fb      	ldr	r3, [r7, #12]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20008964 	.word	0x20008964

08006a64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a6c:	f7ff fa4a 	bl	8005f04 <xTaskGetTickCount>
 8006a70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a72:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa0 <prvSampleTimeNow+0x3c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d205      	bcs.n	8006a88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a7c:	f000 f93a 	bl	8006cf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	e002      	b.n	8006a8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a8e:	4a04      	ldr	r2, [pc, #16]	@ (8006aa0 <prvSampleTimeNow+0x3c>)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a94:	68fb      	ldr	r3, [r7, #12]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20008974 	.word	0x20008974

08006aa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d812      	bhi.n	8006af0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e01b      	b.n	8006b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ade:	4b10      	ldr	r3, [pc, #64]	@ (8006b20 <prvInsertTimerInActiveList+0x7c>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f7fe f9be 	bl	8004e6a <vListInsert>
 8006aee:	e012      	b.n	8006b16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d206      	bcs.n	8006b06 <prvInsertTimerInActiveList+0x62>
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d302      	bcc.n	8006b06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e007      	b.n	8006b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b06:	4b07      	ldr	r3, [pc, #28]	@ (8006b24 <prvInsertTimerInActiveList+0x80>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7fe f9aa 	bl	8004e6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b16:	697b      	ldr	r3, [r7, #20]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20008968 	.word	0x20008968
 8006b24:	20008964 	.word	0x20008964

08006b28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	@ 0x38
 8006b2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b2e:	e0ce      	b.n	8006cce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da19      	bge.n	8006b6a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b36:	1d3b      	adds	r3, r7, #4
 8006b38:	3304      	adds	r3, #4
 8006b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10b      	bne.n	8006b5a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	61fb      	str	r3, [r7, #28]
}
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop
 8006b58:	e7fd      	b.n	8006b56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b60:	6850      	ldr	r0, [r2, #4]
 8006b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b64:	6892      	ldr	r2, [r2, #8]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f2c0 80ae 	blt.w	8006cce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	3304      	adds	r3, #4
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe f9aa 	bl	8004edc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b88:	463b      	mov	r3, r7
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff ff6a 	bl	8006a64 <prvSampleTimeNow>
 8006b90:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b09      	cmp	r3, #9
 8006b96:	f200 8097 	bhi.w	8006cc8 <prvProcessReceivedCommands+0x1a0>
 8006b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba0 <prvProcessReceivedCommands+0x78>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bc9 	.word	0x08006bc9
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006bc9 	.word	0x08006bc9
 8006bac:	08006c3f 	.word	0x08006c3f
 8006bb0:	08006c53 	.word	0x08006c53
 8006bb4:	08006c9f 	.word	0x08006c9f
 8006bb8:	08006bc9 	.word	0x08006bc9
 8006bbc:	08006bc9 	.word	0x08006bc9
 8006bc0:	08006c3f 	.word	0x08006c3f
 8006bc4:	08006c53 	.word	0x08006c53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	18d1      	adds	r1, r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006be8:	f7ff ff5c 	bl	8006aa4 <prvInsertTimerInActiveList>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d06c      	beq.n	8006ccc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bf8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d061      	beq.n	8006ccc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	441a      	add	r2, r3
 8006c10:	2300      	movs	r3, #0
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	2300      	movs	r3, #0
 8006c16:	2100      	movs	r1, #0
 8006c18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c1a:	f7ff fe01 	bl	8006820 <xTimerGenericCommand>
 8006c1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d152      	bne.n	8006ccc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	61bb      	str	r3, [r7, #24]
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	e7fd      	b.n	8006c3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006c50:	e03d      	b.n	8006cce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10b      	bne.n	8006c8a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	617b      	str	r3, [r7, #20]
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	e7fd      	b.n	8006c86 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	18d1      	adds	r1, r2, r3
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c98:	f7ff ff04 	bl	8006aa4 <prvInsertTimerInActiveList>
					break;
 8006c9c:	e017      	b.n	8006cce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d103      	bne.n	8006cb4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006cac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cae:	f000 fbeb 	bl	8007488 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cb2:	e00c      	b.n	8006cce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cc6:	e002      	b.n	8006cce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006cc8:	bf00      	nop
 8006cca:	e000      	b.n	8006cce <prvProcessReceivedCommands+0x1a6>
					break;
 8006ccc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cce:	4b08      	ldr	r3, [pc, #32]	@ (8006cf0 <prvProcessReceivedCommands+0x1c8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	1d39      	adds	r1, r7, #4
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fbd4 	bl	8005484 <xQueueReceive>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f47f af26 	bne.w	8006b30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	3730      	adds	r7, #48	@ 0x30
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	2000896c 	.word	0x2000896c

08006cf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cfa:	e049      	b.n	8006d90 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8006db8 <prvSwitchTimerLists+0xc4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d06:	4b2c      	ldr	r3, [pc, #176]	@ (8006db8 <prvSwitchTimerLists+0xc4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe f8e1 	bl	8004edc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d02f      	beq.n	8006d90 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4413      	add	r3, r2
 8006d38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d90e      	bls.n	8006d60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006db8 <prvSwitchTimerLists+0xc4>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3304      	adds	r3, #4
 8006d56:	4619      	mov	r1, r3
 8006d58:	4610      	mov	r0, r2
 8006d5a:	f7fe f886 	bl	8004e6a <vListInsert>
 8006d5e:	e017      	b.n	8006d90 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d60:	2300      	movs	r3, #0
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	2300      	movs	r3, #0
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7ff fd58 	bl	8006820 <xTimerGenericCommand>
 8006d70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10b      	bne.n	8006d90 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	603b      	str	r3, [r7, #0]
}
 8006d8a:	bf00      	nop
 8006d8c:	bf00      	nop
 8006d8e:	e7fd      	b.n	8006d8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d90:	4b09      	ldr	r3, [pc, #36]	@ (8006db8 <prvSwitchTimerLists+0xc4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1b0      	bne.n	8006cfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <prvSwitchTimerLists+0xc4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006da0:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <prvSwitchTimerLists+0xc8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a04      	ldr	r2, [pc, #16]	@ (8006db8 <prvSwitchTimerLists+0xc4>)
 8006da6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006da8:	4a04      	ldr	r2, [pc, #16]	@ (8006dbc <prvSwitchTimerLists+0xc8>)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	6013      	str	r3, [r2, #0]
}
 8006dae:	bf00      	nop
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20008964 	.word	0x20008964
 8006dbc:	20008968 	.word	0x20008968

08006dc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006dc6:	f000 f96f 	bl	80070a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006dca:	4b15      	ldr	r3, [pc, #84]	@ (8006e20 <prvCheckForValidListAndQueue+0x60>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d120      	bne.n	8006e14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006dd2:	4814      	ldr	r0, [pc, #80]	@ (8006e24 <prvCheckForValidListAndQueue+0x64>)
 8006dd4:	f7fd fff8 	bl	8004dc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006dd8:	4813      	ldr	r0, [pc, #76]	@ (8006e28 <prvCheckForValidListAndQueue+0x68>)
 8006dda:	f7fd fff5 	bl	8004dc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006dde:	4b13      	ldr	r3, [pc, #76]	@ (8006e2c <prvCheckForValidListAndQueue+0x6c>)
 8006de0:	4a10      	ldr	r2, [pc, #64]	@ (8006e24 <prvCheckForValidListAndQueue+0x64>)
 8006de2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006de4:	4b12      	ldr	r3, [pc, #72]	@ (8006e30 <prvCheckForValidListAndQueue+0x70>)
 8006de6:	4a10      	ldr	r2, [pc, #64]	@ (8006e28 <prvCheckForValidListAndQueue+0x68>)
 8006de8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006dea:	2300      	movs	r3, #0
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	4b11      	ldr	r3, [pc, #68]	@ (8006e34 <prvCheckForValidListAndQueue+0x74>)
 8006df0:	4a11      	ldr	r2, [pc, #68]	@ (8006e38 <prvCheckForValidListAndQueue+0x78>)
 8006df2:	2110      	movs	r1, #16
 8006df4:	200a      	movs	r0, #10
 8006df6:	f7fe f905 	bl	8005004 <xQueueGenericCreateStatic>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4a08      	ldr	r2, [pc, #32]	@ (8006e20 <prvCheckForValidListAndQueue+0x60>)
 8006dfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e00:	4b07      	ldr	r3, [pc, #28]	@ (8006e20 <prvCheckForValidListAndQueue+0x60>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e08:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <prvCheckForValidListAndQueue+0x60>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	490b      	ldr	r1, [pc, #44]	@ (8006e3c <prvCheckForValidListAndQueue+0x7c>)
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe fd2a 	bl	8005868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e14:	f000 f97a 	bl	800710c <vPortExitCritical>
}
 8006e18:	bf00      	nop
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	2000896c 	.word	0x2000896c
 8006e24:	2000893c 	.word	0x2000893c
 8006e28:	20008950 	.word	0x20008950
 8006e2c:	20008964 	.word	0x20008964
 8006e30:	20008968 	.word	0x20008968
 8006e34:	20008a18 	.word	0x20008a18
 8006e38:	20008978 	.word	0x20008978
 8006e3c:	0801694c 	.word	0x0801694c

08006e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3b04      	subs	r3, #4
 8006e50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3b04      	subs	r3, #4
 8006e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f023 0201 	bic.w	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3b04      	subs	r3, #4
 8006e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e70:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea4 <pxPortInitialiseStack+0x64>)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3b14      	subs	r3, #20
 8006e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3b04      	subs	r3, #4
 8006e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f06f 0202 	mvn.w	r2, #2
 8006e8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3b20      	subs	r3, #32
 8006e94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e96:	68fb      	ldr	r3, [r7, #12]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	08006ea9 	.word	0x08006ea9

08006ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006eb2:	4b13      	ldr	r3, [pc, #76]	@ (8006f00 <prvTaskExitError+0x58>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eba:	d00b      	beq.n	8006ed4 <prvTaskExitError+0x2c>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60fb      	str	r3, [r7, #12]
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <prvTaskExitError+0x28>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	60bb      	str	r3, [r7, #8]
}
 8006ee6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ee8:	bf00      	nop
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0fc      	beq.n	8006eea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000010 	.word	0x20000010
	...

08006f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f10:	4b07      	ldr	r3, [pc, #28]	@ (8006f30 <pxCurrentTCBConst2>)
 8006f12:	6819      	ldr	r1, [r3, #0]
 8006f14:	6808      	ldr	r0, [r1, #0]
 8006f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1a:	f380 8809 	msr	PSP, r0
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f04f 0000 	mov.w	r0, #0
 8006f26:	f380 8811 	msr	BASEPRI, r0
 8006f2a:	4770      	bx	lr
 8006f2c:	f3af 8000 	nop.w

08006f30 <pxCurrentTCBConst2>:
 8006f30:	2000843c 	.word	0x2000843c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop

08006f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f38:	4808      	ldr	r0, [pc, #32]	@ (8006f5c <prvPortStartFirstTask+0x24>)
 8006f3a:	6800      	ldr	r0, [r0, #0]
 8006f3c:	6800      	ldr	r0, [r0, #0]
 8006f3e:	f380 8808 	msr	MSP, r0
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f380 8814 	msr	CONTROL, r0
 8006f4a:	b662      	cpsie	i
 8006f4c:	b661      	cpsie	f
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	df00      	svc	0
 8006f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f5a:	bf00      	nop
 8006f5c:	e000ed08 	.word	0xe000ed08

08006f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f66:	4b47      	ldr	r3, [pc, #284]	@ (8007084 <xPortStartScheduler+0x124>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a47      	ldr	r2, [pc, #284]	@ (8007088 <xPortStartScheduler+0x128>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10b      	bne.n	8006f88 <xPortStartScheduler+0x28>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	613b      	str	r3, [r7, #16]
}
 8006f82:	bf00      	nop
 8006f84:	bf00      	nop
 8006f86:	e7fd      	b.n	8006f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f88:	4b3e      	ldr	r3, [pc, #248]	@ (8007084 <xPortStartScheduler+0x124>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800708c <xPortStartScheduler+0x12c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d10b      	bne.n	8006faa <xPortStartScheduler+0x4a>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	60fb      	str	r3, [r7, #12]
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	e7fd      	b.n	8006fa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006faa:	4b39      	ldr	r3, [pc, #228]	@ (8007090 <xPortStartScheduler+0x130>)
 8006fac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	22ff      	movs	r2, #255	@ 0xff
 8006fba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fc4:	78fb      	ldrb	r3, [r7, #3]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	4b31      	ldr	r3, [pc, #196]	@ (8007094 <xPortStartScheduler+0x134>)
 8006fd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fd2:	4b31      	ldr	r3, [pc, #196]	@ (8007098 <xPortStartScheduler+0x138>)
 8006fd4:	2207      	movs	r2, #7
 8006fd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fd8:	e009      	b.n	8006fee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006fda:	4b2f      	ldr	r3, [pc, #188]	@ (8007098 <xPortStartScheduler+0x138>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8007098 <xPortStartScheduler+0x138>)
 8006fe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fee:	78fb      	ldrb	r3, [r7, #3]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff6:	2b80      	cmp	r3, #128	@ 0x80
 8006ff8:	d0ef      	beq.n	8006fda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ffa:	4b27      	ldr	r3, [pc, #156]	@ (8007098 <xPortStartScheduler+0x138>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f1c3 0307 	rsb	r3, r3, #7
 8007002:	2b04      	cmp	r3, #4
 8007004:	d00b      	beq.n	800701e <xPortStartScheduler+0xbe>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	60bb      	str	r3, [r7, #8]
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	e7fd      	b.n	800701a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800701e:	4b1e      	ldr	r3, [pc, #120]	@ (8007098 <xPortStartScheduler+0x138>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	4a1c      	ldr	r2, [pc, #112]	@ (8007098 <xPortStartScheduler+0x138>)
 8007026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007028:	4b1b      	ldr	r3, [pc, #108]	@ (8007098 <xPortStartScheduler+0x138>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007030:	4a19      	ldr	r2, [pc, #100]	@ (8007098 <xPortStartScheduler+0x138>)
 8007032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800703c:	4b17      	ldr	r3, [pc, #92]	@ (800709c <xPortStartScheduler+0x13c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a16      	ldr	r2, [pc, #88]	@ (800709c <xPortStartScheduler+0x13c>)
 8007042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007048:	4b14      	ldr	r3, [pc, #80]	@ (800709c <xPortStartScheduler+0x13c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a13      	ldr	r2, [pc, #76]	@ (800709c <xPortStartScheduler+0x13c>)
 800704e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007054:	f000 f8da 	bl	800720c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007058:	4b11      	ldr	r3, [pc, #68]	@ (80070a0 <xPortStartScheduler+0x140>)
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800705e:	f000 f8f9 	bl	8007254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007062:	4b10      	ldr	r3, [pc, #64]	@ (80070a4 <xPortStartScheduler+0x144>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a0f      	ldr	r2, [pc, #60]	@ (80070a4 <xPortStartScheduler+0x144>)
 8007068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800706c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800706e:	f7ff ff63 	bl	8006f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007072:	f7ff f811 	bl	8006098 <vTaskSwitchContext>
	prvTaskExitError();
 8007076:	f7ff ff17 	bl	8006ea8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	e000ed00 	.word	0xe000ed00
 8007088:	410fc271 	.word	0x410fc271
 800708c:	410fc270 	.word	0x410fc270
 8007090:	e000e400 	.word	0xe000e400
 8007094:	20008a68 	.word	0x20008a68
 8007098:	20008a6c 	.word	0x20008a6c
 800709c:	e000ed20 	.word	0xe000ed20
 80070a0:	20000010 	.word	0x20000010
 80070a4:	e000ef34 	.word	0xe000ef34

080070a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	607b      	str	r3, [r7, #4]
}
 80070c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070c2:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <vPortEnterCritical+0x5c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3301      	adds	r3, #1
 80070c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007104 <vPortEnterCritical+0x5c>)
 80070ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007104 <vPortEnterCritical+0x5c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d110      	bne.n	80070f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007108 <vPortEnterCritical+0x60>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	603b      	str	r3, [r7, #0]
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	e7fd      	b.n	80070f2 <vPortEnterCritical+0x4a>
	}
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000010 	.word	0x20000010
 8007108:	e000ed04 	.word	0xe000ed04

0800710c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007112:	4b12      	ldr	r3, [pc, #72]	@ (800715c <vPortExitCritical+0x50>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10b      	bne.n	8007132 <vPortExitCritical+0x26>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	607b      	str	r3, [r7, #4]
}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	e7fd      	b.n	800712e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007132:	4b0a      	ldr	r3, [pc, #40]	@ (800715c <vPortExitCritical+0x50>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3b01      	subs	r3, #1
 8007138:	4a08      	ldr	r2, [pc, #32]	@ (800715c <vPortExitCritical+0x50>)
 800713a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800713c:	4b07      	ldr	r3, [pc, #28]	@ (800715c <vPortExitCritical+0x50>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d105      	bne.n	8007150 <vPortExitCritical+0x44>
 8007144:	2300      	movs	r3, #0
 8007146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f383 8811 	msr	BASEPRI, r3
}
 800714e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	20000010 	.word	0x20000010

08007160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007160:	f3ef 8009 	mrs	r0, PSP
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	4b15      	ldr	r3, [pc, #84]	@ (80071c0 <pxCurrentTCBConst>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	f01e 0f10 	tst.w	lr, #16
 8007170:	bf08      	it	eq
 8007172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007184:	f380 8811 	msr	BASEPRI, r0
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f7fe ff82 	bl	8006098 <vTaskSwitchContext>
 8007194:	f04f 0000 	mov.w	r0, #0
 8007198:	f380 8811 	msr	BASEPRI, r0
 800719c:	bc09      	pop	{r0, r3}
 800719e:	6819      	ldr	r1, [r3, #0]
 80071a0:	6808      	ldr	r0, [r1, #0]
 80071a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a6:	f01e 0f10 	tst.w	lr, #16
 80071aa:	bf08      	it	eq
 80071ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071b0:	f380 8809 	msr	PSP, r0
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	f3af 8000 	nop.w

080071c0 <pxCurrentTCBConst>:
 80071c0:	2000843c 	.word	0x2000843c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop

080071c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
}
 80071e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071e2:	f7fe fe9f 	bl	8005f24 <xTaskIncrementTick>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071ec:	4b06      	ldr	r3, [pc, #24]	@ (8007208 <xPortSysTickHandler+0x40>)
 80071ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f383 8811 	msr	BASEPRI, r3
}
 80071fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007210:	4b0b      	ldr	r3, [pc, #44]	@ (8007240 <vPortSetupTimerInterrupt+0x34>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007216:	4b0b      	ldr	r3, [pc, #44]	@ (8007244 <vPortSetupTimerInterrupt+0x38>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800721c:	4b0a      	ldr	r3, [pc, #40]	@ (8007248 <vPortSetupTimerInterrupt+0x3c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a0a      	ldr	r2, [pc, #40]	@ (800724c <vPortSetupTimerInterrupt+0x40>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	099b      	lsrs	r3, r3, #6
 8007228:	4a09      	ldr	r2, [pc, #36]	@ (8007250 <vPortSetupTimerInterrupt+0x44>)
 800722a:	3b01      	subs	r3, #1
 800722c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800722e:	4b04      	ldr	r3, [pc, #16]	@ (8007240 <vPortSetupTimerInterrupt+0x34>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	e000e010 	.word	0xe000e010
 8007244:	e000e018 	.word	0xe000e018
 8007248:	20000004 	.word	0x20000004
 800724c:	10624dd3 	.word	0x10624dd3
 8007250:	e000e014 	.word	0xe000e014

08007254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007264 <vPortEnableVFP+0x10>
 8007258:	6801      	ldr	r1, [r0, #0]
 800725a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800725e:	6001      	str	r1, [r0, #0]
 8007260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007262:	bf00      	nop
 8007264:	e000ed88 	.word	0xe000ed88

08007268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800726e:	f3ef 8305 	mrs	r3, IPSR
 8007272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b0f      	cmp	r3, #15
 8007278:	d915      	bls.n	80072a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800727a:	4a18      	ldr	r2, [pc, #96]	@ (80072dc <vPortValidateInterruptPriority+0x74>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007284:	4b16      	ldr	r3, [pc, #88]	@ (80072e0 <vPortValidateInterruptPriority+0x78>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	7afa      	ldrb	r2, [r7, #11]
 800728a:	429a      	cmp	r2, r3
 800728c:	d20b      	bcs.n	80072a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	607b      	str	r3, [r7, #4]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072a6:	4b0f      	ldr	r3, [pc, #60]	@ (80072e4 <vPortValidateInterruptPriority+0x7c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072ae:	4b0e      	ldr	r3, [pc, #56]	@ (80072e8 <vPortValidateInterruptPriority+0x80>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d90b      	bls.n	80072ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	603b      	str	r3, [r7, #0]
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	e7fd      	b.n	80072ca <vPortValidateInterruptPriority+0x62>
	}
 80072ce:	bf00      	nop
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	e000e3f0 	.word	0xe000e3f0
 80072e0:	20008a68 	.word	0x20008a68
 80072e4:	e000ed0c 	.word	0xe000ed0c
 80072e8:	20008a6c 	.word	0x20008a6c

080072ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	@ 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072f8:	f7fe fd58 	bl	8005dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007470 <pvPortMalloc+0x184>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007304:	f000 f924 	bl	8007550 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007308:	4b5a      	ldr	r3, [pc, #360]	@ (8007474 <pvPortMalloc+0x188>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4013      	ands	r3, r2
 8007310:	2b00      	cmp	r3, #0
 8007312:	f040 8095 	bne.w	8007440 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01e      	beq.n	800735a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800731c:	2208      	movs	r2, #8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4413      	add	r3, r2
 8007322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d015      	beq.n	800735a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f023 0307 	bic.w	r3, r3, #7
 8007334:	3308      	adds	r3, #8
 8007336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f003 0307 	and.w	r3, r3, #7
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <pvPortMalloc+0x6e>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	617b      	str	r3, [r7, #20]
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	e7fd      	b.n	8007356 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d06f      	beq.n	8007440 <pvPortMalloc+0x154>
 8007360:	4b45      	ldr	r3, [pc, #276]	@ (8007478 <pvPortMalloc+0x18c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d86a      	bhi.n	8007440 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800736a:	4b44      	ldr	r3, [pc, #272]	@ (800747c <pvPortMalloc+0x190>)
 800736c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800736e:	4b43      	ldr	r3, [pc, #268]	@ (800747c <pvPortMalloc+0x190>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007374:	e004      	b.n	8007380 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	429a      	cmp	r2, r3
 8007388:	d903      	bls.n	8007392 <pvPortMalloc+0xa6>
 800738a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f1      	bne.n	8007376 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007392:	4b37      	ldr	r3, [pc, #220]	@ (8007470 <pvPortMalloc+0x184>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007398:	429a      	cmp	r2, r3
 800739a:	d051      	beq.n	8007440 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2208      	movs	r2, #8
 80073a2:	4413      	add	r3, r2
 80073a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	1ad2      	subs	r2, r2, r3
 80073b6:	2308      	movs	r3, #8
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d920      	bls.n	8007400 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <pvPortMalloc+0xfc>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	613b      	str	r3, [r7, #16]
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	e7fd      	b.n	80073e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073fa:	69b8      	ldr	r0, [r7, #24]
 80073fc:	f000 f90a 	bl	8007614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007400:	4b1d      	ldr	r3, [pc, #116]	@ (8007478 <pvPortMalloc+0x18c>)
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	4a1b      	ldr	r2, [pc, #108]	@ (8007478 <pvPortMalloc+0x18c>)
 800740c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800740e:	4b1a      	ldr	r3, [pc, #104]	@ (8007478 <pvPortMalloc+0x18c>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b1b      	ldr	r3, [pc, #108]	@ (8007480 <pvPortMalloc+0x194>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d203      	bcs.n	8007422 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800741a:	4b17      	ldr	r3, [pc, #92]	@ (8007478 <pvPortMalloc+0x18c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a18      	ldr	r2, [pc, #96]	@ (8007480 <pvPortMalloc+0x194>)
 8007420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	4b13      	ldr	r3, [pc, #76]	@ (8007474 <pvPortMalloc+0x188>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	431a      	orrs	r2, r3
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007436:	4b13      	ldr	r3, [pc, #76]	@ (8007484 <pvPortMalloc+0x198>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3301      	adds	r3, #1
 800743c:	4a11      	ldr	r2, [pc, #68]	@ (8007484 <pvPortMalloc+0x198>)
 800743e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007440:	f7fe fcc2 	bl	8005dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <pvPortMalloc+0x17a>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	60fb      	str	r3, [r7, #12]
}
 8007460:	bf00      	nop
 8007462:	bf00      	nop
 8007464:	e7fd      	b.n	8007462 <pvPortMalloc+0x176>
	return pvReturn;
 8007466:	69fb      	ldr	r3, [r7, #28]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3728      	adds	r7, #40	@ 0x28
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	2000c678 	.word	0x2000c678
 8007474:	2000c68c 	.word	0x2000c68c
 8007478:	2000c67c 	.word	0x2000c67c
 800747c:	2000c670 	.word	0x2000c670
 8007480:	2000c680 	.word	0x2000c680
 8007484:	2000c684 	.word	0x2000c684

08007488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d04f      	beq.n	800753a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800749a:	2308      	movs	r3, #8
 800749c:	425b      	negs	r3, r3
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4413      	add	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	4b25      	ldr	r3, [pc, #148]	@ (8007544 <vPortFree+0xbc>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <vPortFree+0x46>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60fb      	str	r3, [r7, #12]
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	e7fd      	b.n	80074ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00b      	beq.n	80074ee <vPortFree+0x66>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60bb      	str	r3, [r7, #8]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	4b14      	ldr	r3, [pc, #80]	@ (8007544 <vPortFree+0xbc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4013      	ands	r3, r2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01e      	beq.n	800753a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d11a      	bne.n	800753a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	4b0e      	ldr	r3, [pc, #56]	@ (8007544 <vPortFree+0xbc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	43db      	mvns	r3, r3
 800750e:	401a      	ands	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007514:	f7fe fc4a 	bl	8005dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <vPortFree+0xc0>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4413      	add	r3, r2
 8007522:	4a09      	ldr	r2, [pc, #36]	@ (8007548 <vPortFree+0xc0>)
 8007524:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007526:	6938      	ldr	r0, [r7, #16]
 8007528:	f000 f874 	bl	8007614 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800752c:	4b07      	ldr	r3, [pc, #28]	@ (800754c <vPortFree+0xc4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3301      	adds	r3, #1
 8007532:	4a06      	ldr	r2, [pc, #24]	@ (800754c <vPortFree+0xc4>)
 8007534:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007536:	f7fe fc47 	bl	8005dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800753a:	bf00      	nop
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	2000c68c 	.word	0x2000c68c
 8007548:	2000c67c 	.word	0x2000c67c
 800754c:	2000c688 	.word	0x2000c688

08007550 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007556:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800755a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800755c:	4b27      	ldr	r3, [pc, #156]	@ (80075fc <prvHeapInit+0xac>)
 800755e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00c      	beq.n	8007584 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3307      	adds	r3, #7
 800756e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0307 	bic.w	r3, r3, #7
 8007576:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	4a1f      	ldr	r2, [pc, #124]	@ (80075fc <prvHeapInit+0xac>)
 8007580:	4413      	add	r3, r2
 8007582:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007588:	4a1d      	ldr	r2, [pc, #116]	@ (8007600 <prvHeapInit+0xb0>)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800758e:	4b1c      	ldr	r3, [pc, #112]	@ (8007600 <prvHeapInit+0xb0>)
 8007590:	2200      	movs	r2, #0
 8007592:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	4413      	add	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800759c:	2208      	movs	r2, #8
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 0307 	bic.w	r3, r3, #7
 80075aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a15      	ldr	r2, [pc, #84]	@ (8007604 <prvHeapInit+0xb4>)
 80075b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075b2:	4b14      	ldr	r3, [pc, #80]	@ (8007604 <prvHeapInit+0xb4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2200      	movs	r2, #0
 80075b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075ba:	4b12      	ldr	r3, [pc, #72]	@ (8007604 <prvHeapInit+0xb4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2200      	movs	r2, #0
 80075c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	1ad2      	subs	r2, r2, r3
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007604 <prvHeapInit+0xb4>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007608 <prvHeapInit+0xb8>)
 80075de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	4a09      	ldr	r2, [pc, #36]	@ (800760c <prvHeapInit+0xbc>)
 80075e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075e8:	4b09      	ldr	r3, [pc, #36]	@ (8007610 <prvHeapInit+0xc0>)
 80075ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80075ee:	601a      	str	r2, [r3, #0]
}
 80075f0:	bf00      	nop
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	20008a70 	.word	0x20008a70
 8007600:	2000c670 	.word	0x2000c670
 8007604:	2000c678 	.word	0x2000c678
 8007608:	2000c680 	.word	0x2000c680
 800760c:	2000c67c 	.word	0x2000c67c
 8007610:	2000c68c 	.word	0x2000c68c

08007614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800761c:	4b28      	ldr	r3, [pc, #160]	@ (80076c0 <prvInsertBlockIntoFreeList+0xac>)
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	e002      	b.n	8007628 <prvInsertBlockIntoFreeList+0x14>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	429a      	cmp	r2, r3
 8007630:	d8f7      	bhi.n	8007622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	4413      	add	r3, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d108      	bne.n	8007656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	441a      	add	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	441a      	add	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d118      	bne.n	800769c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b15      	ldr	r3, [pc, #84]	@ (80076c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d00d      	beq.n	8007692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	441a      	add	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	e008      	b.n	80076a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007692:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	e003      	b.n	80076a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d002      	beq.n	80076b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b2:	bf00      	nop
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	2000c670 	.word	0x2000c670
 80076c4:	2000c678 	.word	0x2000c678

080076c8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80076c8:	4b04      	ldr	r3, [pc, #16]	@ (80076dc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	b10a      	cbz	r2, 80076d2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 80076ce:	4803      	ldr	r0, [pc, #12]	@ (80076dc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 80076d0:	4770      	bx	lr
 80076d2:	4a03      	ldr	r2, [pc, #12]	@ (80076e0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 80076d4:	4801      	ldr	r0, [pc, #4]	@ (80076dc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 80076d6:	6812      	ldr	r2, [r2, #0]
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	4770      	bx	lr
 80076dc:	2000001c 	.word	0x2000001c
 80076e0:	2000020c 	.word	0x2000020c

080076e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80076e4:	4a02      	ldr	r2, [pc, #8]	@ (80076f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 80076e6:	4b03      	ldr	r3, [pc, #12]	@ (80076f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	2000020c 	.word	0x2000020c
 80076f4:	2000001c 	.word	0x2000001c

080076f8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 80076f8:	f003 bd64 	b.w	800b1c4 <geometry_msgs__msg__Twist__init>

080076fc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 80076fc:	f003 bd86 	b.w	800b20c <geometry_msgs__msg__Twist__fini>

08007700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007700:	b510      	push	{r4, lr}
 8007702:	f000 f819 	bl	8007738 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007706:	4c07      	ldr	r4, [pc, #28]	@ (8007724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8007708:	60e0      	str	r0, [r4, #12]
 800770a:	f000 f815 	bl	8007738 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800770e:	4b06      	ldr	r3, [pc, #24]	@ (8007728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007710:	64a0      	str	r0, [r4, #72]	@ 0x48
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	b10a      	cbz	r2, 800771a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 8007716:	4804      	ldr	r0, [pc, #16]	@ (8007728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007718:	bd10      	pop	{r4, pc}
 800771a:	4a04      	ldr	r2, [pc, #16]	@ (800772c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800771c:	4802      	ldr	r0, [pc, #8]	@ (8007728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800771e:	6812      	ldr	r2, [r2, #0]
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	bd10      	pop	{r4, pc}
 8007724:	20000034 	.word	0x20000034
 8007728:	200000ac 	.word	0x200000ac
 800772c:	20000210 	.word	0x20000210

08007730 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8007730:	f003 bda8 	b.w	800b284 <geometry_msgs__msg__Vector3__init>

08007734 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8007734:	f003 bdaa 	b.w	800b28c <geometry_msgs__msg__Vector3__fini>

08007738 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8007738:	4b04      	ldr	r3, [pc, #16]	@ (800774c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	b10a      	cbz	r2, 8007742 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800773e:	4803      	ldr	r0, [pc, #12]	@ (800774c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8007740:	4770      	bx	lr
 8007742:	4a03      	ldr	r2, [pc, #12]	@ (8007750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8007744:	4801      	ldr	r0, [pc, #4]	@ (800774c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8007746:	6812      	ldr	r2, [r2, #0]
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	4770      	bx	lr
 800774c:	20000178 	.word	0x20000178
 8007750:	20000210 	.word	0x20000210

08007754 <get_serialized_size_geometry_msgs__msg__Twist>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4604      	mov	r4, r0
 8007758:	b148      	cbz	r0, 800776e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800775a:	460d      	mov	r5, r1
 800775c:	f000 f860 	bl	8007820 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007760:	4606      	mov	r6, r0
 8007762:	1829      	adds	r1, r5, r0
 8007764:	f104 0018 	add.w	r0, r4, #24
 8007768:	f000 f85a 	bl	8007820 <get_serialized_size_geometry_msgs__msg__Vector3>
 800776c:	4430      	add	r0, r6
 800776e:	bd70      	pop	{r4, r5, r6, pc}

08007770 <_Twist__cdr_deserialize>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	460c      	mov	r4, r1
 8007774:	b189      	cbz	r1, 800779a <_Twist__cdr_deserialize+0x2a>
 8007776:	4605      	mov	r5, r0
 8007778:	f000 f8de 	bl	8007938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800777c:	6843      	ldr	r3, [r0, #4]
 800777e:	4621      	mov	r1, r4
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	4628      	mov	r0, r5
 8007784:	4798      	blx	r3
 8007786:	f000 f8d7 	bl	8007938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800778a:	6843      	ldr	r3, [r0, #4]
 800778c:	f104 0118 	add.w	r1, r4, #24
 8007790:	4628      	mov	r0, r5
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007798:	4718      	bx	r3
 800779a:	4608      	mov	r0, r1
 800779c:	bd70      	pop	{r4, r5, r6, pc}
 800779e:	bf00      	nop

080077a0 <_Twist__cdr_serialize>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	9101      	str	r1, [sp, #4]
 80077a6:	b190      	cbz	r0, 80077ce <_Twist__cdr_serialize+0x2e>
 80077a8:	4604      	mov	r4, r0
 80077aa:	f000 f8c5 	bl	8007938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80077ae:	6843      	ldr	r3, [r0, #4]
 80077b0:	9901      	ldr	r1, [sp, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	4620      	mov	r0, r4
 80077b6:	4798      	blx	r3
 80077b8:	f000 f8be 	bl	8007938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80077bc:	6843      	ldr	r3, [r0, #4]
 80077be:	9901      	ldr	r1, [sp, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f104 0018 	add.w	r0, r4, #24
 80077c6:	b002      	add	sp, #8
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	4718      	bx	r3
 80077ce:	b002      	add	sp, #8
 80077d0:	bd10      	pop	{r4, pc}
 80077d2:	bf00      	nop

080077d4 <_Twist__get_serialized_size>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4604      	mov	r4, r0
 80077d8:	b148      	cbz	r0, 80077ee <_Twist__get_serialized_size+0x1a>
 80077da:	2100      	movs	r1, #0
 80077dc:	f000 f820 	bl	8007820 <get_serialized_size_geometry_msgs__msg__Vector3>
 80077e0:	4605      	mov	r5, r0
 80077e2:	4601      	mov	r1, r0
 80077e4:	f104 0018 	add.w	r0, r4, #24
 80077e8:	f000 f81a 	bl	8007820 <get_serialized_size_geometry_msgs__msg__Vector3>
 80077ec:	4428      	add	r0, r5
 80077ee:	bd38      	pop	{r3, r4, r5, pc}

080077f0 <_Twist__max_serialized_size>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	2301      	movs	r3, #1
 80077f6:	2100      	movs	r1, #0
 80077f8:	f10d 0007 	add.w	r0, sp, #7
 80077fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8007800:	f000 f87e 	bl	8007900 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007804:	4604      	mov	r4, r0
 8007806:	4601      	mov	r1, r0
 8007808:	f10d 0007 	add.w	r0, sp, #7
 800780c:	f000 f878 	bl	8007900 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007810:	4420      	add	r0, r4
 8007812:	b002      	add	sp, #8
 8007814:	bd10      	pop	{r4, pc}
 8007816:	bf00      	nop

08007818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007818:	4800      	ldr	r0, [pc, #0]	@ (800781c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800781a:	4770      	bx	lr
 800781c:	20000190 	.word	0x20000190

08007820 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8007820:	b1b8      	cbz	r0, 8007852 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8007822:	b538      	push	{r3, r4, r5, lr}
 8007824:	460d      	mov	r5, r1
 8007826:	4628      	mov	r0, r5
 8007828:	2108      	movs	r1, #8
 800782a:	f001 f9fd 	bl	8008c28 <ucdr_alignment>
 800782e:	f105 0308 	add.w	r3, r5, #8
 8007832:	181c      	adds	r4, r3, r0
 8007834:	2108      	movs	r1, #8
 8007836:	4620      	mov	r0, r4
 8007838:	f001 f9f6 	bl	8008c28 <ucdr_alignment>
 800783c:	3008      	adds	r0, #8
 800783e:	4404      	add	r4, r0
 8007840:	2108      	movs	r1, #8
 8007842:	4620      	mov	r0, r4
 8007844:	f001 f9f0 	bl	8008c28 <ucdr_alignment>
 8007848:	f1c5 0508 	rsb	r5, r5, #8
 800784c:	4428      	add	r0, r5
 800784e:	4420      	add	r0, r4
 8007850:	bd38      	pop	{r3, r4, r5, pc}
 8007852:	4770      	bx	lr

08007854 <_Vector3__cdr_deserialize>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	460c      	mov	r4, r1
 8007858:	b171      	cbz	r1, 8007878 <_Vector3__cdr_deserialize+0x24>
 800785a:	4605      	mov	r5, r0
 800785c:	f001 f8c6 	bl	80089ec <ucdr_deserialize_double>
 8007860:	f104 0108 	add.w	r1, r4, #8
 8007864:	4628      	mov	r0, r5
 8007866:	f001 f8c1 	bl	80089ec <ucdr_deserialize_double>
 800786a:	f104 0110 	add.w	r1, r4, #16
 800786e:	4628      	mov	r0, r5
 8007870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007874:	f001 b8ba 	b.w	80089ec <ucdr_deserialize_double>
 8007878:	4608      	mov	r0, r1
 800787a:	bd38      	pop	{r3, r4, r5, pc}

0800787c <_Vector3__cdr_serialize>:
 800787c:	b198      	cbz	r0, 80078a6 <_Vector3__cdr_serialize+0x2a>
 800787e:	b538      	push	{r3, r4, r5, lr}
 8007880:	ed90 0b00 	vldr	d0, [r0]
 8007884:	460d      	mov	r5, r1
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	f000 ffdf 	bl	800884c <ucdr_serialize_double>
 800788e:	ed94 0b02 	vldr	d0, [r4, #8]
 8007892:	4628      	mov	r0, r5
 8007894:	f000 ffda 	bl	800884c <ucdr_serialize_double>
 8007898:	ed94 0b04 	vldr	d0, [r4, #16]
 800789c:	4628      	mov	r0, r5
 800789e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078a2:	f000 bfd3 	b.w	800884c <ucdr_serialize_double>
 80078a6:	4770      	bx	lr

080078a8 <_Vector3__get_serialized_size>:
 80078a8:	b198      	cbz	r0, 80078d2 <_Vector3__get_serialized_size+0x2a>
 80078aa:	b510      	push	{r4, lr}
 80078ac:	2108      	movs	r1, #8
 80078ae:	2000      	movs	r0, #0
 80078b0:	f001 f9ba 	bl	8008c28 <ucdr_alignment>
 80078b4:	f100 0408 	add.w	r4, r0, #8
 80078b8:	2108      	movs	r1, #8
 80078ba:	4620      	mov	r0, r4
 80078bc:	f001 f9b4 	bl	8008c28 <ucdr_alignment>
 80078c0:	3008      	adds	r0, #8
 80078c2:	4404      	add	r4, r0
 80078c4:	2108      	movs	r1, #8
 80078c6:	4620      	mov	r0, r4
 80078c8:	f001 f9ae 	bl	8008c28 <ucdr_alignment>
 80078cc:	3008      	adds	r0, #8
 80078ce:	4420      	add	r0, r4
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	4770      	bx	lr

080078d4 <_Vector3__max_serialized_size>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	2108      	movs	r1, #8
 80078d8:	2000      	movs	r0, #0
 80078da:	f001 f9a5 	bl	8008c28 <ucdr_alignment>
 80078de:	f100 0508 	add.w	r5, r0, #8
 80078e2:	2108      	movs	r1, #8
 80078e4:	4628      	mov	r0, r5
 80078e6:	f001 f99f 	bl	8008c28 <ucdr_alignment>
 80078ea:	f100 0408 	add.w	r4, r0, #8
 80078ee:	442c      	add	r4, r5
 80078f0:	2108      	movs	r1, #8
 80078f2:	4620      	mov	r0, r4
 80078f4:	f001 f998 	bl	8008c28 <ucdr_alignment>
 80078f8:	3008      	adds	r0, #8
 80078fa:	4420      	add	r0, r4
 80078fc:	bd38      	pop	{r3, r4, r5, pc}
 80078fe:	bf00      	nop

08007900 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	2301      	movs	r3, #1
 8007904:	460c      	mov	r4, r1
 8007906:	7003      	strb	r3, [r0, #0]
 8007908:	2108      	movs	r1, #8
 800790a:	4620      	mov	r0, r4
 800790c:	f001 f98c 	bl	8008c28 <ucdr_alignment>
 8007910:	f104 0508 	add.w	r5, r4, #8
 8007914:	1946      	adds	r6, r0, r5
 8007916:	2108      	movs	r1, #8
 8007918:	4630      	mov	r0, r6
 800791a:	f001 f985 	bl	8008c28 <ucdr_alignment>
 800791e:	f100 0508 	add.w	r5, r0, #8
 8007922:	4435      	add	r5, r6
 8007924:	2108      	movs	r1, #8
 8007926:	4628      	mov	r0, r5
 8007928:	f001 f97e 	bl	8008c28 <ucdr_alignment>
 800792c:	f1c4 0408 	rsb	r4, r4, #8
 8007930:	4420      	add	r0, r4
 8007932:	4428      	add	r0, r5
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	bf00      	nop

08007938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8007938:	4800      	ldr	r0, [pc, #0]	@ (800793c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800793a:	4770      	bx	lr
 800793c:	200001c4 	.word	0x200001c4

08007940 <ucdr_serialize_bool>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	460d      	mov	r5, r1
 8007944:	2101      	movs	r1, #1
 8007946:	4604      	mov	r4, r0
 8007948:	f001 f922 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 800794c:	b148      	cbz	r0, 8007962 <ucdr_serialize_bool+0x22>
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	701d      	strb	r5, [r3, #0]
 8007952:	68a2      	ldr	r2, [r4, #8]
 8007954:	6923      	ldr	r3, [r4, #16]
 8007956:	2101      	movs	r1, #1
 8007958:	440a      	add	r2, r1
 800795a:	440b      	add	r3, r1
 800795c:	60a2      	str	r2, [r4, #8]
 800795e:	6123      	str	r3, [r4, #16]
 8007960:	7561      	strb	r1, [r4, #21]
 8007962:	7da0      	ldrb	r0, [r4, #22]
 8007964:	f080 0001 	eor.w	r0, r0, #1
 8007968:	bd38      	pop	{r3, r4, r5, pc}
 800796a:	bf00      	nop

0800796c <ucdr_deserialize_bool>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	460d      	mov	r5, r1
 8007970:	2101      	movs	r1, #1
 8007972:	4604      	mov	r4, r0
 8007974:	f001 f90c 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007978:	b160      	cbz	r0, 8007994 <ucdr_deserialize_bool+0x28>
 800797a:	68a2      	ldr	r2, [r4, #8]
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007982:	3900      	subs	r1, #0
 8007984:	bf18      	it	ne
 8007986:	2101      	movne	r1, #1
 8007988:	7029      	strb	r1, [r5, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	2101      	movs	r1, #1
 800798e:	60a2      	str	r2, [r4, #8]
 8007990:	6123      	str	r3, [r4, #16]
 8007992:	7561      	strb	r1, [r4, #21]
 8007994:	7da0      	ldrb	r0, [r4, #22]
 8007996:	f080 0001 	eor.w	r0, r0, #1
 800799a:	bd38      	pop	{r3, r4, r5, pc}

0800799c <ucdr_serialize_uint8_t>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	460d      	mov	r5, r1
 80079a0:	2101      	movs	r1, #1
 80079a2:	4604      	mov	r4, r0
 80079a4:	f001 f8f4 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 80079a8:	b148      	cbz	r0, 80079be <ucdr_serialize_uint8_t+0x22>
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	701d      	strb	r5, [r3, #0]
 80079ae:	68a2      	ldr	r2, [r4, #8]
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	2101      	movs	r1, #1
 80079b4:	440a      	add	r2, r1
 80079b6:	440b      	add	r3, r1
 80079b8:	60a2      	str	r2, [r4, #8]
 80079ba:	6123      	str	r3, [r4, #16]
 80079bc:	7561      	strb	r1, [r4, #21]
 80079be:	7da0      	ldrb	r0, [r4, #22]
 80079c0:	f080 0001 	eor.w	r0, r0, #1
 80079c4:	bd38      	pop	{r3, r4, r5, pc}
 80079c6:	bf00      	nop

080079c8 <ucdr_deserialize_uint8_t>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	460d      	mov	r5, r1
 80079cc:	2101      	movs	r1, #1
 80079ce:	4604      	mov	r4, r0
 80079d0:	f001 f8de 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 80079d4:	b150      	cbz	r0, 80079ec <ucdr_deserialize_uint8_t+0x24>
 80079d6:	68a3      	ldr	r3, [r4, #8]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	702b      	strb	r3, [r5, #0]
 80079dc:	68a2      	ldr	r2, [r4, #8]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	2101      	movs	r1, #1
 80079e2:	440a      	add	r2, r1
 80079e4:	440b      	add	r3, r1
 80079e6:	60a2      	str	r2, [r4, #8]
 80079e8:	6123      	str	r3, [r4, #16]
 80079ea:	7561      	strb	r1, [r4, #21]
 80079ec:	7da0      	ldrb	r0, [r4, #22]
 80079ee:	f080 0001 	eor.w	r0, r0, #1
 80079f2:	bd38      	pop	{r3, r4, r5, pc}

080079f4 <ucdr_serialize_uint16_t>:
 80079f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	460b      	mov	r3, r1
 80079fc:	2102      	movs	r1, #2
 80079fe:	4604      	mov	r4, r0
 8007a00:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007a04:	f001 f918 	bl	8008c38 <ucdr_buffer_alignment>
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	7d67      	ldrb	r7, [r4, #21]
 8007a0e:	f001 f957 	bl	8008cc0 <ucdr_advance_buffer>
 8007a12:	2102      	movs	r1, #2
 8007a14:	4620      	mov	r0, r4
 8007a16:	f001 f8af 	bl	8008b78 <ucdr_check_buffer_available_for>
 8007a1a:	bb78      	cbnz	r0, 8007a7c <ucdr_serialize_uint16_t+0x88>
 8007a1c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007a20:	42ab      	cmp	r3, r5
 8007a22:	d926      	bls.n	8007a72 <ucdr_serialize_uint16_t+0x7e>
 8007a24:	1b5e      	subs	r6, r3, r5
 8007a26:	60a3      	str	r3, [r4, #8]
 8007a28:	6923      	ldr	r3, [r4, #16]
 8007a2a:	f1c6 0802 	rsb	r8, r6, #2
 8007a2e:	4433      	add	r3, r6
 8007a30:	6123      	str	r3, [r4, #16]
 8007a32:	4641      	mov	r1, r8
 8007a34:	4620      	mov	r0, r4
 8007a36:	f001 f8ab 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d03b      	beq.n	8007ab6 <ucdr_serialize_uint16_t+0xc2>
 8007a3e:	7d23      	ldrb	r3, [r4, #20]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d04a      	beq.n	8007ada <ucdr_serialize_uint16_t+0xe6>
 8007a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007a48:	702b      	strb	r3, [r5, #0]
 8007a4a:	2e00      	cmp	r6, #0
 8007a4c:	d040      	beq.n	8007ad0 <ucdr_serialize_uint16_t+0xdc>
 8007a4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007a52:	706b      	strb	r3, [r5, #1]
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	68a2      	ldr	r2, [r4, #8]
 8007a58:	7da0      	ldrb	r0, [r4, #22]
 8007a5a:	3302      	adds	r3, #2
 8007a5c:	1b9e      	subs	r6, r3, r6
 8007a5e:	4442      	add	r2, r8
 8007a60:	2302      	movs	r3, #2
 8007a62:	f080 0001 	eor.w	r0, r0, #1
 8007a66:	60a2      	str	r2, [r4, #8]
 8007a68:	6126      	str	r6, [r4, #16]
 8007a6a:	7563      	strb	r3, [r4, #21]
 8007a6c:	b002      	add	sp, #8
 8007a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a72:	2102      	movs	r1, #2
 8007a74:	4620      	mov	r0, r4
 8007a76:	f001 f88b 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007a7a:	b190      	cbz	r0, 8007aa2 <ucdr_serialize_uint16_t+0xae>
 8007a7c:	7d23      	ldrb	r3, [r4, #20]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	68a3      	ldr	r3, [r4, #8]
 8007a82:	d014      	beq.n	8007aae <ucdr_serialize_uint16_t+0xba>
 8007a84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	68a3      	ldr	r3, [r4, #8]
 8007a8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007a90:	705a      	strb	r2, [r3, #1]
 8007a92:	68a2      	ldr	r2, [r4, #8]
 8007a94:	6923      	ldr	r3, [r4, #16]
 8007a96:	3202      	adds	r2, #2
 8007a98:	3302      	adds	r3, #2
 8007a9a:	2102      	movs	r1, #2
 8007a9c:	60a2      	str	r2, [r4, #8]
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	7561      	strb	r1, [r4, #21]
 8007aa2:	7da0      	ldrb	r0, [r4, #22]
 8007aa4:	f080 0001 	eor.w	r0, r0, #1
 8007aa8:	b002      	add	sp, #8
 8007aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007ab2:	801a      	strh	r2, [r3, #0]
 8007ab4:	e7ed      	b.n	8007a92 <ucdr_serialize_uint16_t+0x9e>
 8007ab6:	68a2      	ldr	r2, [r4, #8]
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	7da0      	ldrb	r0, [r4, #22]
 8007abc:	7567      	strb	r7, [r4, #21]
 8007abe:	1b92      	subs	r2, r2, r6
 8007ac0:	1b9b      	subs	r3, r3, r6
 8007ac2:	f080 0001 	eor.w	r0, r0, #1
 8007ac6:	60a2      	str	r2, [r4, #8]
 8007ac8:	6123      	str	r3, [r4, #16]
 8007aca:	b002      	add	sp, #8
 8007acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad0:	68a3      	ldr	r3, [r4, #8]
 8007ad2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	e7bc      	b.n	8007a54 <ucdr_serialize_uint16_t+0x60>
 8007ada:	4628      	mov	r0, r5
 8007adc:	f10d 0506 	add.w	r5, sp, #6
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	f00d ffcb 	bl	8015a7e <memcpy>
 8007ae8:	68a0      	ldr	r0, [r4, #8]
 8007aea:	4642      	mov	r2, r8
 8007aec:	19a9      	adds	r1, r5, r6
 8007aee:	f00d ffc6 	bl	8015a7e <memcpy>
 8007af2:	e7af      	b.n	8007a54 <ucdr_serialize_uint16_t+0x60>

08007af4 <ucdr_serialize_endian_uint16_t>:
 8007af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007af8:	b083      	sub	sp, #12
 8007afa:	460d      	mov	r5, r1
 8007afc:	2102      	movs	r1, #2
 8007afe:	4604      	mov	r4, r0
 8007b00:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007b04:	f001 f898 	bl	8008c38 <ucdr_buffer_alignment>
 8007b08:	4601      	mov	r1, r0
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007b10:	f001 f8d6 	bl	8008cc0 <ucdr_advance_buffer>
 8007b14:	2102      	movs	r1, #2
 8007b16:	4620      	mov	r0, r4
 8007b18:	f001 f82e 	bl	8008b78 <ucdr_check_buffer_available_for>
 8007b1c:	bb70      	cbnz	r0, 8007b7c <ucdr_serialize_endian_uint16_t+0x88>
 8007b1e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007b22:	42be      	cmp	r6, r7
 8007b24:	d925      	bls.n	8007b72 <ucdr_serialize_endian_uint16_t+0x7e>
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	60a6      	str	r6, [r4, #8]
 8007b2a:	1bf6      	subs	r6, r6, r7
 8007b2c:	4433      	add	r3, r6
 8007b2e:	f1c6 0902 	rsb	r9, r6, #2
 8007b32:	6123      	str	r3, [r4, #16]
 8007b34:	4649      	mov	r1, r9
 8007b36:	4620      	mov	r0, r4
 8007b38:	f001 f82a 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d039      	beq.n	8007bb4 <ucdr_serialize_endian_uint16_t+0xc0>
 8007b40:	2d01      	cmp	r5, #1
 8007b42:	d04a      	beq.n	8007bda <ucdr_serialize_endian_uint16_t+0xe6>
 8007b44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007b48:	703b      	strb	r3, [r7, #0]
 8007b4a:	2e00      	cmp	r6, #0
 8007b4c:	d040      	beq.n	8007bd0 <ucdr_serialize_endian_uint16_t+0xdc>
 8007b4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007b52:	707b      	strb	r3, [r7, #1]
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	68a2      	ldr	r2, [r4, #8]
 8007b58:	7da0      	ldrb	r0, [r4, #22]
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	444a      	add	r2, r9
 8007b5e:	1b9b      	subs	r3, r3, r6
 8007b60:	2102      	movs	r1, #2
 8007b62:	f080 0001 	eor.w	r0, r0, #1
 8007b66:	60a2      	str	r2, [r4, #8]
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	7561      	strb	r1, [r4, #21]
 8007b6c:	b003      	add	sp, #12
 8007b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b72:	2102      	movs	r1, #2
 8007b74:	4620      	mov	r0, r4
 8007b76:	f001 f80b 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007b7a:	b188      	cbz	r0, 8007ba0 <ucdr_serialize_endian_uint16_t+0xac>
 8007b7c:	2d01      	cmp	r5, #1
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	d014      	beq.n	8007bac <ucdr_serialize_endian_uint16_t+0xb8>
 8007b82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	68a3      	ldr	r3, [r4, #8]
 8007b8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007b8e:	705a      	strb	r2, [r3, #1]
 8007b90:	68a2      	ldr	r2, [r4, #8]
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	3202      	adds	r2, #2
 8007b96:	3302      	adds	r3, #2
 8007b98:	2102      	movs	r1, #2
 8007b9a:	60a2      	str	r2, [r4, #8]
 8007b9c:	6123      	str	r3, [r4, #16]
 8007b9e:	7561      	strb	r1, [r4, #21]
 8007ba0:	7da0      	ldrb	r0, [r4, #22]
 8007ba2:	f080 0001 	eor.w	r0, r0, #1
 8007ba6:	b003      	add	sp, #12
 8007ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	e7ed      	b.n	8007b90 <ucdr_serialize_endian_uint16_t+0x9c>
 8007bb4:	68a2      	ldr	r2, [r4, #8]
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	7da0      	ldrb	r0, [r4, #22]
 8007bba:	f884 8015 	strb.w	r8, [r4, #21]
 8007bbe:	1b92      	subs	r2, r2, r6
 8007bc0:	1b9b      	subs	r3, r3, r6
 8007bc2:	f080 0001 	eor.w	r0, r0, #1
 8007bc6:	60a2      	str	r2, [r4, #8]
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	b003      	add	sp, #12
 8007bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bd0:	68a3      	ldr	r3, [r4, #8]
 8007bd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	e7bc      	b.n	8007b54 <ucdr_serialize_endian_uint16_t+0x60>
 8007bda:	f10d 0506 	add.w	r5, sp, #6
 8007bde:	4629      	mov	r1, r5
 8007be0:	4632      	mov	r2, r6
 8007be2:	4638      	mov	r0, r7
 8007be4:	f00d ff4b 	bl	8015a7e <memcpy>
 8007be8:	68a0      	ldr	r0, [r4, #8]
 8007bea:	464a      	mov	r2, r9
 8007bec:	19a9      	adds	r1, r5, r6
 8007bee:	f00d ff46 	bl	8015a7e <memcpy>
 8007bf2:	e7af      	b.n	8007b54 <ucdr_serialize_endian_uint16_t+0x60>

08007bf4 <ucdr_deserialize_uint16_t>:
 8007bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	2102      	movs	r1, #2
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	f001 f81b 	bl	8008c38 <ucdr_buffer_alignment>
 8007c02:	4601      	mov	r1, r0
 8007c04:	4620      	mov	r0, r4
 8007c06:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007c0a:	f001 f859 	bl	8008cc0 <ucdr_advance_buffer>
 8007c0e:	2102      	movs	r1, #2
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 ffb1 	bl	8008b78 <ucdr_check_buffer_available_for>
 8007c16:	bb60      	cbnz	r0, 8007c72 <ucdr_deserialize_uint16_t+0x7e>
 8007c18:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007c1c:	42be      	cmp	r6, r7
 8007c1e:	d923      	bls.n	8007c68 <ucdr_deserialize_uint16_t+0x74>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	60a6      	str	r6, [r4, #8]
 8007c24:	1bf6      	subs	r6, r6, r7
 8007c26:	4433      	add	r3, r6
 8007c28:	f1c6 0902 	rsb	r9, r6, #2
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	4649      	mov	r1, r9
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 ffad 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d034      	beq.n	8007ca4 <ucdr_deserialize_uint16_t+0xb0>
 8007c3a:	7d23      	ldrb	r3, [r4, #20]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d042      	beq.n	8007cc6 <ucdr_deserialize_uint16_t+0xd2>
 8007c40:	787b      	ldrb	r3, [r7, #1]
 8007c42:	702b      	strb	r3, [r5, #0]
 8007c44:	2e00      	cmp	r6, #0
 8007c46:	d03a      	beq.n	8007cbe <ucdr_deserialize_uint16_t+0xca>
 8007c48:	783b      	ldrb	r3, [r7, #0]
 8007c4a:	706b      	strb	r3, [r5, #1]
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	68a2      	ldr	r2, [r4, #8]
 8007c50:	7da0      	ldrb	r0, [r4, #22]
 8007c52:	2102      	movs	r1, #2
 8007c54:	3302      	adds	r3, #2
 8007c56:	444a      	add	r2, r9
 8007c58:	1b9b      	subs	r3, r3, r6
 8007c5a:	7561      	strb	r1, [r4, #21]
 8007c5c:	60a2      	str	r2, [r4, #8]
 8007c5e:	6123      	str	r3, [r4, #16]
 8007c60:	f080 0001 	eor.w	r0, r0, #1
 8007c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c68:	2102      	movs	r1, #2
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 ff90 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007c70:	b180      	cbz	r0, 8007c94 <ucdr_deserialize_uint16_t+0xa0>
 8007c72:	7d23      	ldrb	r3, [r4, #20]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	d011      	beq.n	8007c9e <ucdr_deserialize_uint16_t+0xaa>
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	702b      	strb	r3, [r5, #0]
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	706b      	strb	r3, [r5, #1]
 8007c84:	68a2      	ldr	r2, [r4, #8]
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	3202      	adds	r2, #2
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	2102      	movs	r1, #2
 8007c8e:	60a2      	str	r2, [r4, #8]
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	7561      	strb	r1, [r4, #21]
 8007c94:	7da0      	ldrb	r0, [r4, #22]
 8007c96:	f080 0001 	eor.w	r0, r0, #1
 8007c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	802b      	strh	r3, [r5, #0]
 8007ca2:	e7ef      	b.n	8007c84 <ucdr_deserialize_uint16_t+0x90>
 8007ca4:	68a2      	ldr	r2, [r4, #8]
 8007ca6:	6923      	ldr	r3, [r4, #16]
 8007ca8:	7da0      	ldrb	r0, [r4, #22]
 8007caa:	f884 8015 	strb.w	r8, [r4, #21]
 8007cae:	1b92      	subs	r2, r2, r6
 8007cb0:	1b9b      	subs	r3, r3, r6
 8007cb2:	60a2      	str	r2, [r4, #8]
 8007cb4:	6123      	str	r3, [r4, #16]
 8007cb6:	f080 0001 	eor.w	r0, r0, #1
 8007cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	706b      	strb	r3, [r5, #1]
 8007cc4:	e7c2      	b.n	8007c4c <ucdr_deserialize_uint16_t+0x58>
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	4632      	mov	r2, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f00d fed7 	bl	8015a7e <memcpy>
 8007cd0:	68a1      	ldr	r1, [r4, #8]
 8007cd2:	464a      	mov	r2, r9
 8007cd4:	19a8      	adds	r0, r5, r6
 8007cd6:	f00d fed2 	bl	8015a7e <memcpy>
 8007cda:	e7b7      	b.n	8007c4c <ucdr_deserialize_uint16_t+0x58>

08007cdc <ucdr_deserialize_endian_uint16_t>:
 8007cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	460e      	mov	r6, r1
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	4615      	mov	r5, r2
 8007ce8:	f000 ffa6 	bl	8008c38 <ucdr_buffer_alignment>
 8007cec:	4601      	mov	r1, r0
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8007cf4:	f000 ffe4 	bl	8008cc0 <ucdr_advance_buffer>
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 ff3c 	bl	8008b78 <ucdr_check_buffer_available_for>
 8007d00:	bb70      	cbnz	r0, 8007d60 <ucdr_deserialize_endian_uint16_t+0x84>
 8007d02:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8007d06:	4547      	cmp	r7, r8
 8007d08:	d925      	bls.n	8007d56 <ucdr_deserialize_endian_uint16_t+0x7a>
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	60a7      	str	r7, [r4, #8]
 8007d0e:	eba7 0708 	sub.w	r7, r7, r8
 8007d12:	443b      	add	r3, r7
 8007d14:	f1c7 0a02 	rsb	sl, r7, #2
 8007d18:	6123      	str	r3, [r4, #16]
 8007d1a:	4651      	mov	r1, sl
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 ff37 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d034      	beq.n	8007d90 <ucdr_deserialize_endian_uint16_t+0xb4>
 8007d26:	2e01      	cmp	r6, #1
 8007d28:	d043      	beq.n	8007db2 <ucdr_deserialize_endian_uint16_t+0xd6>
 8007d2a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007d2e:	702b      	strb	r3, [r5, #0]
 8007d30:	2f00      	cmp	r7, #0
 8007d32:	d03a      	beq.n	8007daa <ucdr_deserialize_endian_uint16_t+0xce>
 8007d34:	f898 3000 	ldrb.w	r3, [r8]
 8007d38:	706b      	strb	r3, [r5, #1]
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	68a2      	ldr	r2, [r4, #8]
 8007d3e:	7da0      	ldrb	r0, [r4, #22]
 8007d40:	2102      	movs	r1, #2
 8007d42:	3302      	adds	r3, #2
 8007d44:	4452      	add	r2, sl
 8007d46:	1bdb      	subs	r3, r3, r7
 8007d48:	7561      	strb	r1, [r4, #21]
 8007d4a:	60a2      	str	r2, [r4, #8]
 8007d4c:	6123      	str	r3, [r4, #16]
 8007d4e:	f080 0001 	eor.w	r0, r0, #1
 8007d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d56:	2102      	movs	r1, #2
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 ff19 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007d5e:	b178      	cbz	r0, 8007d80 <ucdr_deserialize_endian_uint16_t+0xa4>
 8007d60:	2e01      	cmp	r6, #1
 8007d62:	68a3      	ldr	r3, [r4, #8]
 8007d64:	d011      	beq.n	8007d8a <ucdr_deserialize_endian_uint16_t+0xae>
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	702b      	strb	r3, [r5, #0]
 8007d6a:	68a3      	ldr	r3, [r4, #8]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	706b      	strb	r3, [r5, #1]
 8007d70:	68a2      	ldr	r2, [r4, #8]
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	3202      	adds	r2, #2
 8007d76:	3302      	adds	r3, #2
 8007d78:	2102      	movs	r1, #2
 8007d7a:	60a2      	str	r2, [r4, #8]
 8007d7c:	6123      	str	r3, [r4, #16]
 8007d7e:	7561      	strb	r1, [r4, #21]
 8007d80:	7da0      	ldrb	r0, [r4, #22]
 8007d82:	f080 0001 	eor.w	r0, r0, #1
 8007d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	802b      	strh	r3, [r5, #0]
 8007d8e:	e7ef      	b.n	8007d70 <ucdr_deserialize_endian_uint16_t+0x94>
 8007d90:	68a2      	ldr	r2, [r4, #8]
 8007d92:	6923      	ldr	r3, [r4, #16]
 8007d94:	7da0      	ldrb	r0, [r4, #22]
 8007d96:	f884 9015 	strb.w	r9, [r4, #21]
 8007d9a:	1bd2      	subs	r2, r2, r7
 8007d9c:	1bdb      	subs	r3, r3, r7
 8007d9e:	60a2      	str	r2, [r4, #8]
 8007da0:	6123      	str	r3, [r4, #16]
 8007da2:	f080 0001 	eor.w	r0, r0, #1
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	68a3      	ldr	r3, [r4, #8]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	706b      	strb	r3, [r5, #1]
 8007db0:	e7c3      	b.n	8007d3a <ucdr_deserialize_endian_uint16_t+0x5e>
 8007db2:	4641      	mov	r1, r8
 8007db4:	463a      	mov	r2, r7
 8007db6:	4628      	mov	r0, r5
 8007db8:	f00d fe61 	bl	8015a7e <memcpy>
 8007dbc:	68a1      	ldr	r1, [r4, #8]
 8007dbe:	4652      	mov	r2, sl
 8007dc0:	19e8      	adds	r0, r5, r7
 8007dc2:	f00d fe5c 	bl	8015a7e <memcpy>
 8007dc6:	e7b8      	b.n	8007d3a <ucdr_deserialize_endian_uint16_t+0x5e>

08007dc8 <ucdr_serialize_uint32_t>:
 8007dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	4604      	mov	r4, r0
 8007dd0:	9101      	str	r1, [sp, #4]
 8007dd2:	2104      	movs	r1, #4
 8007dd4:	f000 ff30 	bl	8008c38 <ucdr_buffer_alignment>
 8007dd8:	4601      	mov	r1, r0
 8007dda:	4620      	mov	r0, r4
 8007ddc:	7d67      	ldrb	r7, [r4, #21]
 8007dde:	f000 ff6f 	bl	8008cc0 <ucdr_advance_buffer>
 8007de2:	2104      	movs	r1, #4
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fec7 	bl	8008b78 <ucdr_check_buffer_available_for>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d139      	bne.n	8007e62 <ucdr_serialize_uint32_t+0x9a>
 8007dee:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007df2:	42ab      	cmp	r3, r5
 8007df4:	d930      	bls.n	8007e58 <ucdr_serialize_uint32_t+0x90>
 8007df6:	1b5e      	subs	r6, r3, r5
 8007df8:	60a3      	str	r3, [r4, #8]
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	f1c6 0804 	rsb	r8, r6, #4
 8007e00:	4433      	add	r3, r6
 8007e02:	6123      	str	r3, [r4, #16]
 8007e04:	4641      	mov	r1, r8
 8007e06:	4620      	mov	r0, r4
 8007e08:	f000 fec2 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d04c      	beq.n	8007eaa <ucdr_serialize_uint32_t+0xe2>
 8007e10:	7d23      	ldrb	r3, [r4, #20]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d063      	beq.n	8007ede <ucdr_serialize_uint32_t+0x116>
 8007e16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e1a:	702b      	strb	r3, [r5, #0]
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	d051      	beq.n	8007ec4 <ucdr_serialize_uint32_t+0xfc>
 8007e20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e24:	706b      	strb	r3, [r5, #1]
 8007e26:	2e01      	cmp	r6, #1
 8007e28:	d050      	beq.n	8007ecc <ucdr_serialize_uint32_t+0x104>
 8007e2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007e2e:	70ab      	strb	r3, [r5, #2]
 8007e30:	2e02      	cmp	r6, #2
 8007e32:	d04f      	beq.n	8007ed4 <ucdr_serialize_uint32_t+0x10c>
 8007e34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007e38:	70eb      	strb	r3, [r5, #3]
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	68a2      	ldr	r2, [r4, #8]
 8007e3e:	7da0      	ldrb	r0, [r4, #22]
 8007e40:	3304      	adds	r3, #4
 8007e42:	1b9e      	subs	r6, r3, r6
 8007e44:	4442      	add	r2, r8
 8007e46:	2304      	movs	r3, #4
 8007e48:	f080 0001 	eor.w	r0, r0, #1
 8007e4c:	60a2      	str	r2, [r4, #8]
 8007e4e:	6126      	str	r6, [r4, #16]
 8007e50:	7563      	strb	r3, [r4, #21]
 8007e52:	b002      	add	sp, #8
 8007e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e58:	2104      	movs	r1, #4
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 fe98 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007e60:	b1d0      	cbz	r0, 8007e98 <ucdr_serialize_uint32_t+0xd0>
 8007e62:	7d23      	ldrb	r3, [r4, #20]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	68a3      	ldr	r3, [r4, #8]
 8007e68:	d01c      	beq.n	8007ea4 <ucdr_serialize_uint32_t+0xdc>
 8007e6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007e76:	705a      	strb	r2, [r3, #1]
 8007e78:	68a3      	ldr	r3, [r4, #8]
 8007e7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007e7e:	709a      	strb	r2, [r3, #2]
 8007e80:	68a3      	ldr	r3, [r4, #8]
 8007e82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007e86:	70da      	strb	r2, [r3, #3]
 8007e88:	68a2      	ldr	r2, [r4, #8]
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	3204      	adds	r2, #4
 8007e8e:	3304      	adds	r3, #4
 8007e90:	2104      	movs	r1, #4
 8007e92:	60a2      	str	r2, [r4, #8]
 8007e94:	6123      	str	r3, [r4, #16]
 8007e96:	7561      	strb	r1, [r4, #21]
 8007e98:	7da0      	ldrb	r0, [r4, #22]
 8007e9a:	f080 0001 	eor.w	r0, r0, #1
 8007e9e:	b002      	add	sp, #8
 8007ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea4:	9a01      	ldr	r2, [sp, #4]
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e7ee      	b.n	8007e88 <ucdr_serialize_uint32_t+0xc0>
 8007eaa:	68a2      	ldr	r2, [r4, #8]
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	7da0      	ldrb	r0, [r4, #22]
 8007eb0:	7567      	strb	r7, [r4, #21]
 8007eb2:	1b92      	subs	r2, r2, r6
 8007eb4:	1b9b      	subs	r3, r3, r6
 8007eb6:	f080 0001 	eor.w	r0, r0, #1
 8007eba:	60a2      	str	r2, [r4, #8]
 8007ebc:	6123      	str	r3, [r4, #16]
 8007ebe:	b002      	add	sp, #8
 8007ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec4:	68a3      	ldr	r3, [r4, #8]
 8007ec6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	68a3      	ldr	r3, [r4, #8]
 8007ece:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007eda:	701a      	strb	r2, [r3, #0]
 8007edc:	e7ad      	b.n	8007e3a <ucdr_serialize_uint32_t+0x72>
 8007ede:	4628      	mov	r0, r5
 8007ee0:	ad01      	add	r5, sp, #4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	f00d fdca 	bl	8015a7e <memcpy>
 8007eea:	68a0      	ldr	r0, [r4, #8]
 8007eec:	4642      	mov	r2, r8
 8007eee:	19a9      	adds	r1, r5, r6
 8007ef0:	f00d fdc5 	bl	8015a7e <memcpy>
 8007ef4:	e7a1      	b.n	8007e3a <ucdr_serialize_uint32_t+0x72>
 8007ef6:	bf00      	nop

08007ef8 <ucdr_serialize_endian_uint32_t>:
 8007ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007efc:	b083      	sub	sp, #12
 8007efe:	460d      	mov	r5, r1
 8007f00:	2104      	movs	r1, #4
 8007f02:	4604      	mov	r4, r0
 8007f04:	9201      	str	r2, [sp, #4]
 8007f06:	f000 fe97 	bl	8008c38 <ucdr_buffer_alignment>
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007f12:	f000 fed5 	bl	8008cc0 <ucdr_advance_buffer>
 8007f16:	2104      	movs	r1, #4
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fe2d 	bl	8008b78 <ucdr_check_buffer_available_for>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d138      	bne.n	8007f94 <ucdr_serialize_endian_uint32_t+0x9c>
 8007f22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007f26:	42b7      	cmp	r7, r6
 8007f28:	d92f      	bls.n	8007f8a <ucdr_serialize_endian_uint32_t+0x92>
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	60a7      	str	r7, [r4, #8]
 8007f2e:	1bbf      	subs	r7, r7, r6
 8007f30:	443b      	add	r3, r7
 8007f32:	f1c7 0904 	rsb	r9, r7, #4
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	4649      	mov	r1, r9
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 fe28 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d04a      	beq.n	8007fda <ucdr_serialize_endian_uint32_t+0xe2>
 8007f44:	2d01      	cmp	r5, #1
 8007f46:	d063      	beq.n	8008010 <ucdr_serialize_endian_uint32_t+0x118>
 8007f48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007f4c:	7033      	strb	r3, [r6, #0]
 8007f4e:	2f00      	cmp	r7, #0
 8007f50:	d051      	beq.n	8007ff6 <ucdr_serialize_endian_uint32_t+0xfe>
 8007f52:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007f56:	7073      	strb	r3, [r6, #1]
 8007f58:	2f01      	cmp	r7, #1
 8007f5a:	d050      	beq.n	8007ffe <ucdr_serialize_endian_uint32_t+0x106>
 8007f5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007f60:	70b3      	strb	r3, [r6, #2]
 8007f62:	2f02      	cmp	r7, #2
 8007f64:	d04f      	beq.n	8008006 <ucdr_serialize_endian_uint32_t+0x10e>
 8007f66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007f6a:	70f3      	strb	r3, [r6, #3]
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	68a2      	ldr	r2, [r4, #8]
 8007f70:	7da0      	ldrb	r0, [r4, #22]
 8007f72:	3304      	adds	r3, #4
 8007f74:	444a      	add	r2, r9
 8007f76:	1bdb      	subs	r3, r3, r7
 8007f78:	2104      	movs	r1, #4
 8007f7a:	f080 0001 	eor.w	r0, r0, #1
 8007f7e:	60a2      	str	r2, [r4, #8]
 8007f80:	6123      	str	r3, [r4, #16]
 8007f82:	7561      	strb	r1, [r4, #21]
 8007f84:	b003      	add	sp, #12
 8007f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f8a:	2104      	movs	r1, #4
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f000 fdff 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8007f92:	b1c8      	cbz	r0, 8007fc8 <ucdr_serialize_endian_uint32_t+0xd0>
 8007f94:	2d01      	cmp	r5, #1
 8007f96:	68a3      	ldr	r3, [r4, #8]
 8007f98:	d01c      	beq.n	8007fd4 <ucdr_serialize_endian_uint32_t+0xdc>
 8007f9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007f9e:	701a      	strb	r2, [r3, #0]
 8007fa0:	68a3      	ldr	r3, [r4, #8]
 8007fa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007fa6:	705a      	strb	r2, [r3, #1]
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007fae:	709a      	strb	r2, [r3, #2]
 8007fb0:	68a3      	ldr	r3, [r4, #8]
 8007fb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007fb6:	70da      	strb	r2, [r3, #3]
 8007fb8:	68a2      	ldr	r2, [r4, #8]
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	3204      	adds	r2, #4
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	2104      	movs	r1, #4
 8007fc2:	60a2      	str	r2, [r4, #8]
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	7561      	strb	r1, [r4, #21]
 8007fc8:	7da0      	ldrb	r0, [r4, #22]
 8007fca:	f080 0001 	eor.w	r0, r0, #1
 8007fce:	b003      	add	sp, #12
 8007fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fd4:	9a01      	ldr	r2, [sp, #4]
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e7ee      	b.n	8007fb8 <ucdr_serialize_endian_uint32_t+0xc0>
 8007fda:	68a2      	ldr	r2, [r4, #8]
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	7da0      	ldrb	r0, [r4, #22]
 8007fe0:	f884 8015 	strb.w	r8, [r4, #21]
 8007fe4:	1bd2      	subs	r2, r2, r7
 8007fe6:	1bdb      	subs	r3, r3, r7
 8007fe8:	f080 0001 	eor.w	r0, r0, #1
 8007fec:	60a2      	str	r2, [r4, #8]
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	b003      	add	sp, #12
 8007ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff6:	68a3      	ldr	r3, [r4, #8]
 8007ff8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	68a3      	ldr	r3, [r4, #8]
 8008000:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008004:	701a      	strb	r2, [r3, #0]
 8008006:	68a3      	ldr	r3, [r4, #8]
 8008008:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	e7ad      	b.n	8007f6c <ucdr_serialize_endian_uint32_t+0x74>
 8008010:	ad01      	add	r5, sp, #4
 8008012:	4629      	mov	r1, r5
 8008014:	463a      	mov	r2, r7
 8008016:	4630      	mov	r0, r6
 8008018:	f00d fd31 	bl	8015a7e <memcpy>
 800801c:	68a0      	ldr	r0, [r4, #8]
 800801e:	464a      	mov	r2, r9
 8008020:	19e9      	adds	r1, r5, r7
 8008022:	f00d fd2c 	bl	8015a7e <memcpy>
 8008026:	e7a1      	b.n	8007f6c <ucdr_serialize_endian_uint32_t+0x74>

08008028 <ucdr_deserialize_uint32_t>:
 8008028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800802c:	460d      	mov	r5, r1
 800802e:	2104      	movs	r1, #4
 8008030:	4604      	mov	r4, r0
 8008032:	f000 fe01 	bl	8008c38 <ucdr_buffer_alignment>
 8008036:	4601      	mov	r1, r0
 8008038:	4620      	mov	r0, r4
 800803a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800803e:	f000 fe3f 	bl	8008cc0 <ucdr_advance_buffer>
 8008042:	2104      	movs	r1, #4
 8008044:	4620      	mov	r0, r4
 8008046:	f000 fd97 	bl	8008b78 <ucdr_check_buffer_available_for>
 800804a:	2800      	cmp	r0, #0
 800804c:	d138      	bne.n	80080c0 <ucdr_deserialize_uint32_t+0x98>
 800804e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008052:	42b7      	cmp	r7, r6
 8008054:	d92f      	bls.n	80080b6 <ucdr_deserialize_uint32_t+0x8e>
 8008056:	6923      	ldr	r3, [r4, #16]
 8008058:	60a7      	str	r7, [r4, #8]
 800805a:	1bbf      	subs	r7, r7, r6
 800805c:	443b      	add	r3, r7
 800805e:	f1c7 0904 	rsb	r9, r7, #4
 8008062:	6123      	str	r3, [r4, #16]
 8008064:	4649      	mov	r1, r9
 8008066:	4620      	mov	r0, r4
 8008068:	f000 fd92 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 800806c:	2800      	cmp	r0, #0
 800806e:	d046      	beq.n	80080fe <ucdr_deserialize_uint32_t+0xd6>
 8008070:	7d23      	ldrb	r3, [r4, #20]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d05c      	beq.n	8008130 <ucdr_deserialize_uint32_t+0x108>
 8008076:	78f3      	ldrb	r3, [r6, #3]
 8008078:	702b      	strb	r3, [r5, #0]
 800807a:	2f00      	cmp	r7, #0
 800807c:	d04c      	beq.n	8008118 <ucdr_deserialize_uint32_t+0xf0>
 800807e:	78b3      	ldrb	r3, [r6, #2]
 8008080:	706b      	strb	r3, [r5, #1]
 8008082:	2f01      	cmp	r7, #1
 8008084:	f105 0302 	add.w	r3, r5, #2
 8008088:	d04a      	beq.n	8008120 <ucdr_deserialize_uint32_t+0xf8>
 800808a:	7873      	ldrb	r3, [r6, #1]
 800808c:	70ab      	strb	r3, [r5, #2]
 800808e:	2f02      	cmp	r7, #2
 8008090:	f105 0303 	add.w	r3, r5, #3
 8008094:	d048      	beq.n	8008128 <ucdr_deserialize_uint32_t+0x100>
 8008096:	7833      	ldrb	r3, [r6, #0]
 8008098:	70eb      	strb	r3, [r5, #3]
 800809a:	6923      	ldr	r3, [r4, #16]
 800809c:	68a2      	ldr	r2, [r4, #8]
 800809e:	7da0      	ldrb	r0, [r4, #22]
 80080a0:	2104      	movs	r1, #4
 80080a2:	3304      	adds	r3, #4
 80080a4:	444a      	add	r2, r9
 80080a6:	1bdb      	subs	r3, r3, r7
 80080a8:	7561      	strb	r1, [r4, #21]
 80080aa:	60a2      	str	r2, [r4, #8]
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	f080 0001 	eor.w	r0, r0, #1
 80080b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b6:	2104      	movs	r1, #4
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 fd69 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 80080be:	b1b0      	cbz	r0, 80080ee <ucdr_deserialize_uint32_t+0xc6>
 80080c0:	7d23      	ldrb	r3, [r4, #20]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	68a3      	ldr	r3, [r4, #8]
 80080c6:	d017      	beq.n	80080f8 <ucdr_deserialize_uint32_t+0xd0>
 80080c8:	78db      	ldrb	r3, [r3, #3]
 80080ca:	702b      	strb	r3, [r5, #0]
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	789b      	ldrb	r3, [r3, #2]
 80080d0:	706b      	strb	r3, [r5, #1]
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	70ab      	strb	r3, [r5, #2]
 80080d8:	68a3      	ldr	r3, [r4, #8]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	70eb      	strb	r3, [r5, #3]
 80080de:	68a2      	ldr	r2, [r4, #8]
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	3204      	adds	r2, #4
 80080e4:	3304      	adds	r3, #4
 80080e6:	2104      	movs	r1, #4
 80080e8:	60a2      	str	r2, [r4, #8]
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	7561      	strb	r1, [r4, #21]
 80080ee:	7da0      	ldrb	r0, [r4, #22]
 80080f0:	f080 0001 	eor.w	r0, r0, #1
 80080f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	602b      	str	r3, [r5, #0]
 80080fc:	e7ef      	b.n	80080de <ucdr_deserialize_uint32_t+0xb6>
 80080fe:	68a2      	ldr	r2, [r4, #8]
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	7da0      	ldrb	r0, [r4, #22]
 8008104:	f884 8015 	strb.w	r8, [r4, #21]
 8008108:	1bd2      	subs	r2, r2, r7
 800810a:	1bdb      	subs	r3, r3, r7
 800810c:	60a2      	str	r2, [r4, #8]
 800810e:	6123      	str	r3, [r4, #16]
 8008110:	f080 0001 	eor.w	r0, r0, #1
 8008114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	789b      	ldrb	r3, [r3, #2]
 800811c:	706b      	strb	r3, [r5, #1]
 800811e:	1cab      	adds	r3, r5, #2
 8008120:	68a2      	ldr	r2, [r4, #8]
 8008122:	7852      	ldrb	r2, [r2, #1]
 8008124:	f803 2b01 	strb.w	r2, [r3], #1
 8008128:	68a2      	ldr	r2, [r4, #8]
 800812a:	7812      	ldrb	r2, [r2, #0]
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e7b4      	b.n	800809a <ucdr_deserialize_uint32_t+0x72>
 8008130:	4631      	mov	r1, r6
 8008132:	463a      	mov	r2, r7
 8008134:	4628      	mov	r0, r5
 8008136:	f00d fca2 	bl	8015a7e <memcpy>
 800813a:	68a1      	ldr	r1, [r4, #8]
 800813c:	464a      	mov	r2, r9
 800813e:	19e8      	adds	r0, r5, r7
 8008140:	f00d fc9d 	bl	8015a7e <memcpy>
 8008144:	e7a9      	b.n	800809a <ucdr_deserialize_uint32_t+0x72>
 8008146:	bf00      	nop

08008148 <ucdr_deserialize_endian_uint32_t>:
 8008148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	460e      	mov	r6, r1
 800814e:	2104      	movs	r1, #4
 8008150:	4604      	mov	r4, r0
 8008152:	4615      	mov	r5, r2
 8008154:	f000 fd70 	bl	8008c38 <ucdr_buffer_alignment>
 8008158:	4601      	mov	r1, r0
 800815a:	4620      	mov	r0, r4
 800815c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008160:	f000 fdae 	bl	8008cc0 <ucdr_advance_buffer>
 8008164:	2104      	movs	r1, #4
 8008166:	4620      	mov	r0, r4
 8008168:	f000 fd06 	bl	8008b78 <ucdr_check_buffer_available_for>
 800816c:	2800      	cmp	r0, #0
 800816e:	d13c      	bne.n	80081ea <ucdr_deserialize_endian_uint32_t+0xa2>
 8008170:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8008174:	42bb      	cmp	r3, r7
 8008176:	d933      	bls.n	80081e0 <ucdr_deserialize_endian_uint32_t+0x98>
 8008178:	eba3 0807 	sub.w	r8, r3, r7
 800817c:	60a3      	str	r3, [r4, #8]
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	f1c8 0a04 	rsb	sl, r8, #4
 8008184:	4443      	add	r3, r8
 8008186:	6123      	str	r3, [r4, #16]
 8008188:	4651      	mov	r1, sl
 800818a:	4620      	mov	r0, r4
 800818c:	f000 fd00 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008190:	2800      	cmp	r0, #0
 8008192:	d048      	beq.n	8008226 <ucdr_deserialize_endian_uint32_t+0xde>
 8008194:	2e01      	cmp	r6, #1
 8008196:	d061      	beq.n	800825c <ucdr_deserialize_endian_uint32_t+0x114>
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	702b      	strb	r3, [r5, #0]
 800819c:	f1b8 0f00 	cmp.w	r8, #0
 80081a0:	d050      	beq.n	8008244 <ucdr_deserialize_endian_uint32_t+0xfc>
 80081a2:	78bb      	ldrb	r3, [r7, #2]
 80081a4:	706b      	strb	r3, [r5, #1]
 80081a6:	f1b8 0f01 	cmp.w	r8, #1
 80081aa:	f105 0302 	add.w	r3, r5, #2
 80081ae:	d04d      	beq.n	800824c <ucdr_deserialize_endian_uint32_t+0x104>
 80081b0:	787b      	ldrb	r3, [r7, #1]
 80081b2:	70ab      	strb	r3, [r5, #2]
 80081b4:	f1b8 0f02 	cmp.w	r8, #2
 80081b8:	f105 0303 	add.w	r3, r5, #3
 80081bc:	d04a      	beq.n	8008254 <ucdr_deserialize_endian_uint32_t+0x10c>
 80081be:	783b      	ldrb	r3, [r7, #0]
 80081c0:	70eb      	strb	r3, [r5, #3]
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	68a2      	ldr	r2, [r4, #8]
 80081c6:	7da0      	ldrb	r0, [r4, #22]
 80081c8:	2104      	movs	r1, #4
 80081ca:	3304      	adds	r3, #4
 80081cc:	4452      	add	r2, sl
 80081ce:	eba3 0308 	sub.w	r3, r3, r8
 80081d2:	7561      	strb	r1, [r4, #21]
 80081d4:	60a2      	str	r2, [r4, #8]
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	f080 0001 	eor.w	r0, r0, #1
 80081dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e0:	2104      	movs	r1, #4
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 fcd4 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 80081e8:	b1a8      	cbz	r0, 8008216 <ucdr_deserialize_endian_uint32_t+0xce>
 80081ea:	2e01      	cmp	r6, #1
 80081ec:	68a3      	ldr	r3, [r4, #8]
 80081ee:	d017      	beq.n	8008220 <ucdr_deserialize_endian_uint32_t+0xd8>
 80081f0:	78db      	ldrb	r3, [r3, #3]
 80081f2:	702b      	strb	r3, [r5, #0]
 80081f4:	68a3      	ldr	r3, [r4, #8]
 80081f6:	789b      	ldrb	r3, [r3, #2]
 80081f8:	706b      	strb	r3, [r5, #1]
 80081fa:	68a3      	ldr	r3, [r4, #8]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	70ab      	strb	r3, [r5, #2]
 8008200:	68a3      	ldr	r3, [r4, #8]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	70eb      	strb	r3, [r5, #3]
 8008206:	68a2      	ldr	r2, [r4, #8]
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	3204      	adds	r2, #4
 800820c:	3304      	adds	r3, #4
 800820e:	2104      	movs	r1, #4
 8008210:	60a2      	str	r2, [r4, #8]
 8008212:	6123      	str	r3, [r4, #16]
 8008214:	7561      	strb	r1, [r4, #21]
 8008216:	7da0      	ldrb	r0, [r4, #22]
 8008218:	f080 0001 	eor.w	r0, r0, #1
 800821c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	e7ef      	b.n	8008206 <ucdr_deserialize_endian_uint32_t+0xbe>
 8008226:	68a2      	ldr	r2, [r4, #8]
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	7da0      	ldrb	r0, [r4, #22]
 800822c:	f884 9015 	strb.w	r9, [r4, #21]
 8008230:	eba2 0208 	sub.w	r2, r2, r8
 8008234:	eba3 0308 	sub.w	r3, r3, r8
 8008238:	60a2      	str	r2, [r4, #8]
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	f080 0001 	eor.w	r0, r0, #1
 8008240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008244:	68a3      	ldr	r3, [r4, #8]
 8008246:	789b      	ldrb	r3, [r3, #2]
 8008248:	706b      	strb	r3, [r5, #1]
 800824a:	1cab      	adds	r3, r5, #2
 800824c:	68a2      	ldr	r2, [r4, #8]
 800824e:	7852      	ldrb	r2, [r2, #1]
 8008250:	f803 2b01 	strb.w	r2, [r3], #1
 8008254:	68a2      	ldr	r2, [r4, #8]
 8008256:	7812      	ldrb	r2, [r2, #0]
 8008258:	701a      	strb	r2, [r3, #0]
 800825a:	e7b2      	b.n	80081c2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800825c:	4639      	mov	r1, r7
 800825e:	4642      	mov	r2, r8
 8008260:	4628      	mov	r0, r5
 8008262:	f00d fc0c 	bl	8015a7e <memcpy>
 8008266:	68a1      	ldr	r1, [r4, #8]
 8008268:	4652      	mov	r2, sl
 800826a:	eb05 0008 	add.w	r0, r5, r8
 800826e:	f00d fc06 	bl	8015a7e <memcpy>
 8008272:	e7a6      	b.n	80081c2 <ucdr_deserialize_endian_uint32_t+0x7a>

08008274 <ucdr_serialize_uint64_t>:
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	2108      	movs	r1, #8
 800827a:	b082      	sub	sp, #8
 800827c:	4604      	mov	r4, r0
 800827e:	e9cd 2300 	strd	r2, r3, [sp]
 8008282:	f000 fcd9 	bl	8008c38 <ucdr_buffer_alignment>
 8008286:	4601      	mov	r1, r0
 8008288:	4620      	mov	r0, r4
 800828a:	7d67      	ldrb	r7, [r4, #21]
 800828c:	f000 fd18 	bl	8008cc0 <ucdr_advance_buffer>
 8008290:	2108      	movs	r1, #8
 8008292:	4620      	mov	r0, r4
 8008294:	f000 fc70 	bl	8008b78 <ucdr_check_buffer_available_for>
 8008298:	2800      	cmp	r0, #0
 800829a:	d14e      	bne.n	800833a <ucdr_serialize_uint64_t+0xc6>
 800829c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80082a0:	42ab      	cmp	r3, r5
 80082a2:	d945      	bls.n	8008330 <ucdr_serialize_uint64_t+0xbc>
 80082a4:	1b5e      	subs	r6, r3, r5
 80082a6:	60a3      	str	r3, [r4, #8]
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	f1c6 0808 	rsb	r8, r6, #8
 80082ae:	4433      	add	r3, r6
 80082b0:	6123      	str	r3, [r4, #16]
 80082b2:	4641      	mov	r1, r8
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 fc6b 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d074      	beq.n	80083a8 <ucdr_serialize_uint64_t+0x134>
 80082be:	7d23      	ldrb	r3, [r4, #20]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	f000 809b 	beq.w	80083fc <ucdr_serialize_uint64_t+0x188>
 80082c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082ca:	702b      	strb	r3, [r5, #0]
 80082cc:	2e00      	cmp	r6, #0
 80082ce:	d078      	beq.n	80083c2 <ucdr_serialize_uint64_t+0x14e>
 80082d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80082d4:	706b      	strb	r3, [r5, #1]
 80082d6:	2e01      	cmp	r6, #1
 80082d8:	d077      	beq.n	80083ca <ucdr_serialize_uint64_t+0x156>
 80082da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80082de:	70ab      	strb	r3, [r5, #2]
 80082e0:	2e02      	cmp	r6, #2
 80082e2:	d076      	beq.n	80083d2 <ucdr_serialize_uint64_t+0x15e>
 80082e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80082e8:	70eb      	strb	r3, [r5, #3]
 80082ea:	2e03      	cmp	r6, #3
 80082ec:	d075      	beq.n	80083da <ucdr_serialize_uint64_t+0x166>
 80082ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80082f2:	712b      	strb	r3, [r5, #4]
 80082f4:	2e04      	cmp	r6, #4
 80082f6:	d074      	beq.n	80083e2 <ucdr_serialize_uint64_t+0x16e>
 80082f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80082fc:	716b      	strb	r3, [r5, #5]
 80082fe:	2e05      	cmp	r6, #5
 8008300:	d073      	beq.n	80083ea <ucdr_serialize_uint64_t+0x176>
 8008302:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008306:	71ab      	strb	r3, [r5, #6]
 8008308:	2e06      	cmp	r6, #6
 800830a:	d072      	beq.n	80083f2 <ucdr_serialize_uint64_t+0x17e>
 800830c:	f89d 3000 	ldrb.w	r3, [sp]
 8008310:	71eb      	strb	r3, [r5, #7]
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	68a2      	ldr	r2, [r4, #8]
 8008316:	7da0      	ldrb	r0, [r4, #22]
 8008318:	3308      	adds	r3, #8
 800831a:	1b9e      	subs	r6, r3, r6
 800831c:	4442      	add	r2, r8
 800831e:	2308      	movs	r3, #8
 8008320:	f080 0001 	eor.w	r0, r0, #1
 8008324:	60a2      	str	r2, [r4, #8]
 8008326:	6126      	str	r6, [r4, #16]
 8008328:	7563      	strb	r3, [r4, #21]
 800832a:	b002      	add	sp, #8
 800832c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008330:	2108      	movs	r1, #8
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fc2c 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008338:	b350      	cbz	r0, 8008390 <ucdr_serialize_uint64_t+0x11c>
 800833a:	7d23      	ldrb	r3, [r4, #20]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d02d      	beq.n	800839c <ucdr_serialize_uint64_t+0x128>
 8008340:	68a3      	ldr	r3, [r4, #8]
 8008342:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	68a3      	ldr	r3, [r4, #8]
 800834a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800834e:	705a      	strb	r2, [r3, #1]
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008356:	709a      	strb	r2, [r3, #2]
 8008358:	68a3      	ldr	r3, [r4, #8]
 800835a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800835e:	70da      	strb	r2, [r3, #3]
 8008360:	68a3      	ldr	r3, [r4, #8]
 8008362:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008366:	711a      	strb	r2, [r3, #4]
 8008368:	68a3      	ldr	r3, [r4, #8]
 800836a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800836e:	715a      	strb	r2, [r3, #5]
 8008370:	68a3      	ldr	r3, [r4, #8]
 8008372:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008376:	719a      	strb	r2, [r3, #6]
 8008378:	68a3      	ldr	r3, [r4, #8]
 800837a:	f89d 2000 	ldrb.w	r2, [sp]
 800837e:	71da      	strb	r2, [r3, #7]
 8008380:	68a2      	ldr	r2, [r4, #8]
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	3208      	adds	r2, #8
 8008386:	3308      	adds	r3, #8
 8008388:	2108      	movs	r1, #8
 800838a:	60a2      	str	r2, [r4, #8]
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	7561      	strb	r1, [r4, #21]
 8008390:	7da0      	ldrb	r0, [r4, #22]
 8008392:	f080 0001 	eor.w	r0, r0, #1
 8008396:	b002      	add	sp, #8
 8008398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800839c:	466b      	mov	r3, sp
 800839e:	cb03      	ldmia	r3!, {r0, r1}
 80083a0:	68a3      	ldr	r3, [r4, #8]
 80083a2:	6018      	str	r0, [r3, #0]
 80083a4:	6059      	str	r1, [r3, #4]
 80083a6:	e7eb      	b.n	8008380 <ucdr_serialize_uint64_t+0x10c>
 80083a8:	68a2      	ldr	r2, [r4, #8]
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	7da0      	ldrb	r0, [r4, #22]
 80083ae:	7567      	strb	r7, [r4, #21]
 80083b0:	1b92      	subs	r2, r2, r6
 80083b2:	1b9b      	subs	r3, r3, r6
 80083b4:	f080 0001 	eor.w	r0, r0, #1
 80083b8:	60a2      	str	r2, [r4, #8]
 80083ba:	6123      	str	r3, [r4, #16]
 80083bc:	b002      	add	sp, #8
 80083be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	68a3      	ldr	r3, [r4, #8]
 80083cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	68a3      	ldr	r3, [r4, #8]
 80083dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	68a3      	ldr	r3, [r4, #8]
 80083e4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	68a3      	ldr	r3, [r4, #8]
 80083f4:	f89d 2000 	ldrb.w	r2, [sp]
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	e78a      	b.n	8008312 <ucdr_serialize_uint64_t+0x9e>
 80083fc:	4628      	mov	r0, r5
 80083fe:	466d      	mov	r5, sp
 8008400:	4629      	mov	r1, r5
 8008402:	4632      	mov	r2, r6
 8008404:	f00d fb3b 	bl	8015a7e <memcpy>
 8008408:	68a0      	ldr	r0, [r4, #8]
 800840a:	4642      	mov	r2, r8
 800840c:	19a9      	adds	r1, r5, r6
 800840e:	f00d fb36 	bl	8015a7e <memcpy>
 8008412:	e77e      	b.n	8008312 <ucdr_serialize_uint64_t+0x9e>

08008414 <ucdr_serialize_int16_t>:
 8008414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	460b      	mov	r3, r1
 800841c:	2102      	movs	r1, #2
 800841e:	4604      	mov	r4, r0
 8008420:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008424:	f000 fc08 	bl	8008c38 <ucdr_buffer_alignment>
 8008428:	4601      	mov	r1, r0
 800842a:	4620      	mov	r0, r4
 800842c:	7d67      	ldrb	r7, [r4, #21]
 800842e:	f000 fc47 	bl	8008cc0 <ucdr_advance_buffer>
 8008432:	2102      	movs	r1, #2
 8008434:	4620      	mov	r0, r4
 8008436:	f000 fb9f 	bl	8008b78 <ucdr_check_buffer_available_for>
 800843a:	bb78      	cbnz	r0, 800849c <ucdr_serialize_int16_t+0x88>
 800843c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008440:	42ab      	cmp	r3, r5
 8008442:	d926      	bls.n	8008492 <ucdr_serialize_int16_t+0x7e>
 8008444:	1b5e      	subs	r6, r3, r5
 8008446:	60a3      	str	r3, [r4, #8]
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	f1c6 0802 	rsb	r8, r6, #2
 800844e:	4433      	add	r3, r6
 8008450:	6123      	str	r3, [r4, #16]
 8008452:	4641      	mov	r1, r8
 8008454:	4620      	mov	r0, r4
 8008456:	f000 fb9b 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 800845a:	2800      	cmp	r0, #0
 800845c:	d03b      	beq.n	80084d6 <ucdr_serialize_int16_t+0xc2>
 800845e:	7d23      	ldrb	r3, [r4, #20]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d04a      	beq.n	80084fa <ucdr_serialize_int16_t+0xe6>
 8008464:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008468:	702b      	strb	r3, [r5, #0]
 800846a:	2e00      	cmp	r6, #0
 800846c:	d040      	beq.n	80084f0 <ucdr_serialize_int16_t+0xdc>
 800846e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008472:	706b      	strb	r3, [r5, #1]
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	68a2      	ldr	r2, [r4, #8]
 8008478:	7da0      	ldrb	r0, [r4, #22]
 800847a:	3302      	adds	r3, #2
 800847c:	1b9e      	subs	r6, r3, r6
 800847e:	4442      	add	r2, r8
 8008480:	2302      	movs	r3, #2
 8008482:	f080 0001 	eor.w	r0, r0, #1
 8008486:	60a2      	str	r2, [r4, #8]
 8008488:	6126      	str	r6, [r4, #16]
 800848a:	7563      	strb	r3, [r4, #21]
 800848c:	b002      	add	sp, #8
 800848e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008492:	2102      	movs	r1, #2
 8008494:	4620      	mov	r0, r4
 8008496:	f000 fb7b 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 800849a:	b190      	cbz	r0, 80084c2 <ucdr_serialize_int16_t+0xae>
 800849c:	7d23      	ldrb	r3, [r4, #20]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	68a3      	ldr	r3, [r4, #8]
 80084a2:	d014      	beq.n	80084ce <ucdr_serialize_int16_t+0xba>
 80084a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80084a8:	701a      	strb	r2, [r3, #0]
 80084aa:	68a3      	ldr	r3, [r4, #8]
 80084ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80084b0:	705a      	strb	r2, [r3, #1]
 80084b2:	68a2      	ldr	r2, [r4, #8]
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	3202      	adds	r2, #2
 80084b8:	3302      	adds	r3, #2
 80084ba:	2102      	movs	r1, #2
 80084bc:	60a2      	str	r2, [r4, #8]
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	7561      	strb	r1, [r4, #21]
 80084c2:	7da0      	ldrb	r0, [r4, #22]
 80084c4:	f080 0001 	eor.w	r0, r0, #1
 80084c8:	b002      	add	sp, #8
 80084ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80084d2:	801a      	strh	r2, [r3, #0]
 80084d4:	e7ed      	b.n	80084b2 <ucdr_serialize_int16_t+0x9e>
 80084d6:	68a2      	ldr	r2, [r4, #8]
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	7da0      	ldrb	r0, [r4, #22]
 80084dc:	7567      	strb	r7, [r4, #21]
 80084de:	1b92      	subs	r2, r2, r6
 80084e0:	1b9b      	subs	r3, r3, r6
 80084e2:	f080 0001 	eor.w	r0, r0, #1
 80084e6:	60a2      	str	r2, [r4, #8]
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	b002      	add	sp, #8
 80084ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f0:	68a3      	ldr	r3, [r4, #8]
 80084f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	e7bc      	b.n	8008474 <ucdr_serialize_int16_t+0x60>
 80084fa:	4628      	mov	r0, r5
 80084fc:	f10d 0506 	add.w	r5, sp, #6
 8008500:	4629      	mov	r1, r5
 8008502:	4632      	mov	r2, r6
 8008504:	f00d fabb 	bl	8015a7e <memcpy>
 8008508:	68a0      	ldr	r0, [r4, #8]
 800850a:	4642      	mov	r2, r8
 800850c:	19a9      	adds	r1, r5, r6
 800850e:	f00d fab6 	bl	8015a7e <memcpy>
 8008512:	e7af      	b.n	8008474 <ucdr_serialize_int16_t+0x60>

08008514 <ucdr_deserialize_int16_t>:
 8008514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008518:	460d      	mov	r5, r1
 800851a:	2102      	movs	r1, #2
 800851c:	4604      	mov	r4, r0
 800851e:	f000 fb8b 	bl	8008c38 <ucdr_buffer_alignment>
 8008522:	4601      	mov	r1, r0
 8008524:	4620      	mov	r0, r4
 8008526:	f894 8015 	ldrb.w	r8, [r4, #21]
 800852a:	f000 fbc9 	bl	8008cc0 <ucdr_advance_buffer>
 800852e:	2102      	movs	r1, #2
 8008530:	4620      	mov	r0, r4
 8008532:	f000 fb21 	bl	8008b78 <ucdr_check_buffer_available_for>
 8008536:	bb60      	cbnz	r0, 8008592 <ucdr_deserialize_int16_t+0x7e>
 8008538:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800853c:	42be      	cmp	r6, r7
 800853e:	d923      	bls.n	8008588 <ucdr_deserialize_int16_t+0x74>
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	60a6      	str	r6, [r4, #8]
 8008544:	1bf6      	subs	r6, r6, r7
 8008546:	4433      	add	r3, r6
 8008548:	f1c6 0902 	rsb	r9, r6, #2
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	4649      	mov	r1, r9
 8008550:	4620      	mov	r0, r4
 8008552:	f000 fb1d 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008556:	2800      	cmp	r0, #0
 8008558:	d034      	beq.n	80085c4 <ucdr_deserialize_int16_t+0xb0>
 800855a:	7d23      	ldrb	r3, [r4, #20]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d042      	beq.n	80085e6 <ucdr_deserialize_int16_t+0xd2>
 8008560:	787b      	ldrb	r3, [r7, #1]
 8008562:	702b      	strb	r3, [r5, #0]
 8008564:	2e00      	cmp	r6, #0
 8008566:	d03a      	beq.n	80085de <ucdr_deserialize_int16_t+0xca>
 8008568:	783b      	ldrb	r3, [r7, #0]
 800856a:	706b      	strb	r3, [r5, #1]
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	68a2      	ldr	r2, [r4, #8]
 8008570:	7da0      	ldrb	r0, [r4, #22]
 8008572:	2102      	movs	r1, #2
 8008574:	3302      	adds	r3, #2
 8008576:	444a      	add	r2, r9
 8008578:	1b9b      	subs	r3, r3, r6
 800857a:	7561      	strb	r1, [r4, #21]
 800857c:	60a2      	str	r2, [r4, #8]
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	f080 0001 	eor.w	r0, r0, #1
 8008584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008588:	2102      	movs	r1, #2
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fb00 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008590:	b180      	cbz	r0, 80085b4 <ucdr_deserialize_int16_t+0xa0>
 8008592:	7d23      	ldrb	r3, [r4, #20]
 8008594:	2b01      	cmp	r3, #1
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	d011      	beq.n	80085be <ucdr_deserialize_int16_t+0xaa>
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	702b      	strb	r3, [r5, #0]
 800859e:	68a3      	ldr	r3, [r4, #8]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	706b      	strb	r3, [r5, #1]
 80085a4:	68a2      	ldr	r2, [r4, #8]
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	3202      	adds	r2, #2
 80085aa:	3302      	adds	r3, #2
 80085ac:	2102      	movs	r1, #2
 80085ae:	60a2      	str	r2, [r4, #8]
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	7561      	strb	r1, [r4, #21]
 80085b4:	7da0      	ldrb	r0, [r4, #22]
 80085b6:	f080 0001 	eor.w	r0, r0, #1
 80085ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	802b      	strh	r3, [r5, #0]
 80085c2:	e7ef      	b.n	80085a4 <ucdr_deserialize_int16_t+0x90>
 80085c4:	68a2      	ldr	r2, [r4, #8]
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	7da0      	ldrb	r0, [r4, #22]
 80085ca:	f884 8015 	strb.w	r8, [r4, #21]
 80085ce:	1b92      	subs	r2, r2, r6
 80085d0:	1b9b      	subs	r3, r3, r6
 80085d2:	60a2      	str	r2, [r4, #8]
 80085d4:	6123      	str	r3, [r4, #16]
 80085d6:	f080 0001 	eor.w	r0, r0, #1
 80085da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	706b      	strb	r3, [r5, #1]
 80085e4:	e7c2      	b.n	800856c <ucdr_deserialize_int16_t+0x58>
 80085e6:	4639      	mov	r1, r7
 80085e8:	4632      	mov	r2, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	f00d fa47 	bl	8015a7e <memcpy>
 80085f0:	68a1      	ldr	r1, [r4, #8]
 80085f2:	464a      	mov	r2, r9
 80085f4:	19a8      	adds	r0, r5, r6
 80085f6:	f00d fa42 	bl	8015a7e <memcpy>
 80085fa:	e7b7      	b.n	800856c <ucdr_deserialize_int16_t+0x58>

080085fc <ucdr_serialize_int32_t>:
 80085fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	4604      	mov	r4, r0
 8008604:	9101      	str	r1, [sp, #4]
 8008606:	2104      	movs	r1, #4
 8008608:	f000 fb16 	bl	8008c38 <ucdr_buffer_alignment>
 800860c:	4601      	mov	r1, r0
 800860e:	4620      	mov	r0, r4
 8008610:	7d67      	ldrb	r7, [r4, #21]
 8008612:	f000 fb55 	bl	8008cc0 <ucdr_advance_buffer>
 8008616:	2104      	movs	r1, #4
 8008618:	4620      	mov	r0, r4
 800861a:	f000 faad 	bl	8008b78 <ucdr_check_buffer_available_for>
 800861e:	2800      	cmp	r0, #0
 8008620:	d139      	bne.n	8008696 <ucdr_serialize_int32_t+0x9a>
 8008622:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008626:	42ab      	cmp	r3, r5
 8008628:	d930      	bls.n	800868c <ucdr_serialize_int32_t+0x90>
 800862a:	1b5e      	subs	r6, r3, r5
 800862c:	60a3      	str	r3, [r4, #8]
 800862e:	6923      	ldr	r3, [r4, #16]
 8008630:	f1c6 0804 	rsb	r8, r6, #4
 8008634:	4433      	add	r3, r6
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	4641      	mov	r1, r8
 800863a:	4620      	mov	r0, r4
 800863c:	f000 faa8 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008640:	2800      	cmp	r0, #0
 8008642:	d04c      	beq.n	80086de <ucdr_serialize_int32_t+0xe2>
 8008644:	7d23      	ldrb	r3, [r4, #20]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d063      	beq.n	8008712 <ucdr_serialize_int32_t+0x116>
 800864a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800864e:	702b      	strb	r3, [r5, #0]
 8008650:	2e00      	cmp	r6, #0
 8008652:	d051      	beq.n	80086f8 <ucdr_serialize_int32_t+0xfc>
 8008654:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008658:	706b      	strb	r3, [r5, #1]
 800865a:	2e01      	cmp	r6, #1
 800865c:	d050      	beq.n	8008700 <ucdr_serialize_int32_t+0x104>
 800865e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008662:	70ab      	strb	r3, [r5, #2]
 8008664:	2e02      	cmp	r6, #2
 8008666:	d04f      	beq.n	8008708 <ucdr_serialize_int32_t+0x10c>
 8008668:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800866c:	70eb      	strb	r3, [r5, #3]
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	68a2      	ldr	r2, [r4, #8]
 8008672:	7da0      	ldrb	r0, [r4, #22]
 8008674:	3304      	adds	r3, #4
 8008676:	1b9e      	subs	r6, r3, r6
 8008678:	4442      	add	r2, r8
 800867a:	2304      	movs	r3, #4
 800867c:	f080 0001 	eor.w	r0, r0, #1
 8008680:	60a2      	str	r2, [r4, #8]
 8008682:	6126      	str	r6, [r4, #16]
 8008684:	7563      	strb	r3, [r4, #21]
 8008686:	b002      	add	sp, #8
 8008688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868c:	2104      	movs	r1, #4
 800868e:	4620      	mov	r0, r4
 8008690:	f000 fa7e 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008694:	b1d0      	cbz	r0, 80086cc <ucdr_serialize_int32_t+0xd0>
 8008696:	7d23      	ldrb	r3, [r4, #20]
 8008698:	2b01      	cmp	r3, #1
 800869a:	68a3      	ldr	r3, [r4, #8]
 800869c:	d01c      	beq.n	80086d8 <ucdr_serialize_int32_t+0xdc>
 800869e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80086a2:	701a      	strb	r2, [r3, #0]
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80086aa:	705a      	strb	r2, [r3, #1]
 80086ac:	68a3      	ldr	r3, [r4, #8]
 80086ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80086b2:	709a      	strb	r2, [r3, #2]
 80086b4:	68a3      	ldr	r3, [r4, #8]
 80086b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80086ba:	70da      	strb	r2, [r3, #3]
 80086bc:	68a2      	ldr	r2, [r4, #8]
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	3204      	adds	r2, #4
 80086c2:	3304      	adds	r3, #4
 80086c4:	2104      	movs	r1, #4
 80086c6:	60a2      	str	r2, [r4, #8]
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	7561      	strb	r1, [r4, #21]
 80086cc:	7da0      	ldrb	r0, [r4, #22]
 80086ce:	f080 0001 	eor.w	r0, r0, #1
 80086d2:	b002      	add	sp, #8
 80086d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d8:	9a01      	ldr	r2, [sp, #4]
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	e7ee      	b.n	80086bc <ucdr_serialize_int32_t+0xc0>
 80086de:	68a2      	ldr	r2, [r4, #8]
 80086e0:	6923      	ldr	r3, [r4, #16]
 80086e2:	7da0      	ldrb	r0, [r4, #22]
 80086e4:	7567      	strb	r7, [r4, #21]
 80086e6:	1b92      	subs	r2, r2, r6
 80086e8:	1b9b      	subs	r3, r3, r6
 80086ea:	f080 0001 	eor.w	r0, r0, #1
 80086ee:	60a2      	str	r2, [r4, #8]
 80086f0:	6123      	str	r3, [r4, #16]
 80086f2:	b002      	add	sp, #8
 80086f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f8:	68a3      	ldr	r3, [r4, #8]
 80086fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008706:	701a      	strb	r2, [r3, #0]
 8008708:	68a3      	ldr	r3, [r4, #8]
 800870a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	e7ad      	b.n	800866e <ucdr_serialize_int32_t+0x72>
 8008712:	4628      	mov	r0, r5
 8008714:	ad01      	add	r5, sp, #4
 8008716:	4629      	mov	r1, r5
 8008718:	4632      	mov	r2, r6
 800871a:	f00d f9b0 	bl	8015a7e <memcpy>
 800871e:	68a0      	ldr	r0, [r4, #8]
 8008720:	4642      	mov	r2, r8
 8008722:	19a9      	adds	r1, r5, r6
 8008724:	f00d f9ab 	bl	8015a7e <memcpy>
 8008728:	e7a1      	b.n	800866e <ucdr_serialize_int32_t+0x72>
 800872a:	bf00      	nop

0800872c <ucdr_deserialize_int32_t>:
 800872c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008730:	460d      	mov	r5, r1
 8008732:	2104      	movs	r1, #4
 8008734:	4604      	mov	r4, r0
 8008736:	f000 fa7f 	bl	8008c38 <ucdr_buffer_alignment>
 800873a:	4601      	mov	r1, r0
 800873c:	4620      	mov	r0, r4
 800873e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008742:	f000 fabd 	bl	8008cc0 <ucdr_advance_buffer>
 8008746:	2104      	movs	r1, #4
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fa15 	bl	8008b78 <ucdr_check_buffer_available_for>
 800874e:	2800      	cmp	r0, #0
 8008750:	d138      	bne.n	80087c4 <ucdr_deserialize_int32_t+0x98>
 8008752:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008756:	42b7      	cmp	r7, r6
 8008758:	d92f      	bls.n	80087ba <ucdr_deserialize_int32_t+0x8e>
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	60a7      	str	r7, [r4, #8]
 800875e:	1bbf      	subs	r7, r7, r6
 8008760:	443b      	add	r3, r7
 8008762:	f1c7 0904 	rsb	r9, r7, #4
 8008766:	6123      	str	r3, [r4, #16]
 8008768:	4649      	mov	r1, r9
 800876a:	4620      	mov	r0, r4
 800876c:	f000 fa10 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008770:	2800      	cmp	r0, #0
 8008772:	d046      	beq.n	8008802 <ucdr_deserialize_int32_t+0xd6>
 8008774:	7d23      	ldrb	r3, [r4, #20]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d05c      	beq.n	8008834 <ucdr_deserialize_int32_t+0x108>
 800877a:	78f3      	ldrb	r3, [r6, #3]
 800877c:	702b      	strb	r3, [r5, #0]
 800877e:	2f00      	cmp	r7, #0
 8008780:	d04c      	beq.n	800881c <ucdr_deserialize_int32_t+0xf0>
 8008782:	78b3      	ldrb	r3, [r6, #2]
 8008784:	706b      	strb	r3, [r5, #1]
 8008786:	2f01      	cmp	r7, #1
 8008788:	f105 0302 	add.w	r3, r5, #2
 800878c:	d04a      	beq.n	8008824 <ucdr_deserialize_int32_t+0xf8>
 800878e:	7873      	ldrb	r3, [r6, #1]
 8008790:	70ab      	strb	r3, [r5, #2]
 8008792:	2f02      	cmp	r7, #2
 8008794:	f105 0303 	add.w	r3, r5, #3
 8008798:	d048      	beq.n	800882c <ucdr_deserialize_int32_t+0x100>
 800879a:	7833      	ldrb	r3, [r6, #0]
 800879c:	70eb      	strb	r3, [r5, #3]
 800879e:	6923      	ldr	r3, [r4, #16]
 80087a0:	68a2      	ldr	r2, [r4, #8]
 80087a2:	7da0      	ldrb	r0, [r4, #22]
 80087a4:	2104      	movs	r1, #4
 80087a6:	3304      	adds	r3, #4
 80087a8:	444a      	add	r2, r9
 80087aa:	1bdb      	subs	r3, r3, r7
 80087ac:	7561      	strb	r1, [r4, #21]
 80087ae:	60a2      	str	r2, [r4, #8]
 80087b0:	6123      	str	r3, [r4, #16]
 80087b2:	f080 0001 	eor.w	r0, r0, #1
 80087b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ba:	2104      	movs	r1, #4
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 f9e7 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 80087c2:	b1b0      	cbz	r0, 80087f2 <ucdr_deserialize_int32_t+0xc6>
 80087c4:	7d23      	ldrb	r3, [r4, #20]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	68a3      	ldr	r3, [r4, #8]
 80087ca:	d017      	beq.n	80087fc <ucdr_deserialize_int32_t+0xd0>
 80087cc:	78db      	ldrb	r3, [r3, #3]
 80087ce:	702b      	strb	r3, [r5, #0]
 80087d0:	68a3      	ldr	r3, [r4, #8]
 80087d2:	789b      	ldrb	r3, [r3, #2]
 80087d4:	706b      	strb	r3, [r5, #1]
 80087d6:	68a3      	ldr	r3, [r4, #8]
 80087d8:	785b      	ldrb	r3, [r3, #1]
 80087da:	70ab      	strb	r3, [r5, #2]
 80087dc:	68a3      	ldr	r3, [r4, #8]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	70eb      	strb	r3, [r5, #3]
 80087e2:	68a2      	ldr	r2, [r4, #8]
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	3204      	adds	r2, #4
 80087e8:	3304      	adds	r3, #4
 80087ea:	2104      	movs	r1, #4
 80087ec:	60a2      	str	r2, [r4, #8]
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	7561      	strb	r1, [r4, #21]
 80087f2:	7da0      	ldrb	r0, [r4, #22]
 80087f4:	f080 0001 	eor.w	r0, r0, #1
 80087f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	602b      	str	r3, [r5, #0]
 8008800:	e7ef      	b.n	80087e2 <ucdr_deserialize_int32_t+0xb6>
 8008802:	68a2      	ldr	r2, [r4, #8]
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	7da0      	ldrb	r0, [r4, #22]
 8008808:	f884 8015 	strb.w	r8, [r4, #21]
 800880c:	1bd2      	subs	r2, r2, r7
 800880e:	1bdb      	subs	r3, r3, r7
 8008810:	60a2      	str	r2, [r4, #8]
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	f080 0001 	eor.w	r0, r0, #1
 8008818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881c:	68a3      	ldr	r3, [r4, #8]
 800881e:	789b      	ldrb	r3, [r3, #2]
 8008820:	706b      	strb	r3, [r5, #1]
 8008822:	1cab      	adds	r3, r5, #2
 8008824:	68a2      	ldr	r2, [r4, #8]
 8008826:	7852      	ldrb	r2, [r2, #1]
 8008828:	f803 2b01 	strb.w	r2, [r3], #1
 800882c:	68a2      	ldr	r2, [r4, #8]
 800882e:	7812      	ldrb	r2, [r2, #0]
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	e7b4      	b.n	800879e <ucdr_deserialize_int32_t+0x72>
 8008834:	4631      	mov	r1, r6
 8008836:	463a      	mov	r2, r7
 8008838:	4628      	mov	r0, r5
 800883a:	f00d f920 	bl	8015a7e <memcpy>
 800883e:	68a1      	ldr	r1, [r4, #8]
 8008840:	464a      	mov	r2, r9
 8008842:	19e8      	adds	r0, r5, r7
 8008844:	f00d f91b 	bl	8015a7e <memcpy>
 8008848:	e7a9      	b.n	800879e <ucdr_deserialize_int32_t+0x72>
 800884a:	bf00      	nop

0800884c <ucdr_serialize_double>:
 800884c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008850:	2108      	movs	r1, #8
 8008852:	b082      	sub	sp, #8
 8008854:	4604      	mov	r4, r0
 8008856:	ed8d 0b00 	vstr	d0, [sp]
 800885a:	f000 f9ed 	bl	8008c38 <ucdr_buffer_alignment>
 800885e:	4601      	mov	r1, r0
 8008860:	4620      	mov	r0, r4
 8008862:	7d67      	ldrb	r7, [r4, #21]
 8008864:	f000 fa2c 	bl	8008cc0 <ucdr_advance_buffer>
 8008868:	2108      	movs	r1, #8
 800886a:	4620      	mov	r0, r4
 800886c:	f000 f984 	bl	8008b78 <ucdr_check_buffer_available_for>
 8008870:	2800      	cmp	r0, #0
 8008872:	d14e      	bne.n	8008912 <ucdr_serialize_double+0xc6>
 8008874:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008878:	42ab      	cmp	r3, r5
 800887a:	d945      	bls.n	8008908 <ucdr_serialize_double+0xbc>
 800887c:	1b5e      	subs	r6, r3, r5
 800887e:	60a3      	str	r3, [r4, #8]
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	f1c6 0808 	rsb	r8, r6, #8
 8008886:	4433      	add	r3, r6
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	4641      	mov	r1, r8
 800888c:	4620      	mov	r0, r4
 800888e:	f000 f97f 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008892:	2800      	cmp	r0, #0
 8008894:	d074      	beq.n	8008980 <ucdr_serialize_double+0x134>
 8008896:	7d23      	ldrb	r3, [r4, #20]
 8008898:	2b01      	cmp	r3, #1
 800889a:	f000 809b 	beq.w	80089d4 <ucdr_serialize_double+0x188>
 800889e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088a2:	702b      	strb	r3, [r5, #0]
 80088a4:	2e00      	cmp	r6, #0
 80088a6:	d078      	beq.n	800899a <ucdr_serialize_double+0x14e>
 80088a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80088ac:	706b      	strb	r3, [r5, #1]
 80088ae:	2e01      	cmp	r6, #1
 80088b0:	d077      	beq.n	80089a2 <ucdr_serialize_double+0x156>
 80088b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80088b6:	70ab      	strb	r3, [r5, #2]
 80088b8:	2e02      	cmp	r6, #2
 80088ba:	d076      	beq.n	80089aa <ucdr_serialize_double+0x15e>
 80088bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80088c0:	70eb      	strb	r3, [r5, #3]
 80088c2:	2e03      	cmp	r6, #3
 80088c4:	d075      	beq.n	80089b2 <ucdr_serialize_double+0x166>
 80088c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80088ca:	712b      	strb	r3, [r5, #4]
 80088cc:	2e04      	cmp	r6, #4
 80088ce:	d074      	beq.n	80089ba <ucdr_serialize_double+0x16e>
 80088d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80088d4:	716b      	strb	r3, [r5, #5]
 80088d6:	2e05      	cmp	r6, #5
 80088d8:	d073      	beq.n	80089c2 <ucdr_serialize_double+0x176>
 80088da:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80088de:	71ab      	strb	r3, [r5, #6]
 80088e0:	2e06      	cmp	r6, #6
 80088e2:	d072      	beq.n	80089ca <ucdr_serialize_double+0x17e>
 80088e4:	f89d 3000 	ldrb.w	r3, [sp]
 80088e8:	71eb      	strb	r3, [r5, #7]
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	68a2      	ldr	r2, [r4, #8]
 80088ee:	7da0      	ldrb	r0, [r4, #22]
 80088f0:	3308      	adds	r3, #8
 80088f2:	1b9e      	subs	r6, r3, r6
 80088f4:	4442      	add	r2, r8
 80088f6:	2308      	movs	r3, #8
 80088f8:	f080 0001 	eor.w	r0, r0, #1
 80088fc:	60a2      	str	r2, [r4, #8]
 80088fe:	6126      	str	r6, [r4, #16]
 8008900:	7563      	strb	r3, [r4, #21]
 8008902:	b002      	add	sp, #8
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008908:	2108      	movs	r1, #8
 800890a:	4620      	mov	r0, r4
 800890c:	f000 f940 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008910:	b350      	cbz	r0, 8008968 <ucdr_serialize_double+0x11c>
 8008912:	7d23      	ldrb	r3, [r4, #20]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d02d      	beq.n	8008974 <ucdr_serialize_double+0x128>
 8008918:	68a3      	ldr	r3, [r4, #8]
 800891a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	68a3      	ldr	r3, [r4, #8]
 8008922:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008926:	705a      	strb	r2, [r3, #1]
 8008928:	68a3      	ldr	r3, [r4, #8]
 800892a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800892e:	709a      	strb	r2, [r3, #2]
 8008930:	68a3      	ldr	r3, [r4, #8]
 8008932:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008936:	70da      	strb	r2, [r3, #3]
 8008938:	68a3      	ldr	r3, [r4, #8]
 800893a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800893e:	711a      	strb	r2, [r3, #4]
 8008940:	68a3      	ldr	r3, [r4, #8]
 8008942:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008946:	715a      	strb	r2, [r3, #5]
 8008948:	68a3      	ldr	r3, [r4, #8]
 800894a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800894e:	719a      	strb	r2, [r3, #6]
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	f89d 2000 	ldrb.w	r2, [sp]
 8008956:	71da      	strb	r2, [r3, #7]
 8008958:	68a2      	ldr	r2, [r4, #8]
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	3208      	adds	r2, #8
 800895e:	3308      	adds	r3, #8
 8008960:	2108      	movs	r1, #8
 8008962:	60a2      	str	r2, [r4, #8]
 8008964:	6123      	str	r3, [r4, #16]
 8008966:	7561      	strb	r1, [r4, #21]
 8008968:	7da0      	ldrb	r0, [r4, #22]
 800896a:	f080 0001 	eor.w	r0, r0, #1
 800896e:	b002      	add	sp, #8
 8008970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008974:	466b      	mov	r3, sp
 8008976:	cb03      	ldmia	r3!, {r0, r1}
 8008978:	68a3      	ldr	r3, [r4, #8]
 800897a:	6018      	str	r0, [r3, #0]
 800897c:	6059      	str	r1, [r3, #4]
 800897e:	e7eb      	b.n	8008958 <ucdr_serialize_double+0x10c>
 8008980:	68a2      	ldr	r2, [r4, #8]
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	7da0      	ldrb	r0, [r4, #22]
 8008986:	7567      	strb	r7, [r4, #21]
 8008988:	1b92      	subs	r2, r2, r6
 800898a:	1b9b      	subs	r3, r3, r6
 800898c:	f080 0001 	eor.w	r0, r0, #1
 8008990:	60a2      	str	r2, [r4, #8]
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	b002      	add	sp, #8
 8008996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	68a3      	ldr	r3, [r4, #8]
 80089a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	68a3      	ldr	r3, [r4, #8]
 80089ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80089b0:	701a      	strb	r2, [r3, #0]
 80089b2:	68a3      	ldr	r3, [r4, #8]
 80089b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80089c0:	701a      	strb	r2, [r3, #0]
 80089c2:	68a3      	ldr	r3, [r4, #8]
 80089c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80089c8:	701a      	strb	r2, [r3, #0]
 80089ca:	68a3      	ldr	r3, [r4, #8]
 80089cc:	f89d 2000 	ldrb.w	r2, [sp]
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	e78a      	b.n	80088ea <ucdr_serialize_double+0x9e>
 80089d4:	4628      	mov	r0, r5
 80089d6:	466d      	mov	r5, sp
 80089d8:	4629      	mov	r1, r5
 80089da:	4632      	mov	r2, r6
 80089dc:	f00d f84f 	bl	8015a7e <memcpy>
 80089e0:	68a0      	ldr	r0, [r4, #8]
 80089e2:	4642      	mov	r2, r8
 80089e4:	19a9      	adds	r1, r5, r6
 80089e6:	f00d f84a 	bl	8015a7e <memcpy>
 80089ea:	e77e      	b.n	80088ea <ucdr_serialize_double+0x9e>

080089ec <ucdr_deserialize_double>:
 80089ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f0:	460d      	mov	r5, r1
 80089f2:	2108      	movs	r1, #8
 80089f4:	4604      	mov	r4, r0
 80089f6:	f000 f91f 	bl	8008c38 <ucdr_buffer_alignment>
 80089fa:	4601      	mov	r1, r0
 80089fc:	4620      	mov	r0, r4
 80089fe:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008a02:	f000 f95d 	bl	8008cc0 <ucdr_advance_buffer>
 8008a06:	2108      	movs	r1, #8
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 f8b5 	bl	8008b78 <ucdr_check_buffer_available_for>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d151      	bne.n	8008ab6 <ucdr_deserialize_double+0xca>
 8008a12:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008a16:	42be      	cmp	r6, r7
 8008a18:	d948      	bls.n	8008aac <ucdr_deserialize_double+0xc0>
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	60a6      	str	r6, [r4, #8]
 8008a1e:	1bf6      	subs	r6, r6, r7
 8008a20:	4433      	add	r3, r6
 8008a22:	f1c6 0808 	rsb	r8, r6, #8
 8008a26:	6123      	str	r3, [r4, #16]
 8008a28:	4641      	mov	r1, r8
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 f8b0 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d06d      	beq.n	8008b10 <ucdr_deserialize_double+0x124>
 8008a34:	7d23      	ldrb	r3, [r4, #20]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	f000 8093 	beq.w	8008b62 <ucdr_deserialize_double+0x176>
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	702b      	strb	r3, [r5, #0]
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	d072      	beq.n	8008b2a <ucdr_deserialize_double+0x13e>
 8008a44:	79bb      	ldrb	r3, [r7, #6]
 8008a46:	706b      	strb	r3, [r5, #1]
 8008a48:	2e01      	cmp	r6, #1
 8008a4a:	f105 0302 	add.w	r3, r5, #2
 8008a4e:	d070      	beq.n	8008b32 <ucdr_deserialize_double+0x146>
 8008a50:	797b      	ldrb	r3, [r7, #5]
 8008a52:	70ab      	strb	r3, [r5, #2]
 8008a54:	2e02      	cmp	r6, #2
 8008a56:	f105 0303 	add.w	r3, r5, #3
 8008a5a:	d06e      	beq.n	8008b3a <ucdr_deserialize_double+0x14e>
 8008a5c:	793b      	ldrb	r3, [r7, #4]
 8008a5e:	70eb      	strb	r3, [r5, #3]
 8008a60:	2e03      	cmp	r6, #3
 8008a62:	f105 0304 	add.w	r3, r5, #4
 8008a66:	d06c      	beq.n	8008b42 <ucdr_deserialize_double+0x156>
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	712b      	strb	r3, [r5, #4]
 8008a6c:	2e04      	cmp	r6, #4
 8008a6e:	f105 0305 	add.w	r3, r5, #5
 8008a72:	d06a      	beq.n	8008b4a <ucdr_deserialize_double+0x15e>
 8008a74:	78bb      	ldrb	r3, [r7, #2]
 8008a76:	716b      	strb	r3, [r5, #5]
 8008a78:	2e05      	cmp	r6, #5
 8008a7a:	f105 0306 	add.w	r3, r5, #6
 8008a7e:	d068      	beq.n	8008b52 <ucdr_deserialize_double+0x166>
 8008a80:	787b      	ldrb	r3, [r7, #1]
 8008a82:	71ab      	strb	r3, [r5, #6]
 8008a84:	2e06      	cmp	r6, #6
 8008a86:	f105 0307 	add.w	r3, r5, #7
 8008a8a:	d066      	beq.n	8008b5a <ucdr_deserialize_double+0x16e>
 8008a8c:	783b      	ldrb	r3, [r7, #0]
 8008a8e:	71eb      	strb	r3, [r5, #7]
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	68a2      	ldr	r2, [r4, #8]
 8008a94:	7da0      	ldrb	r0, [r4, #22]
 8008a96:	3308      	adds	r3, #8
 8008a98:	1b9e      	subs	r6, r3, r6
 8008a9a:	2308      	movs	r3, #8
 8008a9c:	4442      	add	r2, r8
 8008a9e:	7563      	strb	r3, [r4, #21]
 8008aa0:	60a2      	str	r2, [r4, #8]
 8008aa2:	6126      	str	r6, [r4, #16]
 8008aa4:	f080 0001 	eor.w	r0, r0, #1
 8008aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aac:	2108      	movs	r1, #8
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 f86e 	bl	8008b90 <ucdr_check_final_buffer_behavior>
 8008ab4:	b310      	cbz	r0, 8008afc <ucdr_deserialize_double+0x110>
 8008ab6:	7d23      	ldrb	r3, [r4, #20]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	68a3      	ldr	r3, [r4, #8]
 8008abc:	d023      	beq.n	8008b06 <ucdr_deserialize_double+0x11a>
 8008abe:	79db      	ldrb	r3, [r3, #7]
 8008ac0:	702b      	strb	r3, [r5, #0]
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	799b      	ldrb	r3, [r3, #6]
 8008ac6:	706b      	strb	r3, [r5, #1]
 8008ac8:	68a3      	ldr	r3, [r4, #8]
 8008aca:	795b      	ldrb	r3, [r3, #5]
 8008acc:	70ab      	strb	r3, [r5, #2]
 8008ace:	68a3      	ldr	r3, [r4, #8]
 8008ad0:	791b      	ldrb	r3, [r3, #4]
 8008ad2:	70eb      	strb	r3, [r5, #3]
 8008ad4:	68a3      	ldr	r3, [r4, #8]
 8008ad6:	78db      	ldrb	r3, [r3, #3]
 8008ad8:	712b      	strb	r3, [r5, #4]
 8008ada:	68a3      	ldr	r3, [r4, #8]
 8008adc:	789b      	ldrb	r3, [r3, #2]
 8008ade:	716b      	strb	r3, [r5, #5]
 8008ae0:	68a3      	ldr	r3, [r4, #8]
 8008ae2:	785b      	ldrb	r3, [r3, #1]
 8008ae4:	71ab      	strb	r3, [r5, #6]
 8008ae6:	68a3      	ldr	r3, [r4, #8]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	71eb      	strb	r3, [r5, #7]
 8008aec:	68a2      	ldr	r2, [r4, #8]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	3208      	adds	r2, #8
 8008af2:	3308      	adds	r3, #8
 8008af4:	2108      	movs	r1, #8
 8008af6:	60a2      	str	r2, [r4, #8]
 8008af8:	6123      	str	r3, [r4, #16]
 8008afa:	7561      	strb	r1, [r4, #21]
 8008afc:	7da0      	ldrb	r0, [r4, #22]
 8008afe:	f080 0001 	eor.w	r0, r0, #1
 8008b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	606b      	str	r3, [r5, #4]
 8008b0c:	602a      	str	r2, [r5, #0]
 8008b0e:	e7ed      	b.n	8008aec <ucdr_deserialize_double+0x100>
 8008b10:	68a2      	ldr	r2, [r4, #8]
 8008b12:	6923      	ldr	r3, [r4, #16]
 8008b14:	7da0      	ldrb	r0, [r4, #22]
 8008b16:	f884 9015 	strb.w	r9, [r4, #21]
 8008b1a:	1b92      	subs	r2, r2, r6
 8008b1c:	1b9b      	subs	r3, r3, r6
 8008b1e:	60a2      	str	r2, [r4, #8]
 8008b20:	6123      	str	r3, [r4, #16]
 8008b22:	f080 0001 	eor.w	r0, r0, #1
 8008b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b2a:	68a3      	ldr	r3, [r4, #8]
 8008b2c:	799b      	ldrb	r3, [r3, #6]
 8008b2e:	706b      	strb	r3, [r5, #1]
 8008b30:	1cab      	adds	r3, r5, #2
 8008b32:	68a2      	ldr	r2, [r4, #8]
 8008b34:	7952      	ldrb	r2, [r2, #5]
 8008b36:	f803 2b01 	strb.w	r2, [r3], #1
 8008b3a:	68a2      	ldr	r2, [r4, #8]
 8008b3c:	7912      	ldrb	r2, [r2, #4]
 8008b3e:	f803 2b01 	strb.w	r2, [r3], #1
 8008b42:	68a2      	ldr	r2, [r4, #8]
 8008b44:	78d2      	ldrb	r2, [r2, #3]
 8008b46:	f803 2b01 	strb.w	r2, [r3], #1
 8008b4a:	68a2      	ldr	r2, [r4, #8]
 8008b4c:	7892      	ldrb	r2, [r2, #2]
 8008b4e:	f803 2b01 	strb.w	r2, [r3], #1
 8008b52:	68a2      	ldr	r2, [r4, #8]
 8008b54:	7852      	ldrb	r2, [r2, #1]
 8008b56:	f803 2b01 	strb.w	r2, [r3], #1
 8008b5a:	68a2      	ldr	r2, [r4, #8]
 8008b5c:	7812      	ldrb	r2, [r2, #0]
 8008b5e:	701a      	strb	r2, [r3, #0]
 8008b60:	e796      	b.n	8008a90 <ucdr_deserialize_double+0xa4>
 8008b62:	4639      	mov	r1, r7
 8008b64:	4632      	mov	r2, r6
 8008b66:	4628      	mov	r0, r5
 8008b68:	f00c ff89 	bl	8015a7e <memcpy>
 8008b6c:	68a1      	ldr	r1, [r4, #8]
 8008b6e:	4642      	mov	r2, r8
 8008b70:	19a8      	adds	r0, r5, r6
 8008b72:	f00c ff84 	bl	8015a7e <memcpy>
 8008b76:	e78b      	b.n	8008a90 <ucdr_deserialize_double+0xa4>

08008b78 <ucdr_check_buffer_available_for>:
 8008b78:	7d83      	ldrb	r3, [r0, #22]
 8008b7a:	b93b      	cbnz	r3, 8008b8c <ucdr_check_buffer_available_for+0x14>
 8008b7c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008b80:	4419      	add	r1, r3
 8008b82:	4288      	cmp	r0, r1
 8008b84:	bf34      	ite	cc
 8008b86:	2000      	movcc	r0, #0
 8008b88:	2001      	movcs	r0, #1
 8008b8a:	4770      	bx	lr
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	4770      	bx	lr

08008b90 <ucdr_check_final_buffer_behavior>:
 8008b90:	7d83      	ldrb	r3, [r0, #22]
 8008b92:	b943      	cbnz	r3, 8008ba6 <ucdr_check_final_buffer_behavior+0x16>
 8008b94:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008b98:	4291      	cmp	r1, r2
 8008b9a:	b510      	push	{r4, lr}
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	d205      	bcs.n	8008bac <ucdr_check_final_buffer_behavior+0x1c>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	4770      	bx	lr
 8008bac:	6982      	ldr	r2, [r0, #24]
 8008bae:	b13a      	cbz	r2, 8008bc0 <ucdr_check_final_buffer_behavior+0x30>
 8008bb0:	69c1      	ldr	r1, [r0, #28]
 8008bb2:	4790      	blx	r2
 8008bb4:	f080 0301 	eor.w	r3, r0, #1
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	75a0      	strb	r0, [r4, #22]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	bd10      	pop	{r4, pc}
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	75a0      	strb	r0, [r4, #22]
 8008bc4:	e7fa      	b.n	8008bbc <ucdr_check_final_buffer_behavior+0x2c>
 8008bc6:	bf00      	nop

08008bc8 <ucdr_set_on_full_buffer_callback>:
 8008bc8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop

08008bd0 <ucdr_init_buffer_origin_offset_endian>:
 8008bd0:	b410      	push	{r4}
 8008bd2:	9c01      	ldr	r4, [sp, #4]
 8008bd4:	6001      	str	r1, [r0, #0]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	6042      	str	r2, [r0, #4]
 8008bda:	190a      	adds	r2, r1, r4
 8008bdc:	441c      	add	r4, r3
 8008bde:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008be2:	6082      	str	r2, [r0, #8]
 8008be4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008be8:	7503      	strb	r3, [r0, #20]
 8008bea:	2200      	movs	r2, #0
 8008bec:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bf4:	7542      	strb	r2, [r0, #21]
 8008bf6:	7582      	strb	r2, [r0, #22]
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop

08008bfc <ucdr_init_buffer_origin_offset>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	9c04      	ldr	r4, [sp, #16]
 8008c02:	9400      	str	r4, [sp, #0]
 8008c04:	2401      	movs	r4, #1
 8008c06:	9401      	str	r4, [sp, #4]
 8008c08:	f7ff ffe2 	bl	8008bd0 <ucdr_init_buffer_origin_offset_endian>
 8008c0c:	b002      	add	sp, #8
 8008c0e:	bd10      	pop	{r4, pc}

08008c10 <ucdr_init_buffer_origin>:
 8008c10:	b510      	push	{r4, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	2400      	movs	r4, #0
 8008c16:	9400      	str	r4, [sp, #0]
 8008c18:	f7ff fff0 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 8008c1c:	b002      	add	sp, #8
 8008c1e:	bd10      	pop	{r4, pc}

08008c20 <ucdr_init_buffer>:
 8008c20:	2300      	movs	r3, #0
 8008c22:	f7ff bff5 	b.w	8008c10 <ucdr_init_buffer_origin>
 8008c26:	bf00      	nop

08008c28 <ucdr_alignment>:
 8008c28:	fbb0 f3f1 	udiv	r3, r0, r1
 8008c2c:	fb03 0011 	mls	r0, r3, r1, r0
 8008c30:	1a08      	subs	r0, r1, r0
 8008c32:	3901      	subs	r1, #1
 8008c34:	4008      	ands	r0, r1
 8008c36:	4770      	bx	lr

08008c38 <ucdr_buffer_alignment>:
 8008c38:	7d43      	ldrb	r3, [r0, #21]
 8008c3a:	428b      	cmp	r3, r1
 8008c3c:	d208      	bcs.n	8008c50 <ucdr_buffer_alignment+0x18>
 8008c3e:	6900      	ldr	r0, [r0, #16]
 8008c40:	fbb0 f3f1 	udiv	r3, r0, r1
 8008c44:	fb01 0013 	mls	r0, r1, r3, r0
 8008c48:	1a08      	subs	r0, r1, r0
 8008c4a:	3901      	subs	r1, #1
 8008c4c:	4008      	ands	r0, r1
 8008c4e:	4770      	bx	lr
 8008c50:	2000      	movs	r0, #0
 8008c52:	4770      	bx	lr

08008c54 <ucdr_align_to>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4604      	mov	r4, r0
 8008c58:	460d      	mov	r5, r1
 8008c5a:	f7ff ffed 	bl	8008c38 <ucdr_buffer_alignment>
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	6921      	ldr	r1, [r4, #16]
 8008c62:	7565      	strb	r5, [r4, #21]
 8008c64:	181a      	adds	r2, r3, r0
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	4408      	add	r0, r1
 8008c6c:	bf28      	it	cs
 8008c6e:	4613      	movcs	r3, r2
 8008c70:	6120      	str	r0, [r4, #16]
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	bd38      	pop	{r3, r4, r5, pc}
 8008c76:	bf00      	nop

08008c78 <ucdr_buffer_length>:
 8008c78:	6882      	ldr	r2, [r0, #8]
 8008c7a:	6800      	ldr	r0, [r0, #0]
 8008c7c:	1a10      	subs	r0, r2, r0
 8008c7e:	4770      	bx	lr

08008c80 <ucdr_buffer_remaining>:
 8008c80:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008c84:	1a10      	subs	r0, r2, r0
 8008c86:	4770      	bx	lr

08008c88 <ucdr_check_final_buffer_behavior_array>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	7d83      	ldrb	r3, [r0, #22]
 8008c8c:	b963      	cbnz	r3, 8008ca8 <ucdr_check_final_buffer_behavior_array+0x20>
 8008c8e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	4604      	mov	r4, r0
 8008c96:	460d      	mov	r5, r1
 8008c98:	d308      	bcc.n	8008cac <ucdr_check_final_buffer_behavior_array+0x24>
 8008c9a:	b139      	cbz	r1, 8008cac <ucdr_check_final_buffer_behavior_array+0x24>
 8008c9c:	6983      	ldr	r3, [r0, #24]
 8008c9e:	b163      	cbz	r3, 8008cba <ucdr_check_final_buffer_behavior_array+0x32>
 8008ca0:	69c1      	ldr	r1, [r0, #28]
 8008ca2:	4798      	blx	r3
 8008ca4:	75a0      	strb	r0, [r4, #22]
 8008ca6:	b108      	cbz	r0, 8008cac <ucdr_check_final_buffer_behavior_array+0x24>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	4620      	mov	r0, r4
 8008cae:	f7ff ffe7 	bl	8008c80 <ucdr_buffer_remaining>
 8008cb2:	42a8      	cmp	r0, r5
 8008cb4:	bf28      	it	cs
 8008cb6:	4628      	movcs	r0, r5
 8008cb8:	bd38      	pop	{r3, r4, r5, pc}
 8008cba:	2301      	movs	r3, #1
 8008cbc:	7583      	strb	r3, [r0, #22]
 8008cbe:	e7f3      	b.n	8008ca8 <ucdr_check_final_buffer_behavior_array+0x20>

08008cc0 <ucdr_advance_buffer>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	f7ff ff57 	bl	8008b78 <ucdr_check_buffer_available_for>
 8008cca:	b178      	cbz	r0, 8008cec <ucdr_advance_buffer+0x2c>
 8008ccc:	6923      	ldr	r3, [r4, #16]
 8008cce:	68a2      	ldr	r2, [r4, #8]
 8008cd0:	442b      	add	r3, r5
 8008cd2:	6123      	str	r3, [r4, #16]
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	442a      	add	r2, r5
 8008cd8:	7563      	strb	r3, [r4, #21]
 8008cda:	60a2      	str	r2, [r4, #8]
 8008cdc:	bd38      	pop	{r3, r4, r5, pc}
 8008cde:	68a2      	ldr	r2, [r4, #8]
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	4402      	add	r2, r0
 8008ce4:	4403      	add	r3, r0
 8008ce6:	1a2d      	subs	r5, r5, r0
 8008ce8:	60a2      	str	r2, [r4, #8]
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	4629      	mov	r1, r5
 8008cee:	2201      	movs	r2, #1
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f7ff ffc9 	bl	8008c88 <ucdr_check_final_buffer_behavior_array>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d1f1      	bne.n	8008cde <ucdr_advance_buffer+0x1e>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	7563      	strb	r3, [r4, #21]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}

08008d00 <rcl_get_zero_initialized_publisher>:
 8008d00:	4b01      	ldr	r3, [pc, #4]	@ (8008d08 <rcl_get_zero_initialized_publisher+0x8>)
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	08016b74 	.word	0x08016b74

08008d0c <rcl_publisher_init>:
 8008d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	b088      	sub	sp, #32
 8008d12:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	d06a      	beq.n	8008dee <rcl_publisher_init+0xe2>
 8008d18:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	4648      	mov	r0, r9
 8008d20:	460e      	mov	r6, r1
 8008d22:	4690      	mov	r8, r2
 8008d24:	461f      	mov	r7, r3
 8008d26:	f001 fb1b 	bl	800a360 <rcutils_allocator_is_valid>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d05f      	beq.n	8008dee <rcl_publisher_init+0xe2>
 8008d2e:	2c00      	cmp	r4, #0
 8008d30:	d05d      	beq.n	8008dee <rcl_publisher_init+0xe2>
 8008d32:	f8d4 a000 	ldr.w	sl, [r4]
 8008d36:	f1ba 0f00 	cmp.w	sl, #0
 8008d3a:	d004      	beq.n	8008d46 <rcl_publisher_init+0x3a>
 8008d3c:	2764      	movs	r7, #100	@ 0x64
 8008d3e:	4638      	mov	r0, r7
 8008d40:	b008      	add	sp, #32
 8008d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d46:	4630      	mov	r0, r6
 8008d48:	f005 ff10 	bl	800eb6c <rcl_node_is_valid>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d053      	beq.n	8008df8 <rcl_publisher_init+0xec>
 8008d50:	f1b8 0f00 	cmp.w	r8, #0
 8008d54:	d04b      	beq.n	8008dee <rcl_publisher_init+0xe2>
 8008d56:	2f00      	cmp	r7, #0
 8008d58:	d049      	beq.n	8008dee <rcl_publisher_init+0xe2>
 8008d5a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8008d5e:	aa07      	add	r2, sp, #28
 8008d60:	9205      	str	r2, [sp, #20]
 8008d62:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8008d66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d6a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008d6e:	f8cd a01c 	str.w	sl, [sp, #28]
 8008d72:	4639      	mov	r1, r7
 8008d74:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f005 ff6b 	bl	800ec54 <rcl_node_resolve_name>
 8008d7e:	4607      	mov	r7, r0
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d150      	bne.n	8008e26 <rcl_publisher_init+0x11a>
 8008d84:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 8008d88:	21c8      	movs	r1, #200	@ 0xc8
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	4798      	blx	r3
 8008d8e:	6020      	str	r0, [r4, #0]
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d04e      	beq.n	8008e32 <rcl_publisher_init+0x126>
 8008d94:	4630      	mov	r0, r6
 8008d96:	f005 ff0b 	bl	800ebb0 <rcl_node_get_rmw_handle>
 8008d9a:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	9a07      	ldr	r2, [sp, #28]
 8008da2:	6827      	ldr	r7, [r4, #0]
 8008da4:	462b      	mov	r3, r5
 8008da6:	4641      	mov	r1, r8
 8008da8:	f001 fc90 	bl	800a6cc <rmw_create_publisher>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8008db2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008db6:	b370      	cbz	r0, 8008e16 <rcl_publisher_init+0x10a>
 8008db8:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8008dbc:	f001 fd64 	bl	800a888 <rmw_publisher_get_actual_qos>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	4607      	mov	r7, r0
 8008dc4:	b9d0      	cbnz	r0, 8008dfc <rcl_publisher_init+0xf0>
 8008dc6:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8008dca:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8008dce:	4629      	mov	r1, r5
 8008dd0:	2270      	movs	r2, #112	@ 0x70
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f00c fe53 	bl	8015a7e <memcpy>
 8008dd8:	6832      	ldr	r2, [r6, #0]
 8008dda:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8008dde:	9807      	ldr	r0, [sp, #28]
 8008de0:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8008de2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008de4:	4798      	blx	r3
 8008de6:	4638      	mov	r0, r7
 8008de8:	b008      	add	sp, #32
 8008dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dee:	270b      	movs	r7, #11
 8008df0:	4638      	mov	r0, r7
 8008df2:	b008      	add	sp, #32
 8008df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df8:	27c8      	movs	r7, #200	@ 0xc8
 8008dfa:	e7a0      	b.n	8008d3e <rcl_publisher_init+0x32>
 8008dfc:	b18b      	cbz	r3, 8008e22 <rcl_publisher_init+0x116>
 8008dfe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008e02:	b142      	cbz	r2, 8008e16 <rcl_publisher_init+0x10a>
 8008e04:	4630      	mov	r0, r6
 8008e06:	f005 fed3 	bl	800ebb0 <rcl_node_get_rmw_handle>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8008e10:	f001 fd4a 	bl	800a8a8 <rmw_destroy_publisher>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8008e18:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	4790      	blx	r2
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	2701      	movs	r7, #1
 8008e24:	e7db      	b.n	8008dde <rcl_publisher_init+0xd2>
 8008e26:	2867      	cmp	r0, #103	@ 0x67
 8008e28:	d0d9      	beq.n	8008dde <rcl_publisher_init+0xd2>
 8008e2a:	2869      	cmp	r0, #105	@ 0x69
 8008e2c:	d003      	beq.n	8008e36 <rcl_publisher_init+0x12a>
 8008e2e:	280a      	cmp	r0, #10
 8008e30:	d1f7      	bne.n	8008e22 <rcl_publisher_init+0x116>
 8008e32:	270a      	movs	r7, #10
 8008e34:	e7d3      	b.n	8008dde <rcl_publisher_init+0xd2>
 8008e36:	2767      	movs	r7, #103	@ 0x67
 8008e38:	e7d1      	b.n	8008dde <rcl_publisher_init+0xd2>
 8008e3a:	bf00      	nop

08008e3c <rcl_publisher_get_default_options>:
 8008e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e3e:	4d1d      	ldr	r5, [pc, #116]	@ (8008eb4 <rcl_publisher_get_default_options+0x78>)
 8008e40:	491d      	ldr	r1, [pc, #116]	@ (8008eb8 <rcl_publisher_get_default_options+0x7c>)
 8008e42:	b08b      	sub	sp, #44	@ 0x2c
 8008e44:	2250      	movs	r2, #80	@ 0x50
 8008e46:	4604      	mov	r4, r0
 8008e48:	4628      	mov	r0, r5
 8008e4a:	f00c fe18 	bl	8015a7e <memcpy>
 8008e4e:	a802      	add	r0, sp, #8
 8008e50:	f001 fa78 	bl	800a344 <rcutils_get_default_allocator>
 8008e54:	f10d 0c08 	add.w	ip, sp, #8
 8008e58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008e5c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8008e60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008e64:	466e      	mov	r6, sp
 8008e66:	f8dc 3000 	ldr.w	r3, [ip]
 8008e6a:	f8ce 3000 	str.w	r3, [lr]
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f001 fbae 	bl	800a5d0 <rmw_get_default_publisher_options>
 8008e74:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008e78:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8008e7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008e80:	2700      	movs	r7, #0
 8008e82:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 8008e86:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 8008e8a:	f005 fe97 	bl	800ebbc <rcl_get_disable_loaned_message>
 8008e8e:	b958      	cbnz	r0, 8008ea8 <rcl_publisher_get_default_options+0x6c>
 8008e90:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8008e94:	f885 306c 	strb.w	r3, [r5, #108]	@ 0x6c
 8008e98:	4906      	ldr	r1, [pc, #24]	@ (8008eb4 <rcl_publisher_get_default_options+0x78>)
 8008e9a:	2270      	movs	r2, #112	@ 0x70
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f00c fdee 	bl	8015a7e <memcpy>
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	b00b      	add	sp, #44	@ 0x2c
 8008ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea8:	f001 fb22 	bl	800a4f0 <rcutils_reset_error>
 8008eac:	f885 706c 	strb.w	r7, [r5, #108]	@ 0x6c
 8008eb0:	e7f2      	b.n	8008e98 <rcl_publisher_get_default_options+0x5c>
 8008eb2:	bf00      	nop
 8008eb4:	2000c690 	.word	0x2000c690
 8008eb8:	08016b78 	.word	0x08016b78

08008ebc <rcl_publish>:
 8008ebc:	b1f8      	cbz	r0, 8008efe <rcl_publish+0x42>
 8008ebe:	6803      	ldr	r3, [r0, #0]
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	b1b3      	cbz	r3, 8008ef4 <rcl_publish+0x38>
 8008ec6:	4616      	mov	r6, r2
 8008ec8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008ecc:	b192      	cbz	r2, 8008ef4 <rcl_publish+0x38>
 8008ece:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8008ed2:	460d      	mov	r5, r1
 8008ed4:	f005 f948 	bl	800e168 <rcl_context_is_valid>
 8008ed8:	b160      	cbz	r0, 8008ef4 <rcl_publish+0x38>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008ee0:	b140      	cbz	r0, 8008ef4 <rcl_publish+0x38>
 8008ee2:	b155      	cbz	r5, 8008efa <rcl_publish+0x3e>
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	f001 fb90 	bl	800a60c <rmw_publish>
 8008eec:	3800      	subs	r0, #0
 8008eee:	bf18      	it	ne
 8008ef0:	2001      	movne	r0, #1
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008ef8:	bd70      	pop	{r4, r5, r6, pc}
 8008efa:	200b      	movs	r0, #11
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008f02:	4770      	bx	lr

08008f04 <rcl_publisher_is_valid>:
 8008f04:	b1a0      	cbz	r0, 8008f30 <rcl_publisher_is_valid+0x2c>
 8008f06:	6803      	ldr	r3, [r0, #0]
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	b173      	cbz	r3, 8008f2c <rcl_publisher_is_valid+0x28>
 8008f0e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008f12:	b15a      	cbz	r2, 8008f2c <rcl_publisher_is_valid+0x28>
 8008f14:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8008f18:	f005 f926 	bl	800e168 <rcl_context_is_valid>
 8008f1c:	b130      	cbz	r0, 8008f2c <rcl_publisher_is_valid+0x28>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008f24:	3800      	subs	r0, #0
 8008f26:	bf18      	it	ne
 8008f28:	2001      	movne	r0, #1
 8008f2a:	bd10      	pop	{r4, pc}
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	bd10      	pop	{r4, pc}
 8008f30:	2000      	movs	r0, #0
 8008f32:	4770      	bx	lr

08008f34 <rcl_publisher_is_valid_except_context>:
 8008f34:	b130      	cbz	r0, 8008f44 <rcl_publisher_is_valid_except_context+0x10>
 8008f36:	6800      	ldr	r0, [r0, #0]
 8008f38:	b120      	cbz	r0, 8008f44 <rcl_publisher_is_valid_except_context+0x10>
 8008f3a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8008f3e:	3800      	subs	r0, #0
 8008f40:	bf18      	it	ne
 8008f42:	2001      	movne	r0, #1
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop

08008f48 <_rcl_timer_time_jump>:
 8008f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	b084      	sub	sp, #16
 8008f50:	4614      	mov	r4, r2
 8008f52:	b131      	cbz	r1, 8008f62 <_rcl_timer_time_jump+0x1a>
 8008f54:	7803      	ldrb	r3, [r0, #0]
 8008f56:	3b02      	subs	r3, #2
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d93f      	bls.n	8008fdc <_rcl_timer_time_jump+0x94>
 8008f5c:	b004      	add	sp, #16
 8008f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	a902      	add	r1, sp, #8
 8008f66:	6818      	ldr	r0, [r3, #0]
 8008f68:	f006 fb24 	bl	800f5b4 <rcl_clock_get_now>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d1f5      	bne.n	8008f5c <_rcl_timer_time_jump+0x14>
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	2105      	movs	r1, #5
 8008f74:	3020      	adds	r0, #32
 8008f76:	f001 fa01 	bl	800a37c <__atomic_load_8>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	4681      	mov	r9, r0
 8008f7e:	4688      	mov	r8, r1
 8008f80:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8008f84:	2105      	movs	r1, #5
 8008f86:	f001 f9f9 	bl	800a37c <__atomic_load_8>
 8008f8a:	4607      	mov	r7, r0
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	460e      	mov	r6, r1
 8008f90:	3018      	adds	r0, #24
 8008f92:	2105      	movs	r1, #5
 8008f94:	f001 f9f2 	bl	800a37c <__atomic_load_8>
 8008f98:	782b      	ldrb	r3, [r5, #0]
 8008f9a:	9a02      	ldr	r2, [sp, #8]
 8008f9c:	3b02      	subs	r3, #2
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	4682      	mov	sl, r0
 8008fa6:	d937      	bls.n	8009018 <_rcl_timer_time_jump+0xd0>
 8008fa8:	42ba      	cmp	r2, r7
 8008faa:	eb73 0106 	sbcs.w	r1, r3, r6
 8008fae:	da5f      	bge.n	8009070 <_rcl_timer_time_jump+0x128>
 8008fb0:	454a      	cmp	r2, r9
 8008fb2:	eb73 0108 	sbcs.w	r1, r3, r8
 8008fb6:	dad1      	bge.n	8008f5c <_rcl_timer_time_jump+0x14>
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	eb1a 0202 	adds.w	r2, sl, r2
 8008fbe:	eb43 0305 	adc.w	r3, r3, r5
 8008fc2:	2505      	movs	r5, #5
 8008fc4:	3028      	adds	r0, #40	@ 0x28
 8008fc6:	9500      	str	r5, [sp, #0]
 8008fc8:	f001 fa0e 	bl	800a3e8 <__atomic_store_8>
 8008fcc:	6820      	ldr	r0, [r4, #0]
 8008fce:	9500      	str	r5, [sp, #0]
 8008fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fd4:	3020      	adds	r0, #32
 8008fd6:	f001 fa07 	bl	800a3e8 <__atomic_store_8>
 8008fda:	e7bf      	b.n	8008f5c <_rcl_timer_time_jump+0x14>
 8008fdc:	6813      	ldr	r3, [r2, #0]
 8008fde:	a902      	add	r1, sp, #8
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	f006 fae7 	bl	800f5b4 <rcl_clock_get_now>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d1b8      	bne.n	8008f5c <_rcl_timer_time_jump+0x14>
 8008fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	d0b4      	beq.n	8008f5c <_rcl_timer_time_jump+0x14>
 8008ff2:	6820      	ldr	r0, [r4, #0]
 8008ff4:	2105      	movs	r1, #5
 8008ff6:	3028      	adds	r0, #40	@ 0x28
 8008ff8:	f001 f9c0 	bl	800a37c <__atomic_load_8>
 8008ffc:	9d02      	ldr	r5, [sp, #8]
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	4602      	mov	r2, r0
 8009002:	6820      	ldr	r0, [r4, #0]
 8009004:	1b52      	subs	r2, r2, r5
 8009006:	f04f 0405 	mov.w	r4, #5
 800900a:	9400      	str	r4, [sp, #0]
 800900c:	eb61 0303 	sbc.w	r3, r1, r3
 8009010:	3030      	adds	r0, #48	@ 0x30
 8009012:	f001 f9e9 	bl	800a3e8 <__atomic_store_8>
 8009016:	e7a1      	b.n	8008f5c <_rcl_timer_time_jump+0x14>
 8009018:	4313      	orrs	r3, r2
 800901a:	d09f      	beq.n	8008f5c <_rcl_timer_time_jump+0x14>
 800901c:	6820      	ldr	r0, [r4, #0]
 800901e:	f04f 0805 	mov.w	r8, #5
 8009022:	2300      	movs	r3, #0
 8009024:	f8cd 8000 	str.w	r8, [sp]
 8009028:	3030      	adds	r0, #48	@ 0x30
 800902a:	2200      	movs	r2, #0
 800902c:	f001 fa12 	bl	800a454 <__atomic_exchange_8>
 8009030:	ea51 0300 	orrs.w	r3, r1, r0
 8009034:	4606      	mov	r6, r0
 8009036:	460f      	mov	r7, r1
 8009038:	d090      	beq.n	8008f5c <_rcl_timer_time_jump+0x14>
 800903a:	9a02      	ldr	r2, [sp, #8]
 800903c:	9b03      	ldr	r3, [sp, #12]
 800903e:	f8cd 8000 	str.w	r8, [sp]
 8009042:	1a12      	subs	r2, r2, r0
 8009044:	6820      	ldr	r0, [r4, #0]
 8009046:	eb63 0301 	sbc.w	r3, r3, r1
 800904a:	eb12 020a 	adds.w	r2, r2, sl
 800904e:	eb43 0305 	adc.w	r3, r3, r5
 8009052:	3028      	adds	r0, #40	@ 0x28
 8009054:	f001 f9c8 	bl	800a3e8 <__atomic_store_8>
 8009058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800905c:	f8cd 8000 	str.w	r8, [sp]
 8009060:	6820      	ldr	r0, [r4, #0]
 8009062:	1b92      	subs	r2, r2, r6
 8009064:	eb63 0307 	sbc.w	r3, r3, r7
 8009068:	3020      	adds	r0, #32
 800906a:	f001 f9bd 	bl	800a3e8 <__atomic_store_8>
 800906e:	e775      	b.n	8008f5c <_rcl_timer_time_jump+0x14>
 8009070:	6820      	ldr	r0, [r4, #0]
 8009072:	3008      	adds	r0, #8
 8009074:	f005 f9d6 	bl	800e424 <rcl_trigger_guard_condition>
 8009078:	e770      	b.n	8008f5c <_rcl_timer_time_jump+0x14>
 800907a:	bf00      	nop

0800907c <rcl_get_zero_initialized_timer>:
 800907c:	4b01      	ldr	r3, [pc, #4]	@ (8009084 <rcl_get_zero_initialized_timer+0x8>)
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	08016bc8 	.word	0x08016bc8

08009088 <rcl_timer_init>:
 8009088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800908c:	b0af      	sub	sp, #188	@ 0xbc
 800908e:	4604      	mov	r4, r0
 8009090:	a839      	add	r0, sp, #228	@ 0xe4
 8009092:	460d      	mov	r5, r1
 8009094:	4690      	mov	r8, r2
 8009096:	f001 f963 	bl	800a360 <rcutils_allocator_is_valid>
 800909a:	2800      	cmp	r0, #0
 800909c:	d06a      	beq.n	8009174 <rcl_timer_init+0xec>
 800909e:	2c00      	cmp	r4, #0
 80090a0:	d068      	beq.n	8009174 <rcl_timer_init+0xec>
 80090a2:	2d00      	cmp	r5, #0
 80090a4:	d066      	beq.n	8009174 <rcl_timer_init+0xec>
 80090a6:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	db63      	blt.n	8009174 <rcl_timer_init+0xec>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	b123      	cbz	r3, 80090ba <rcl_timer_init+0x32>
 80090b0:	2664      	movs	r6, #100	@ 0x64
 80090b2:	4630      	mov	r0, r6
 80090b4:	b02f      	add	sp, #188	@ 0xbc
 80090b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ba:	a908      	add	r1, sp, #32
 80090bc:	4628      	mov	r0, r5
 80090be:	f006 fa79 	bl	800f5b4 <rcl_clock_get_now>
 80090c2:	4606      	mov	r6, r0
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d1f4      	bne.n	80090b2 <rcl_timer_init+0x2a>
 80090c8:	ae06      	add	r6, sp, #24
 80090ca:	4630      	mov	r0, r6
 80090cc:	e9cd 5816 	strd	r5, r8, [sp, #88]	@ 0x58
 80090d0:	f005 f8b0 	bl	800e234 <rcl_get_zero_initialized_guard_condition>
 80090d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80090d8:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80090dc:	ae0b      	add	r6, sp, #44	@ 0x2c
 80090de:	e889 0003 	stmia.w	r9, {r0, r1}
 80090e2:	4630      	mov	r0, r6
 80090e4:	f005 f982 	bl	800e3ec <rcl_guard_condition_get_default_options>
 80090e8:	ab0d      	add	r3, sp, #52	@ 0x34
 80090ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80090f2:	4641      	mov	r1, r8
 80090f4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80090f8:	4648      	mov	r0, r9
 80090fa:	f005 f8a5 	bl	800e248 <rcl_guard_condition_init>
 80090fe:	4606      	mov	r6, r0
 8009100:	2800      	cmp	r0, #0
 8009102:	d1d6      	bne.n	80090b2 <rcl_timer_init+0x2a>
 8009104:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d038      	beq.n	800917e <rcl_timer_init+0xf6>
 800910c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800910e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009110:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8009114:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8009118:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800911c:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 800911e:	ed9f 7b2e 	vldr	d7, [pc, #184]	@ 80091d8 <rcl_timer_init+0x150>
 8009122:	19d0      	adds	r0, r2, r7
 8009124:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8009126:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 800912a:	eb43 0107 	adc.w	r1, r3, r7
 800912e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8009132:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8009136:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800913a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800913e:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 8009142:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009146:	f8dc 3000 	ldr.w	r3, [ip]
 800914a:	f8ce 3000 	str.w	r3, [lr]
 800914e:	f04f 0800 	mov.w	r8, #0
 8009152:	4619      	mov	r1, r3
 8009154:	e9cd 882a 	strd	r8, r8, [sp, #168]	@ 0xa8
 8009158:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800915a:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 800915e:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8009162:	2060      	movs	r0, #96	@ 0x60
 8009164:	4798      	blx	r3
 8009166:	6020      	str	r0, [r4, #0]
 8009168:	b358      	cbz	r0, 80091c2 <rcl_timer_init+0x13a>
 800916a:	2260      	movs	r2, #96	@ 0x60
 800916c:	a916      	add	r1, sp, #88	@ 0x58
 800916e:	f00c fc86 	bl	8015a7e <memcpy>
 8009172:	e79e      	b.n	80090b2 <rcl_timer_init+0x2a>
 8009174:	260b      	movs	r6, #11
 8009176:	4630      	mov	r0, r6
 8009178:	b02f      	add	sp, #188	@ 0xbc
 800917a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800917e:	2001      	movs	r0, #1
 8009180:	2100      	movs	r1, #0
 8009182:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8009186:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800918a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800918e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8009192:	4a13      	ldr	r2, [pc, #76]	@ (80091e0 <rcl_timer_init+0x158>)
 8009194:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8009198:	9405      	str	r4, [sp, #20]
 800919a:	9204      	str	r2, [sp, #16]
 800919c:	ab12      	add	r3, sp, #72	@ 0x48
 800919e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80091a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80091a4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80091a8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80091ac:	4628      	mov	r0, r5
 80091ae:	f006 fa0d 	bl	800f5cc <rcl_clock_add_jump_callback>
 80091b2:	4680      	mov	r8, r0
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d0a9      	beq.n	800910c <rcl_timer_init+0x84>
 80091b8:	4648      	mov	r0, r9
 80091ba:	f005 f8f1 	bl	800e3a0 <rcl_guard_condition_fini>
 80091be:	4646      	mov	r6, r8
 80091c0:	e777      	b.n	80090b2 <rcl_timer_init+0x2a>
 80091c2:	4648      	mov	r0, r9
 80091c4:	f005 f8ec 	bl	800e3a0 <rcl_guard_condition_fini>
 80091c8:	4905      	ldr	r1, [pc, #20]	@ (80091e0 <rcl_timer_init+0x158>)
 80091ca:	4622      	mov	r2, r4
 80091cc:	4628      	mov	r0, r5
 80091ce:	f006 fa5f 	bl	800f690 <rcl_clock_remove_jump_callback>
 80091d2:	260a      	movs	r6, #10
 80091d4:	e76d      	b.n	80090b2 <rcl_timer_init+0x2a>
 80091d6:	bf00      	nop
	...
 80091e0:	08008f49 	.word	0x08008f49

080091e4 <rcl_timer_call>:
 80091e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	b087      	sub	sp, #28
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d06d      	beq.n	80092ca <rcl_timer_call+0xe6>
 80091ee:	6803      	ldr	r3, [r0, #0]
 80091f0:	4604      	mov	r4, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d063      	beq.n	80092be <rcl_timer_call+0xda>
 80091f6:	f3bf 8f5b 	dmb	ish
 80091fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80091fe:	f3bf 8f5b 	dmb	ish
 8009202:	2b00      	cmp	r3, #0
 8009204:	d150      	bne.n	80092a8 <rcl_timer_call+0xc4>
 8009206:	6803      	ldr	r3, [r0, #0]
 8009208:	a904      	add	r1, sp, #16
 800920a:	6818      	ldr	r0, [r3, #0]
 800920c:	f006 f9d2 	bl	800f5b4 <rcl_clock_get_now>
 8009210:	4605      	mov	r5, r0
 8009212:	2800      	cmp	r0, #0
 8009214:	d14a      	bne.n	80092ac <rcl_timer_call+0xc8>
 8009216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	db4a      	blt.n	80092b4 <rcl_timer_call+0xd0>
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	f04f 0a05 	mov.w	sl, #5
 8009224:	f8cd a000 	str.w	sl, [sp]
 8009228:	3020      	adds	r0, #32
 800922a:	f001 f913 	bl	800a454 <__atomic_exchange_8>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	f3bf 8f5b 	dmb	ish
 8009234:	4680      	mov	r8, r0
 8009236:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800923a:	f3bf 8f5b 	dmb	ish
 800923e:	6820      	ldr	r0, [r4, #0]
 8009240:	4689      	mov	r9, r1
 8009242:	3028      	adds	r0, #40	@ 0x28
 8009244:	4651      	mov	r1, sl
 8009246:	f001 f899 	bl	800a37c <__atomic_load_8>
 800924a:	4606      	mov	r6, r0
 800924c:	6820      	ldr	r0, [r4, #0]
 800924e:	460f      	mov	r7, r1
 8009250:	3018      	adds	r0, #24
 8009252:	4651      	mov	r1, sl
 8009254:	f001 f892 	bl	800a37c <__atomic_load_8>
 8009258:	1836      	adds	r6, r6, r0
 800925a:	4602      	mov	r2, r0
 800925c:	4682      	mov	sl, r0
 800925e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8009262:	eb47 0701 	adc.w	r7, r7, r1
 8009266:	4286      	cmp	r6, r0
 8009268:	460b      	mov	r3, r1
 800926a:	eb77 010c 	sbcs.w	r1, r7, ip
 800926e:	da04      	bge.n	800927a <rcl_timer_call+0x96>
 8009270:	ea53 0102 	orrs.w	r1, r3, r2
 8009274:	d12e      	bne.n	80092d4 <rcl_timer_call+0xf0>
 8009276:	4606      	mov	r6, r0
 8009278:	4667      	mov	r7, ip
 800927a:	6820      	ldr	r0, [r4, #0]
 800927c:	2105      	movs	r1, #5
 800927e:	4632      	mov	r2, r6
 8009280:	463b      	mov	r3, r7
 8009282:	3028      	adds	r0, #40	@ 0x28
 8009284:	9100      	str	r1, [sp, #0]
 8009286:	f001 f8af 	bl	800a3e8 <__atomic_store_8>
 800928a:	f1bb 0f00 	cmp.w	fp, #0
 800928e:	d00d      	beq.n	80092ac <rcl_timer_call+0xc8>
 8009290:	9a04      	ldr	r2, [sp, #16]
 8009292:	9b05      	ldr	r3, [sp, #20]
 8009294:	ebb2 0208 	subs.w	r2, r2, r8
 8009298:	4620      	mov	r0, r4
 800929a:	eb63 0309 	sbc.w	r3, r3, r9
 800929e:	47d8      	blx	fp
 80092a0:	4628      	mov	r0, r5
 80092a2:	b007      	add	sp, #28
 80092a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a8:	f240 3521 	movw	r5, #801	@ 0x321
 80092ac:	4628      	mov	r0, r5
 80092ae:	b007      	add	sp, #28
 80092b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b4:	2501      	movs	r5, #1
 80092b6:	4628      	mov	r0, r5
 80092b8:	b007      	add	sp, #28
 80092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092be:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80092c2:	4628      	mov	r0, r5
 80092c4:	b007      	add	sp, #28
 80092c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ca:	250b      	movs	r5, #11
 80092cc:	4628      	mov	r0, r5
 80092ce:	b007      	add	sp, #28
 80092d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d4:	1b80      	subs	r0, r0, r6
 80092d6:	eb6c 0107 	sbc.w	r1, ip, r7
 80092da:	3801      	subs	r0, #1
 80092dc:	f161 0100 	sbc.w	r1, r1, #0
 80092e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80092e4:	f7f6 ffe4 	bl	80002b0 <__aeabi_ldivmod>
 80092e8:	9b02      	ldr	r3, [sp, #8]
 80092ea:	3001      	adds	r0, #1
 80092ec:	f141 0100 	adc.w	r1, r1, #0
 80092f0:	fb00 f303 	mul.w	r3, r0, r3
 80092f4:	fb01 330a 	mla	r3, r1, sl, r3
 80092f8:	fba0 0a0a 	umull	r0, sl, r0, sl
 80092fc:	1986      	adds	r6, r0, r6
 80092fe:	4453      	add	r3, sl
 8009300:	eb43 0707 	adc.w	r7, r3, r7
 8009304:	e7b9      	b.n	800927a <rcl_timer_call+0x96>
 8009306:	bf00      	nop

08009308 <rcl_timer_is_ready>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	b378      	cbz	r0, 800936e <rcl_timer_is_ready+0x66>
 800930e:	6803      	ldr	r3, [r0, #0]
 8009310:	4604      	mov	r4, r0
 8009312:	b383      	cbz	r3, 8009376 <rcl_timer_is_ready+0x6e>
 8009314:	460d      	mov	r5, r1
 8009316:	b351      	cbz	r1, 800936e <rcl_timer_is_ready+0x66>
 8009318:	f3bf 8f5b 	dmb	ish
 800931c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009320:	f3bf 8f5b 	dmb	ish
 8009324:	b953      	cbnz	r3, 800933c <rcl_timer_is_ready+0x34>
 8009326:	6803      	ldr	r3, [r0, #0]
 8009328:	4669      	mov	r1, sp
 800932a:	6818      	ldr	r0, [r3, #0]
 800932c:	f006 f942 	bl	800f5b4 <rcl_clock_get_now>
 8009330:	4606      	mov	r6, r0
 8009332:	b140      	cbz	r0, 8009346 <rcl_timer_is_ready+0x3e>
 8009334:	f240 3321 	movw	r3, #801	@ 0x321
 8009338:	4298      	cmp	r0, r3
 800933a:	d101      	bne.n	8009340 <rcl_timer_is_ready+0x38>
 800933c:	2600      	movs	r6, #0
 800933e:	702e      	strb	r6, [r5, #0]
 8009340:	4630      	mov	r0, r6
 8009342:	b002      	add	sp, #8
 8009344:	bd70      	pop	{r4, r5, r6, pc}
 8009346:	6820      	ldr	r0, [r4, #0]
 8009348:	2105      	movs	r1, #5
 800934a:	3028      	adds	r0, #40	@ 0x28
 800934c:	f001 f816 	bl	800a37c <__atomic_load_8>
 8009350:	9b00      	ldr	r3, [sp, #0]
 8009352:	1ac0      	subs	r0, r0, r3
 8009354:	9b01      	ldr	r3, [sp, #4]
 8009356:	eb61 0103 	sbc.w	r1, r1, r3
 800935a:	2801      	cmp	r0, #1
 800935c:	f171 0300 	sbcs.w	r3, r1, #0
 8009360:	bfb4      	ite	lt
 8009362:	2301      	movlt	r3, #1
 8009364:	2300      	movge	r3, #0
 8009366:	4630      	mov	r0, r6
 8009368:	702b      	strb	r3, [r5, #0]
 800936a:	b002      	add	sp, #8
 800936c:	bd70      	pop	{r4, r5, r6, pc}
 800936e:	260b      	movs	r6, #11
 8009370:	4630      	mov	r0, r6
 8009372:	b002      	add	sp, #8
 8009374:	bd70      	pop	{r4, r5, r6, pc}
 8009376:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800937a:	e7e1      	b.n	8009340 <rcl_timer_is_ready+0x38>

0800937c <rcl_timer_get_time_until_next_call>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	b330      	cbz	r0, 80093d0 <rcl_timer_get_time_until_next_call+0x54>
 8009382:	6803      	ldr	r3, [r0, #0]
 8009384:	4604      	mov	r4, r0
 8009386:	b33b      	cbz	r3, 80093d8 <rcl_timer_get_time_until_next_call+0x5c>
 8009388:	460d      	mov	r5, r1
 800938a:	b309      	cbz	r1, 80093d0 <rcl_timer_get_time_until_next_call+0x54>
 800938c:	f3bf 8f5b 	dmb	ish
 8009390:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009394:	f3bf 8f5b 	dmb	ish
 8009398:	b9ab      	cbnz	r3, 80093c6 <rcl_timer_get_time_until_next_call+0x4a>
 800939a:	6803      	ldr	r3, [r0, #0]
 800939c:	4669      	mov	r1, sp
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	f006 f908 	bl	800f5b4 <rcl_clock_get_now>
 80093a4:	4606      	mov	r6, r0
 80093a6:	b958      	cbnz	r0, 80093c0 <rcl_timer_get_time_until_next_call+0x44>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	2105      	movs	r1, #5
 80093ac:	3028      	adds	r0, #40	@ 0x28
 80093ae:	f000 ffe5 	bl	800a37c <__atomic_load_8>
 80093b2:	9b00      	ldr	r3, [sp, #0]
 80093b4:	1ac0      	subs	r0, r0, r3
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	6028      	str	r0, [r5, #0]
 80093ba:	eb61 0103 	sbc.w	r1, r1, r3
 80093be:	6069      	str	r1, [r5, #4]
 80093c0:	4630      	mov	r0, r6
 80093c2:	b002      	add	sp, #8
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	f240 3621 	movw	r6, #801	@ 0x321
 80093ca:	4630      	mov	r0, r6
 80093cc:	b002      	add	sp, #8
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	260b      	movs	r6, #11
 80093d2:	4630      	mov	r0, r6
 80093d4:	b002      	add	sp, #8
 80093d6:	bd70      	pop	{r4, r5, r6, pc}
 80093d8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80093dc:	e7f0      	b.n	80093c0 <rcl_timer_get_time_until_next_call+0x44>
 80093de:	bf00      	nop

080093e0 <rcl_timer_get_guard_condition>:
 80093e0:	b130      	cbz	r0, 80093f0 <rcl_timer_get_guard_condition+0x10>
 80093e2:	6800      	ldr	r0, [r0, #0]
 80093e4:	b120      	cbz	r0, 80093f0 <rcl_timer_get_guard_condition+0x10>
 80093e6:	68c3      	ldr	r3, [r0, #12]
 80093e8:	b10b      	cbz	r3, 80093ee <rcl_timer_get_guard_condition+0xe>
 80093ea:	3008      	adds	r0, #8
 80093ec:	4770      	bx	lr
 80093ee:	4618      	mov	r0, r3
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop

080093f4 <_rclc_check_for_new_data>:
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d046      	beq.n	8009486 <_rclc_check_for_new_data+0x92>
 80093f8:	b510      	push	{r4, lr}
 80093fa:	7802      	ldrb	r2, [r0, #0]
 80093fc:	b084      	sub	sp, #16
 80093fe:	4603      	mov	r3, r0
 8009400:	2a0a      	cmp	r2, #10
 8009402:	d842      	bhi.n	800948a <_rclc_check_for_new_data+0x96>
 8009404:	e8df f002 	tbb	[pc, r2]
 8009408:	14181212 	.word	0x14181212
 800940c:	06060614 	.word	0x06060614
 8009410:	2e1a      	.short	0x2e1a
 8009412:	16          	.byte	0x16
 8009413:	00          	.byte	0x00
 8009414:	6a0a      	ldr	r2, [r1, #32]
 8009416:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009418:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800941c:	2000      	movs	r0, #0
 800941e:	1a12      	subs	r2, r2, r0
 8009420:	bf18      	it	ne
 8009422:	2201      	movne	r2, #1
 8009424:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8009428:	b004      	add	sp, #16
 800942a:	bd10      	pop	{r4, pc}
 800942c:	680a      	ldr	r2, [r1, #0]
 800942e:	e7f2      	b.n	8009416 <_rclc_check_for_new_data+0x22>
 8009430:	698a      	ldr	r2, [r1, #24]
 8009432:	e7f0      	b.n	8009416 <_rclc_check_for_new_data+0x22>
 8009434:	688a      	ldr	r2, [r1, #8]
 8009436:	e7ee      	b.n	8009416 <_rclc_check_for_new_data+0x22>
 8009438:	690a      	ldr	r2, [r1, #16]
 800943a:	e7ec      	b.n	8009416 <_rclc_check_for_new_data+0x22>
 800943c:	685c      	ldr	r4, [r3, #4]
 800943e:	4608      	mov	r0, r1
 8009440:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009444:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8009448:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800944c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8009456:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800945a:	f104 0110 	add.w	r1, r4, #16
 800945e:	f007 f94f 	bl	8010700 <rcl_action_client_wait_set_get_entities_ready>
 8009462:	e7e1      	b.n	8009428 <_rclc_check_for_new_data+0x34>
 8009464:	685c      	ldr	r4, [r3, #4]
 8009466:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800946a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800946e:	e9cd 3200 	strd	r3, r2, [sp]
 8009472:	4608      	mov	r0, r1
 8009474:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8009478:	f104 0220 	add.w	r2, r4, #32
 800947c:	f104 0110 	add.w	r1, r4, #16
 8009480:	f007 fb56 	bl	8010b30 <rcl_action_server_wait_set_get_entities_ready>
 8009484:	e7d0      	b.n	8009428 <_rclc_check_for_new_data+0x34>
 8009486:	200b      	movs	r0, #11
 8009488:	4770      	bx	lr
 800948a:	2001      	movs	r0, #1
 800948c:	e7cc      	b.n	8009428 <_rclc_check_for_new_data+0x34>
 800948e:	bf00      	nop

08009490 <_rclc_take_new_data>:
 8009490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009492:	b099      	sub	sp, #100	@ 0x64
 8009494:	2800      	cmp	r0, #0
 8009496:	f000 8088 	beq.w	80095aa <_rclc_take_new_data+0x11a>
 800949a:	7803      	ldrb	r3, [r0, #0]
 800949c:	4604      	mov	r4, r0
 800949e:	2b0a      	cmp	r3, #10
 80094a0:	f200 8167 	bhi.w	8009772 <_rclc_take_new_data+0x2e2>
 80094a4:	e8df f003 	tbb	[pc, r3]
 80094a8:	44152d2d 	.word	0x44152d2d
 80094ac:	19191944 	.word	0x19191944
 80094b0:	065a      	.short	0x065a
 80094b2:	15          	.byte	0x15
 80094b3:	00          	.byte	0x00
 80094b4:	6840      	ldr	r0, [r0, #4]
 80094b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f040 80b2 	bne.w	8009624 <_rclc_take_new_data+0x194>
 80094c0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f040 80e4 	bne.w	8009692 <_rclc_take_new_data+0x202>
 80094ca:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d16f      	bne.n	80095b2 <_rclc_take_new_data+0x122>
 80094d2:	2500      	movs	r5, #0
 80094d4:	4628      	mov	r0, r5
 80094d6:	b019      	add	sp, #100	@ 0x64
 80094d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094da:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80094dc:	6a0b      	ldr	r3, [r1, #32]
 80094de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0f5      	beq.n	80094d2 <_rclc_take_new_data+0x42>
 80094e6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80094ea:	f104 0110 	add.w	r1, r4, #16
 80094ee:	f005 fd5b 	bl	800efa8 <rcl_take_request>
 80094f2:	4605      	mov	r5, r0
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d0ec      	beq.n	80094d2 <_rclc_take_new_data+0x42>
 80094f8:	f240 2359 	movw	r3, #601	@ 0x259
 80094fc:	4298      	cmp	r0, r3
 80094fe:	d013      	beq.n	8009528 <_rclc_take_new_data+0x98>
 8009500:	e029      	b.n	8009556 <_rclc_take_new_data+0xc6>
 8009502:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009504:	680b      	ldr	r3, [r1, #0]
 8009506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0e1      	beq.n	80094d2 <_rclc_take_new_data+0x42>
 800950e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009512:	2300      	movs	r3, #0
 8009514:	aa0a      	add	r2, sp, #40	@ 0x28
 8009516:	f005 ff4b 	bl	800f3b0 <rcl_take>
 800951a:	4605      	mov	r5, r0
 800951c:	2800      	cmp	r0, #0
 800951e:	d0d9      	beq.n	80094d4 <_rclc_take_new_data+0x44>
 8009520:	f240 1391 	movw	r3, #401	@ 0x191
 8009524:	4298      	cmp	r0, r3
 8009526:	d116      	bne.n	8009556 <_rclc_take_new_data+0xc6>
 8009528:	2300      	movs	r3, #0
 800952a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800952e:	e7d1      	b.n	80094d4 <_rclc_take_new_data+0x44>
 8009530:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009532:	698b      	ldr	r3, [r1, #24]
 8009534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0ca      	beq.n	80094d2 <_rclc_take_new_data+0x42>
 800953c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009540:	f104 0110 	add.w	r1, r4, #16
 8009544:	f004 fd80 	bl	800e048 <rcl_take_response>
 8009548:	4605      	mov	r5, r0
 800954a:	2800      	cmp	r0, #0
 800954c:	d0c1      	beq.n	80094d2 <_rclc_take_new_data+0x42>
 800954e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009552:	4298      	cmp	r0, r3
 8009554:	d0be      	beq.n	80094d4 <_rclc_take_new_data+0x44>
 8009556:	f000 ffcb 	bl	800a4f0 <rcutils_reset_error>
 800955a:	e7bb      	b.n	80094d4 <_rclc_take_new_data+0x44>
 800955c:	6840      	ldr	r0, [r0, #4]
 800955e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009562:	2b00      	cmp	r3, #0
 8009564:	d17d      	bne.n	8009662 <_rclc_take_new_data+0x1d2>
 8009566:	69c3      	ldr	r3, [r0, #28]
 8009568:	b11b      	cbz	r3, 8009572 <_rclc_take_new_data+0xe2>
 800956a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800956e:	2b00      	cmp	r3, #0
 8009570:	d144      	bne.n	80095fc <_rclc_take_new_data+0x16c>
 8009572:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009576:	2b00      	cmp	r3, #0
 8009578:	f040 80ac 	bne.w	80096d4 <_rclc_take_new_data+0x244>
 800957c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009580:	2b00      	cmp	r3, #0
 8009582:	d0a6      	beq.n	80094d2 <_rclc_take_new_data+0x42>
 8009584:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009586:	a90a      	add	r1, sp, #40	@ 0x28
 8009588:	3010      	adds	r0, #16
 800958a:	f006 ff91 	bl	80104b0 <rcl_action_take_result_response>
 800958e:	4605      	mov	r5, r0
 8009590:	2800      	cmp	r0, #0
 8009592:	d1e0      	bne.n	8009556 <_rclc_take_new_data+0xc6>
 8009594:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009598:	6860      	ldr	r0, [r4, #4]
 800959a:	f007 fbed 	bl	8010d78 <rclc_action_find_handle_by_result_request_sequence_number>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d098      	beq.n	80094d4 <_rclc_take_new_data+0x44>
 80095a2:	2301      	movs	r3, #1
 80095a4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80095a8:	e794      	b.n	80094d4 <_rclc_take_new_data+0x44>
 80095aa:	250b      	movs	r5, #11
 80095ac:	4628      	mov	r0, r5
 80095ae:	b019      	add	sp, #100	@ 0x64
 80095b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b2:	ae04      	add	r6, sp, #16
 80095b4:	aa0a      	add	r2, sp, #40	@ 0x28
 80095b6:	3010      	adds	r0, #16
 80095b8:	4631      	mov	r1, r6
 80095ba:	f007 f9ed 	bl	8010998 <rcl_action_take_cancel_request>
 80095be:	4605      	mov	r5, r0
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d1c8      	bne.n	8009556 <_rclc_take_new_data+0xc6>
 80095c4:	6860      	ldr	r0, [r4, #4]
 80095c6:	a90a      	add	r1, sp, #40	@ 0x28
 80095c8:	f007 fb94 	bl	8010cf4 <rclc_action_find_goal_handle_by_uuid>
 80095cc:	4607      	mov	r7, r0
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f000 80bb 	beq.w	800974a <_rclc_take_new_data+0x2ba>
 80095d4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80095d8:	2101      	movs	r1, #1
 80095da:	f007 fb15 	bl	8010c08 <rcl_action_transition_goal_state>
 80095de:	2803      	cmp	r0, #3
 80095e0:	4684      	mov	ip, r0
 80095e2:	f040 80a7 	bne.w	8009734 <_rclc_take_new_data+0x2a4>
 80095e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80095e8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80095ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 80095f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80095f6:	f887 c008 	strb.w	ip, [r7, #8]
 80095fa:	e76b      	b.n	80094d4 <_rclc_take_new_data+0x44>
 80095fc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80095fe:	3010      	adds	r0, #16
 8009600:	f006 ffd6 	bl	80105b0 <rcl_action_take_feedback>
 8009604:	4605      	mov	r5, r0
 8009606:	2800      	cmp	r0, #0
 8009608:	d1a5      	bne.n	8009556 <_rclc_take_new_data+0xc6>
 800960a:	6860      	ldr	r0, [r4, #4]
 800960c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800960e:	f007 fb71 	bl	8010cf4 <rclc_action_find_goal_handle_by_uuid>
 8009612:	4603      	mov	r3, r0
 8009614:	2800      	cmp	r0, #0
 8009616:	f000 80a3 	beq.w	8009760 <_rclc_take_new_data+0x2d0>
 800961a:	2201      	movs	r2, #1
 800961c:	6860      	ldr	r0, [r4, #4]
 800961e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009622:	e7a6      	b.n	8009572 <_rclc_take_new_data+0xe2>
 8009624:	f007 fb40 	bl	8010ca8 <rclc_action_take_goal_handle>
 8009628:	4606      	mov	r6, r0
 800962a:	6860      	ldr	r0, [r4, #4]
 800962c:	2e00      	cmp	r6, #0
 800962e:	f43f af47 	beq.w	80094c0 <_rclc_take_new_data+0x30>
 8009632:	6070      	str	r0, [r6, #4]
 8009634:	69f2      	ldr	r2, [r6, #28]
 8009636:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800963a:	3010      	adds	r0, #16
 800963c:	f007 f8f4 	bl	8010828 <rcl_action_take_goal_request>
 8009640:	4605      	mov	r5, r0
 8009642:	2800      	cmp	r0, #0
 8009644:	f040 808e 	bne.w	8009764 <_rclc_take_new_data+0x2d4>
 8009648:	69f7      	ldr	r7, [r6, #28]
 800964a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800964c:	7235      	strb	r5, [r6, #8]
 800964e:	f8c6 0009 	str.w	r0, [r6, #9]
 8009652:	f8c6 100d 	str.w	r1, [r6, #13]
 8009656:	6860      	ldr	r0, [r4, #4]
 8009658:	f8c6 2011 	str.w	r2, [r6, #17]
 800965c:	f8c6 3015 	str.w	r3, [r6, #21]
 8009660:	e72e      	b.n	80094c0 <_rclc_take_new_data+0x30>
 8009662:	aa04      	add	r2, sp, #16
 8009664:	a90a      	add	r1, sp, #40	@ 0x28
 8009666:	3010      	adds	r0, #16
 8009668:	f006 feaa 	bl	80103c0 <rcl_action_take_goal_response>
 800966c:	4605      	mov	r5, r0
 800966e:	2800      	cmp	r0, #0
 8009670:	f47f af71 	bne.w	8009556 <_rclc_take_new_data+0xc6>
 8009674:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009678:	6860      	ldr	r0, [r4, #4]
 800967a:	f007 fb6b 	bl	8010d54 <rclc_action_find_handle_by_goal_request_sequence_number>
 800967e:	b130      	cbz	r0, 800968e <_rclc_take_new_data+0x1fe>
 8009680:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009684:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009688:	2201      	movs	r2, #1
 800968a:	f880 2020 	strb.w	r2, [r0, #32]
 800968e:	6860      	ldr	r0, [r4, #4]
 8009690:	e769      	b.n	8009566 <_rclc_take_new_data+0xd6>
 8009692:	aa04      	add	r2, sp, #16
 8009694:	3010      	adds	r0, #16
 8009696:	a90a      	add	r1, sp, #40	@ 0x28
 8009698:	f007 f93e 	bl	8010918 <rcl_action_take_result_request>
 800969c:	4605      	mov	r5, r0
 800969e:	2800      	cmp	r0, #0
 80096a0:	f47f af59 	bne.w	8009556 <_rclc_take_new_data+0xc6>
 80096a4:	6860      	ldr	r0, [r4, #4]
 80096a6:	a904      	add	r1, sp, #16
 80096a8:	f007 fb24 	bl	8010cf4 <rclc_action_find_goal_handle_by_uuid>
 80096ac:	4607      	mov	r7, r0
 80096ae:	b160      	cbz	r0, 80096ca <_rclc_take_new_data+0x23a>
 80096b0:	ad0a      	add	r5, sp, #40	@ 0x28
 80096b2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80096b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80096ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80096be:	f04f 0c02 	mov.w	ip, #2
 80096c2:	e886 0003 	stmia.w	r6, {r0, r1}
 80096c6:	f887 c008 	strb.w	ip, [r7, #8]
 80096ca:	6860      	ldr	r0, [r4, #4]
 80096cc:	2300      	movs	r3, #0
 80096ce:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80096d2:	e6fa      	b.n	80094ca <_rclc_take_new_data+0x3a>
 80096d4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80096d8:	a90a      	add	r1, sp, #40	@ 0x28
 80096da:	3010      	adds	r0, #16
 80096dc:	f006 ff28 	bl	8010530 <rcl_action_take_cancel_response>
 80096e0:	4605      	mov	r5, r0
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f47f af37 	bne.w	8009556 <_rclc_take_new_data+0xc6>
 80096e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096ec:	6860      	ldr	r0, [r4, #4]
 80096ee:	f007 fb55 	bl	8010d9c <rclc_action_find_handle_by_cancel_request_sequence_number>
 80096f2:	4606      	mov	r6, r0
 80096f4:	6860      	ldr	r0, [r4, #4]
 80096f6:	2e00      	cmp	r6, #0
 80096f8:	f43f af40 	beq.w	800957c <_rclc_take_new_data+0xec>
 80096fc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80096fe:	2701      	movs	r7, #1
 8009700:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	f43f af3a 	beq.w	800957c <_rclc_take_new_data+0xec>
 8009708:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800970a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800970e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009712:	f007 faef 	bl	8010cf4 <rclc_action_find_goal_handle_by_uuid>
 8009716:	b138      	cbz	r0, 8009728 <_rclc_take_new_data+0x298>
 8009718:	6860      	ldr	r0, [r4, #4]
 800971a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800971c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009720:	3501      	adds	r5, #1
 8009722:	42ab      	cmp	r3, r5
 8009724:	d8f0      	bhi.n	8009708 <_rclc_take_new_data+0x278>
 8009726:	e729      	b.n	800957c <_rclc_take_new_data+0xec>
 8009728:	6860      	ldr	r0, [r4, #4]
 800972a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800972c:	3501      	adds	r5, #1
 800972e:	42ab      	cmp	r3, r5
 8009730:	d8ea      	bhi.n	8009708 <_rclc_take_new_data+0x278>
 8009732:	e723      	b.n	800957c <_rclc_take_new_data+0xec>
 8009734:	ab06      	add	r3, sp, #24
 8009736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009738:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800973c:	2103      	movs	r1, #3
 800973e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009742:	6860      	ldr	r0, [r4, #4]
 8009744:	f007 fba0 	bl	8010e88 <rclc_action_server_goal_cancel_reject>
 8009748:	e6c4      	b.n	80094d4 <_rclc_take_new_data+0x44>
 800974a:	ab06      	add	r3, sp, #24
 800974c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800974e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009752:	2102      	movs	r1, #2
 8009754:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009758:	6860      	ldr	r0, [r4, #4]
 800975a:	f007 fb95 	bl	8010e88 <rclc_action_server_goal_cancel_reject>
 800975e:	e6b9      	b.n	80094d4 <_rclc_take_new_data+0x44>
 8009760:	6860      	ldr	r0, [r4, #4]
 8009762:	e706      	b.n	8009572 <_rclc_take_new_data+0xe2>
 8009764:	6860      	ldr	r0, [r4, #4]
 8009766:	4631      	mov	r1, r6
 8009768:	f007 faae 	bl	8010cc8 <rclc_action_remove_used_goal_handle>
 800976c:	f000 fec0 	bl	800a4f0 <rcutils_reset_error>
 8009770:	e6b0      	b.n	80094d4 <_rclc_take_new_data+0x44>
 8009772:	2501      	movs	r5, #1
 8009774:	e6ae      	b.n	80094d4 <_rclc_take_new_data+0x44>
 8009776:	bf00      	nop

08009778 <_rclc_execute.part.0>:
 8009778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800977a:	7803      	ldrb	r3, [r0, #0]
 800977c:	b087      	sub	sp, #28
 800977e:	4604      	mov	r4, r0
 8009780:	2b0a      	cmp	r3, #10
 8009782:	f200 8136 	bhi.w	80099f2 <_rclc_execute.part.0+0x27a>
 8009786:	e8df f003 	tbb	[pc, r3]
 800978a:	435e      	.short	0x435e
 800978c:	06a1664f 	.word	0x06a1664f
 8009790:	6c1e0606 	.word	0x6c1e0606
 8009794:	59          	.byte	0x59
 8009795:	00          	.byte	0x00
 8009796:	2b06      	cmp	r3, #6
 8009798:	f000 8122 	beq.w	80099e0 <_rclc_execute.part.0+0x268>
 800979c:	2b07      	cmp	r3, #7
 800979e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80097a0:	f040 8118 	bne.w	80099d4 <_rclc_execute.part.0+0x25c>
 80097a4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 80097a8:	6880      	ldr	r0, [r0, #8]
 80097aa:	4798      	blx	r3
 80097ac:	f104 0110 	add.w	r1, r4, #16
 80097b0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80097b2:	6860      	ldr	r0, [r4, #4]
 80097b4:	f005 fc48 	bl	800f048 <rcl_send_response>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d033      	beq.n	8009824 <_rclc_execute.part.0+0xac>
 80097bc:	9005      	str	r0, [sp, #20]
 80097be:	f000 fe97 	bl	800a4f0 <rcutils_reset_error>
 80097c2:	9805      	ldr	r0, [sp, #20]
 80097c4:	e02e      	b.n	8009824 <_rclc_execute.part.0+0xac>
 80097c6:	6840      	ldr	r0, [r0, #4]
 80097c8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8086 	beq.w	80098de <_rclc_execute.part.0+0x166>
 80097d2:	2600      	movs	r6, #0
 80097d4:	2701      	movs	r7, #1
 80097d6:	e004      	b.n	80097e2 <_rclc_execute.part.0+0x6a>
 80097d8:	f007 fa40 	bl	8010c5c <rclc_action_send_result_request>
 80097dc:	b998      	cbnz	r0, 8009806 <_rclc_execute.part.0+0x8e>
 80097de:	722f      	strb	r7, [r5, #8]
 80097e0:	6860      	ldr	r0, [r4, #4]
 80097e2:	f007 faed 	bl	8010dc0 <rclc_action_find_first_handle_with_goal_response>
 80097e6:	4605      	mov	r5, r0
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d077      	beq.n	80098dc <_rclc_execute.part.0+0x164>
 80097ec:	6863      	ldr	r3, [r4, #4]
 80097ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80097f6:	f885 6020 	strb.w	r6, [r5, #32]
 80097fa:	4798      	blx	r3
 80097fc:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009800:	4628      	mov	r0, r5
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1e8      	bne.n	80097d8 <_rclc_execute.part.0+0x60>
 8009806:	6860      	ldr	r0, [r4, #4]
 8009808:	4629      	mov	r1, r5
 800980a:	f007 fa5d 	bl	8010cc8 <rclc_action_remove_used_goal_handle>
 800980e:	e7e7      	b.n	80097e0 <_rclc_execute.part.0+0x68>
 8009810:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009814:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009818:	2d00      	cmp	r5, #0
 800981a:	f000 80c9 	beq.w	80099b0 <_rclc_execute.part.0+0x238>
 800981e:	6880      	ldr	r0, [r0, #8]
 8009820:	4798      	blx	r3
 8009822:	2000      	movs	r0, #0
 8009824:	b007      	add	sp, #28
 8009826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009828:	6840      	ldr	r0, [r0, #4]
 800982a:	f7ff fcdb 	bl	80091e4 <rcl_timer_call>
 800982e:	f240 3321 	movw	r3, #801	@ 0x321
 8009832:	4298      	cmp	r0, r3
 8009834:	d004      	beq.n	8009840 <_rclc_execute.part.0+0xc8>
 8009836:	2800      	cmp	r0, #0
 8009838:	d0f4      	beq.n	8009824 <_rclc_execute.part.0+0xac>
 800983a:	e7bf      	b.n	80097bc <_rclc_execute.part.0+0x44>
 800983c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800983e:	4798      	blx	r3
 8009840:	2000      	movs	r0, #0
 8009842:	b007      	add	sp, #28
 8009844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009846:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800984a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800984c:	b925      	cbnz	r5, 8009858 <_rclc_execute.part.0+0xe0>
 800984e:	4628      	mov	r0, r5
 8009850:	4798      	blx	r3
 8009852:	4628      	mov	r0, r5
 8009854:	e7e6      	b.n	8009824 <_rclc_execute.part.0+0xac>
 8009856:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009858:	68a0      	ldr	r0, [r4, #8]
 800985a:	4798      	blx	r3
 800985c:	2000      	movs	r0, #0
 800985e:	b007      	add	sp, #28
 8009860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009862:	6840      	ldr	r0, [r0, #4]
 8009864:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009868:	bb3b      	cbnz	r3, 80098ba <_rclc_execute.part.0+0x142>
 800986a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d07b      	beq.n	800996a <_rclc_execute.part.0+0x1f2>
 8009872:	f640 0634 	movw	r6, #2100	@ 0x834
 8009876:	2701      	movs	r7, #1
 8009878:	e007      	b.n	800988a <_rclc_execute.part.0+0x112>
 800987a:	4628      	mov	r0, r5
 800987c:	f007 fab8 	bl	8010df0 <rclc_action_server_response_goal_request>
 8009880:	6860      	ldr	r0, [r4, #4]
 8009882:	4629      	mov	r1, r5
 8009884:	f007 fa20 	bl	8010cc8 <rclc_action_remove_used_goal_handle>
 8009888:	6860      	ldr	r0, [r4, #4]
 800988a:	2100      	movs	r1, #0
 800988c:	f007 fa4a 	bl	8010d24 <rclc_action_find_first_handle_by_status>
 8009890:	4605      	mov	r5, r0
 8009892:	2800      	cmp	r0, #0
 8009894:	d066      	beq.n	8009964 <_rclc_execute.part.0+0x1ec>
 8009896:	6863      	ldr	r3, [r4, #4]
 8009898:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	4798      	blx	r3
 800989e:	42b0      	cmp	r0, r6
 80098a0:	f04f 0100 	mov.w	r1, #0
 80098a4:	d1e9      	bne.n	800987a <_rclc_execute.part.0+0x102>
 80098a6:	2101      	movs	r1, #1
 80098a8:	4628      	mov	r0, r5
 80098aa:	f007 faa1 	bl	8010df0 <rclc_action_server_response_goal_request>
 80098ae:	722f      	strb	r7, [r5, #8]
 80098b0:	e7ea      	b.n	8009888 <_rclc_execute.part.0+0x110>
 80098b2:	6848      	ldr	r0, [r1, #4]
 80098b4:	f007 fa08 	bl	8010cc8 <rclc_action_remove_used_goal_handle>
 80098b8:	6860      	ldr	r0, [r4, #4]
 80098ba:	f007 fa3f 	bl	8010d3c <rclc_action_find_first_terminated_handle>
 80098be:	4601      	mov	r1, r0
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d1f6      	bne.n	80098b2 <_rclc_execute.part.0+0x13a>
 80098c4:	6860      	ldr	r0, [r4, #4]
 80098c6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80098ca:	e7ce      	b.n	800986a <_rclc_execute.part.0+0xf2>
 80098cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80098ce:	6880      	ldr	r0, [r0, #8]
 80098d0:	f104 0110 	add.w	r1, r4, #16
 80098d4:	4798      	blx	r3
 80098d6:	2000      	movs	r0, #0
 80098d8:	b007      	add	sp, #28
 80098da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098dc:	6860      	ldr	r0, [r4, #4]
 80098de:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80098e2:	b18b      	cbz	r3, 8009908 <_rclc_execute.part.0+0x190>
 80098e4:	68c5      	ldr	r5, [r0, #12]
 80098e6:	b32d      	cbz	r5, 8009934 <_rclc_execute.part.0+0x1bc>
 80098e8:	2600      	movs	r6, #0
 80098ea:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80098ee:	b143      	cbz	r3, 8009902 <_rclc_execute.part.0+0x18a>
 80098f0:	69c3      	ldr	r3, [r0, #28]
 80098f2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80098f6:	b123      	cbz	r3, 8009902 <_rclc_execute.part.0+0x18a>
 80098f8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80098fa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80098fc:	4628      	mov	r0, r5
 80098fe:	4798      	blx	r3
 8009900:	6860      	ldr	r0, [r4, #4]
 8009902:	682d      	ldr	r5, [r5, #0]
 8009904:	2d00      	cmp	r5, #0
 8009906:	d1f0      	bne.n	80098ea <_rclc_execute.part.0+0x172>
 8009908:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800990c:	b193      	cbz	r3, 8009934 <_rclc_execute.part.0+0x1bc>
 800990e:	68c5      	ldr	r5, [r0, #12]
 8009910:	b185      	cbz	r5, 8009934 <_rclc_execute.part.0+0x1bc>
 8009912:	2600      	movs	r6, #0
 8009914:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009918:	b14b      	cbz	r3, 800992e <_rclc_execute.part.0+0x1b6>
 800991a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800991c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009920:	b12b      	cbz	r3, 800992e <_rclc_execute.part.0+0x1b6>
 8009922:	4628      	mov	r0, r5
 8009924:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009928:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800992a:	4798      	blx	r3
 800992c:	6860      	ldr	r0, [r4, #4]
 800992e:	682d      	ldr	r5, [r5, #0]
 8009930:	2d00      	cmp	r5, #0
 8009932:	d1ef      	bne.n	8009914 <_rclc_execute.part.0+0x19c>
 8009934:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009938:	2b00      	cmp	r3, #0
 800993a:	d081      	beq.n	8009840 <_rclc_execute.part.0+0xc8>
 800993c:	2700      	movs	r7, #0
 800993e:	e00b      	b.n	8009958 <_rclc_execute.part.0+0x1e0>
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009944:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009946:	6a1e      	ldr	r6, [r3, #32]
 8009948:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800994c:	47b0      	blx	r6
 800994e:	6860      	ldr	r0, [r4, #4]
 8009950:	4629      	mov	r1, r5
 8009952:	f007 f9b9 	bl	8010cc8 <rclc_action_remove_used_goal_handle>
 8009956:	6860      	ldr	r0, [r4, #4]
 8009958:	f007 fa3e 	bl	8010dd8 <rclc_action_find_first_handle_with_result_response>
 800995c:	4605      	mov	r5, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	d1ee      	bne.n	8009940 <_rclc_execute.part.0+0x1c8>
 8009962:	e76d      	b.n	8009840 <_rclc_execute.part.0+0xc8>
 8009964:	6860      	ldr	r0, [r4, #4]
 8009966:	f880 5020 	strb.w	r5, [r0, #32]
 800996a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800996e:	2b00      	cmp	r3, #0
 8009970:	f43f af66 	beq.w	8009840 <_rclc_execute.part.0+0xc8>
 8009974:	68c5      	ldr	r5, [r0, #12]
 8009976:	b1b5      	cbz	r5, 80099a6 <_rclc_execute.part.0+0x22e>
 8009978:	2602      	movs	r6, #2
 800997a:	e001      	b.n	8009980 <_rclc_execute.part.0+0x208>
 800997c:	682d      	ldr	r5, [r5, #0]
 800997e:	b195      	cbz	r5, 80099a6 <_rclc_execute.part.0+0x22e>
 8009980:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009984:	2b03      	cmp	r3, #3
 8009986:	d1f9      	bne.n	800997c <_rclc_execute.part.0+0x204>
 8009988:	69c3      	ldr	r3, [r0, #28]
 800998a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800998c:	4628      	mov	r0, r5
 800998e:	4798      	blx	r3
 8009990:	4603      	mov	r3, r0
 8009992:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009996:	4628      	mov	r0, r5
 8009998:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800999c:	b163      	cbz	r3, 80099b8 <_rclc_execute.part.0+0x240>
 800999e:	f007 fa47 	bl	8010e30 <rclc_action_server_goal_cancel_accept>
 80099a2:	6860      	ldr	r0, [r4, #4]
 80099a4:	e7ea      	b.n	800997c <_rclc_execute.part.0+0x204>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80099ac:	4618      	mov	r0, r3
 80099ae:	e739      	b.n	8009824 <_rclc_execute.part.0+0xac>
 80099b0:	4628      	mov	r0, r5
 80099b2:	4798      	blx	r3
 80099b4:	4628      	mov	r0, r5
 80099b6:	e735      	b.n	8009824 <_rclc_execute.part.0+0xac>
 80099b8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80099ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80099be:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 80099c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099c6:	6860      	ldr	r0, [r4, #4]
 80099c8:	2101      	movs	r1, #1
 80099ca:	f007 fa5d 	bl	8010e88 <rclc_action_server_goal_cancel_reject>
 80099ce:	722e      	strb	r6, [r5, #8]
 80099d0:	6860      	ldr	r0, [r4, #4]
 80099d2:	e7d3      	b.n	800997c <_rclc_execute.part.0+0x204>
 80099d4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80099d6:	6880      	ldr	r0, [r0, #8]
 80099d8:	4798      	blx	r3
 80099da:	f104 0110 	add.w	r1, r4, #16
 80099de:	e6e7      	b.n	80097b0 <_rclc_execute.part.0+0x38>
 80099e0:	f100 0110 	add.w	r1, r0, #16
 80099e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80099e6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80099e8:	6880      	ldr	r0, [r0, #8]
 80099ea:	9105      	str	r1, [sp, #20]
 80099ec:	4798      	blx	r3
 80099ee:	9905      	ldr	r1, [sp, #20]
 80099f0:	e6de      	b.n	80097b0 <_rclc_execute.part.0+0x38>
 80099f2:	2001      	movs	r0, #1
 80099f4:	e716      	b.n	8009824 <_rclc_execute.part.0+0xac>
 80099f6:	bf00      	nop

080099f8 <rclc_executor_trigger_any>:
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d03f      	beq.n	8009a7c <rclc_executor_trigger_any+0x84>
 80099fc:	2900      	cmp	r1, #0
 80099fe:	d03e      	beq.n	8009a7e <rclc_executor_trigger_any+0x86>
 8009a00:	4603      	mov	r3, r0
 8009a02:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009a06:	2200      	movs	r2, #0
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d037      	beq.n	8009a7c <rclc_executor_trigger_any+0x84>
 8009a0c:	b430      	push	{r4, r5}
 8009a0e:	f893 c000 	ldrb.w	ip, [r3]
 8009a12:	f1bc 0f08 	cmp.w	ip, #8
 8009a16:	d11e      	bne.n	8009a56 <rclc_executor_trigger_any+0x5e>
 8009a18:	685c      	ldr	r4, [r3, #4]
 8009a1a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009a1c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009a20:	d105      	bne.n	8009a2e <rclc_executor_trigger_any+0x36>
 8009a22:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009a26:	b910      	cbnz	r0, 8009a2e <rclc_executor_trigger_any+0x36>
 8009a28:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009a2c:	b128      	cbz	r0, 8009a3a <rclc_executor_trigger_any+0x42>
 8009a2e:	bc30      	pop	{r4, r5}
 8009a30:	4770      	bx	lr
 8009a32:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d1f9      	bne.n	8009a2e <rclc_executor_trigger_any+0x36>
 8009a3a:	3201      	adds	r2, #1
 8009a3c:	4291      	cmp	r1, r2
 8009a3e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009a42:	d018      	beq.n	8009a76 <rclc_executor_trigger_any+0x7e>
 8009a44:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d0f0      	beq.n	8009a2e <rclc_executor_trigger_any+0x36>
 8009a4c:	f893 c000 	ldrb.w	ip, [r3]
 8009a50:	f1bc 0f08 	cmp.w	ip, #8
 8009a54:	d0e0      	beq.n	8009a18 <rclc_executor_trigger_any+0x20>
 8009a56:	f1bc 0f09 	cmp.w	ip, #9
 8009a5a:	d1ea      	bne.n	8009a32 <rclc_executor_trigger_any+0x3a>
 8009a5c:	685c      	ldr	r4, [r3, #4]
 8009a5e:	6a25      	ldr	r5, [r4, #32]
 8009a60:	2d00      	cmp	r5, #0
 8009a62:	d1e4      	bne.n	8009a2e <rclc_executor_trigger_any+0x36>
 8009a64:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d1e0      	bne.n	8009a2e <rclc_executor_trigger_any+0x36>
 8009a6c:	3201      	adds	r2, #1
 8009a6e:	4291      	cmp	r1, r2
 8009a70:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009a74:	d1e6      	bne.n	8009a44 <rclc_executor_trigger_any+0x4c>
 8009a76:	2000      	movs	r0, #0
 8009a78:	bc30      	pop	{r4, r5}
 8009a7a:	4770      	bx	lr
 8009a7c:	4770      	bx	lr
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop

08009a84 <rclc_executor_get_zero_initialized_executor>:
 8009a84:	b510      	push	{r4, lr}
 8009a86:	4903      	ldr	r1, [pc, #12]	@ (8009a94 <rclc_executor_get_zero_initialized_executor+0x10>)
 8009a88:	4604      	mov	r4, r0
 8009a8a:	2290      	movs	r2, #144	@ 0x90
 8009a8c:	f00b fff7 	bl	8015a7e <memcpy>
 8009a90:	4620      	mov	r0, r4
 8009a92:	bd10      	pop	{r4, pc}
 8009a94:	08016bd0 	.word	0x08016bd0

08009a98 <rclc_executor_init>:
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d05f      	beq.n	8009b5c <rclc_executor_init+0xc4>
 8009a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	b0b2      	sub	sp, #200	@ 0xc8
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	d051      	beq.n	8009b4c <rclc_executor_init+0xb4>
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	4618      	mov	r0, r3
 8009aac:	4616      	mov	r6, r2
 8009aae:	461f      	mov	r7, r3
 8009ab0:	f000 fc56 	bl	800a360 <rcutils_allocator_is_valid>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d049      	beq.n	8009b4c <rclc_executor_init+0xb4>
 8009ab8:	2e00      	cmp	r6, #0
 8009aba:	d047      	beq.n	8009b4c <rclc_executor_init+0xb4>
 8009abc:	492c      	ldr	r1, [pc, #176]	@ (8009b70 <rclc_executor_init+0xd8>)
 8009abe:	2290      	movs	r2, #144	@ 0x90
 8009ac0:	a80e      	add	r0, sp, #56	@ 0x38
 8009ac2:	f00b ffdc 	bl	8015a7e <memcpy>
 8009ac6:	a90e      	add	r1, sp, #56	@ 0x38
 8009ac8:	2290      	movs	r2, #144	@ 0x90
 8009aca:	4628      	mov	r0, r5
 8009acc:	f00b ffd7 	bl	8015a7e <memcpy>
 8009ad0:	606c      	str	r4, [r5, #4]
 8009ad2:	4668      	mov	r0, sp
 8009ad4:	60ee      	str	r6, [r5, #12]
 8009ad6:	466c      	mov	r4, sp
 8009ad8:	f005 fea2 	bl	800f820 <rcl_get_zero_initialized_wait_set>
 8009adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ade:	f105 0c18 	add.w	ip, r5, #24
 8009ae2:	f8d7 8000 	ldr.w	r8, [r7]
 8009ae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009aec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009af2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009af6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009b68 <rclc_executor_init+0xd0>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	f8cc 3000 	str.w	r3, [ip]
 8009b00:	6939      	ldr	r1, [r7, #16]
 8009b02:	616f      	str	r7, [r5, #20]
 8009b04:	ed85 7b1c 	vstr	d7, [r5, #112]	@ 0x70
 8009b08:	01b0      	lsls	r0, r6, #6
 8009b0a:	47c0      	blx	r8
 8009b0c:	60a8      	str	r0, [r5, #8]
 8009b0e:	b338      	cbz	r0, 8009b60 <rclc_executor_init+0xc8>
 8009b10:	2400      	movs	r4, #0
 8009b12:	e000      	b.n	8009b16 <rclc_executor_init+0x7e>
 8009b14:	68a8      	ldr	r0, [r5, #8]
 8009b16:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	3401      	adds	r4, #1
 8009b1e:	f000 faa7 	bl	800a070 <rclc_executor_handle_init>
 8009b22:	42a6      	cmp	r6, r4
 8009b24:	d1f6      	bne.n	8009b14 <rclc_executor_init+0x7c>
 8009b26:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 8009b2a:	f000 fa95 	bl	800a058 <rclc_executor_handle_counters_zero_init>
 8009b2e:	4a11      	ldr	r2, [pc, #68]	@ (8009b74 <rclc_executor_init+0xdc>)
 8009b30:	68ab      	ldr	r3, [r5, #8]
 8009b32:	2000      	movs	r0, #0
 8009b34:	e9c5 2020 	strd	r2, r0, [r5, #128]	@ 0x80
 8009b38:	b163      	cbz	r3, 8009b54 <rclc_executor_init+0xbc>
 8009b3a:	696b      	ldr	r3, [r5, #20]
 8009b3c:	b153      	cbz	r3, 8009b54 <rclc_executor_init+0xbc>
 8009b3e:	68eb      	ldr	r3, [r5, #12]
 8009b40:	b143      	cbz	r3, 8009b54 <rclc_executor_init+0xbc>
 8009b42:	f885 0088 	strb.w	r0, [r5, #136]	@ 0x88
 8009b46:	b032      	add	sp, #200	@ 0xc8
 8009b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b4c:	200b      	movs	r0, #11
 8009b4e:	b032      	add	sp, #200	@ 0xc8
 8009b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b54:	4618      	mov	r0, r3
 8009b56:	b032      	add	sp, #200	@ 0xc8
 8009b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b5c:	200b      	movs	r0, #11
 8009b5e:	4770      	bx	lr
 8009b60:	200a      	movs	r0, #10
 8009b62:	e7f4      	b.n	8009b4e <rclc_executor_init+0xb6>
 8009b64:	f3af 8000 	nop.w
 8009b68:	3b9aca00 	.word	0x3b9aca00
 8009b6c:	00000000 	.word	0x00000000
 8009b70:	08016bd0 	.word	0x08016bd0
 8009b74:	080099f9 	.word	0x080099f9

08009b78 <rclc_executor_set_timeout>:
 8009b78:	b158      	cbz	r0, 8009b92 <rclc_executor_set_timeout+0x1a>
 8009b7a:	6881      	ldr	r1, [r0, #8]
 8009b7c:	b139      	cbz	r1, 8009b8e <rclc_executor_set_timeout+0x16>
 8009b7e:	6941      	ldr	r1, [r0, #20]
 8009b80:	b129      	cbz	r1, 8009b8e <rclc_executor_set_timeout+0x16>
 8009b82:	68c1      	ldr	r1, [r0, #12]
 8009b84:	b119      	cbz	r1, 8009b8e <rclc_executor_set_timeout+0x16>
 8009b86:	e9c0 231c 	strd	r2, r3, [r0, #112]	@ 0x70
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	4770      	bx	lr
 8009b8e:	2001      	movs	r0, #1
 8009b90:	4770      	bx	lr
 8009b92:	200b      	movs	r0, #11
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop

08009b98 <rclc_executor_add_subscription>:
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009b9e:	b338      	cbz	r0, 8009bf0 <rclc_executor_add_subscription+0x58>
 8009ba0:	b331      	cbz	r1, 8009bf0 <rclc_executor_add_subscription+0x58>
 8009ba2:	b32a      	cbz	r2, 8009bf0 <rclc_executor_add_subscription+0x58>
 8009ba4:	b323      	cbz	r3, 8009bf0 <rclc_executor_add_subscription+0x58>
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 8009bac:	42a8      	cmp	r0, r5
 8009bae:	d301      	bcc.n	8009bb4 <rclc_executor_add_subscription+0x1c>
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb4:	68a6      	ldr	r6, [r4, #8]
 8009bb6:	0187      	lsls	r7, r0, #6
 8009bb8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009bbc:	2500      	movs	r5, #0
 8009bbe:	55f5      	strb	r5, [r6, r7]
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009bc6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009bca:	2301      	movs	r3, #1
 8009bcc:	f104 0518 	add.w	r5, r4, #24
 8009bd0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009bd4:	f88c e001 	strb.w	lr, [ip, #1]
 8009bd8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009bdc:	6120      	str	r0, [r4, #16]
 8009bde:	4628      	mov	r0, r5
 8009be0:	f005 fe32 	bl	800f848 <rcl_wait_set_is_valid>
 8009be4:	b930      	cbnz	r0, 8009bf4 <rclc_executor_add_subscription+0x5c>
 8009be6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009be8:	3301      	adds	r3, #1
 8009bea:	2000      	movs	r0, #0
 8009bec:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8009bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf0:	200b      	movs	r0, #11
 8009bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f005 fe2d 	bl	800f854 <rcl_wait_set_fini>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d0f3      	beq.n	8009be6 <rclc_executor_add_subscription+0x4e>
 8009bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c00 <rclc_executor_add_timer>:
 8009c00:	b300      	cbz	r0, 8009c44 <rclc_executor_add_timer+0x44>
 8009c02:	b1f9      	cbz	r1, 8009c44 <rclc_executor_add_timer+0x44>
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	d301      	bcc.n	8009c14 <rclc_executor_add_timer+0x14>
 8009c10:	2001      	movs	r0, #1
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	6880      	ldr	r0, [r0, #8]
 8009c16:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8009c1a:	019d      	lsls	r5, r3, #6
 8009c1c:	6051      	str	r1, [r2, #4]
 8009c1e:	2102      	movs	r1, #2
 8009c20:	5341      	strh	r1, [r0, r5]
 8009c22:	3301      	adds	r3, #1
 8009c24:	2000      	movs	r0, #0
 8009c26:	2101      	movs	r1, #1
 8009c28:	f104 0518 	add.w	r5, r4, #24
 8009c2c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 8009c2e:	8711      	strh	r1, [r2, #56]	@ 0x38
 8009c30:	4628      	mov	r0, r5
 8009c32:	6123      	str	r3, [r4, #16]
 8009c34:	f005 fe08 	bl	800f848 <rcl_wait_set_is_valid>
 8009c38:	b930      	cbnz	r0, 8009c48 <rclc_executor_add_timer+0x48>
 8009c3a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	2000      	movs	r0, #0
 8009c40:	6523      	str	r3, [r4, #80]	@ 0x50
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	200b      	movs	r0, #11
 8009c46:	4770      	bx	lr
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f005 fe03 	bl	800f854 <rcl_wait_set_fini>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d0f3      	beq.n	8009c3a <rclc_executor_add_timer+0x3a>
 8009c52:	bd38      	pop	{r3, r4, r5, pc}

08009c54 <rclc_executor_prepare>:
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d044      	beq.n	8009ce2 <rclc_executor_prepare+0x8e>
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5a:	f100 0518 	add.w	r5, r0, #24
 8009c5e:	b09b      	sub	sp, #108	@ 0x6c
 8009c60:	4604      	mov	r4, r0
 8009c62:	4628      	mov	r0, r5
 8009c64:	f005 fdf0 	bl	800f848 <rcl_wait_set_is_valid>
 8009c68:	b110      	cbz	r0, 8009c70 <rclc_executor_prepare+0x1c>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	b01b      	add	sp, #108	@ 0x6c
 8009c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c70:	4628      	mov	r0, r5
 8009c72:	f005 fdef 	bl	800f854 <rcl_wait_set_fini>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d130      	bne.n	8009cdc <rclc_executor_prepare+0x88>
 8009c7a:	a80c      	add	r0, sp, #48	@ 0x30
 8009c7c:	f005 fdd0 	bl	800f820 <rcl_get_zero_initialized_wait_set>
 8009c80:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009c84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c88:	46ae      	mov	lr, r5
 8009c8a:	6967      	ldr	r7, [r4, #20]
 8009c8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c9c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009ca0:	f8dc 3000 	ldr.w	r3, [ip]
 8009ca4:	f8ce 3000 	str.w	r3, [lr]
 8009ca8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009caa:	ae04      	add	r6, sp, #16
 8009cac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	6862      	ldr	r2, [r4, #4]
 8009cb2:	6033      	str	r3, [r6, #0]
 8009cb4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009cb6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8009cb8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009cbc:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 8009cc0:	e9cd 2100 	strd	r2, r1, [sp]
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cc8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8009cca:	f006 f8c1 	bl	800fe50 <rcl_wait_set_init>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d0cc      	beq.n	8009c6c <rclc_executor_prepare+0x18>
 8009cd2:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009cd4:	f000 fc0c 	bl	800a4f0 <rcutils_reset_error>
 8009cd8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009cda:	e7c7      	b.n	8009c6c <rclc_executor_prepare+0x18>
 8009cdc:	f000 fc08 	bl	800a4f0 <rcutils_reset_error>
 8009ce0:	e7cb      	b.n	8009c7a <rclc_executor_prepare+0x26>
 8009ce2:	200b      	movs	r0, #11
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop

08009ce8 <rclc_executor_spin_some.part.0>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	f100 0618 	add.w	r6, r0, #24
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	4691      	mov	r9, r2
 8009cf4:	4698      	mov	r8, r3
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	f7ff ffac 	bl	8009c54 <rclc_executor_prepare>
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f005 fe75 	bl	800f9ec <rcl_wait_set_clear>
 8009d02:	4607      	mov	r7, r0
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f040 80ed 	bne.w	8009ee4 <rclc_executor_spin_some.part.0+0x1fc>
 8009d0a:	68eb      	ldr	r3, [r5, #12]
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	b303      	cbz	r3, 8009d52 <rclc_executor_spin_some.part.0+0x6a>
 8009d10:	68a9      	ldr	r1, [r5, #8]
 8009d12:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009d16:	01a2      	lsls	r2, r4, #6
 8009d18:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009d1c:	b1cb      	cbz	r3, 8009d52 <rclc_executor_spin_some.part.0+0x6a>
 8009d1e:	5c8b      	ldrb	r3, [r1, r2]
 8009d20:	2b0a      	cmp	r3, #10
 8009d22:	f200 80d8 	bhi.w	8009ed6 <rclc_executor_spin_some.part.0+0x1ee>
 8009d26:	e8df f003 	tbb	[pc, r3]
 8009d2a:	9c9c      	.short	0x9c9c
 8009d2c:	068c8ca7 	.word	0x068c8ca7
 8009d30:	bdc90606 	.word	0xbdc90606
 8009d34:	b2          	.byte	0xb2
 8009d35:	00          	.byte	0x00
 8009d36:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d3a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f006 f99c 	bl	801007c <rcl_wait_set_add_service>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f040 8086 	bne.w	8009e56 <rclc_executor_spin_some.part.0+0x16e>
 8009d4a:	68eb      	ldr	r3, [r5, #12]
 8009d4c:	3401      	adds	r4, #1
 8009d4e:	429c      	cmp	r4, r3
 8009d50:	d3de      	bcc.n	8009d10 <rclc_executor_spin_some.part.0+0x28>
 8009d52:	4643      	mov	r3, r8
 8009d54:	464a      	mov	r2, r9
 8009d56:	4630      	mov	r0, r6
 8009d58:	f006 f9be 	bl	80100d8 <rcl_wait>
 8009d5c:	f895 3088 	ldrb.w	r3, [r5, #136]	@ 0x88
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 80c7 	beq.w	8009ef4 <rclc_executor_spin_some.part.0+0x20c>
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	f040 80b5 	bne.w	8009ed6 <rclc_executor_spin_some.part.0+0x1ee>
 8009d6c:	68eb      	ldr	r3, [r5, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 8159 	beq.w	800a026 <rclc_executor_spin_some.part.0+0x33e>
 8009d74:	2400      	movs	r4, #0
 8009d76:	46a0      	mov	r8, r4
 8009d78:	f240 1991 	movw	r9, #401	@ 0x191
 8009d7c:	e00a      	b.n	8009d94 <rclc_executor_spin_some.part.0+0xac>
 8009d7e:	f7ff fb39 	bl	80093f4 <_rclc_check_for_new_data>
 8009d82:	4604      	mov	r4, r0
 8009d84:	b110      	cbz	r0, 8009d8c <rclc_executor_spin_some.part.0+0xa4>
 8009d86:	4548      	cmp	r0, r9
 8009d88:	f040 80b2 	bne.w	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009d8c:	68eb      	ldr	r3, [r5, #12]
 8009d8e:	4598      	cmp	r8, r3
 8009d90:	f080 8126 	bcs.w	8009fe0 <rclc_executor_spin_some.part.0+0x2f8>
 8009d94:	68aa      	ldr	r2, [r5, #8]
 8009d96:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009da0:	f108 0801 	add.w	r8, r8, #1
 8009da4:	f1bc 0f00 	cmp.w	ip, #0
 8009da8:	d1e9      	bne.n	8009d7e <rclc_executor_spin_some.part.0+0x96>
 8009daa:	4619      	mov	r1, r3
 8009dac:	4610      	mov	r0, r2
 8009dae:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	@ 0x80
 8009db2:	4798      	blx	r3
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f000 809b 	beq.w	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009dba:	68eb      	ldr	r3, [r5, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8097 	beq.w	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009dc2:	f04f 0800 	mov.w	r8, #0
 8009dc6:	f240 1991 	movw	r9, #401	@ 0x191
 8009dca:	e009      	b.n	8009de0 <rclc_executor_spin_some.part.0+0xf8>
 8009dcc:	f7ff fb60 	bl	8009490 <_rclc_take_new_data>
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	b110      	cbz	r0, 8009dda <rclc_executor_spin_some.part.0+0xf2>
 8009dd4:	4548      	cmp	r0, r9
 8009dd6:	f040 808b 	bne.w	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009dda:	68eb      	ldr	r3, [r5, #12]
 8009ddc:	4598      	cmp	r8, r3
 8009dde:	d209      	bcs.n	8009df4 <rclc_executor_spin_some.part.0+0x10c>
 8009de0:	68a8      	ldr	r0, [r5, #8]
 8009de2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009de6:	4631      	mov	r1, r6
 8009de8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009dec:	f108 0801 	add.w	r8, r8, #1
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	d1eb      	bne.n	8009dcc <rclc_executor_spin_some.part.0+0xe4>
 8009df4:	2600      	movs	r6, #0
 8009df6:	b97b      	cbnz	r3, 8009e18 <rclc_executor_spin_some.part.0+0x130>
 8009df8:	e07a      	b.n	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009dfa:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009dfe:	2a08      	cmp	r2, #8
 8009e00:	f000 80fd 	beq.w	8009ffe <rclc_executor_spin_some.part.0+0x316>
 8009e04:	2a09      	cmp	r2, #9
 8009e06:	f000 80ef 	beq.w	8009fe8 <rclc_executor_spin_some.part.0+0x300>
 8009e0a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8009e0e:	b98a      	cbnz	r2, 8009e34 <rclc_executor_spin_some.part.0+0x14c>
 8009e10:	3601      	adds	r6, #1
 8009e12:	429e      	cmp	r6, r3
 8009e14:	d262      	bcs.n	8009edc <rclc_executor_spin_some.part.0+0x1f4>
 8009e16:	2400      	movs	r4, #0
 8009e18:	68aa      	ldr	r2, [r5, #8]
 8009e1a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009e1e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009e22:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8009e26:	2900      	cmp	r1, #0
 8009e28:	d062      	beq.n	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009e2a:	7841      	ldrb	r1, [r0, #1]
 8009e2c:	2900      	cmp	r1, #0
 8009e2e:	d0e4      	beq.n	8009dfa <rclc_executor_spin_some.part.0+0x112>
 8009e30:	2901      	cmp	r1, #1
 8009e32:	d1ed      	bne.n	8009e10 <rclc_executor_spin_some.part.0+0x128>
 8009e34:	f7ff fca0 	bl	8009778 <_rclc_execute.part.0>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	f040 80b6 	bne.w	8009faa <rclc_executor_spin_some.part.0+0x2c2>
 8009e3e:	68eb      	ldr	r3, [r5, #12]
 8009e40:	e7e6      	b.n	8009e10 <rclc_executor_spin_some.part.0+0x128>
 8009e42:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e46:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f006 f8ea 	bl	8010024 <rcl_wait_set_add_client>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	f43f af7a 	beq.w	8009d4a <rclc_executor_spin_some.part.0+0x62>
 8009e56:	9001      	str	r0, [sp, #4]
 8009e58:	f000 fb4a 	bl	800a4f0 <rcutils_reset_error>
 8009e5c:	9801      	ldr	r0, [sp, #4]
 8009e5e:	4607      	mov	r7, r0
 8009e60:	e03c      	b.n	8009edc <rclc_executor_spin_some.part.0+0x1f4>
 8009e62:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e66:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f005 fd92 	bl	800f994 <rcl_wait_set_add_subscription>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	f43f af6a 	beq.w	8009d4a <rclc_executor_spin_some.part.0+0x62>
 8009e76:	e7ee      	b.n	8009e56 <rclc_executor_spin_some.part.0+0x16e>
 8009e78:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e7c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e80:	4630      	mov	r0, r6
 8009e82:	f006 f89f 	bl	800ffc4 <rcl_wait_set_add_timer>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	f43f af5f 	beq.w	8009d4a <rclc_executor_spin_some.part.0+0x62>
 8009e8c:	e7e3      	b.n	8009e56 <rclc_executor_spin_some.part.0+0x16e>
 8009e8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e92:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e96:	4630      	mov	r0, r6
 8009e98:	f006 f868 	bl	800ff6c <rcl_wait_set_add_guard_condition>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f43f af54 	beq.w	8009d4a <rclc_executor_spin_some.part.0+0x62>
 8009ea2:	e7d8      	b.n	8009e56 <rclc_executor_spin_some.part.0+0x16e>
 8009ea4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ea8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009eac:	3110      	adds	r1, #16
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f006 fdea 	bl	8010a88 <rcl_action_wait_set_add_action_server>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	f43f af48 	beq.w	8009d4a <rclc_executor_spin_some.part.0+0x62>
 8009eba:	e7cc      	b.n	8009e56 <rclc_executor_spin_some.part.0+0x16e>
 8009ebc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ec0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009ec4:	3110      	adds	r1, #16
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f006 fbb5 	bl	8010638 <rcl_action_wait_set_add_action_client>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f43f af3b 	beq.w	8009d4a <rclc_executor_spin_some.part.0+0x62>
 8009ed4:	e7bf      	b.n	8009e56 <rclc_executor_spin_some.part.0+0x16e>
 8009ed6:	f000 fb0b 	bl	800a4f0 <rcutils_reset_error>
 8009eda:	2701      	movs	r7, #1
 8009edc:	4638      	mov	r0, r7
 8009ede:	b003      	add	sp, #12
 8009ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee4:	f000 fb04 	bl	800a4f0 <rcutils_reset_error>
 8009ee8:	4638      	mov	r0, r7
 8009eea:	b003      	add	sp, #12
 8009eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef0:	4627      	mov	r7, r4
 8009ef2:	e7f3      	b.n	8009edc <rclc_executor_spin_some.part.0+0x1f4>
 8009ef4:	68eb      	ldr	r3, [r5, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 8092 	beq.w	800a020 <rclc_executor_spin_some.part.0+0x338>
 8009efc:	2400      	movs	r4, #0
 8009efe:	46a0      	mov	r8, r4
 8009f00:	f240 1991 	movw	r9, #401	@ 0x191
 8009f04:	e008      	b.n	8009f18 <rclc_executor_spin_some.part.0+0x230>
 8009f06:	f7ff fa75 	bl	80093f4 <_rclc_check_for_new_data>
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	b108      	cbz	r0, 8009f12 <rclc_executor_spin_some.part.0+0x22a>
 8009f0e:	4548      	cmp	r0, r9
 8009f10:	d1ee      	bne.n	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009f12:	68eb      	ldr	r3, [r5, #12]
 8009f14:	4598      	cmp	r8, r3
 8009f16:	d265      	bcs.n	8009fe4 <rclc_executor_spin_some.part.0+0x2fc>
 8009f18:	68aa      	ldr	r2, [r5, #8]
 8009f1a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009f1e:	4631      	mov	r1, r6
 8009f20:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009f24:	f108 0801 	add.w	r8, r8, #1
 8009f28:	f1bc 0f00 	cmp.w	ip, #0
 8009f2c:	d1eb      	bne.n	8009f06 <rclc_executor_spin_some.part.0+0x21e>
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4610      	mov	r0, r2
 8009f32:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	@ 0x80
 8009f36:	4798      	blx	r3
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d0d9      	beq.n	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009f3c:	68eb      	ldr	r3, [r5, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0d6      	beq.n	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009f42:	f04f 0800 	mov.w	r8, #0
 8009f46:	f240 1991 	movw	r9, #401	@ 0x191
 8009f4a:	f240 2a59 	movw	sl, #601	@ 0x259
 8009f4e:	e00e      	b.n	8009f6e <rclc_executor_spin_some.part.0+0x286>
 8009f50:	f813 300b 	ldrb.w	r3, [r3, fp]
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d033      	beq.n	8009fc0 <rclc_executor_spin_some.part.0+0x2d8>
 8009f58:	2b09      	cmp	r3, #9
 8009f5a:	d028      	beq.n	8009fae <rclc_executor_spin_some.part.0+0x2c6>
 8009f5c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8009f60:	b9fb      	cbnz	r3, 8009fa2 <rclc_executor_spin_some.part.0+0x2ba>
 8009f62:	68eb      	ldr	r3, [r5, #12]
 8009f64:	f108 0801 	add.w	r8, r8, #1
 8009f68:	4598      	cmp	r8, r3
 8009f6a:	d2b7      	bcs.n	8009edc <rclc_executor_spin_some.part.0+0x1f4>
 8009f6c:	2400      	movs	r4, #0
 8009f6e:	68a8      	ldr	r0, [r5, #8]
 8009f70:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009f74:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009f78:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d0b7      	beq.n	8009ef0 <rclc_executor_spin_some.part.0+0x208>
 8009f80:	4631      	mov	r1, r6
 8009f82:	f7ff fa85 	bl	8009490 <_rclc_take_new_data>
 8009f86:	b118      	cbz	r0, 8009f90 <rclc_executor_spin_some.part.0+0x2a8>
 8009f88:	4548      	cmp	r0, r9
 8009f8a:	d001      	beq.n	8009f90 <rclc_executor_spin_some.part.0+0x2a8>
 8009f8c:	4550      	cmp	r0, sl
 8009f8e:	d10c      	bne.n	8009faa <rclc_executor_spin_some.part.0+0x2c2>
 8009f90:	68ab      	ldr	r3, [r5, #8]
 8009f92:	eb13 000b 	adds.w	r0, r3, fp
 8009f96:	d021      	beq.n	8009fdc <rclc_executor_spin_some.part.0+0x2f4>
 8009f98:	7842      	ldrb	r2, [r0, #1]
 8009f9a:	2a00      	cmp	r2, #0
 8009f9c:	d0d8      	beq.n	8009f50 <rclc_executor_spin_some.part.0+0x268>
 8009f9e:	2a01      	cmp	r2, #1
 8009fa0:	d1df      	bne.n	8009f62 <rclc_executor_spin_some.part.0+0x27a>
 8009fa2:	f7ff fbe9 	bl	8009778 <_rclc_execute.part.0>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d0db      	beq.n	8009f62 <rclc_executor_spin_some.part.0+0x27a>
 8009faa:	4607      	mov	r7, r0
 8009fac:	e796      	b.n	8009edc <rclc_executor_spin_some.part.0+0x1f4>
 8009fae:	6843      	ldr	r3, [r0, #4]
 8009fb0:	6a1a      	ldr	r2, [r3, #32]
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	d1f5      	bne.n	8009fa2 <rclc_executor_spin_some.part.0+0x2ba>
 8009fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0d1      	beq.n	8009f62 <rclc_executor_spin_some.part.0+0x27a>
 8009fbe:	e7f0      	b.n	8009fa2 <rclc_executor_spin_some.part.0+0x2ba>
 8009fc0:	6843      	ldr	r3, [r0, #4]
 8009fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fc4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8009fc8:	d1eb      	bne.n	8009fa2 <rclc_executor_spin_some.part.0+0x2ba>
 8009fca:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	d1e7      	bne.n	8009fa2 <rclc_executor_spin_some.part.0+0x2ba>
 8009fd2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0c3      	beq.n	8009f62 <rclc_executor_spin_some.part.0+0x27a>
 8009fda:	e7e2      	b.n	8009fa2 <rclc_executor_spin_some.part.0+0x2ba>
 8009fdc:	270b      	movs	r7, #11
 8009fde:	e77d      	b.n	8009edc <rclc_executor_spin_some.part.0+0x1f4>
 8009fe0:	68aa      	ldr	r2, [r5, #8]
 8009fe2:	e6e2      	b.n	8009daa <rclc_executor_spin_some.part.0+0xc2>
 8009fe4:	68aa      	ldr	r2, [r5, #8]
 8009fe6:	e7a2      	b.n	8009f2e <rclc_executor_spin_some.part.0+0x246>
 8009fe8:	6842      	ldr	r2, [r0, #4]
 8009fea:	6a11      	ldr	r1, [r2, #32]
 8009fec:	2900      	cmp	r1, #0
 8009fee:	f47f af21 	bne.w	8009e34 <rclc_executor_spin_some.part.0+0x14c>
 8009ff2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009ff6:	2a00      	cmp	r2, #0
 8009ff8:	f43f af0a 	beq.w	8009e10 <rclc_executor_spin_some.part.0+0x128>
 8009ffc:	e71a      	b.n	8009e34 <rclc_executor_spin_some.part.0+0x14c>
 8009ffe:	6842      	ldr	r2, [r0, #4]
 800a000:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a002:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a006:	f47f af15 	bne.w	8009e34 <rclc_executor_spin_some.part.0+0x14c>
 800a00a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a00e:	2900      	cmp	r1, #0
 800a010:	f47f af10 	bne.w	8009e34 <rclc_executor_spin_some.part.0+0x14c>
 800a014:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a018:	2a00      	cmp	r2, #0
 800a01a:	f43f aef9 	beq.w	8009e10 <rclc_executor_spin_some.part.0+0x128>
 800a01e:	e709      	b.n	8009e34 <rclc_executor_spin_some.part.0+0x14c>
 800a020:	68aa      	ldr	r2, [r5, #8]
 800a022:	461c      	mov	r4, r3
 800a024:	e783      	b.n	8009f2e <rclc_executor_spin_some.part.0+0x246>
 800a026:	68aa      	ldr	r2, [r5, #8]
 800a028:	461c      	mov	r4, r3
 800a02a:	e6be      	b.n	8009daa <rclc_executor_spin_some.part.0+0xc2>

0800a02c <rclc_executor_spin_some>:
 800a02c:	b190      	cbz	r0, 800a054 <rclc_executor_spin_some+0x28>
 800a02e:	b570      	push	{r4, r5, r6, lr}
 800a030:	4604      	mov	r4, r0
 800a032:	6840      	ldr	r0, [r0, #4]
 800a034:	4616      	mov	r6, r2
 800a036:	461d      	mov	r5, r3
 800a038:	f004 f896 	bl	800e168 <rcl_context_is_valid>
 800a03c:	b130      	cbz	r0, 800a04c <rclc_executor_spin_some+0x20>
 800a03e:	4632      	mov	r2, r6
 800a040:	462b      	mov	r3, r5
 800a042:	4620      	mov	r0, r4
 800a044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a048:	f7ff be4e 	b.w	8009ce8 <rclc_executor_spin_some.part.0>
 800a04c:	f000 fa50 	bl	800a4f0 <rcutils_reset_error>
 800a050:	2001      	movs	r0, #1
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	200b      	movs	r0, #11
 800a056:	4770      	bx	lr

0800a058 <rclc_executor_handle_counters_zero_init>:
 800a058:	b130      	cbz	r0, 800a068 <rclc_executor_handle_counters_zero_init+0x10>
 800a05a:	b508      	push	{r3, lr}
 800a05c:	2220      	movs	r2, #32
 800a05e:	2100      	movs	r1, #0
 800a060:	f00b fc32 	bl	80158c8 <memset>
 800a064:	2000      	movs	r0, #0
 800a066:	bd08      	pop	{r3, pc}
 800a068:	200b      	movs	r0, #11
 800a06a:	4770      	bx	lr
 800a06c:	0000      	movs	r0, r0
	...

0800a070 <rclc_executor_handle_init>:
 800a070:	b168      	cbz	r0, 800a08e <rclc_executor_handle_init+0x1e>
 800a072:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a098 <rclc_executor_handle_init+0x28>
 800a076:	2300      	movs	r3, #0
 800a078:	220b      	movs	r2, #11
 800a07a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a07e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a082:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a086:	8002      	strh	r2, [r0, #0]
 800a088:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a08a:	4618      	mov	r0, r3
 800a08c:	4770      	bx	lr
 800a08e:	200b      	movs	r0, #11
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	f3af 8000 	nop.w
	...

0800a0a0 <rclc_support_init>:
 800a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a4:	b086      	sub	sp, #24
 800a0a6:	b3b8      	cbz	r0, 800a118 <rclc_support_init+0x78>
 800a0a8:	461c      	mov	r4, r3
 800a0aa:	b3ab      	cbz	r3, 800a118 <rclc_support_init+0x78>
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	4690      	mov	r8, r2
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	f004 fb03 	bl	800e6bc <rcl_get_zero_initialized_init_options>
 800a0b6:	f104 030c 	add.w	r3, r4, #12
 800a0ba:	9005      	str	r0, [sp, #20]
 800a0bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0c0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a0c4:	a805      	add	r0, sp, #20
 800a0c6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a0ca:	f004 faf9 	bl	800e6c0 <rcl_init_options_init>
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	b9e0      	cbnz	r0, 800a10c <rclc_support_init+0x6c>
 800a0d2:	ad02      	add	r5, sp, #8
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f004 f83d 	bl	800e154 <rcl_get_zero_initialized_context>
 800a0da:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a0de:	4633      	mov	r3, r6
 800a0e0:	e886 0003 	stmia.w	r6, {r0, r1}
 800a0e4:	aa05      	add	r2, sp, #20
 800a0e6:	4641      	mov	r1, r8
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	f004 f9b1 	bl	800e450 <rcl_init>
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	b9b8      	cbnz	r0, 800a122 <rclc_support_init+0x82>
 800a0f2:	60b4      	str	r4, [r6, #8]
 800a0f4:	4622      	mov	r2, r4
 800a0f6:	f106 010c 	add.w	r1, r6, #12
 800a0fa:	2003      	movs	r0, #3
 800a0fc:	f005 f9e2 	bl	800f4c4 <rcl_clock_init>
 800a100:	4605      	mov	r5, r0
 800a102:	b970      	cbnz	r0, 800a122 <rclc_support_init+0x82>
 800a104:	a805      	add	r0, sp, #20
 800a106:	f004 fb37 	bl	800e778 <rcl_init_options_fini>
 800a10a:	b108      	cbz	r0, 800a110 <rclc_support_init+0x70>
 800a10c:	f000 f9f0 	bl	800a4f0 <rcutils_reset_error>
 800a110:	4628      	mov	r0, r5
 800a112:	b006      	add	sp, #24
 800a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a118:	250b      	movs	r5, #11
 800a11a:	4628      	mov	r0, r5
 800a11c:	b006      	add	sp, #24
 800a11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a122:	f000 f9e5 	bl	800a4f0 <rcutils_reset_error>
 800a126:	a805      	add	r0, sp, #20
 800a128:	f004 fb26 	bl	800e778 <rcl_init_options_fini>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d0ef      	beq.n	800a110 <rclc_support_init+0x70>
 800a130:	e7ec      	b.n	800a10c <rclc_support_init+0x6c>
 800a132:	bf00      	nop

0800a134 <rclc_node_init_default>:
 800a134:	b3b8      	cbz	r0, 800a1a6 <rclc_node_init_default+0x72>
 800a136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a13a:	460d      	mov	r5, r1
 800a13c:	b0a3      	sub	sp, #140	@ 0x8c
 800a13e:	b329      	cbz	r1, 800a18c <rclc_node_init_default+0x58>
 800a140:	4616      	mov	r6, r2
 800a142:	b31a      	cbz	r2, 800a18c <rclc_node_init_default+0x58>
 800a144:	461f      	mov	r7, r3
 800a146:	b30b      	cbz	r3, 800a18c <rclc_node_init_default+0x58>
 800a148:	f10d 0810 	add.w	r8, sp, #16
 800a14c:	4604      	mov	r4, r0
 800a14e:	4640      	mov	r0, r8
 800a150:	f004 fbbc 	bl	800e8cc <rcl_get_zero_initialized_node>
 800a154:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a158:	f10d 0918 	add.w	r9, sp, #24
 800a15c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a160:	4648      	mov	r0, r9
 800a162:	f004 fd4b 	bl	800ebfc <rcl_node_get_default_options>
 800a166:	4640      	mov	r0, r8
 800a168:	f004 fbb0 	bl	800e8cc <rcl_get_zero_initialized_node>
 800a16c:	f8cd 9000 	str.w	r9, [sp]
 800a170:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a174:	463b      	mov	r3, r7
 800a176:	e884 0003 	stmia.w	r4, {r0, r1}
 800a17a:	4632      	mov	r2, r6
 800a17c:	4629      	mov	r1, r5
 800a17e:	4620      	mov	r0, r4
 800a180:	f004 fbae 	bl	800e8e0 <rcl_node_init>
 800a184:	b930      	cbnz	r0, 800a194 <rclc_node_init_default+0x60>
 800a186:	b023      	add	sp, #140	@ 0x8c
 800a188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a18c:	200b      	movs	r0, #11
 800a18e:	b023      	add	sp, #140	@ 0x8c
 800a190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a194:	9003      	str	r0, [sp, #12]
 800a196:	f000 f9ab 	bl	800a4f0 <rcutils_reset_error>
 800a19a:	f000 f9a9 	bl	800a4f0 <rcutils_reset_error>
 800a19e:	9803      	ldr	r0, [sp, #12]
 800a1a0:	b023      	add	sp, #140	@ 0x8c
 800a1a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1a6:	200b      	movs	r0, #11
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop

0800a1ac <rclc_publisher_init_default>:
 800a1ac:	b368      	cbz	r0, 800a20a <rclc_publisher_init_default+0x5e>
 800a1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	b0a0      	sub	sp, #128	@ 0x80
 800a1b6:	b321      	cbz	r1, 800a202 <rclc_publisher_init_default+0x56>
 800a1b8:	4616      	mov	r6, r2
 800a1ba:	b312      	cbz	r2, 800a202 <rclc_publisher_init_default+0x56>
 800a1bc:	461f      	mov	r7, r3
 800a1be:	b303      	cbz	r3, 800a202 <rclc_publisher_init_default+0x56>
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	f7fe fd9d 	bl	8008d00 <rcl_get_zero_initialized_publisher>
 800a1c6:	f10d 0810 	add.w	r8, sp, #16
 800a1ca:	6020      	str	r0, [r4, #0]
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	f7fe fe35 	bl	8008e3c <rcl_publisher_get_default_options>
 800a1d2:	490f      	ldr	r1, [pc, #60]	@ (800a210 <rclc_publisher_init_default+0x64>)
 800a1d4:	2250      	movs	r2, #80	@ 0x50
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	f00b fc51 	bl	8015a7e <memcpy>
 800a1dc:	f8cd 8000 	str.w	r8, [sp]
 800a1e0:	463b      	mov	r3, r7
 800a1e2:	4632      	mov	r2, r6
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f7fe fd90 	bl	8008d0c <rcl_publisher_init>
 800a1ec:	b910      	cbnz	r0, 800a1f4 <rclc_publisher_init_default+0x48>
 800a1ee:	b020      	add	sp, #128	@ 0x80
 800a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f4:	9003      	str	r0, [sp, #12]
 800a1f6:	f000 f97b 	bl	800a4f0 <rcutils_reset_error>
 800a1fa:	9803      	ldr	r0, [sp, #12]
 800a1fc:	b020      	add	sp, #128	@ 0x80
 800a1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a202:	200b      	movs	r0, #11
 800a204:	b020      	add	sp, #128	@ 0x80
 800a206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20a:	200b      	movs	r0, #11
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	08016c60 	.word	0x08016c60

0800a214 <rclc_subscription_init_default>:
 800a214:	b368      	cbz	r0, 800a272 <rclc_subscription_init_default+0x5e>
 800a216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a21a:	460d      	mov	r5, r1
 800a21c:	b0a2      	sub	sp, #136	@ 0x88
 800a21e:	b321      	cbz	r1, 800a26a <rclc_subscription_init_default+0x56>
 800a220:	4616      	mov	r6, r2
 800a222:	b312      	cbz	r2, 800a26a <rclc_subscription_init_default+0x56>
 800a224:	461f      	mov	r7, r3
 800a226:	b303      	cbz	r3, 800a26a <rclc_subscription_init_default+0x56>
 800a228:	4604      	mov	r4, r0
 800a22a:	f004 ffe1 	bl	800f1f0 <rcl_get_zero_initialized_subscription>
 800a22e:	f10d 0810 	add.w	r8, sp, #16
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	4640      	mov	r0, r8
 800a236:	f005 f889 	bl	800f34c <rcl_subscription_get_default_options>
 800a23a:	490f      	ldr	r1, [pc, #60]	@ (800a278 <rclc_subscription_init_default+0x64>)
 800a23c:	2250      	movs	r2, #80	@ 0x50
 800a23e:	4640      	mov	r0, r8
 800a240:	f00b fc1d 	bl	8015a7e <memcpy>
 800a244:	f8cd 8000 	str.w	r8, [sp]
 800a248:	463b      	mov	r3, r7
 800a24a:	4632      	mov	r2, r6
 800a24c:	4629      	mov	r1, r5
 800a24e:	4620      	mov	r0, r4
 800a250:	f004 ffd4 	bl	800f1fc <rcl_subscription_init>
 800a254:	b910      	cbnz	r0, 800a25c <rclc_subscription_init_default+0x48>
 800a256:	b022      	add	sp, #136	@ 0x88
 800a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25c:	9003      	str	r0, [sp, #12]
 800a25e:	f000 f947 	bl	800a4f0 <rcutils_reset_error>
 800a262:	9803      	ldr	r0, [sp, #12]
 800a264:	b022      	add	sp, #136	@ 0x88
 800a266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a26a:	200b      	movs	r0, #11
 800a26c:	b022      	add	sp, #136	@ 0x88
 800a26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a272:	200b      	movs	r0, #11
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	08016cb0 	.word	0x08016cb0

0800a27c <rclc_timer_init_default>:
 800a27c:	b360      	cbz	r0, 800a2d8 <rclc_timer_init_default+0x5c>
 800a27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a282:	460e      	mov	r6, r1
 800a284:	b08a      	sub	sp, #40	@ 0x28
 800a286:	b319      	cbz	r1, 800a2d0 <rclc_timer_init_default+0x54>
 800a288:	4690      	mov	r8, r2
 800a28a:	461f      	mov	r7, r3
 800a28c:	4605      	mov	r5, r0
 800a28e:	f7fe fef5 	bl	800907c <rcl_get_zero_initialized_timer>
 800a292:	68b4      	ldr	r4, [r6, #8]
 800a294:	6028      	str	r0, [r5, #0]
 800a296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a298:	f10d 0c0c 	add.w	ip, sp, #12
 800a29c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	f8cc 3000 	str.w	r3, [ip]
 800a2a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2a8:	9302      	str	r3, [sp, #8]
 800a2aa:	e9cd 8700 	strd	r8, r7, [sp]
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	f106 010c 	add.w	r1, r6, #12
 800a2b6:	f7fe fee7 	bl	8009088 <rcl_timer_init>
 800a2ba:	b910      	cbnz	r0, 800a2c2 <rclc_timer_init_default+0x46>
 800a2bc:	b00a      	add	sp, #40	@ 0x28
 800a2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c2:	9009      	str	r0, [sp, #36]	@ 0x24
 800a2c4:	f000 f914 	bl	800a4f0 <rcutils_reset_error>
 800a2c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2ca:	b00a      	add	sp, #40	@ 0x28
 800a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d0:	200b      	movs	r0, #11
 800a2d2:	b00a      	add	sp, #40	@ 0x28
 800a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d8:	200b      	movs	r0, #11
 800a2da:	4770      	bx	lr

0800a2dc <__default_zero_allocate>:
 800a2dc:	f00a bf0a 	b.w	80150f4 <calloc>

0800a2e0 <__default_reallocate>:
 800a2e0:	f00b b896 	b.w	8015410 <realloc>

0800a2e4 <__default_deallocate>:
 800a2e4:	f00a bf72 	b.w	80151cc <free>

0800a2e8 <__default_allocate>:
 800a2e8:	f00a bf68 	b.w	80151bc <malloc>

0800a2ec <rcutils_get_zero_initialized_allocator>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	4c05      	ldr	r4, [pc, #20]	@ (800a304 <rcutils_get_zero_initialized_allocator+0x18>)
 800a2f0:	4686      	mov	lr, r0
 800a2f2:	4684      	mov	ip, r0
 800a2f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	f8cc 3000 	str.w	r3, [ip]
 800a300:	4670      	mov	r0, lr
 800a302:	bd10      	pop	{r4, pc}
 800a304:	08016d00 	.word	0x08016d00

0800a308 <rcutils_set_default_allocator>:
 800a308:	b1a8      	cbz	r0, 800a336 <rcutils_set_default_allocator+0x2e>
 800a30a:	6802      	ldr	r2, [r0, #0]
 800a30c:	b1a2      	cbz	r2, 800a338 <rcutils_set_default_allocator+0x30>
 800a30e:	6841      	ldr	r1, [r0, #4]
 800a310:	b1a1      	cbz	r1, 800a33c <rcutils_set_default_allocator+0x34>
 800a312:	b410      	push	{r4}
 800a314:	68c4      	ldr	r4, [r0, #12]
 800a316:	b164      	cbz	r4, 800a332 <rcutils_set_default_allocator+0x2a>
 800a318:	6880      	ldr	r0, [r0, #8]
 800a31a:	b138      	cbz	r0, 800a32c <rcutils_set_default_allocator+0x24>
 800a31c:	4b08      	ldr	r3, [pc, #32]	@ (800a340 <rcutils_set_default_allocator+0x38>)
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	2200      	movs	r2, #0
 800a322:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a326:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a32a:	2001      	movs	r0, #1
 800a32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	4620      	mov	r0, r4
 800a334:	e7fa      	b.n	800a32c <rcutils_set_default_allocator+0x24>
 800a336:	4770      	bx	lr
 800a338:	4610      	mov	r0, r2
 800a33a:	4770      	bx	lr
 800a33c:	4608      	mov	r0, r1
 800a33e:	4770      	bx	lr
 800a340:	200001f8 	.word	0x200001f8

0800a344 <rcutils_get_default_allocator>:
 800a344:	b510      	push	{r4, lr}
 800a346:	4c05      	ldr	r4, [pc, #20]	@ (800a35c <rcutils_get_default_allocator+0x18>)
 800a348:	4686      	mov	lr, r0
 800a34a:	4684      	mov	ip, r0
 800a34c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a34e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	f8cc 3000 	str.w	r3, [ip]
 800a358:	4670      	mov	r0, lr
 800a35a:	bd10      	pop	{r4, pc}
 800a35c:	200001f8 	.word	0x200001f8

0800a360 <rcutils_allocator_is_valid>:
 800a360:	b158      	cbz	r0, 800a37a <rcutils_allocator_is_valid+0x1a>
 800a362:	6803      	ldr	r3, [r0, #0]
 800a364:	b143      	cbz	r3, 800a378 <rcutils_allocator_is_valid+0x18>
 800a366:	6843      	ldr	r3, [r0, #4]
 800a368:	b133      	cbz	r3, 800a378 <rcutils_allocator_is_valid+0x18>
 800a36a:	68c3      	ldr	r3, [r0, #12]
 800a36c:	b123      	cbz	r3, 800a378 <rcutils_allocator_is_valid+0x18>
 800a36e:	6880      	ldr	r0, [r0, #8]
 800a370:	3800      	subs	r0, #0
 800a372:	bf18      	it	ne
 800a374:	2001      	movne	r0, #1
 800a376:	4770      	bx	lr
 800a378:	4618      	mov	r0, r3
 800a37a:	4770      	bx	lr

0800a37c <__atomic_load_8>:
 800a37c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800a380:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800a384:	4a15      	ldr	r2, [pc, #84]	@ (800a3dc <__atomic_load_8+0x60>)
 800a386:	4b16      	ldr	r3, [pc, #88]	@ (800a3e0 <__atomic_load_8+0x64>)
 800a388:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800a38c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800a390:	fb02 f101 	mul.w	r1, r2, r1
 800a394:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800a398:	fba3 2301 	umull	r2, r3, r3, r1
 800a39c:	091b      	lsrs	r3, r3, #4
 800a39e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a3a2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800a3a6:	b4d0      	push	{r4, r6, r7}
 800a3a8:	4c0e      	ldr	r4, [pc, #56]	@ (800a3e4 <__atomic_load_8+0x68>)
 800a3aa:	1ac9      	subs	r1, r1, r3
 800a3ac:	1862      	adds	r2, r4, r1
 800a3ae:	f04f 0c01 	mov.w	ip, #1
 800a3b2:	e8d2 3f4f 	ldrexb	r3, [r2]
 800a3b6:	e8c2 cf46 	strexb	r6, ip, [r2]
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	d1f9      	bne.n	800a3b2 <__atomic_load_8+0x36>
 800a3be:	f3bf 8f5b 	dmb	ish
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1f4      	bne.n	800a3b2 <__atomic_load_8+0x36>
 800a3c8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a3cc:	f3bf 8f5b 	dmb	ish
 800a3d0:	5463      	strb	r3, [r4, r1]
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	bcd0      	pop	{r4, r6, r7}
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	27d4eb2d 	.word	0x27d4eb2d
 800a3e0:	b21642c9 	.word	0xb21642c9
 800a3e4:	2000c700 	.word	0x2000c700

0800a3e8 <__atomic_store_8>:
 800a3e8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800a3ec:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800a3f6:	4c14      	ldr	r4, [pc, #80]	@ (800a448 <__atomic_store_8+0x60>)
 800a3f8:	4d14      	ldr	r5, [pc, #80]	@ (800a44c <__atomic_store_8+0x64>)
 800a3fa:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800a3fe:	fb04 f101 	mul.w	r1, r4, r1
 800a402:	4c13      	ldr	r4, [pc, #76]	@ (800a450 <__atomic_store_8+0x68>)
 800a404:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800a408:	fba4 4e01 	umull	r4, lr, r4, r1
 800a40c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800a410:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800a414:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800a418:	eba1 0e0e 	sub.w	lr, r1, lr
 800a41c:	eb05 0c0e 	add.w	ip, r5, lr
 800a420:	f04f 0401 	mov.w	r4, #1
 800a424:	e8dc 1f4f 	ldrexb	r1, [ip]
 800a428:	e8cc 4f46 	strexb	r6, r4, [ip]
 800a42c:	2e00      	cmp	r6, #0
 800a42e:	d1f9      	bne.n	800a424 <__atomic_store_8+0x3c>
 800a430:	f3bf 8f5b 	dmb	ish
 800a434:	b2c9      	uxtb	r1, r1
 800a436:	2900      	cmp	r1, #0
 800a438:	d1f4      	bne.n	800a424 <__atomic_store_8+0x3c>
 800a43a:	e9c0 2300 	strd	r2, r3, [r0]
 800a43e:	f3bf 8f5b 	dmb	ish
 800a442:	f805 100e 	strb.w	r1, [r5, lr]
 800a446:	bd70      	pop	{r4, r5, r6, pc}
 800a448:	27d4eb2d 	.word	0x27d4eb2d
 800a44c:	2000c700 	.word	0x2000c700
 800a450:	b21642c9 	.word	0xb21642c9

0800a454 <__atomic_exchange_8>:
 800a454:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800a458:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800a45c:	4916      	ldr	r1, [pc, #88]	@ (800a4b8 <__atomic_exchange_8+0x64>)
 800a45e:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800a462:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800a466:	fb01 fc0c 	mul.w	ip, r1, ip
 800a46a:	4914      	ldr	r1, [pc, #80]	@ (800a4bc <__atomic_exchange_8+0x68>)
 800a46c:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	4605      	mov	r5, r0
 800a474:	fba1 010c 	umull	r0, r1, r1, ip
 800a478:	0909      	lsrs	r1, r1, #4
 800a47a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a47e:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800a482:	4e0f      	ldr	r6, [pc, #60]	@ (800a4c0 <__atomic_exchange_8+0x6c>)
 800a484:	ebac 0c01 	sub.w	ip, ip, r1
 800a488:	eb06 010c 	add.w	r1, r6, ip
 800a48c:	f04f 0e01 	mov.w	lr, #1
 800a490:	e8d1 4f4f 	ldrexb	r4, [r1]
 800a494:	e8c1 ef40 	strexb	r0, lr, [r1]
 800a498:	2800      	cmp	r0, #0
 800a49a:	d1f9      	bne.n	800a490 <__atomic_exchange_8+0x3c>
 800a49c:	f3bf 8f5b 	dmb	ish
 800a4a0:	b2e4      	uxtb	r4, r4
 800a4a2:	2c00      	cmp	r4, #0
 800a4a4:	d1f4      	bne.n	800a490 <__atomic_exchange_8+0x3c>
 800a4a6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a4aa:	e9c5 2300 	strd	r2, r3, [r5]
 800a4ae:	f3bf 8f5b 	dmb	ish
 800a4b2:	f806 400c 	strb.w	r4, [r6, ip]
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	27d4eb2d 	.word	0x27d4eb2d
 800a4bc:	b21642c9 	.word	0xb21642c9
 800a4c0:	2000c700 	.word	0x2000c700

0800a4c4 <rcutils_get_error_string>:
 800a4c4:	4b06      	ldr	r3, [pc, #24]	@ (800a4e0 <rcutils_get_error_string+0x1c>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b13b      	cbz	r3, 800a4da <rcutils_get_error_string+0x16>
 800a4ca:	4b06      	ldr	r3, [pc, #24]	@ (800a4e4 <rcutils_get_error_string+0x20>)
 800a4cc:	781a      	ldrb	r2, [r3, #0]
 800a4ce:	b90a      	cbnz	r2, 800a4d4 <rcutils_get_error_string+0x10>
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	701a      	strb	r2, [r3, #0]
 800a4d4:	4b04      	ldr	r3, [pc, #16]	@ (800a4e8 <rcutils_get_error_string+0x24>)
 800a4d6:	7818      	ldrb	r0, [r3, #0]
 800a4d8:	4770      	bx	lr
 800a4da:	4b04      	ldr	r3, [pc, #16]	@ (800a4ec <rcutils_get_error_string+0x28>)
 800a4dc:	7818      	ldrb	r0, [r3, #0]
 800a4de:	4770      	bx	lr
 800a4e0:	2000c717 	.word	0x2000c717
 800a4e4:	2000c729 	.word	0x2000c729
 800a4e8:	2000c728 	.word	0x2000c728
 800a4ec:	08016d14 	.word	0x08016d14

0800a4f0 <rcutils_reset_error>:
 800a4f0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a510 <rcutils_reset_error+0x20>
 800a4f4:	4a08      	ldr	r2, [pc, #32]	@ (800a518 <rcutils_reset_error+0x28>)
 800a4f6:	4809      	ldr	r0, [pc, #36]	@ (800a51c <rcutils_reset_error+0x2c>)
 800a4f8:	4909      	ldr	r1, [pc, #36]	@ (800a520 <rcutils_reset_error+0x30>)
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	8013      	strh	r3, [r2, #0]
 800a4fe:	ed82 7b02 	vstr	d7, [r2, #8]
 800a502:	4a08      	ldr	r2, [pc, #32]	@ (800a524 <rcutils_reset_error+0x34>)
 800a504:	7003      	strb	r3, [r0, #0]
 800a506:	700b      	strb	r3, [r1, #0]
 800a508:	7013      	strb	r3, [r2, #0]
 800a50a:	4770      	bx	lr
 800a50c:	f3af 8000 	nop.w
	...
 800a518:	2000c718 	.word	0x2000c718
 800a51c:	2000c729 	.word	0x2000c729
 800a520:	2000c728 	.word	0x2000c728
 800a524:	2000c717 	.word	0x2000c717

0800a528 <rcutils_system_time_now>:
 800a528:	b318      	cbz	r0, 800a572 <rcutils_system_time_now+0x4a>
 800a52a:	b570      	push	{r4, r5, r6, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	4604      	mov	r4, r0
 800a530:	4669      	mov	r1, sp
 800a532:	2001      	movs	r0, #1
 800a534:	f7f6 ff3c 	bl	80013b0 <clock_gettime>
 800a538:	2800      	cmp	r0, #0
 800a53a:	db17      	blt.n	800a56c <rcutils_system_time_now+0x44>
 800a53c:	e9dd 3600 	ldrd	r3, r6, [sp]
 800a540:	2e00      	cmp	r6, #0
 800a542:	db13      	blt.n	800a56c <rcutils_system_time_now+0x44>
 800a544:	9902      	ldr	r1, [sp, #8]
 800a546:	2900      	cmp	r1, #0
 800a548:	db0d      	blt.n	800a566 <rcutils_system_time_now+0x3e>
 800a54a:	4d0b      	ldr	r5, [pc, #44]	@ (800a578 <rcutils_system_time_now+0x50>)
 800a54c:	fba3 3205 	umull	r3, r2, r3, r5
 800a550:	185b      	adds	r3, r3, r1
 800a552:	fb05 2206 	mla	r2, r5, r6, r2
 800a556:	f04f 0000 	mov.w	r0, #0
 800a55a:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a55e:	e9c4 3200 	strd	r3, r2, [r4]
 800a562:	b004      	add	sp, #16
 800a564:	bd70      	pop	{r4, r5, r6, pc}
 800a566:	ea53 0206 	orrs.w	r2, r3, r6
 800a56a:	d1ee      	bne.n	800a54a <rcutils_system_time_now+0x22>
 800a56c:	2002      	movs	r0, #2
 800a56e:	b004      	add	sp, #16
 800a570:	bd70      	pop	{r4, r5, r6, pc}
 800a572:	200b      	movs	r0, #11
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	3b9aca00 	.word	0x3b9aca00

0800a57c <rcutils_steady_time_now>:
 800a57c:	b318      	cbz	r0, 800a5c6 <rcutils_steady_time_now+0x4a>
 800a57e:	b570      	push	{r4, r5, r6, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	4604      	mov	r4, r0
 800a584:	4669      	mov	r1, sp
 800a586:	2000      	movs	r0, #0
 800a588:	f7f6 ff12 	bl	80013b0 <clock_gettime>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	db17      	blt.n	800a5c0 <rcutils_steady_time_now+0x44>
 800a590:	e9dd 3600 	ldrd	r3, r6, [sp]
 800a594:	2e00      	cmp	r6, #0
 800a596:	db13      	blt.n	800a5c0 <rcutils_steady_time_now+0x44>
 800a598:	9902      	ldr	r1, [sp, #8]
 800a59a:	2900      	cmp	r1, #0
 800a59c:	db0d      	blt.n	800a5ba <rcutils_steady_time_now+0x3e>
 800a59e:	4d0b      	ldr	r5, [pc, #44]	@ (800a5cc <rcutils_steady_time_now+0x50>)
 800a5a0:	fba3 3205 	umull	r3, r2, r3, r5
 800a5a4:	185b      	adds	r3, r3, r1
 800a5a6:	fb05 2206 	mla	r2, r5, r6, r2
 800a5aa:	f04f 0000 	mov.w	r0, #0
 800a5ae:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a5b2:	e9c4 3200 	strd	r3, r2, [r4]
 800a5b6:	b004      	add	sp, #16
 800a5b8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ba:	ea53 0206 	orrs.w	r2, r3, r6
 800a5be:	d1ee      	bne.n	800a59e <rcutils_steady_time_now+0x22>
 800a5c0:	2002      	movs	r0, #2
 800a5c2:	b004      	add	sp, #16
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	200b      	movs	r0, #11
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	3b9aca00 	.word	0x3b9aca00

0800a5d0 <rmw_get_default_publisher_options>:
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	6002      	str	r2, [r0, #0]
 800a5d4:	7102      	strb	r2, [r0, #4]
 800a5d6:	4770      	bx	lr

0800a5d8 <rmw_uros_set_custom_transport>:
 800a5d8:	b470      	push	{r4, r5, r6}
 800a5da:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a5de:	b162      	cbz	r2, 800a5fa <rmw_uros_set_custom_transport+0x22>
 800a5e0:	b15b      	cbz	r3, 800a5fa <rmw_uros_set_custom_transport+0x22>
 800a5e2:	b155      	cbz	r5, 800a5fa <rmw_uros_set_custom_transport+0x22>
 800a5e4:	b14e      	cbz	r6, 800a5fa <rmw_uros_set_custom_transport+0x22>
 800a5e6:	4c06      	ldr	r4, [pc, #24]	@ (800a600 <rmw_uros_set_custom_transport+0x28>)
 800a5e8:	7020      	strb	r0, [r4, #0]
 800a5ea:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a5ee:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a5f2:	6166      	str	r6, [r4, #20]
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	bc70      	pop	{r4, r5, r6}
 800a5f8:	4770      	bx	lr
 800a5fa:	200b      	movs	r0, #11
 800a5fc:	bc70      	pop	{r4, r5, r6}
 800a5fe:	4770      	bx	lr
 800a600:	2000c72c 	.word	0x2000c72c

0800a604 <flush_session>:
 800a604:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a606:	f001 bd53 	b.w	800c0b0 <uxr_run_session_until_confirm_delivery>
 800a60a:	bf00      	nop

0800a60c <rmw_publish>:
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d053      	beq.n	800a6b8 <rmw_publish+0xac>
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	460d      	mov	r5, r1
 800a614:	b08e      	sub	sp, #56	@ 0x38
 800a616:	2900      	cmp	r1, #0
 800a618:	d04b      	beq.n	800a6b2 <rmw_publish+0xa6>
 800a61a:	4604      	mov	r4, r0
 800a61c:	6800      	ldr	r0, [r0, #0]
 800a61e:	f000 fced 	bl	800affc <is_uxrce_rmw_identifier_valid>
 800a622:	2800      	cmp	r0, #0
 800a624:	d045      	beq.n	800a6b2 <rmw_publish+0xa6>
 800a626:	6866      	ldr	r6, [r4, #4]
 800a628:	2e00      	cmp	r6, #0
 800a62a:	d042      	beq.n	800a6b2 <rmw_publish+0xa6>
 800a62c:	69b4      	ldr	r4, [r6, #24]
 800a62e:	4628      	mov	r0, r5
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	4798      	blx	r3
 800a634:	69f3      	ldr	r3, [r6, #28]
 800a636:	9005      	str	r0, [sp, #20]
 800a638:	b113      	cbz	r3, 800a640 <rmw_publish+0x34>
 800a63a:	a805      	add	r0, sp, #20
 800a63c:	4798      	blx	r3
 800a63e:	9805      	ldr	r0, [sp, #20]
 800a640:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	9000      	str	r0, [sp, #0]
 800a648:	6972      	ldr	r2, [r6, #20]
 800a64a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a64c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a650:	ab06      	add	r3, sp, #24
 800a652:	f002 fb19 	bl	800cc88 <uxr_prepare_output_stream>
 800a656:	b1d8      	cbz	r0, 800a690 <rmw_publish+0x84>
 800a658:	68a3      	ldr	r3, [r4, #8]
 800a65a:	a906      	add	r1, sp, #24
 800a65c:	4628      	mov	r0, r5
 800a65e:	4798      	blx	r3
 800a660:	6a33      	ldr	r3, [r6, #32]
 800a662:	4604      	mov	r4, r0
 800a664:	b10b      	cbz	r3, 800a66a <rmw_publish+0x5e>
 800a666:	a806      	add	r0, sp, #24
 800a668:	4798      	blx	r3
 800a66a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a66e:	2b01      	cmp	r3, #1
 800a670:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a674:	d022      	beq.n	800a6bc <rmw_publish+0xb0>
 800a676:	6918      	ldr	r0, [r3, #16]
 800a678:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a67a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a67e:	f001 fd17 	bl	800c0b0 <uxr_run_session_until_confirm_delivery>
 800a682:	4020      	ands	r0, r4
 800a684:	b2c4      	uxtb	r4, r0
 800a686:	f084 0001 	eor.w	r0, r4, #1
 800a68a:	b2c0      	uxtb	r0, r0
 800a68c:	b00e      	add	sp, #56	@ 0x38
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a694:	6918      	ldr	r0, [r3, #16]
 800a696:	9b05      	ldr	r3, [sp, #20]
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c8 <rmw_publish+0xbc>)
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	9602      	str	r6, [sp, #8]
 800a6a0:	6972      	ldr	r2, [r6, #20]
 800a6a2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a6a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a6a8:	ab06      	add	r3, sp, #24
 800a6aa:	f002 fb1d 	bl	800cce8 <uxr_prepare_output_stream_fragmented>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d1d2      	bne.n	800a658 <rmw_publish+0x4c>
 800a6b2:	2001      	movs	r0, #1
 800a6b4:	b00e      	add	sp, #56	@ 0x38
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	4770      	bx	lr
 800a6bc:	6918      	ldr	r0, [r3, #16]
 800a6be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a6c2:	f001 f935 	bl	800b930 <uxr_flash_output_streams>
 800a6c6:	e7de      	b.n	800a686 <rmw_publish+0x7a>
 800a6c8:	0800a605 	.word	0x0800a605

0800a6cc <rmw_create_publisher>:
 800a6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d0:	b087      	sub	sp, #28
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f000 80cc 	beq.w	800a870 <rmw_create_publisher+0x1a4>
 800a6d8:	460e      	mov	r6, r1
 800a6da:	2900      	cmp	r1, #0
 800a6dc:	f000 80c8 	beq.w	800a870 <rmw_create_publisher+0x1a4>
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	6800      	ldr	r0, [r0, #0]
 800a6e4:	4615      	mov	r5, r2
 800a6e6:	4698      	mov	r8, r3
 800a6e8:	f000 fc88 	bl	800affc <is_uxrce_rmw_identifier_valid>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	f000 80bf 	beq.w	800a870 <rmw_create_publisher+0x1a4>
 800a6f2:	2d00      	cmp	r5, #0
 800a6f4:	f000 80bc 	beq.w	800a870 <rmw_create_publisher+0x1a4>
 800a6f8:	782b      	ldrb	r3, [r5, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 80b8 	beq.w	800a870 <rmw_create_publisher+0x1a4>
 800a700:	f1b8 0f00 	cmp.w	r8, #0
 800a704:	f000 80b4 	beq.w	800a870 <rmw_create_publisher+0x1a4>
 800a708:	485c      	ldr	r0, [pc, #368]	@ (800a87c <rmw_create_publisher+0x1b0>)
 800a70a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a70e:	f007 f87d 	bl	801180c <get_memory>
 800a712:	2800      	cmp	r0, #0
 800a714:	f000 80ac 	beq.w	800a870 <rmw_create_publisher+0x1a4>
 800a718:	6884      	ldr	r4, [r0, #8]
 800a71a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a71e:	f007 f8fb 	bl	8011918 <rmw_get_implementation_identifier>
 800a722:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a726:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a72a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a72e:	4628      	mov	r0, r5
 800a730:	f7f5 fdb6 	bl	80002a0 <strlen>
 800a734:	3001      	adds	r0, #1
 800a736:	283c      	cmp	r0, #60	@ 0x3c
 800a738:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800a73c:	f200 8091 	bhi.w	800a862 <rmw_create_publisher+0x196>
 800a740:	4a4f      	ldr	r2, [pc, #316]	@ (800a880 <rmw_create_publisher+0x1b4>)
 800a742:	462b      	mov	r3, r5
 800a744:	213c      	movs	r1, #60	@ 0x3c
 800a746:	4650      	mov	r0, sl
 800a748:	f00a ffe4 	bl	8015714 <sniprintf>
 800a74c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a750:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a752:	4641      	mov	r1, r8
 800a754:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a758:	2250      	movs	r2, #80	@ 0x50
 800a75a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a75e:	f00b f98e 	bl	8015a7e <memcpy>
 800a762:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a766:	4947      	ldr	r1, [pc, #284]	@ (800a884 <rmw_create_publisher+0x1b8>)
 800a768:	2b02      	cmp	r3, #2
 800a76a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a76e:	bf0c      	ite	eq
 800a770:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a774:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a778:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a77a:	2300      	movs	r3, #0
 800a77c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a780:	4630      	mov	r0, r6
 800a782:	f000 fc49 	bl	800b018 <get_message_typesupport_handle>
 800a786:	2800      	cmp	r0, #0
 800a788:	d06b      	beq.n	800a862 <rmw_create_publisher+0x196>
 800a78a:	6842      	ldr	r2, [r0, #4]
 800a78c:	61a2      	str	r2, [r4, #24]
 800a78e:	2a00      	cmp	r2, #0
 800a790:	d067      	beq.n	800a862 <rmw_create_publisher+0x196>
 800a792:	4629      	mov	r1, r5
 800a794:	4643      	mov	r3, r8
 800a796:	4648      	mov	r0, r9
 800a798:	f007 fb26 	bl	8011de8 <create_topic>
 800a79c:	6260      	str	r0, [r4, #36]	@ 0x24
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d063      	beq.n	800a86a <rmw_create_publisher+0x19e>
 800a7a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7aa:	2103      	movs	r1, #3
 800a7ac:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800a7b0:	1c42      	adds	r2, r0, #1
 800a7b2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800a7b6:	f000 ff6d 	bl	800b694 <uxr_object_id>
 800a7ba:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800a7be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7c2:	6120      	str	r0, [r4, #16]
 800a7c4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800a7c8:	6910      	ldr	r0, [r2, #16]
 800a7ca:	2506      	movs	r5, #6
 800a7cc:	9500      	str	r5, [sp, #0]
 800a7ce:	6819      	ldr	r1, [r3, #0]
 800a7d0:	6922      	ldr	r2, [r4, #16]
 800a7d2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a7d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a7da:	f000 fe0d 	bl	800b3f8 <uxr_buffer_create_publisher_bin>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a7e4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a7e8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a7ec:	f000 fb86 	bl	800aefc <run_xrce_session>
 800a7f0:	b3b8      	cbz	r0, 800a862 <rmw_create_publisher+0x196>
 800a7f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7fa:	2105      	movs	r1, #5
 800a7fc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800a800:	1c42      	adds	r2, r0, #1
 800a802:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800a806:	f000 ff45 	bl	800b694 <uxr_object_id>
 800a80a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a80e:	6160      	str	r0, [r4, #20]
 800a810:	691e      	ldr	r6, [r3, #16]
 800a812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a816:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a81a:	f10d 0a10 	add.w	sl, sp, #16
 800a81e:	4641      	mov	r1, r8
 800a820:	4650      	mov	r0, sl
 800a822:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800a826:	f000 fb85 	bl	800af34 <convert_qos_profile>
 800a82a:	9503      	str	r5, [sp, #12]
 800a82c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a830:	9001      	str	r0, [sp, #4]
 800a832:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a836:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800a840:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a844:	f8d8 1000 	ldr.w	r1, [r8]
 800a848:	4630      	mov	r0, r6
 800a84a:	f000 fe35 	bl	800b4b8 <uxr_buffer_create_datawriter_bin>
 800a84e:	4602      	mov	r2, r0
 800a850:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a854:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a858:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a85c:	f000 fb4e 	bl	800aefc <run_xrce_session>
 800a860:	b938      	cbnz	r0, 800a872 <rmw_create_publisher+0x1a6>
 800a862:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a864:	b108      	cbz	r0, 800a86a <rmw_create_publisher+0x19e>
 800a866:	f000 fa47 	bl	800acf8 <rmw_uxrce_fini_topic_memory>
 800a86a:	4638      	mov	r0, r7
 800a86c:	f000 f9ec 	bl	800ac48 <rmw_uxrce_fini_publisher_memory>
 800a870:	2700      	movs	r7, #0
 800a872:	4638      	mov	r0, r7
 800a874:	b007      	add	sp, #28
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	bf00      	nop
 800a87c:	20011024 	.word	0x20011024
 800a880:	08016d28 	.word	0x08016d28
 800a884:	08016aa8 	.word	0x08016aa8

0800a888 <rmw_publisher_get_actual_qos>:
 800a888:	b150      	cbz	r0, 800a8a0 <rmw_publisher_get_actual_qos+0x18>
 800a88a:	b508      	push	{r3, lr}
 800a88c:	460b      	mov	r3, r1
 800a88e:	b149      	cbz	r1, 800a8a4 <rmw_publisher_get_actual_qos+0x1c>
 800a890:	6841      	ldr	r1, [r0, #4]
 800a892:	2250      	movs	r2, #80	@ 0x50
 800a894:	3128      	adds	r1, #40	@ 0x28
 800a896:	4618      	mov	r0, r3
 800a898:	f00b f8f1 	bl	8015a7e <memcpy>
 800a89c:	2000      	movs	r0, #0
 800a89e:	bd08      	pop	{r3, pc}
 800a8a0:	200b      	movs	r0, #11
 800a8a2:	4770      	bx	lr
 800a8a4:	200b      	movs	r0, #11
 800a8a6:	bd08      	pop	{r3, pc}

0800a8a8 <rmw_destroy_publisher>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	b128      	cbz	r0, 800a8b8 <rmw_destroy_publisher+0x10>
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	6800      	ldr	r0, [r0, #0]
 800a8b0:	460d      	mov	r5, r1
 800a8b2:	f000 fba3 	bl	800affc <is_uxrce_rmw_identifier_valid>
 800a8b6:	b910      	cbnz	r0, 800a8be <rmw_destroy_publisher+0x16>
 800a8b8:	2401      	movs	r4, #1
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8be:	6863      	ldr	r3, [r4, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0f9      	beq.n	800a8b8 <rmw_destroy_publisher+0x10>
 800a8c4:	2d00      	cmp	r5, #0
 800a8c6:	d0f7      	beq.n	800a8b8 <rmw_destroy_publisher+0x10>
 800a8c8:	6828      	ldr	r0, [r5, #0]
 800a8ca:	f000 fb97 	bl	800affc <is_uxrce_rmw_identifier_valid>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d0f2      	beq.n	800a8b8 <rmw_destroy_publisher+0x10>
 800a8d2:	686c      	ldr	r4, [r5, #4]
 800a8d4:	2c00      	cmp	r4, #0
 800a8d6:	d0ef      	beq.n	800a8b8 <rmw_destroy_publisher+0x10>
 800a8d8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a8da:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800a8de:	f007 fad3 	bl	8011e88 <destroy_topic>
 800a8e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a8e6:	6962      	ldr	r2, [r4, #20]
 800a8e8:	6918      	ldr	r0, [r3, #16]
 800a8ea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a8ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a8f2:	6819      	ldr	r1, [r3, #0]
 800a8f4:	f000 fccc 	bl	800b290 <uxr_buffer_delete_entity>
 800a8f8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a8fc:	6922      	ldr	r2, [r4, #16]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800a904:	4604      	mov	r4, r0
 800a906:	6809      	ldr	r1, [r1, #0]
 800a908:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a90c:	f000 fcc0 	bl	800b290 <uxr_buffer_delete_entity>
 800a910:	693e      	ldr	r6, [r7, #16]
 800a912:	4622      	mov	r2, r4
 800a914:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800a918:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800a91c:	4604      	mov	r4, r0
 800a91e:	4630      	mov	r0, r6
 800a920:	f000 faec 	bl	800aefc <run_xrce_session>
 800a924:	693e      	ldr	r6, [r7, #16]
 800a926:	4622      	mov	r2, r4
 800a928:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800a92c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800a930:	4604      	mov	r4, r0
 800a932:	4630      	mov	r0, r6
 800a934:	f000 fae2 	bl	800aefc <run_xrce_session>
 800a938:	b12c      	cbz	r4, 800a946 <rmw_destroy_publisher+0x9e>
 800a93a:	b120      	cbz	r0, 800a946 <rmw_destroy_publisher+0x9e>
 800a93c:	2400      	movs	r4, #0
 800a93e:	4628      	mov	r0, r5
 800a940:	f000 f982 	bl	800ac48 <rmw_uxrce_fini_publisher_memory>
 800a944:	e7b9      	b.n	800a8ba <rmw_destroy_publisher+0x12>
 800a946:	2402      	movs	r4, #2
 800a948:	e7f9      	b.n	800a93e <rmw_destroy_publisher+0x96>
 800a94a:	bf00      	nop

0800a94c <rmw_uxrce_init_service_memory>:
 800a94c:	b1e2      	cbz	r2, 800a988 <rmw_uxrce_init_service_memory+0x3c>
 800a94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a952:	7b05      	ldrb	r5, [r0, #12]
 800a954:	4606      	mov	r6, r0
 800a956:	b9ad      	cbnz	r5, 800a984 <rmw_uxrce_init_service_memory+0x38>
 800a958:	23c8      	movs	r3, #200	@ 0xc8
 800a95a:	e9c0 5500 	strd	r5, r5, [r0]
 800a95e:	6083      	str	r3, [r0, #8]
 800a960:	f240 1301 	movw	r3, #257	@ 0x101
 800a964:	4617      	mov	r7, r2
 800a966:	8183      	strh	r3, [r0, #12]
 800a968:	460c      	mov	r4, r1
 800a96a:	46a8      	mov	r8, r5
 800a96c:	4621      	mov	r1, r4
 800a96e:	4630      	mov	r0, r6
 800a970:	3501      	adds	r5, #1
 800a972:	f006 ff5b 	bl	801182c <put_memory>
 800a976:	42af      	cmp	r7, r5
 800a978:	60a4      	str	r4, [r4, #8]
 800a97a:	f884 800c 	strb.w	r8, [r4, #12]
 800a97e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a982:	d1f3      	bne.n	800a96c <rmw_uxrce_init_service_memory+0x20>
 800a984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop

0800a98c <rmw_uxrce_init_client_memory>:
 800a98c:	b1e2      	cbz	r2, 800a9c8 <rmw_uxrce_init_client_memory+0x3c>
 800a98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a992:	7b05      	ldrb	r5, [r0, #12]
 800a994:	4606      	mov	r6, r0
 800a996:	b9ad      	cbnz	r5, 800a9c4 <rmw_uxrce_init_client_memory+0x38>
 800a998:	23c8      	movs	r3, #200	@ 0xc8
 800a99a:	e9c0 5500 	strd	r5, r5, [r0]
 800a99e:	6083      	str	r3, [r0, #8]
 800a9a0:	f240 1301 	movw	r3, #257	@ 0x101
 800a9a4:	4617      	mov	r7, r2
 800a9a6:	8183      	strh	r3, [r0, #12]
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	46a8      	mov	r8, r5
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	f006 ff3b 	bl	801182c <put_memory>
 800a9b6:	42af      	cmp	r7, r5
 800a9b8:	60a4      	str	r4, [r4, #8]
 800a9ba:	f884 800c 	strb.w	r8, [r4, #12]
 800a9be:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a9c2:	d1f3      	bne.n	800a9ac <rmw_uxrce_init_client_memory+0x20>
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop

0800a9cc <rmw_uxrce_init_publisher_memory>:
 800a9cc:	b1e2      	cbz	r2, 800aa08 <rmw_uxrce_init_publisher_memory+0x3c>
 800a9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d2:	7b05      	ldrb	r5, [r0, #12]
 800a9d4:	4606      	mov	r6, r0
 800a9d6:	b9ad      	cbnz	r5, 800aa04 <rmw_uxrce_init_publisher_memory+0x38>
 800a9d8:	23d8      	movs	r3, #216	@ 0xd8
 800a9da:	e9c0 5500 	strd	r5, r5, [r0]
 800a9de:	6083      	str	r3, [r0, #8]
 800a9e0:	f240 1301 	movw	r3, #257	@ 0x101
 800a9e4:	4617      	mov	r7, r2
 800a9e6:	8183      	strh	r3, [r0, #12]
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	46a8      	mov	r8, r5
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	3501      	adds	r5, #1
 800a9f2:	f006 ff1b 	bl	801182c <put_memory>
 800a9f6:	42af      	cmp	r7, r5
 800a9f8:	60a4      	str	r4, [r4, #8]
 800a9fa:	f884 800c 	strb.w	r8, [r4, #12]
 800a9fe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800aa02:	d1f3      	bne.n	800a9ec <rmw_uxrce_init_publisher_memory+0x20>
 800aa04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop

0800aa0c <rmw_uxrce_init_subscription_memory>:
 800aa0c:	b1e2      	cbz	r2, 800aa48 <rmw_uxrce_init_subscription_memory+0x3c>
 800aa0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa12:	7b05      	ldrb	r5, [r0, #12]
 800aa14:	4606      	mov	r6, r0
 800aa16:	b9ad      	cbnz	r5, 800aa44 <rmw_uxrce_init_subscription_memory+0x38>
 800aa18:	23d8      	movs	r3, #216	@ 0xd8
 800aa1a:	e9c0 5500 	strd	r5, r5, [r0]
 800aa1e:	6083      	str	r3, [r0, #8]
 800aa20:	f240 1301 	movw	r3, #257	@ 0x101
 800aa24:	4617      	mov	r7, r2
 800aa26:	8183      	strh	r3, [r0, #12]
 800aa28:	460c      	mov	r4, r1
 800aa2a:	46a8      	mov	r8, r5
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	4630      	mov	r0, r6
 800aa30:	3501      	adds	r5, #1
 800aa32:	f006 fefb 	bl	801182c <put_memory>
 800aa36:	42af      	cmp	r7, r5
 800aa38:	60a4      	str	r4, [r4, #8]
 800aa3a:	f884 800c 	strb.w	r8, [r4, #12]
 800aa3e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800aa42:	d1f3      	bne.n	800aa2c <rmw_uxrce_init_subscription_memory+0x20>
 800aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop

0800aa4c <rmw_uxrce_init_node_memory>:
 800aa4c:	b1e2      	cbz	r2, 800aa88 <rmw_uxrce_init_node_memory+0x3c>
 800aa4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa52:	7b05      	ldrb	r5, [r0, #12]
 800aa54:	4606      	mov	r6, r0
 800aa56:	b9ad      	cbnz	r5, 800aa84 <rmw_uxrce_init_node_memory+0x38>
 800aa58:	23a4      	movs	r3, #164	@ 0xa4
 800aa5a:	e9c0 5500 	strd	r5, r5, [r0]
 800aa5e:	6083      	str	r3, [r0, #8]
 800aa60:	f240 1301 	movw	r3, #257	@ 0x101
 800aa64:	4617      	mov	r7, r2
 800aa66:	8183      	strh	r3, [r0, #12]
 800aa68:	460c      	mov	r4, r1
 800aa6a:	46a8      	mov	r8, r5
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	4630      	mov	r0, r6
 800aa70:	3501      	adds	r5, #1
 800aa72:	f006 fedb 	bl	801182c <put_memory>
 800aa76:	42af      	cmp	r7, r5
 800aa78:	60a4      	str	r4, [r4, #8]
 800aa7a:	f884 800c 	strb.w	r8, [r4, #12]
 800aa7e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800aa82:	d1f3      	bne.n	800aa6c <rmw_uxrce_init_node_memory+0x20>
 800aa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop

0800aa8c <rmw_uxrce_init_session_memory>:
 800aa8c:	b1ea      	cbz	r2, 800aaca <rmw_uxrce_init_session_memory+0x3e>
 800aa8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa92:	7b05      	ldrb	r5, [r0, #12]
 800aa94:	4606      	mov	r6, r0
 800aa96:	b9b5      	cbnz	r5, 800aac6 <rmw_uxrce_init_session_memory+0x3a>
 800aa98:	e9c0 5500 	strd	r5, r5, [r0]
 800aa9c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800aaa0:	f240 1301 	movw	r3, #257	@ 0x101
 800aaa4:	4617      	mov	r7, r2
 800aaa6:	f8c0 8008 	str.w	r8, [r0, #8]
 800aaaa:	460c      	mov	r4, r1
 800aaac:	8183      	strh	r3, [r0, #12]
 800aaae:	46a9      	mov	r9, r5
 800aab0:	4621      	mov	r1, r4
 800aab2:	4630      	mov	r0, r6
 800aab4:	3501      	adds	r5, #1
 800aab6:	f006 feb9 	bl	801182c <put_memory>
 800aaba:	42af      	cmp	r7, r5
 800aabc:	60a4      	str	r4, [r4, #8]
 800aabe:	f884 900c 	strb.w	r9, [r4, #12]
 800aac2:	4444      	add	r4, r8
 800aac4:	d1f4      	bne.n	800aab0 <rmw_uxrce_init_session_memory+0x24>
 800aac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaca:	4770      	bx	lr

0800aacc <rmw_uxrce_init_topic_memory>:
 800aacc:	b1e2      	cbz	r2, 800ab08 <rmw_uxrce_init_topic_memory+0x3c>
 800aace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad2:	7b05      	ldrb	r5, [r0, #12]
 800aad4:	4606      	mov	r6, r0
 800aad6:	b9ad      	cbnz	r5, 800ab04 <rmw_uxrce_init_topic_memory+0x38>
 800aad8:	231c      	movs	r3, #28
 800aada:	e9c0 5500 	strd	r5, r5, [r0]
 800aade:	6083      	str	r3, [r0, #8]
 800aae0:	f240 1301 	movw	r3, #257	@ 0x101
 800aae4:	4617      	mov	r7, r2
 800aae6:	8183      	strh	r3, [r0, #12]
 800aae8:	460c      	mov	r4, r1
 800aaea:	46a8      	mov	r8, r5
 800aaec:	4621      	mov	r1, r4
 800aaee:	4630      	mov	r0, r6
 800aaf0:	3501      	adds	r5, #1
 800aaf2:	f006 fe9b 	bl	801182c <put_memory>
 800aaf6:	42af      	cmp	r7, r5
 800aaf8:	60a4      	str	r4, [r4, #8]
 800aafa:	f884 800c 	strb.w	r8, [r4, #12]
 800aafe:	f104 041c 	add.w	r4, r4, #28
 800ab02:	d1f3      	bne.n	800aaec <rmw_uxrce_init_topic_memory+0x20>
 800ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop

0800ab0c <rmw_uxrce_init_static_input_buffer_memory>:
 800ab0c:	b1ea      	cbz	r2, 800ab4a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ab0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab12:	7b05      	ldrb	r5, [r0, #12]
 800ab14:	4606      	mov	r6, r0
 800ab16:	b9b5      	cbnz	r5, 800ab46 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ab18:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ab1c:	e9c0 5500 	strd	r5, r5, [r0]
 800ab20:	6083      	str	r3, [r0, #8]
 800ab22:	f240 1301 	movw	r3, #257	@ 0x101
 800ab26:	4617      	mov	r7, r2
 800ab28:	8183      	strh	r3, [r0, #12]
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	46a8      	mov	r8, r5
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4630      	mov	r0, r6
 800ab32:	3501      	adds	r5, #1
 800ab34:	f006 fe7a 	bl	801182c <put_memory>
 800ab38:	42af      	cmp	r7, r5
 800ab3a:	60a4      	str	r4, [r4, #8]
 800ab3c:	f884 800c 	strb.w	r8, [r4, #12]
 800ab40:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ab44:	d1f3      	bne.n	800ab2e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ab46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab4a:	4770      	bx	lr

0800ab4c <rmw_uxrce_init_init_options_impl_memory>:
 800ab4c:	b1e2      	cbz	r2, 800ab88 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ab4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab52:	7b05      	ldrb	r5, [r0, #12]
 800ab54:	4606      	mov	r6, r0
 800ab56:	b9ad      	cbnz	r5, 800ab84 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ab58:	232c      	movs	r3, #44	@ 0x2c
 800ab5a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab5e:	6083      	str	r3, [r0, #8]
 800ab60:	f240 1301 	movw	r3, #257	@ 0x101
 800ab64:	4617      	mov	r7, r2
 800ab66:	8183      	strh	r3, [r0, #12]
 800ab68:	460c      	mov	r4, r1
 800ab6a:	46a8      	mov	r8, r5
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4630      	mov	r0, r6
 800ab70:	3501      	adds	r5, #1
 800ab72:	f006 fe5b 	bl	801182c <put_memory>
 800ab76:	42af      	cmp	r7, r5
 800ab78:	60a4      	str	r4, [r4, #8]
 800ab7a:	f884 800c 	strb.w	r8, [r4, #12]
 800ab7e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ab82:	d1f3      	bne.n	800ab6c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop

0800ab8c <rmw_uxrce_init_wait_set_memory>:
 800ab8c:	b1e2      	cbz	r2, 800abc8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ab8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	7b05      	ldrb	r5, [r0, #12]
 800ab94:	4606      	mov	r6, r0
 800ab96:	b9ad      	cbnz	r5, 800abc4 <rmw_uxrce_init_wait_set_memory+0x38>
 800ab98:	231c      	movs	r3, #28
 800ab9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab9e:	6083      	str	r3, [r0, #8]
 800aba0:	f240 1301 	movw	r3, #257	@ 0x101
 800aba4:	4617      	mov	r7, r2
 800aba6:	8183      	strh	r3, [r0, #12]
 800aba8:	460c      	mov	r4, r1
 800abaa:	46a8      	mov	r8, r5
 800abac:	4621      	mov	r1, r4
 800abae:	4630      	mov	r0, r6
 800abb0:	3501      	adds	r5, #1
 800abb2:	f006 fe3b 	bl	801182c <put_memory>
 800abb6:	42af      	cmp	r7, r5
 800abb8:	60a4      	str	r4, [r4, #8]
 800abba:	f884 800c 	strb.w	r8, [r4, #12]
 800abbe:	f104 041c 	add.w	r4, r4, #28
 800abc2:	d1f3      	bne.n	800abac <rmw_uxrce_init_wait_set_memory+0x20>
 800abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop

0800abcc <rmw_uxrce_init_guard_condition_memory>:
 800abcc:	b1e2      	cbz	r2, 800ac08 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800abce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd2:	7b05      	ldrb	r5, [r0, #12]
 800abd4:	4606      	mov	r6, r0
 800abd6:	b9ad      	cbnz	r5, 800ac04 <rmw_uxrce_init_guard_condition_memory+0x38>
 800abd8:	2320      	movs	r3, #32
 800abda:	e9c0 5500 	strd	r5, r5, [r0]
 800abde:	6083      	str	r3, [r0, #8]
 800abe0:	f240 1301 	movw	r3, #257	@ 0x101
 800abe4:	4617      	mov	r7, r2
 800abe6:	8183      	strh	r3, [r0, #12]
 800abe8:	460c      	mov	r4, r1
 800abea:	46a8      	mov	r8, r5
 800abec:	4621      	mov	r1, r4
 800abee:	4630      	mov	r0, r6
 800abf0:	3501      	adds	r5, #1
 800abf2:	f006 fe1b 	bl	801182c <put_memory>
 800abf6:	42af      	cmp	r7, r5
 800abf8:	60a4      	str	r4, [r4, #8]
 800abfa:	f884 800c 	strb.w	r8, [r4, #12]
 800abfe:	f104 0420 	add.w	r4, r4, #32
 800ac02:	d1f3      	bne.n	800abec <rmw_uxrce_init_guard_condition_memory+0x20>
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop

0800ac0c <rmw_uxrce_fini_session_memory>:
 800ac0c:	4601      	mov	r1, r0
 800ac0e:	4801      	ldr	r0, [pc, #4]	@ (800ac14 <rmw_uxrce_fini_session_memory+0x8>)
 800ac10:	f006 be0c 	b.w	801182c <put_memory>
 800ac14:	20011044 	.word	0x20011044

0800ac18 <rmw_uxrce_fini_node_memory>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	6800      	ldr	r0, [r0, #0]
 800ac1e:	b128      	cbz	r0, 800ac2c <rmw_uxrce_fini_node_memory+0x14>
 800ac20:	4b07      	ldr	r3, [pc, #28]	@ (800ac40 <rmw_uxrce_fini_node_memory+0x28>)
 800ac22:	6819      	ldr	r1, [r3, #0]
 800ac24:	f7f5 fadc 	bl	80001e0 <strcmp>
 800ac28:	b940      	cbnz	r0, 800ac3c <rmw_uxrce_fini_node_memory+0x24>
 800ac2a:	6020      	str	r0, [r4, #0]
 800ac2c:	6861      	ldr	r1, [r4, #4]
 800ac2e:	b129      	cbz	r1, 800ac3c <rmw_uxrce_fini_node_memory+0x24>
 800ac30:	2500      	movs	r5, #0
 800ac32:	4804      	ldr	r0, [pc, #16]	@ (800ac44 <rmw_uxrce_fini_node_memory+0x2c>)
 800ac34:	610d      	str	r5, [r1, #16]
 800ac36:	f006 fdf9 	bl	801182c <put_memory>
 800ac3a:	6065      	str	r5, [r4, #4]
 800ac3c:	bd38      	pop	{r3, r4, r5, pc}
 800ac3e:	bf00      	nop
 800ac40:	0801750c 	.word	0x0801750c
 800ac44:	20011014 	.word	0x20011014

0800ac48 <rmw_uxrce_fini_publisher_memory>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	6800      	ldr	r0, [r0, #0]
 800ac4e:	b128      	cbz	r0, 800ac5c <rmw_uxrce_fini_publisher_memory+0x14>
 800ac50:	4b06      	ldr	r3, [pc, #24]	@ (800ac6c <rmw_uxrce_fini_publisher_memory+0x24>)
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	f7f5 fac4 	bl	80001e0 <strcmp>
 800ac58:	b938      	cbnz	r0, 800ac6a <rmw_uxrce_fini_publisher_memory+0x22>
 800ac5a:	6020      	str	r0, [r4, #0]
 800ac5c:	6861      	ldr	r1, [r4, #4]
 800ac5e:	b121      	cbz	r1, 800ac6a <rmw_uxrce_fini_publisher_memory+0x22>
 800ac60:	4803      	ldr	r0, [pc, #12]	@ (800ac70 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ac62:	f006 fde3 	bl	801182c <put_memory>
 800ac66:	2300      	movs	r3, #0
 800ac68:	6063      	str	r3, [r4, #4]
 800ac6a:	bd10      	pop	{r4, pc}
 800ac6c:	0801750c 	.word	0x0801750c
 800ac70:	20011024 	.word	0x20011024

0800ac74 <rmw_uxrce_fini_subscription_memory>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	4604      	mov	r4, r0
 800ac78:	6800      	ldr	r0, [r0, #0]
 800ac7a:	b128      	cbz	r0, 800ac88 <rmw_uxrce_fini_subscription_memory+0x14>
 800ac7c:	4b06      	ldr	r3, [pc, #24]	@ (800ac98 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ac7e:	6819      	ldr	r1, [r3, #0]
 800ac80:	f7f5 faae 	bl	80001e0 <strcmp>
 800ac84:	b938      	cbnz	r0, 800ac96 <rmw_uxrce_fini_subscription_memory+0x22>
 800ac86:	6020      	str	r0, [r4, #0]
 800ac88:	6861      	ldr	r1, [r4, #4]
 800ac8a:	b121      	cbz	r1, 800ac96 <rmw_uxrce_fini_subscription_memory+0x22>
 800ac8c:	4803      	ldr	r0, [pc, #12]	@ (800ac9c <rmw_uxrce_fini_subscription_memory+0x28>)
 800ac8e:	f006 fdcd 	bl	801182c <put_memory>
 800ac92:	2300      	movs	r3, #0
 800ac94:	6063      	str	r3, [r4, #4]
 800ac96:	bd10      	pop	{r4, pc}
 800ac98:	0801750c 	.word	0x0801750c
 800ac9c:	20011064 	.word	0x20011064

0800aca0 <rmw_uxrce_fini_service_memory>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	4604      	mov	r4, r0
 800aca4:	6800      	ldr	r0, [r0, #0]
 800aca6:	b128      	cbz	r0, 800acb4 <rmw_uxrce_fini_service_memory+0x14>
 800aca8:	4b06      	ldr	r3, [pc, #24]	@ (800acc4 <rmw_uxrce_fini_service_memory+0x24>)
 800acaa:	6819      	ldr	r1, [r3, #0]
 800acac:	f7f5 fa98 	bl	80001e0 <strcmp>
 800acb0:	b938      	cbnz	r0, 800acc2 <rmw_uxrce_fini_service_memory+0x22>
 800acb2:	6020      	str	r0, [r4, #0]
 800acb4:	6861      	ldr	r1, [r4, #4]
 800acb6:	b121      	cbz	r1, 800acc2 <rmw_uxrce_fini_service_memory+0x22>
 800acb8:	4803      	ldr	r0, [pc, #12]	@ (800acc8 <rmw_uxrce_fini_service_memory+0x28>)
 800acba:	f006 fdb7 	bl	801182c <put_memory>
 800acbe:	2300      	movs	r3, #0
 800acc0:	6063      	str	r3, [r4, #4]
 800acc2:	bd10      	pop	{r4, pc}
 800acc4:	0801750c 	.word	0x0801750c
 800acc8:	20011034 	.word	0x20011034

0800accc <rmw_uxrce_fini_client_memory>:
 800accc:	b510      	push	{r4, lr}
 800acce:	4604      	mov	r4, r0
 800acd0:	6800      	ldr	r0, [r0, #0]
 800acd2:	b128      	cbz	r0, 800ace0 <rmw_uxrce_fini_client_memory+0x14>
 800acd4:	4b06      	ldr	r3, [pc, #24]	@ (800acf0 <rmw_uxrce_fini_client_memory+0x24>)
 800acd6:	6819      	ldr	r1, [r3, #0]
 800acd8:	f7f5 fa82 	bl	80001e0 <strcmp>
 800acdc:	b938      	cbnz	r0, 800acee <rmw_uxrce_fini_client_memory+0x22>
 800acde:	6020      	str	r0, [r4, #0]
 800ace0:	6861      	ldr	r1, [r4, #4]
 800ace2:	b121      	cbz	r1, 800acee <rmw_uxrce_fini_client_memory+0x22>
 800ace4:	4803      	ldr	r0, [pc, #12]	@ (800acf4 <rmw_uxrce_fini_client_memory+0x28>)
 800ace6:	f006 fda1 	bl	801182c <put_memory>
 800acea:	2300      	movs	r3, #0
 800acec:	6063      	str	r3, [r4, #4]
 800acee:	bd10      	pop	{r4, pc}
 800acf0:	0801750c 	.word	0x0801750c
 800acf4:	2000c748 	.word	0x2000c748

0800acf8 <rmw_uxrce_fini_topic_memory>:
 800acf8:	b510      	push	{r4, lr}
 800acfa:	4604      	mov	r4, r0
 800acfc:	4621      	mov	r1, r4
 800acfe:	4803      	ldr	r0, [pc, #12]	@ (800ad0c <rmw_uxrce_fini_topic_memory+0x14>)
 800ad00:	f006 fd94 	bl	801182c <put_memory>
 800ad04:	2300      	movs	r3, #0
 800ad06:	61a3      	str	r3, [r4, #24]
 800ad08:	bd10      	pop	{r4, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20011074 	.word	0x20011074

0800ad10 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ad10:	b082      	sub	sp, #8
 800ad12:	b530      	push	{r4, r5, lr}
 800ad14:	4925      	ldr	r1, [pc, #148]	@ (800adac <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ad16:	680d      	ldr	r5, [r1, #0]
 800ad18:	ac03      	add	r4, sp, #12
 800ad1a:	e884 000c 	stmia.w	r4, {r2, r3}
 800ad1e:	461c      	mov	r4, r3
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	d041      	beq.n	800ada8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ad24:	462b      	mov	r3, r5
 800ad26:	2100      	movs	r1, #0
 800ad28:	689a      	ldr	r2, [r3, #8]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ad30:	4290      	cmp	r0, r2
 800ad32:	bf08      	it	eq
 800ad34:	3101      	addeq	r1, #1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1f6      	bne.n	800ad28 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ad3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d029      	beq.n	800ad96 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ad42:	d907      	bls.n	800ad54 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ad44:	2b03      	cmp	r3, #3
 800ad46:	d005      	beq.n	800ad54 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ad48:	2100      	movs	r1, #0
 800ad4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad4e:	4608      	mov	r0, r1
 800ad50:	b002      	add	sp, #8
 800ad52:	4770      	bx	lr
 800ad54:	b314      	cbz	r4, 800ad9c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ad56:	428c      	cmp	r4, r1
 800ad58:	d820      	bhi.n	800ad9c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ad5a:	2d00      	cmp	r5, #0
 800ad5c:	d0f4      	beq.n	800ad48 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ad5e:	2100      	movs	r1, #0
 800ad60:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800ad64:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ad68:	e002      	b.n	800ad70 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ad6a:	686d      	ldr	r5, [r5, #4]
 800ad6c:	2d00      	cmp	r5, #0
 800ad6e:	d0ec      	beq.n	800ad4a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ad70:	68ab      	ldr	r3, [r5, #8]
 800ad72:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ad76:	4290      	cmp	r0, r2
 800ad78:	d1f7      	bne.n	800ad6a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ad7a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ad7e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ad82:	4562      	cmp	r2, ip
 800ad84:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ad88:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ad8c:	daed      	bge.n	800ad6a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ad8e:	4694      	mov	ip, r2
 800ad90:	461c      	mov	r4, r3
 800ad92:	4629      	mov	r1, r5
 800ad94:	e7e9      	b.n	800ad6a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ad96:	b10c      	cbz	r4, 800ad9c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ad98:	428c      	cmp	r4, r1
 800ad9a:	d9d5      	bls.n	800ad48 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ad9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ada0:	4802      	ldr	r0, [pc, #8]	@ (800adac <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ada2:	b002      	add	sp, #8
 800ada4:	f006 bd32 	b.w	801180c <get_memory>
 800ada8:	4629      	mov	r1, r5
 800adaa:	e7c6      	b.n	800ad3a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800adac:	20011054 	.word	0x20011054

0800adb0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800adb0:	4b11      	ldr	r3, [pc, #68]	@ (800adf8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	b530      	push	{r4, r5, lr}
 800adb6:	b1e3      	cbz	r3, 800adf2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800adb8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800adbc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800adc0:	2400      	movs	r4, #0
 800adc2:	e001      	b.n	800adc8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	b193      	cbz	r3, 800adee <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800adc8:	689a      	ldr	r2, [r3, #8]
 800adca:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800adce:	4288      	cmp	r0, r1
 800add0:	d1f8      	bne.n	800adc4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800add2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800add6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800adda:	4571      	cmp	r1, lr
 800addc:	eb72 050c 	sbcs.w	r5, r2, ip
 800ade0:	daf0      	bge.n	800adc4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ade2:	461c      	mov	r4, r3
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	468e      	mov	lr, r1
 800ade8:	4694      	mov	ip, r2
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1ec      	bne.n	800adc8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800adee:	4620      	mov	r0, r4
 800adf0:	bd30      	pop	{r4, r5, pc}
 800adf2:	461c      	mov	r4, r3
 800adf4:	4620      	mov	r0, r4
 800adf6:	bd30      	pop	{r4, r5, pc}
 800adf8:	20011054 	.word	0x20011054
 800adfc:	00000000 	.word	0x00000000

0800ae00 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	4b3c      	ldr	r3, [pc, #240]	@ (800aef8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ae06:	ed2d 8b06 	vpush	{d8-d10}
 800ae0a:	681f      	ldr	r7, [r3, #0]
 800ae0c:	b08d      	sub	sp, #52	@ 0x34
 800ae0e:	f007 fe6b 	bl	8012ae8 <rmw_uros_epoch_nanos>
 800ae12:	2f00      	cmp	r7, #0
 800ae14:	d05d      	beq.n	800aed2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ae16:	46b8      	mov	r8, r7
 800ae18:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800aee0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ae1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ae20:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800aee8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ae2a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800aef0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ae2e:	4681      	mov	r9, r0
 800ae30:	468a      	mov	sl, r1
 800ae32:	ac04      	add	r4, sp, #16
 800ae34:	d03f      	beq.n	800aeb6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	d044      	beq.n	800aec4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d03b      	beq.n	800aeb6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ae3e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ae42:	ed8d ab06 	vstr	d10, [sp, #24]
 800ae46:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ae4a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ae4e:	ab08      	add	r3, sp, #32
 800ae50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae52:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ae56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ae5a:	f006 fb0b 	bl	8011474 <rmw_time_equal>
 800ae5e:	b118      	cbz	r0, 800ae68 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ae60:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ae64:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ae68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ae6c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800ae70:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800ae74:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ae78:	f006 fb50 	bl	801151c <rmw_time_total_nsec>
 800ae7c:	1830      	adds	r0, r6, r0
 800ae7e:	eb47 0101 	adc.w	r1, r7, r1
 800ae82:	4548      	cmp	r0, r9
 800ae84:	eb71 030a 	sbcs.w	r3, r1, sl
 800ae88:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800ae8c:	db05      	blt.n	800ae9a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800ae8e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ae92:	4591      	cmp	r9, r2
 800ae94:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ae98:	da03      	bge.n	800aea2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ae9a:	4817      	ldr	r0, [pc, #92]	@ (800aef8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ae9c:	4641      	mov	r1, r8
 800ae9e:	f006 fcc5 	bl	801182c <put_memory>
 800aea2:	f1bb 0f00 	cmp.w	fp, #0
 800aea6:	d014      	beq.n	800aed2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800aea8:	46d8      	mov	r8, fp
 800aeaa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800aeae:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d1bf      	bne.n	800ae36 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800aeb6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800aeba:	3340      	adds	r3, #64	@ 0x40
 800aebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aec2:	e7c0      	b.n	800ae46 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800aec4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800aec8:	3348      	adds	r3, #72	@ 0x48
 800aeca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aed0:	e7b9      	b.n	800ae46 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800aed2:	b00d      	add	sp, #52	@ 0x34
 800aed4:	ecbd 8b06 	vpop	{d8-d10}
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	f3af 8000 	nop.w
	...
 800aee8:	00000001 	.word	0x00000001
 800aeec:	00000000 	.word	0x00000000
 800aef0:	0000001e 	.word	0x0000001e
 800aef4:	00000000 	.word	0x00000000
 800aef8:	20011054 	.word	0x20011054

0800aefc <run_xrce_session>:
 800aefc:	b510      	push	{r4, lr}
 800aefe:	788c      	ldrb	r4, [r1, #2]
 800af00:	b086      	sub	sp, #24
 800af02:	2c01      	cmp	r4, #1
 800af04:	f8ad 200e 	strh.w	r2, [sp, #14]
 800af08:	d00c      	beq.n	800af24 <run_xrce_session+0x28>
 800af0a:	4619      	mov	r1, r3
 800af0c:	2301      	movs	r3, #1
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	f10d 020e 	add.w	r2, sp, #14
 800af14:	f10d 0317 	add.w	r3, sp, #23
 800af18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800af1c:	f001 f8ee 	bl	800c0fc <uxr_run_session_until_all_status>
 800af20:	b006      	add	sp, #24
 800af22:	bd10      	pop	{r4, pc}
 800af24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800af28:	f000 fd02 	bl	800b930 <uxr_flash_output_streams>
 800af2c:	4620      	mov	r0, r4
 800af2e:	b006      	add	sp, #24
 800af30:	bd10      	pop	{r4, pc}
 800af32:	bf00      	nop

0800af34 <convert_qos_profile>:
 800af34:	7a4a      	ldrb	r2, [r1, #9]
 800af36:	f891 c008 	ldrb.w	ip, [r1, #8]
 800af3a:	2a02      	cmp	r2, #2
 800af3c:	bf18      	it	ne
 800af3e:	2200      	movne	r2, #0
 800af40:	7002      	strb	r2, [r0, #0]
 800af42:	780a      	ldrb	r2, [r1, #0]
 800af44:	8889      	ldrh	r1, [r1, #4]
 800af46:	8081      	strh	r1, [r0, #4]
 800af48:	f1ac 0c02 	sub.w	ip, ip, #2
 800af4c:	f1a2 0202 	sub.w	r2, r2, #2
 800af50:	fabc fc8c 	clz	ip, ip
 800af54:	fab2 f282 	clz	r2, r2
 800af58:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800af5c:	0952      	lsrs	r2, r2, #5
 800af5e:	f880 c001 	strb.w	ip, [r0, #1]
 800af62:	7082      	strb	r2, [r0, #2]
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop

0800af68 <generate_type_name>:
 800af68:	b530      	push	{r4, r5, lr}
 800af6a:	2300      	movs	r3, #0
 800af6c:	700b      	strb	r3, [r1, #0]
 800af6e:	6803      	ldr	r3, [r0, #0]
 800af70:	b087      	sub	sp, #28
 800af72:	4614      	mov	r4, r2
 800af74:	b1d3      	cbz	r3, 800afac <generate_type_name+0x44>
 800af76:	4a0f      	ldr	r2, [pc, #60]	@ (800afb4 <generate_type_name+0x4c>)
 800af78:	4615      	mov	r5, r2
 800af7a:	9203      	str	r2, [sp, #12]
 800af7c:	9500      	str	r5, [sp, #0]
 800af7e:	6842      	ldr	r2, [r0, #4]
 800af80:	480d      	ldr	r0, [pc, #52]	@ (800afb8 <generate_type_name+0x50>)
 800af82:	9001      	str	r0, [sp, #4]
 800af84:	4608      	mov	r0, r1
 800af86:	490d      	ldr	r1, [pc, #52]	@ (800afbc <generate_type_name+0x54>)
 800af88:	9204      	str	r2, [sp, #16]
 800af8a:	9105      	str	r1, [sp, #20]
 800af8c:	9102      	str	r1, [sp, #8]
 800af8e:	4a0c      	ldr	r2, [pc, #48]	@ (800afc0 <generate_type_name+0x58>)
 800af90:	4621      	mov	r1, r4
 800af92:	f00a fbbf 	bl	8015714 <sniprintf>
 800af96:	2800      	cmp	r0, #0
 800af98:	db05      	blt.n	800afa6 <generate_type_name+0x3e>
 800af9a:	4284      	cmp	r4, r0
 800af9c:	bfd4      	ite	le
 800af9e:	2000      	movle	r0, #0
 800afa0:	2001      	movgt	r0, #1
 800afa2:	b007      	add	sp, #28
 800afa4:	bd30      	pop	{r4, r5, pc}
 800afa6:	2000      	movs	r0, #0
 800afa8:	b007      	add	sp, #28
 800afaa:	bd30      	pop	{r4, r5, pc}
 800afac:	4b05      	ldr	r3, [pc, #20]	@ (800afc4 <generate_type_name+0x5c>)
 800afae:	4a01      	ldr	r2, [pc, #4]	@ (800afb4 <generate_type_name+0x4c>)
 800afb0:	461d      	mov	r5, r3
 800afb2:	e7e2      	b.n	800af7a <generate_type_name+0x12>
 800afb4:	08016d18 	.word	0x08016d18
 800afb8:	08016d30 	.word	0x08016d30
 800afbc:	08016d2c 	.word	0x08016d2c
 800afc0:	08016d1c 	.word	0x08016d1c
 800afc4:	080172e4 	.word	0x080172e4

0800afc8 <generate_topic_name>:
 800afc8:	b510      	push	{r4, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	4614      	mov	r4, r2
 800afce:	9000      	str	r0, [sp, #0]
 800afd0:	4b08      	ldr	r3, [pc, #32]	@ (800aff4 <generate_topic_name+0x2c>)
 800afd2:	4a09      	ldr	r2, [pc, #36]	@ (800aff8 <generate_topic_name+0x30>)
 800afd4:	4608      	mov	r0, r1
 800afd6:	4621      	mov	r1, r4
 800afd8:	f00a fb9c 	bl	8015714 <sniprintf>
 800afdc:	2800      	cmp	r0, #0
 800afde:	db05      	blt.n	800afec <generate_topic_name+0x24>
 800afe0:	4284      	cmp	r4, r0
 800afe2:	bfd4      	ite	le
 800afe4:	2000      	movle	r0, #0
 800afe6:	2001      	movgt	r0, #1
 800afe8:	b002      	add	sp, #8
 800afea:	bd10      	pop	{r4, pc}
 800afec:	2000      	movs	r0, #0
 800afee:	b002      	add	sp, #8
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	bf00      	nop
 800aff4:	08016d3c 	.word	0x08016d3c
 800aff8:	08016d34 	.word	0x08016d34

0800affc <is_uxrce_rmw_identifier_valid>:
 800affc:	b510      	push	{r4, lr}
 800affe:	4604      	mov	r4, r0
 800b000:	b140      	cbz	r0, 800b014 <is_uxrce_rmw_identifier_valid+0x18>
 800b002:	f006 fc89 	bl	8011918 <rmw_get_implementation_identifier>
 800b006:	4601      	mov	r1, r0
 800b008:	4620      	mov	r0, r4
 800b00a:	f7f5 f8e9 	bl	80001e0 <strcmp>
 800b00e:	fab0 f080 	clz	r0, r0
 800b012:	0940      	lsrs	r0, r0, #5
 800b014:	bd10      	pop	{r4, pc}
 800b016:	bf00      	nop

0800b018 <get_message_typesupport_handle>:
 800b018:	6883      	ldr	r3, [r0, #8]
 800b01a:	4718      	bx	r3

0800b01c <get_message_typesupport_handle_function>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	4604      	mov	r4, r0
 800b020:	6800      	ldr	r0, [r0, #0]
 800b022:	f7f5 f8dd 	bl	80001e0 <strcmp>
 800b026:	2800      	cmp	r0, #0
 800b028:	bf0c      	ite	eq
 800b02a:	4620      	moveq	r0, r4
 800b02c:	2000      	movne	r0, #0
 800b02e:	bd10      	pop	{r4, pc}

0800b030 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b034:	6805      	ldr	r5, [r0, #0]
 800b036:	4604      	mov	r4, r0
 800b038:	4628      	mov	r0, r5
 800b03a:	460e      	mov	r6, r1
 800b03c:	f7f5 f8d0 	bl	80001e0 <strcmp>
 800b040:	b1c8      	cbz	r0, 800b076 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800b042:	4b11      	ldr	r3, [pc, #68]	@ (800b088 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	429d      	cmp	r5, r3
 800b048:	d112      	bne.n	800b070 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800b04a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b04e:	f8d8 4000 	ldr.w	r4, [r8]
 800b052:	b16c      	cbz	r4, 800b070 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800b054:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b058:	2700      	movs	r7, #0
 800b05a:	3d04      	subs	r5, #4
 800b05c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800b060:	4631      	mov	r1, r6
 800b062:	f7f5 f8bd 	bl	80001e0 <strcmp>
 800b066:	00bb      	lsls	r3, r7, #2
 800b068:	b140      	cbz	r0, 800b07c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800b06a:	3701      	adds	r7, #1
 800b06c:	42bc      	cmp	r4, r7
 800b06e:	d1f5      	bne.n	800b05c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800b070:	2000      	movs	r0, #0
 800b072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b076:	4620      	mov	r0, r4
 800b078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b07c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	58d3      	ldr	r3, [r2, r3]
 800b086:	4718      	bx	r3
 800b088:	2000020c 	.word	0x2000020c

0800b08c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b08c:	4b04      	ldr	r3, [pc, #16]	@ (800b0a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	b10a      	cbz	r2, 800b096 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b092:	4803      	ldr	r0, [pc, #12]	@ (800b0a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b094:	4770      	bx	lr
 800b096:	4a03      	ldr	r2, [pc, #12]	@ (800b0a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b098:	4801      	ldr	r0, [pc, #4]	@ (800b0a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b09a:	6812      	ldr	r2, [r2, #0]
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	4770      	bx	lr
 800b0a0:	2000021c 	.word	0x2000021c
 800b0a4:	2000020c 	.word	0x2000020c

0800b0a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b0a8:	4a02      	ldr	r2, [pc, #8]	@ (800b0b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800b0aa:	4b03      	ldr	r3, [pc, #12]	@ (800b0b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800b0ac:	6812      	ldr	r2, [r2, #0]
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	2000020c 	.word	0x2000020c
 800b0b8:	2000021c 	.word	0x2000021c

0800b0bc <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800b0bc:	f007 bd4e 	b.w	8012b5c <std_msgs__msg__Int32__init>

0800b0c0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800b0c0:	f007 bd50 	b.w	8012b64 <std_msgs__msg__Int32__fini>

0800b0c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b0c4:	4b04      	ldr	r3, [pc, #16]	@ (800b0d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	b10a      	cbz	r2, 800b0ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b0ca:	4803      	ldr	r0, [pc, #12]	@ (800b0d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b0cc:	4770      	bx	lr
 800b0ce:	4a03      	ldr	r2, [pc, #12]	@ (800b0dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b0d0:	4801      	ldr	r0, [pc, #4]	@ (800b0d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b0d2:	6812      	ldr	r2, [r2, #0]
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	4770      	bx	lr
 800b0d8:	20000270 	.word	0x20000270
 800b0dc:	20000210 	.word	0x20000210

0800b0e0 <_Int32__max_serialized_size>:
 800b0e0:	b508      	push	{r3, lr}
 800b0e2:	2104      	movs	r1, #4
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	f7fd fd9f 	bl	8008c28 <ucdr_alignment>
 800b0ea:	3004      	adds	r0, #4
 800b0ec:	bd08      	pop	{r3, pc}
 800b0ee:	bf00      	nop

0800b0f0 <_Int32__cdr_deserialize>:
 800b0f0:	b109      	cbz	r1, 800b0f6 <_Int32__cdr_deserialize+0x6>
 800b0f2:	f7fd bb1b 	b.w	800872c <ucdr_deserialize_int32_t>
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop

0800b0fc <get_serialized_size_std_msgs__msg__Int32>:
 800b0fc:	b138      	cbz	r0, 800b10e <get_serialized_size_std_msgs__msg__Int32+0x12>
 800b0fe:	b508      	push	{r3, lr}
 800b100:	460b      	mov	r3, r1
 800b102:	4618      	mov	r0, r3
 800b104:	2104      	movs	r1, #4
 800b106:	f7fd fd8f 	bl	8008c28 <ucdr_alignment>
 800b10a:	3004      	adds	r0, #4
 800b10c:	bd08      	pop	{r3, pc}
 800b10e:	4770      	bx	lr

0800b110 <_Int32__cdr_serialize>:
 800b110:	460a      	mov	r2, r1
 800b112:	b118      	cbz	r0, 800b11c <_Int32__cdr_serialize+0xc>
 800b114:	6801      	ldr	r1, [r0, #0]
 800b116:	4610      	mov	r0, r2
 800b118:	f7fd ba70 	b.w	80085fc <ucdr_serialize_int32_t>
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop

0800b120 <_Int32__get_serialized_size>:
 800b120:	b130      	cbz	r0, 800b130 <_Int32__get_serialized_size+0x10>
 800b122:	b508      	push	{r3, lr}
 800b124:	2104      	movs	r1, #4
 800b126:	2000      	movs	r0, #0
 800b128:	f7fd fd7e 	bl	8008c28 <ucdr_alignment>
 800b12c:	3004      	adds	r0, #4
 800b12e:	bd08      	pop	{r3, pc}
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop

0800b134 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b134:	4800      	ldr	r0, [pc, #0]	@ (800b138 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800b136:	4770      	bx	lr
 800b138:	20000288 	.word	0x20000288

0800b13c <geometry_msgs__msg__Twist__get_type_hash>:
 800b13c:	4800      	ldr	r0, [pc, #0]	@ (800b140 <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 800b13e:	4770      	bx	lr
 800b140:	200003ac 	.word	0x200003ac

0800b144 <geometry_msgs__msg__Twist__get_type_description>:
 800b144:	b510      	push	{r4, lr}
 800b146:	4c08      	ldr	r4, [pc, #32]	@ (800b168 <geometry_msgs__msg__Twist__get_type_description+0x24>)
 800b148:	7820      	ldrb	r0, [r4, #0]
 800b14a:	b108      	cbz	r0, 800b150 <geometry_msgs__msg__Twist__get_type_description+0xc>
 800b14c:	4807      	ldr	r0, [pc, #28]	@ (800b16c <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800b14e:	bd10      	pop	{r4, pc}
 800b150:	f000 f86c 	bl	800b22c <geometry_msgs__msg__Vector3__get_type_description>
 800b154:	300c      	adds	r0, #12
 800b156:	c807      	ldmia	r0, {r0, r1, r2}
 800b158:	4b05      	ldr	r3, [pc, #20]	@ (800b170 <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 800b15a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b15e:	2301      	movs	r3, #1
 800b160:	4802      	ldr	r0, [pc, #8]	@ (800b16c <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800b162:	7023      	strb	r3, [r4, #0]
 800b164:	bd10      	pop	{r4, pc}
 800b166:	bf00      	nop
 800b168:	20011095 	.word	0x20011095
 800b16c:	08016e84 	.word	0x08016e84
 800b170:	2000036c 	.word	0x2000036c

0800b174 <geometry_msgs__msg__Twist__get_type_description_sources>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	4e0f      	ldr	r6, [pc, #60]	@ (800b1b4 <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 800b178:	7837      	ldrb	r7, [r6, #0]
 800b17a:	b10f      	cbz	r7, 800b180 <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 800b17c:	480e      	ldr	r0, [pc, #56]	@ (800b1b8 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800b17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b180:	4d0e      	ldr	r5, [pc, #56]	@ (800b1bc <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 800b182:	4c0f      	ldr	r4, [pc, #60]	@ (800b1c0 <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 800b184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b18a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	f844 3b04 	str.w	r3, [r4], #4
 800b192:	4638      	mov	r0, r7
 800b194:	f000 f856 	bl	800b244 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 800b198:	2301      	movs	r3, #1
 800b19a:	4684      	mov	ip, r0
 800b19c:	7033      	strb	r3, [r6, #0]
 800b19e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b1a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b1a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1aa:	f8dc 3000 	ldr.w	r3, [ip]
 800b1ae:	4802      	ldr	r0, [pc, #8]	@ (800b1b8 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b4:	20011094 	.word	0x20011094
 800b1b8:	08016ecc 	.word	0x08016ecc
 800b1bc:	08016ea8 	.word	0x08016ea8
 800b1c0:	20011098 	.word	0x20011098

0800b1c4 <geometry_msgs__msg__Twist__init>:
 800b1c4:	b570      	push	{r4, r5, r6, lr}
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	b1a8      	cbz	r0, 800b1f6 <geometry_msgs__msg__Twist__init+0x32>
 800b1ca:	f000 f85b 	bl	800b284 <geometry_msgs__msg__Vector3__init>
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	b140      	cbz	r0, 800b1e4 <geometry_msgs__msg__Twist__init+0x20>
 800b1d2:	f105 0618 	add.w	r6, r5, #24
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f000 f854 	bl	800b284 <geometry_msgs__msg__Vector3__init>
 800b1dc:	4604      	mov	r4, r0
 800b1de:	b168      	cbz	r0, 800b1fc <geometry_msgs__msg__Twist__init+0x38>
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f000 f851 	bl	800b28c <geometry_msgs__msg__Vector3__fini>
 800b1ea:	f105 0018 	add.w	r0, r5, #24
 800b1ee:	f000 f84d 	bl	800b28c <geometry_msgs__msg__Vector3__fini>
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	bd70      	pop	{r4, r5, r6, pc}
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f000 f845 	bl	800b28c <geometry_msgs__msg__Vector3__fini>
 800b202:	4630      	mov	r0, r6
 800b204:	f000 f842 	bl	800b28c <geometry_msgs__msg__Vector3__fini>
 800b208:	e7ea      	b.n	800b1e0 <geometry_msgs__msg__Twist__init+0x1c>
 800b20a:	bf00      	nop

0800b20c <geometry_msgs__msg__Twist__fini>:
 800b20c:	b148      	cbz	r0, 800b222 <geometry_msgs__msg__Twist__fini+0x16>
 800b20e:	b510      	push	{r4, lr}
 800b210:	4604      	mov	r4, r0
 800b212:	f000 f83b 	bl	800b28c <geometry_msgs__msg__Vector3__fini>
 800b216:	f104 0018 	add.w	r0, r4, #24
 800b21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b21e:	f000 b835 	b.w	800b28c <geometry_msgs__msg__Vector3__fini>
 800b222:	4770      	bx	lr

0800b224 <geometry_msgs__msg__Vector3__get_type_hash>:
 800b224:	4800      	ldr	r0, [pc, #0]	@ (800b228 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 800b226:	4770      	bx	lr
 800b228:	20000548 	.word	0x20000548

0800b22c <geometry_msgs__msg__Vector3__get_type_description>:
 800b22c:	4b03      	ldr	r3, [pc, #12]	@ (800b23c <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 800b22e:	781a      	ldrb	r2, [r3, #0]
 800b230:	b90a      	cbnz	r2, 800b236 <geometry_msgs__msg__Vector3__get_type_description+0xa>
 800b232:	2201      	movs	r2, #1
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	4802      	ldr	r0, [pc, #8]	@ (800b240 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	200110e1 	.word	0x200110e1
 800b240:	08016ed8 	.word	0x08016ed8

0800b244 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 800b244:	4800      	ldr	r0, [pc, #0]	@ (800b248 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 800b246:	4770      	bx	lr
 800b248:	08016efc 	.word	0x08016efc

0800b24c <geometry_msgs__msg__Vector3__get_type_description_sources>:
 800b24c:	4b09      	ldr	r3, [pc, #36]	@ (800b274 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 800b24e:	781a      	ldrb	r2, [r3, #0]
 800b250:	b96a      	cbnz	r2, 800b26e <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 800b252:	b430      	push	{r4, r5}
 800b254:	4d08      	ldr	r5, [pc, #32]	@ (800b278 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 800b256:	4c09      	ldr	r4, [pc, #36]	@ (800b27c <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 800b258:	2201      	movs	r2, #1
 800b25a:	701a      	strb	r2, [r3, #0]
 800b25c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b25e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	4806      	ldr	r0, [pc, #24]	@ (800b280 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	bc30      	pop	{r4, r5}
 800b26c:	4770      	bx	lr
 800b26e:	4804      	ldr	r0, [pc, #16]	@ (800b280 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	200110e0 	.word	0x200110e0
 800b278:	08016efc 	.word	0x08016efc
 800b27c:	200110e4 	.word	0x200110e4
 800b280:	08016f20 	.word	0x08016f20

0800b284 <geometry_msgs__msg__Vector3__init>:
 800b284:	3800      	subs	r0, #0
 800b286:	bf18      	it	ne
 800b288:	2001      	movne	r0, #1
 800b28a:	4770      	bx	lr

0800b28c <geometry_msgs__msg__Vector3__fini>:
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop

0800b290 <uxr_buffer_delete_entity>:
 800b290:	b510      	push	{r4, lr}
 800b292:	2300      	movs	r3, #0
 800b294:	b08e      	sub	sp, #56	@ 0x38
 800b296:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b29a:	2303      	movs	r3, #3
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	2204      	movs	r2, #4
 800b2a0:	ab06      	add	r3, sp, #24
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	9103      	str	r1, [sp, #12]
 800b2a6:	f001 f951 	bl	800c54c <uxr_prepare_stream_to_write_submessage>
 800b2aa:	b918      	cbnz	r0, 800b2b4 <uxr_buffer_delete_entity+0x24>
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	b00e      	add	sp, #56	@ 0x38
 800b2b2:	bd10      	pop	{r4, pc}
 800b2b4:	9902      	ldr	r1, [sp, #8]
 800b2b6:	aa05      	add	r2, sp, #20
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f001 fa7d 	bl	800c7b8 <uxr_init_base_object_request>
 800b2be:	a905      	add	r1, sp, #20
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	a806      	add	r0, sp, #24
 800b2c4:	f002 fcce 	bl	800dc64 <uxr_serialize_DELETE_Payload>
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	b00e      	add	sp, #56	@ 0x38
 800b2cc:	bd10      	pop	{r4, pc}
 800b2ce:	bf00      	nop

0800b2d0 <uxr_common_create_entity>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b2d6:	b08c      	sub	sp, #48	@ 0x30
 800b2d8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b2dc:	f1bc 0f01 	cmp.w	ip, #1
 800b2e0:	bf0c      	ite	eq
 800b2e2:	f003 0201 	andeq.w	r2, r3, #1
 800b2e6:	2200      	movne	r2, #0
 800b2e8:	330e      	adds	r3, #14
 800b2ea:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800b2ee:	9101      	str	r1, [sp, #4]
 800b2f0:	441a      	add	r2, r3
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	9903      	ldr	r1, [sp, #12]
 800b2f8:	ab04      	add	r3, sp, #16
 800b2fa:	b292      	uxth	r2, r2
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	f001 f925 	bl	800c54c <uxr_prepare_stream_to_write_submessage>
 800b302:	b918      	cbnz	r0, 800b30c <uxr_common_create_entity+0x3c>
 800b304:	4604      	mov	r4, r0
 800b306:	4620      	mov	r0, r4
 800b308:	b00c      	add	sp, #48	@ 0x30
 800b30a:	bd10      	pop	{r4, pc}
 800b30c:	9902      	ldr	r1, [sp, #8]
 800b30e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b310:	4620      	mov	r0, r4
 800b312:	f001 fa51 	bl	800c7b8 <uxr_init_base_object_request>
 800b316:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b318:	4604      	mov	r4, r0
 800b31a:	a804      	add	r0, sp, #16
 800b31c:	f002 fbfe 	bl	800db1c <uxr_serialize_CREATE_Payload>
 800b320:	4620      	mov	r0, r4
 800b322:	b00c      	add	sp, #48	@ 0x30
 800b324:	bd10      	pop	{r4, pc}
 800b326:	bf00      	nop

0800b328 <uxr_buffer_create_participant_bin>:
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800b32e:	ac11      	add	r4, sp, #68	@ 0x44
 800b330:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800b334:	2303      	movs	r3, #3
 800b336:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b33a:	7223      	strb	r3, [r4, #8]
 800b33c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800b33e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800b342:	2201      	movs	r2, #1
 800b344:	2100      	movs	r1, #0
 800b346:	4605      	mov	r5, r0
 800b348:	7122      	strb	r2, [r4, #4]
 800b34a:	f88d 1014 	strb.w	r1, [sp, #20]
 800b34e:	b1cb      	cbz	r3, 800b384 <uxr_buffer_create_participant_bin+0x5c>
 800b350:	f88d 201c 	strb.w	r2, [sp, #28]
 800b354:	9308      	str	r3, [sp, #32]
 800b356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b35a:	a915      	add	r1, sp, #84	@ 0x54
 800b35c:	a809      	add	r0, sp, #36	@ 0x24
 800b35e:	f7fd fc5f 	bl	8008c20 <ucdr_init_buffer>
 800b362:	a905      	add	r1, sp, #20
 800b364:	a809      	add	r0, sp, #36	@ 0x24
 800b366:	f001 ffbb 	bl	800d2e0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b36a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b36c:	9600      	str	r6, [sp, #0]
 800b36e:	9401      	str	r4, [sp, #4]
 800b370:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b374:	60e3      	str	r3, [r4, #12]
 800b376:	4628      	mov	r0, r5
 800b378:	b29b      	uxth	r3, r3
 800b37a:	f7ff ffa9 	bl	800b2d0 <uxr_common_create_entity>
 800b37e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800b382:	bd70      	pop	{r4, r5, r6, pc}
 800b384:	f88d 301c 	strb.w	r3, [sp, #28]
 800b388:	e7e5      	b.n	800b356 <uxr_buffer_create_participant_bin+0x2e>
 800b38a:	bf00      	nop

0800b38c <uxr_buffer_create_topic_bin>:
 800b38c:	b570      	push	{r4, r5, r6, lr}
 800b38e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800b392:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b396:	9105      	str	r1, [sp, #20]
 800b398:	4605      	mov	r5, r0
 800b39a:	a997      	add	r1, sp, #604	@ 0x25c
 800b39c:	4618      	mov	r0, r3
 800b39e:	2302      	movs	r3, #2
 800b3a0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800b3a4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800b3a8:	f000 f996 	bl	800b6d8 <uxr_object_id_to_raw>
 800b3ac:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800b3ae:	9306      	str	r3, [sp, #24]
 800b3b0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800b3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b3c0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800b3c4:	a917      	add	r1, sp, #92	@ 0x5c
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	a80b      	add	r0, sp, #44	@ 0x2c
 800b3ca:	f88d 301c 	strb.w	r3, [sp, #28]
 800b3ce:	f7fd fc27 	bl	8008c20 <ucdr_init_buffer>
 800b3d2:	a906      	add	r1, sp, #24
 800b3d4:	a80b      	add	r0, sp, #44	@ 0x2c
 800b3d6:	f001 ffa5 	bl	800d324 <uxr_serialize_OBJK_Topic_Binary>
 800b3da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3dc:	9316      	str	r3, [sp, #88]	@ 0x58
 800b3de:	ac13      	add	r4, sp, #76	@ 0x4c
 800b3e0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b3e4:	9600      	str	r6, [sp, #0]
 800b3e6:	9401      	str	r4, [sp, #4]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f7ff ff70 	bl	800b2d0 <uxr_common_create_entity>
 800b3f0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800b3f4:	bd70      	pop	{r4, r5, r6, pc}
 800b3f6:	bf00      	nop

0800b3f8 <uxr_buffer_create_publisher_bin>:
 800b3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800b3fe:	4605      	mov	r5, r0
 800b400:	9105      	str	r1, [sp, #20]
 800b402:	4618      	mov	r0, r3
 800b404:	2603      	movs	r6, #3
 800b406:	a992      	add	r1, sp, #584	@ 0x248
 800b408:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b40c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800b410:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800b414:	f000 f960 	bl	800b6d8 <uxr_object_id_to_raw>
 800b418:	2300      	movs	r3, #0
 800b41a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b41e:	a912      	add	r1, sp, #72	@ 0x48
 800b420:	a806      	add	r0, sp, #24
 800b422:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800b426:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800b42a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800b42e:	f7fd fbf7 	bl	8008c20 <ucdr_init_buffer>
 800b432:	a993      	add	r1, sp, #588	@ 0x24c
 800b434:	a806      	add	r0, sp, #24
 800b436:	f002 f829 	bl	800d48c <uxr_serialize_OBJK_Publisher_Binary>
 800b43a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b43c:	9311      	str	r3, [sp, #68]	@ 0x44
 800b43e:	ac0e      	add	r4, sp, #56	@ 0x38
 800b440:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b444:	9700      	str	r7, [sp, #0]
 800b446:	9401      	str	r4, [sp, #4]
 800b448:	b29b      	uxth	r3, r3
 800b44a:	4628      	mov	r0, r5
 800b44c:	f7ff ff40 	bl	800b2d0 <uxr_common_create_entity>
 800b450:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800b454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b456:	bf00      	nop

0800b458 <uxr_buffer_create_subscriber_bin>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800b45e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b462:	9105      	str	r1, [sp, #20]
 800b464:	4605      	mov	r5, r0
 800b466:	a992      	add	r1, sp, #584	@ 0x248
 800b468:	4618      	mov	r0, r3
 800b46a:	2304      	movs	r3, #4
 800b46c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800b470:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800b474:	f000 f930 	bl	800b6d8 <uxr_object_id_to_raw>
 800b478:	2300      	movs	r3, #0
 800b47a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b47e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800b482:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800b486:	a912      	add	r1, sp, #72	@ 0x48
 800b488:	2303      	movs	r3, #3
 800b48a:	a806      	add	r0, sp, #24
 800b48c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800b490:	f7fd fbc6 	bl	8008c20 <ucdr_init_buffer>
 800b494:	a993      	add	r1, sp, #588	@ 0x24c
 800b496:	a806      	add	r0, sp, #24
 800b498:	f002 f8a8 	bl	800d5ec <uxr_serialize_OBJK_Subscriber_Binary>
 800b49c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b49e:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4a0:	ac0e      	add	r4, sp, #56	@ 0x38
 800b4a2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b4a6:	9600      	str	r6, [sp, #0]
 800b4a8:	9401      	str	r4, [sp, #4]
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	f7ff ff0f 	bl	800b2d0 <uxr_common_create_entity>
 800b4b2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}

0800b4b8 <uxr_buffer_create_datawriter_bin>:
 800b4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4bc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b4c0:	ac1d      	add	r4, sp, #116	@ 0x74
 800b4c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b4c6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800b4ca:	9105      	str	r1, [sp, #20]
 800b4cc:	4606      	mov	r6, r0
 800b4ce:	a9a1      	add	r1, sp, #644	@ 0x284
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	2305      	movs	r3, #5
 800b4d4:	7123      	strb	r3, [r4, #4]
 800b4d6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800b4da:	2703      	movs	r7, #3
 800b4dc:	f000 f8fc 	bl	800b6d8 <uxr_object_id_to_raw>
 800b4e0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800b4e2:	7227      	strb	r7, [r4, #8]
 800b4e4:	a90e      	add	r1, sp, #56	@ 0x38
 800b4e6:	f000 f8f7 	bl	800b6d8 <uxr_object_id_to_raw>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800b4f0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800b4f4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800b4f8:	3d00      	subs	r5, #0
 800b4fa:	bf18      	it	ne
 800b4fc:	2501      	movne	r5, #1
 800b4fe:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800b502:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800b506:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800b50a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b50e:	2301      	movs	r3, #1
 800b510:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800b514:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800b518:	bb8a      	cbnz	r2, 800b57e <uxr_buffer_create_datawriter_bin+0xc6>
 800b51a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b51e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800b522:	f04f 0c13 	mov.w	ip, #19
 800b526:	250b      	movs	r5, #11
 800b528:	2221      	movs	r2, #33	@ 0x21
 800b52a:	2111      	movs	r1, #17
 800b52c:	2009      	movs	r0, #9
 800b52e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800b532:	b923      	cbnz	r3, 800b53e <uxr_buffer_create_datawriter_bin+0x86>
 800b534:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800b538:	4672      	mov	r2, lr
 800b53a:	4661      	mov	r1, ip
 800b53c:	4628      	mov	r0, r5
 800b53e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800b542:	2b01      	cmp	r3, #1
 800b544:	d025      	beq.n	800b592 <uxr_buffer_create_datawriter_bin+0xda>
 800b546:	2b03      	cmp	r3, #3
 800b548:	d029      	beq.n	800b59e <uxr_buffer_create_datawriter_bin+0xe6>
 800b54a:	b32b      	cbz	r3, 800b598 <uxr_buffer_create_datawriter_bin+0xe0>
 800b54c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b550:	a921      	add	r1, sp, #132	@ 0x84
 800b552:	a806      	add	r0, sp, #24
 800b554:	f7fd fb64 	bl	8008c20 <ucdr_init_buffer>
 800b558:	a90e      	add	r1, sp, #56	@ 0x38
 800b55a:	a806      	add	r0, sp, #24
 800b55c:	f002 f8f8 	bl	800d750 <uxr_serialize_OBJK_DataWriter_Binary>
 800b560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b562:	f8cd 8000 	str.w	r8, [sp]
 800b566:	9401      	str	r4, [sp, #4]
 800b568:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b56c:	60e3      	str	r3, [r4, #12]
 800b56e:	4630      	mov	r0, r6
 800b570:	b29b      	uxth	r3, r3
 800b572:	f7ff fead 	bl	800b2d0 <uxr_common_create_entity>
 800b576:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b57e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800b582:	f04f 0c12 	mov.w	ip, #18
 800b586:	250a      	movs	r5, #10
 800b588:	2220      	movs	r2, #32
 800b58a:	2110      	movs	r1, #16
 800b58c:	2008      	movs	r0, #8
 800b58e:	2702      	movs	r7, #2
 800b590:	e7cd      	b.n	800b52e <uxr_buffer_create_datawriter_bin+0x76>
 800b592:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800b596:	e7d9      	b.n	800b54c <uxr_buffer_create_datawriter_bin+0x94>
 800b598:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800b59c:	e7d6      	b.n	800b54c <uxr_buffer_create_datawriter_bin+0x94>
 800b59e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800b5a2:	e7d3      	b.n	800b54c <uxr_buffer_create_datawriter_bin+0x94>

0800b5a4 <uxr_buffer_create_datareader_bin>:
 800b5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800b5ac:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b5ae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b5b2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800b5b6:	9105      	str	r1, [sp, #20]
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	a9a3      	add	r1, sp, #652	@ 0x28c
 800b5bc:	4618      	mov	r0, r3
 800b5be:	2306      	movs	r3, #6
 800b5c0:	7123      	strb	r3, [r4, #4]
 800b5c2:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800b5c6:	2703      	movs	r7, #3
 800b5c8:	f000 f886 	bl	800b6d8 <uxr_object_id_to_raw>
 800b5cc:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800b5ce:	7227      	strb	r7, [r4, #8]
 800b5d0:	a90e      	add	r1, sp, #56	@ 0x38
 800b5d2:	f000 f881 	bl	800b6d8 <uxr_object_id_to_raw>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800b5dc:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800b5e0:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800b5e4:	3d00      	subs	r5, #0
 800b5e6:	bf18      	it	ne
 800b5e8:	2501      	movne	r5, #1
 800b5ea:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800b5ee:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800b5f2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800b5f6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800b5fa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b5fe:	2301      	movs	r3, #1
 800b600:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800b604:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800b608:	bb8a      	cbnz	r2, 800b66e <uxr_buffer_create_datareader_bin+0xca>
 800b60a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b60e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800b612:	f04f 0c13 	mov.w	ip, #19
 800b616:	250b      	movs	r5, #11
 800b618:	2221      	movs	r2, #33	@ 0x21
 800b61a:	2111      	movs	r1, #17
 800b61c:	2009      	movs	r0, #9
 800b61e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800b622:	b923      	cbnz	r3, 800b62e <uxr_buffer_create_datareader_bin+0x8a>
 800b624:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800b628:	4672      	mov	r2, lr
 800b62a:	4661      	mov	r1, ip
 800b62c:	4628      	mov	r0, r5
 800b62e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800b632:	2b01      	cmp	r3, #1
 800b634:	d025      	beq.n	800b682 <uxr_buffer_create_datareader_bin+0xde>
 800b636:	2b03      	cmp	r3, #3
 800b638:	d029      	beq.n	800b68e <uxr_buffer_create_datareader_bin+0xea>
 800b63a:	b32b      	cbz	r3, 800b688 <uxr_buffer_create_datareader_bin+0xe4>
 800b63c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b640:	a923      	add	r1, sp, #140	@ 0x8c
 800b642:	a806      	add	r0, sp, #24
 800b644:	f7fd faec 	bl	8008c20 <ucdr_init_buffer>
 800b648:	a90e      	add	r1, sp, #56	@ 0x38
 800b64a:	a806      	add	r0, sp, #24
 800b64c:	f002 f844 	bl	800d6d8 <uxr_serialize_OBJK_DataReader_Binary>
 800b650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b652:	f8cd 8000 	str.w	r8, [sp]
 800b656:	9401      	str	r4, [sp, #4]
 800b658:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b65c:	60e3      	str	r3, [r4, #12]
 800b65e:	4630      	mov	r0, r6
 800b660:	b29b      	uxth	r3, r3
 800b662:	f7ff fe35 	bl	800b2d0 <uxr_common_create_entity>
 800b666:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800b66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b66e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800b672:	f04f 0c12 	mov.w	ip, #18
 800b676:	250a      	movs	r5, #10
 800b678:	2220      	movs	r2, #32
 800b67a:	2110      	movs	r1, #16
 800b67c:	2008      	movs	r0, #8
 800b67e:	2702      	movs	r7, #2
 800b680:	e7cd      	b.n	800b61e <uxr_buffer_create_datareader_bin+0x7a>
 800b682:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800b686:	e7d9      	b.n	800b63c <uxr_buffer_create_datareader_bin+0x98>
 800b688:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800b68c:	e7d6      	b.n	800b63c <uxr_buffer_create_datareader_bin+0x98>
 800b68e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800b692:	e7d3      	b.n	800b63c <uxr_buffer_create_datareader_bin+0x98>

0800b694 <uxr_object_id>:
 800b694:	b082      	sub	sp, #8
 800b696:	2300      	movs	r3, #0
 800b698:	f88d 1006 	strb.w	r1, [sp, #6]
 800b69c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b6a0:	f360 030f 	bfi	r3, r0, #0, #16
 800b6a4:	f362 431f 	bfi	r3, r2, #16, #16
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	b002      	add	sp, #8
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop

0800b6b0 <uxr_object_id_from_raw>:
 800b6b0:	7843      	ldrb	r3, [r0, #1]
 800b6b2:	7801      	ldrb	r1, [r0, #0]
 800b6b4:	b082      	sub	sp, #8
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	f88d 2006 	strb.w	r2, [sp, #6]
 800b6be:	091b      	lsrs	r3, r3, #4
 800b6c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b6c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	f363 000f 	bfi	r0, r3, #0, #16
 800b6ce:	f362 401f 	bfi	r0, r2, #16, #16
 800b6d2:	b002      	add	sp, #8
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop

0800b6d8 <uxr_object_id_to_raw>:
 800b6d8:	4602      	mov	r2, r0
 800b6da:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800b6de:	b082      	sub	sp, #8
 800b6e0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800b6e4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800b6e8:	f881 c000 	strb.w	ip, [r1]
 800b6ec:	7048      	strb	r0, [r1, #1]
 800b6ee:	b002      	add	sp, #8
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop

0800b6f4 <on_get_fragmentation_info>:
 800b6f4:	b500      	push	{lr}
 800b6f6:	b08b      	sub	sp, #44	@ 0x2c
 800b6f8:	4601      	mov	r1, r0
 800b6fa:	2204      	movs	r2, #4
 800b6fc:	a802      	add	r0, sp, #8
 800b6fe:	f7fd fa8f 	bl	8008c20 <ucdr_init_buffer>
 800b702:	f10d 0305 	add.w	r3, sp, #5
 800b706:	f10d 0206 	add.w	r2, sp, #6
 800b70a:	a901      	add	r1, sp, #4
 800b70c:	a802      	add	r0, sp, #8
 800b70e:	f001 f9d5 	bl	800cabc <uxr_read_submessage_header>
 800b712:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b716:	2b0d      	cmp	r3, #13
 800b718:	d003      	beq.n	800b722 <on_get_fragmentation_info+0x2e>
 800b71a:	2000      	movs	r0, #0
 800b71c:	b00b      	add	sp, #44	@ 0x2c
 800b71e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b722:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b726:	f013 0f02 	tst.w	r3, #2
 800b72a:	bf14      	ite	ne
 800b72c:	2002      	movne	r0, #2
 800b72e:	2001      	moveq	r0, #1
 800b730:	b00b      	add	sp, #44	@ 0x2c
 800b732:	f85d fb04 	ldr.w	pc, [sp], #4
 800b736:	bf00      	nop

0800b738 <read_submessage_get_info>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	2500      	movs	r5, #0
 800b73c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800b740:	4604      	mov	r4, r0
 800b742:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800b746:	460e      	mov	r6, r1
 800b748:	a810      	add	r0, sp, #64	@ 0x40
 800b74a:	4629      	mov	r1, r5
 800b74c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800b750:	f00a f8ba 	bl	80158c8 <memset>
 800b754:	a903      	add	r1, sp, #12
 800b756:	4630      	mov	r0, r6
 800b758:	f002 fa70 	bl	800dc3c <uxr_deserialize_GET_INFO_Payload>
 800b75c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b760:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b764:	4620      	mov	r0, r4
 800b766:	f001 f81f 	bl	800c7a8 <uxr_session_header_offset>
 800b76a:	462b      	mov	r3, r5
 800b76c:	9000      	str	r0, [sp, #0]
 800b76e:	220c      	movs	r2, #12
 800b770:	a905      	add	r1, sp, #20
 800b772:	a808      	add	r0, sp, #32
 800b774:	f7fd fa42 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 800b778:	a910      	add	r1, sp, #64	@ 0x40
 800b77a:	a808      	add	r0, sp, #32
 800b77c:	f002 fad0 	bl	800dd20 <uxr_serialize_INFO_Payload>
 800b780:	9b08      	ldr	r3, [sp, #32]
 800b782:	462a      	mov	r2, r5
 800b784:	4629      	mov	r1, r5
 800b786:	4620      	mov	r0, r4
 800b788:	f000 ffb8 	bl	800c6fc <uxr_stamp_session_header>
 800b78c:	a808      	add	r0, sp, #32
 800b78e:	f7fd fa73 	bl	8008c78 <ucdr_buffer_length>
 800b792:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b794:	4602      	mov	r2, r0
 800b796:	a905      	add	r1, sp, #20
 800b798:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b79c:	47a0      	blx	r4
 800b79e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}

0800b7a4 <write_submessage_acknack.isra.0>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	b092      	sub	sp, #72	@ 0x48
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	460e      	mov	r6, r1
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	f000 fffb 	bl	800c7a8 <uxr_session_header_offset>
 800b7b2:	a905      	add	r1, sp, #20
 800b7b4:	9000      	str	r0, [sp, #0]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	a80a      	add	r0, sp, #40	@ 0x28
 800b7ba:	2211      	movs	r2, #17
 800b7bc:	f7fd fa1e 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 800b7c0:	2218      	movs	r2, #24
 800b7c2:	fb02 5404 	mla	r4, r2, r4, r5
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	2205      	movs	r2, #5
 800b7ca:	3450      	adds	r4, #80	@ 0x50
 800b7cc:	210a      	movs	r1, #10
 800b7ce:	a80a      	add	r0, sp, #40	@ 0x28
 800b7d0:	f001 f95a 	bl	800ca88 <uxr_buffer_submessage_header>
 800b7d4:	a903      	add	r1, sp, #12
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f007 fdc6 	bl	8013368 <uxr_compute_acknack>
 800b7dc:	ba40      	rev16	r0, r0
 800b7de:	f8ad 000e 	strh.w	r0, [sp, #14]
 800b7e2:	a903      	add	r1, sp, #12
 800b7e4:	a80a      	add	r0, sp, #40	@ 0x28
 800b7e6:	f88d 6010 	strb.w	r6, [sp, #16]
 800b7ea:	f002 fb09 	bl	800de00 <uxr_serialize_ACKNACK_Payload>
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	f000 ff81 	bl	800c6fc <uxr_stamp_session_header>
 800b7fa:	a80a      	add	r0, sp, #40	@ 0x28
 800b7fc:	f7fd fa3c 	bl	8008c78 <ucdr_buffer_length>
 800b800:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b802:	4602      	mov	r2, r0
 800b804:	a905      	add	r1, sp, #20
 800b806:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b80a:	47a0      	blx	r4
 800b80c:	b012      	add	sp, #72	@ 0x48
 800b80e:	bd70      	pop	{r4, r5, r6, pc}

0800b810 <uxr_init_session>:
 800b810:	b510      	push	{r4, lr}
 800b812:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800b848 <uxr_init_session+0x38>
 800b816:	2300      	movs	r3, #0
 800b818:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800b81c:	4604      	mov	r4, r0
 800b81e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800b822:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800b826:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800b82a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800b82e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800b832:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800b836:	2181      	movs	r1, #129	@ 0x81
 800b838:	f000 fecc 	bl	800c5d4 <uxr_init_session_info>
 800b83c:	f104 0008 	add.w	r0, r4, #8
 800b840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b844:	f001 b83c 	b.w	800c8c0 <uxr_init_stream_storage>
	...

0800b850 <uxr_set_status_callback>:
 800b850:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop

0800b858 <uxr_set_topic_callback>:
 800b858:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop

0800b860 <uxr_set_request_callback>:
 800b860:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop

0800b868 <uxr_set_reply_callback>:
 800b868:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop

0800b870 <uxr_create_output_best_effort_stream>:
 800b870:	b510      	push	{r4, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	e9cd 2100 	strd	r2, r1, [sp]
 800b878:	4604      	mov	r4, r0
 800b87a:	f000 ff95 	bl	800c7a8 <uxr_session_header_offset>
 800b87e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b882:	4603      	mov	r3, r0
 800b884:	f104 0008 	add.w	r0, r4, #8
 800b888:	b004      	add	sp, #16
 800b88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b88e:	f001 b861 	b.w	800c954 <uxr_add_output_best_effort_buffer>
 800b892:	bf00      	nop

0800b894 <uxr_create_output_reliable_stream>:
 800b894:	b510      	push	{r4, lr}
 800b896:	b088      	sub	sp, #32
 800b898:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800b89c:	4604      	mov	r4, r0
 800b89e:	9303      	str	r3, [sp, #12]
 800b8a0:	f000 ff82 	bl	800c7a8 <uxr_session_header_offset>
 800b8a4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b8a8:	9000      	str	r0, [sp, #0]
 800b8aa:	9905      	ldr	r1, [sp, #20]
 800b8ac:	f104 0008 	add.w	r0, r4, #8
 800b8b0:	f001 f864 	bl	800c97c <uxr_add_output_reliable_buffer>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	b2c3      	uxtb	r3, r0
 800b8b8:	f363 0207 	bfi	r2, r3, #0, #8
 800b8bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b8c0:	f363 220f 	bfi	r2, r3, #8, #8
 800b8c4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b8c8:	f363 4217 	bfi	r2, r3, #16, #8
 800b8cc:	0e03      	lsrs	r3, r0, #24
 800b8ce:	f363 621f 	bfi	r2, r3, #24, #8
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	b008      	add	sp, #32
 800b8d6:	bd10      	pop	{r4, pc}

0800b8d8 <uxr_create_input_best_effort_stream>:
 800b8d8:	b082      	sub	sp, #8
 800b8da:	3008      	adds	r0, #8
 800b8dc:	b002      	add	sp, #8
 800b8de:	f001 b867 	b.w	800c9b0 <uxr_add_input_best_effort_buffer>
 800b8e2:	bf00      	nop

0800b8e4 <uxr_create_input_reliable_stream>:
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	4c0b      	ldr	r4, [pc, #44]	@ (800b918 <uxr_create_input_reliable_stream+0x34>)
 800b8ea:	9400      	str	r4, [sp, #0]
 800b8ec:	3008      	adds	r0, #8
 800b8ee:	f001 f875 	bl	800c9dc <uxr_add_input_reliable_buffer>
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	b2c3      	uxtb	r3, r0
 800b8f6:	f363 0207 	bfi	r2, r3, #0, #8
 800b8fa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b8fe:	f363 220f 	bfi	r2, r3, #8, #8
 800b902:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b906:	f363 4217 	bfi	r2, r3, #16, #8
 800b90a:	0e03      	lsrs	r3, r0, #24
 800b90c:	f363 621f 	bfi	r2, r3, #24, #8
 800b910:	4610      	mov	r0, r2
 800b912:	b004      	add	sp, #16
 800b914:	bd10      	pop	{r4, pc}
 800b916:	bf00      	nop
 800b918:	0800b6f5 	.word	0x0800b6f5

0800b91c <uxr_epoch_nanos>:
 800b91c:	b510      	push	{r4, lr}
 800b91e:	4604      	mov	r4, r0
 800b920:	f001 f912 	bl	800cb48 <uxr_nanos>
 800b924:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800b928:	1ac0      	subs	r0, r0, r3
 800b92a:	eb61 0102 	sbc.w	r1, r1, r2
 800b92e:	bd10      	pop	{r4, pc}

0800b930 <uxr_flash_output_streams>:
 800b930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b934:	7e03      	ldrb	r3, [r0, #24]
 800b936:	b084      	sub	sp, #16
 800b938:	4604      	mov	r4, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d035      	beq.n	800b9aa <uxr_flash_output_streams+0x7a>
 800b93e:	f04f 0900 	mov.w	r9, #0
 800b942:	4648      	mov	r0, r9
 800b944:	f10d 0802 	add.w	r8, sp, #2
 800b948:	af03      	add	r7, sp, #12
 800b94a:	ae02      	add	r6, sp, #8
 800b94c:	e006      	b.n	800b95c <uxr_flash_output_streams+0x2c>
 800b94e:	7e23      	ldrb	r3, [r4, #24]
 800b950:	f109 0901 	add.w	r9, r9, #1
 800b954:	fa5f f089 	uxtb.w	r0, r9
 800b958:	4283      	cmp	r3, r0
 800b95a:	d926      	bls.n	800b9aa <uxr_flash_output_streams+0x7a>
 800b95c:	2201      	movs	r2, #1
 800b95e:	4611      	mov	r1, r2
 800b960:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800b964:	f000 ff58 	bl	800c818 <uxr_stream_id>
 800b968:	3508      	adds	r5, #8
 800b96a:	4684      	mov	ip, r0
 800b96c:	4643      	mov	r3, r8
 800b96e:	463a      	mov	r2, r7
 800b970:	4631      	mov	r1, r6
 800b972:	4628      	mov	r0, r5
 800b974:	f8cd c004 	str.w	ip, [sp, #4]
 800b978:	f007 fd7c 	bl	8013474 <uxr_prepare_best_effort_buffer_to_send>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d0e6      	beq.n	800b94e <uxr_flash_output_streams+0x1e>
 800b980:	9b02      	ldr	r3, [sp, #8]
 800b982:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b986:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 feb6 	bl	800c6fc <uxr_stamp_session_header>
 800b990:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b992:	9a03      	ldr	r2, [sp, #12]
 800b994:	685d      	ldr	r5, [r3, #4]
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	9902      	ldr	r1, [sp, #8]
 800b99a:	47a8      	blx	r5
 800b99c:	f109 0901 	add.w	r9, r9, #1
 800b9a0:	7e23      	ldrb	r3, [r4, #24]
 800b9a2:	fa5f f089 	uxtb.w	r0, r9
 800b9a6:	4283      	cmp	r3, r0
 800b9a8:	d8d8      	bhi.n	800b95c <uxr_flash_output_streams+0x2c>
 800b9aa:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800b9ae:	b38b      	cbz	r3, 800ba14 <uxr_flash_output_streams+0xe4>
 800b9b0:	f04f 0900 	mov.w	r9, #0
 800b9b4:	f10d 0802 	add.w	r8, sp, #2
 800b9b8:	af03      	add	r7, sp, #12
 800b9ba:	ae02      	add	r6, sp, #8
 800b9bc:	4648      	mov	r0, r9
 800b9be:	2201      	movs	r2, #1
 800b9c0:	2102      	movs	r1, #2
 800b9c2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800b9c6:	f000 ff27 	bl	800c818 <uxr_stream_id>
 800b9ca:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800b9ce:	3520      	adds	r5, #32
 800b9d0:	9001      	str	r0, [sp, #4]
 800b9d2:	e00d      	b.n	800b9f0 <uxr_flash_output_streams+0xc0>
 800b9d4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b9d8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	f000 fe8d 	bl	800c6fc <uxr_stamp_session_header>
 800b9e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b9e4:	9a03      	ldr	r2, [sp, #12]
 800b9e6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800b9ea:	9902      	ldr	r1, [sp, #8]
 800b9ec:	6818      	ldr	r0, [r3, #0]
 800b9ee:	47d0      	blx	sl
 800b9f0:	4643      	mov	r3, r8
 800b9f2:	463a      	mov	r2, r7
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f007 ff5a 	bl	80138b0 <uxr_prepare_next_reliable_buffer_to_send>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	4620      	mov	r0, r4
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e7      	bne.n	800b9d4 <uxr_flash_output_streams+0xa4>
 800ba04:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ba08:	f109 0901 	add.w	r9, r9, #1
 800ba0c:	fa5f f089 	uxtb.w	r0, r9
 800ba10:	4283      	cmp	r3, r0
 800ba12:	d8d4      	bhi.n	800b9be <uxr_flash_output_streams+0x8e>
 800ba14:	b004      	add	sp, #16
 800ba16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1a:	bf00      	nop

0800ba1c <read_submessage_info>:
 800ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba20:	460d      	mov	r5, r1
 800ba22:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ba26:	4669      	mov	r1, sp
 800ba28:	4607      	mov	r7, r0
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f002 f814 	bl	800da58 <uxr_deserialize_BaseObjectReply>
 800ba30:	a902      	add	r1, sp, #8
 800ba32:	4604      	mov	r4, r0
 800ba34:	4628      	mov	r0, r5
 800ba36:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ba3a:	f7fb ff97 	bl	800796c <ucdr_deserialize_bool>
 800ba3e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ba42:	4004      	ands	r4, r0
 800ba44:	b2e4      	uxtb	r4, r4
 800ba46:	b95b      	cbnz	r3, 800ba60 <read_submessage_info+0x44>
 800ba48:	a987      	add	r1, sp, #540	@ 0x21c
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	f7fb ff8e 	bl	800796c <ucdr_deserialize_bool>
 800ba50:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ba54:	4606      	mov	r6, r0
 800ba56:	b94b      	cbnz	r3, 800ba6c <read_submessage_info+0x50>
 800ba58:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ba5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba60:	a903      	add	r1, sp, #12
 800ba62:	4628      	mov	r0, r5
 800ba64:	f001 fea0 	bl	800d7a8 <uxr_deserialize_ObjectVariant>
 800ba68:	4004      	ands	r4, r0
 800ba6a:	e7ed      	b.n	800ba48 <read_submessage_info+0x2c>
 800ba6c:	a988      	add	r1, sp, #544	@ 0x220
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f7fb ffaa 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800ba74:	4234      	tst	r4, r6
 800ba76:	d0ef      	beq.n	800ba58 <read_submessage_info+0x3c>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d0ed      	beq.n	800ba58 <read_submessage_info+0x3c>
 800ba7c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ba80:	2b0d      	cmp	r3, #13
 800ba82:	d1e9      	bne.n	800ba58 <read_submessage_info+0x3c>
 800ba84:	a98a      	add	r1, sp, #552	@ 0x228
 800ba86:	4628      	mov	r0, r5
 800ba88:	f7fc fd44 	bl	8008514 <ucdr_deserialize_int16_t>
 800ba8c:	b140      	cbz	r0, 800baa0 <read_submessage_info+0x84>
 800ba8e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dd07      	ble.n	800baa6 <read_submessage_info+0x8a>
 800ba96:	f1b8 0f00 	cmp.w	r8, #0
 800ba9a:	bf14      	ite	ne
 800ba9c:	2001      	movne	r0, #1
 800ba9e:	2002      	moveq	r0, #2
 800baa0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800baa4:	e7d8      	b.n	800ba58 <read_submessage_info+0x3c>
 800baa6:	2000      	movs	r0, #0
 800baa8:	e7fa      	b.n	800baa0 <read_submessage_info+0x84>
 800baaa:	bf00      	nop

0800baac <read_submessage_list>:
 800baac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab0:	b097      	sub	sp, #92	@ 0x5c
 800bab2:	4ec1      	ldr	r6, [pc, #772]	@ (800bdb8 <read_submessage_list+0x30c>)
 800bab4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bab6:	4604      	mov	r4, r0
 800bab8:	460d      	mov	r5, r1
 800baba:	f04f 0801 	mov.w	r8, #1
 800babe:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800bac2:	aa0c      	add	r2, sp, #48	@ 0x30
 800bac4:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 fff7 	bl	800cabc <uxr_read_submessage_header>
 800bace:	2800      	cmp	r0, #0
 800bad0:	f000 813e 	beq.w	800bd50 <read_submessage_list+0x2a4>
 800bad4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800bad8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800badc:	3b02      	subs	r3, #2
 800bade:	2b0d      	cmp	r3, #13
 800bae0:	d8ed      	bhi.n	800babe <read_submessage_list+0x12>
 800bae2:	a101      	add	r1, pc, #4	@ (adr r1, 800bae8 <read_submessage_list+0x3c>)
 800bae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bae8:	0800bd47 	.word	0x0800bd47
 800baec:	0800babf 	.word	0x0800babf
 800baf0:	0800bd37 	.word	0x0800bd37
 800baf4:	0800bcd5 	.word	0x0800bcd5
 800baf8:	0800bccb 	.word	0x0800bccb
 800bafc:	0800babf 	.word	0x0800babf
 800bb00:	0800babf 	.word	0x0800babf
 800bb04:	0800bc2b 	.word	0x0800bc2b
 800bb08:	0800bbbb 	.word	0x0800bbbb
 800bb0c:	0800bb7b 	.word	0x0800bb7b
 800bb10:	0800babf 	.word	0x0800babf
 800bb14:	0800babf 	.word	0x0800babf
 800bb18:	0800babf 	.word	0x0800babf
 800bb1c:	0800bb21 	.word	0x0800bb21
 800bb20:	a910      	add	r1, sp, #64	@ 0x40
 800bb22:	4628      	mov	r0, r5
 800bb24:	f002 f9bc 	bl	800dea0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800bb28:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800bb2c:	f1b9 0f00 	cmp.w	r9, #0
 800bb30:	f000 8116 	beq.w	800bd60 <read_submessage_list+0x2b4>
 800bb34:	f001 f808 	bl	800cb48 <uxr_nanos>
 800bb38:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800bb40:	2100      	movs	r1, #0
 800bb42:	468c      	mov	ip, r1
 800bb44:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800bb48:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800bb4c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bb4e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800bb50:	468c      	mov	ip, r1
 800bb52:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800bb56:	46e2      	mov	sl, ip
 800bb58:	46bc      	mov	ip, r7
 800bb5a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800bb5e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800bb62:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800bb66:	e9cd 7100 	strd	r7, r1, [sp]
 800bb6a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800bb6e:	9106      	str	r1, [sp, #24]
 800bb70:	4620      	mov	r0, r4
 800bb72:	47c8      	blx	r9
 800bb74:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800bb78:	e7a1      	b.n	800babe <read_submessage_list+0x12>
 800bb7a:	a910      	add	r1, sp, #64	@ 0x40
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	f002 f97d 	bl	800de7c <uxr_deserialize_HEARTBEAT_Payload>
 800bb82:	2100      	movs	r1, #0
 800bb84:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800bb88:	f000 fe70 	bl	800c86c <uxr_stream_id_from_raw>
 800bb8c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800bb90:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bb92:	4639      	mov	r1, r7
 800bb94:	f104 0008 	add.w	r0, r4, #8
 800bb98:	f000 ff56 	bl	800ca48 <uxr_get_input_reliable_stream>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d08e      	beq.n	800babe <read_submessage_list+0x12>
 800bba0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800bba4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800bba8:	f007 fbd2 	bl	8013350 <uxr_process_heartbeat>
 800bbac:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800bbb0:	463a      	mov	r2, r7
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f7ff fdf6 	bl	800b7a4 <write_submessage_acknack.isra.0>
 800bbb8:	e781      	b.n	800babe <read_submessage_list+0x12>
 800bbba:	a910      	add	r1, sp, #64	@ 0x40
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	f002 f935 	bl	800de2c <uxr_deserialize_ACKNACK_Payload>
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800bbc8:	f000 fe50 	bl	800c86c <uxr_stream_id_from_raw>
 800bbcc:	900d      	str	r0, [sp, #52]	@ 0x34
 800bbce:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800bbd2:	f104 0008 	add.w	r0, r4, #8
 800bbd6:	f000 ff23 	bl	800ca20 <uxr_get_output_reliable_stream>
 800bbda:	4607      	mov	r7, r0
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	f43f af6e 	beq.w	800babe <read_submessage_list+0x12>
 800bbe2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800bbe6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800bbea:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800bbee:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800bbf2:	b289      	uxth	r1, r1
 800bbf4:	f007 ff06 	bl	8013a04 <uxr_process_acknack>
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	f007 fec3 	bl	8013984 <uxr_begin_output_nack_buffer_it>
 800bbfe:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800bc02:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800bc06:	e006      	b.n	800bc16 <read_submessage_list+0x16a>
 800bc08:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bc0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc0c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800bc10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bc12:	6818      	ldr	r0, [r3, #0]
 800bc14:	47c8      	blx	r9
 800bc16:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800bc1a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bc1c:	4651      	mov	r1, sl
 800bc1e:	4638      	mov	r0, r7
 800bc20:	f007 feb2 	bl	8013988 <uxr_next_reliable_nack_buffer_to_send>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d1ef      	bne.n	800bc08 <read_submessage_list+0x15c>
 800bc28:	e749      	b.n	800babe <read_submessage_list+0x12>
 800bc2a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800bc2e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800bc32:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800bc36:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800bc3a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800bc3e:	4651      	mov	r1, sl
 800bc40:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800bc44:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800bc48:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800bc4c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800bc50:	4628      	mov	r0, r5
 800bc52:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800bc56:	f001 fe49 	bl	800d8ec <uxr_deserialize_BaseObjectRequest>
 800bc5a:	4650      	mov	r0, sl
 800bc5c:	a90f      	add	r1, sp, #60	@ 0x3c
 800bc5e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800bc62:	f000 fdc7 	bl	800c7f4 <uxr_parse_base_object_request>
 800bc66:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800bc6a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bc6c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800bc70:	9110      	str	r1, [sp, #64]	@ 0x40
 800bc72:	3f04      	subs	r7, #4
 800bc74:	f009 090e 	and.w	r9, r9, #14
 800bc78:	b2bf      	uxth	r7, r7
 800bc7a:	f1bb 0f00 	cmp.w	fp, #0
 800bc7e:	d006      	beq.n	800bc8e <read_submessage_list+0x1e2>
 800bc80:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	4652      	mov	r2, sl
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	47d8      	blx	fp
 800bc8e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800bc90:	b16a      	cbz	r2, 800bcae <read_submessage_list+0x202>
 800bc92:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800bc94:	2100      	movs	r1, #0
 800bc96:	3802      	subs	r0, #2
 800bc98:	e002      	b.n	800bca0 <read_submessage_list+0x1f4>
 800bc9a:	3101      	adds	r1, #1
 800bc9c:	4291      	cmp	r1, r2
 800bc9e:	d006      	beq.n	800bcae <read_submessage_list+0x202>
 800bca0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800bca4:	4553      	cmp	r3, sl
 800bca6:	d1f8      	bne.n	800bc9a <read_submessage_list+0x1ee>
 800bca8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800bcaa:	2200      	movs	r2, #0
 800bcac:	545a      	strb	r2, [r3, r1]
 800bcae:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800bcb2:	9102      	str	r1, [sp, #8]
 800bcb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bcb6:	9101      	str	r1, [sp, #4]
 800bcb8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800bcba:	9100      	str	r1, [sp, #0]
 800bcbc:	464b      	mov	r3, r9
 800bcbe:	463a      	mov	r2, r7
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f007 ff5c 	bl	8013b80 <read_submessage_format>
 800bcc8:	e6f9      	b.n	800babe <read_submessage_list+0x12>
 800bcca:	4629      	mov	r1, r5
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7ff fea5 	bl	800ba1c <read_submessage_info>
 800bcd2:	e6f4      	b.n	800babe <read_submessage_list+0x12>
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	d03e      	beq.n	800bd56 <read_submessage_list+0x2aa>
 800bcd8:	a910      	add	r1, sp, #64	@ 0x40
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f002 f802 	bl	800dce4 <uxr_deserialize_STATUS_Payload>
 800bce0:	a90e      	add	r1, sp, #56	@ 0x38
 800bce2:	aa0d      	add	r2, sp, #52	@ 0x34
 800bce4:	a810      	add	r0, sp, #64	@ 0x40
 800bce6:	f000 fd85 	bl	800c7f4 <uxr_parse_base_object_request>
 800bcea:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800bcee:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bcf0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800bcf4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800bcf8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800bcfa:	f1ba 0f00 	cmp.w	sl, #0
 800bcfe:	d006      	beq.n	800bd0e <read_submessage_list+0x262>
 800bd00:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	463a      	mov	r2, r7
 800bd08:	464b      	mov	r3, r9
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	47d0      	blx	sl
 800bd0e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800bd10:	2a00      	cmp	r2, #0
 800bd12:	f43f aed4 	beq.w	800babe <read_submessage_list+0x12>
 800bd16:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800bd18:	2100      	movs	r1, #0
 800bd1a:	3802      	subs	r0, #2
 800bd1c:	e003      	b.n	800bd26 <read_submessage_list+0x27a>
 800bd1e:	3101      	adds	r1, #1
 800bd20:	4291      	cmp	r1, r2
 800bd22:	f43f aecc 	beq.w	800babe <read_submessage_list+0x12>
 800bd26:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800bd2a:	42bb      	cmp	r3, r7
 800bd2c:	d1f7      	bne.n	800bd1e <read_submessage_list+0x272>
 800bd2e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800bd30:	f803 9001 	strb.w	r9, [r3, r1]
 800bd34:	e6c3      	b.n	800babe <read_submessage_list+0x12>
 800bd36:	2a00      	cmp	r2, #0
 800bd38:	f47f aec1 	bne.w	800babe <read_submessage_list+0x12>
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f000 fc9e 	bl	800c680 <uxr_read_create_session_status>
 800bd44:	e6bb      	b.n	800babe <read_submessage_list+0x12>
 800bd46:	4629      	mov	r1, r5
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f7ff fcf5 	bl	800b738 <read_submessage_get_info>
 800bd4e:	e6b6      	b.n	800babe <read_submessage_list+0x12>
 800bd50:	b017      	add	sp, #92	@ 0x5c
 800bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd56:	4629      	mov	r1, r5
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 fc9d 	bl	800c698 <uxr_read_delete_session_status>
 800bd5e:	e6ae      	b.n	800babe <read_submessage_list+0x12>
 800bd60:	f000 fef2 	bl	800cb48 <uxr_nanos>
 800bd64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bd66:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bd68:	464f      	mov	r7, r9
 800bd6a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800bd6e:	1812      	adds	r2, r2, r0
 800bd70:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd72:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800bd74:	eb47 0101 	adc.w	r1, r7, r1
 800bd78:	464f      	mov	r7, r9
 800bd7a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800bd7e:	463b      	mov	r3, r7
 800bd80:	4684      	mov	ip, r0
 800bd82:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800bd86:	fbc7 0906 	smlal	r0, r9, r7, r6
 800bd8a:	eb1c 0c00 	adds.w	ip, ip, r0
 800bd8e:	464f      	mov	r7, r9
 800bd90:	eb43 0307 	adc.w	r3, r3, r7
 800bd94:	ebb2 0c0c 	subs.w	ip, r2, ip
 800bd98:	eb61 0303 	sbc.w	r3, r1, r3
 800bd9c:	0fda      	lsrs	r2, r3, #31
 800bd9e:	eb12 020c 	adds.w	r2, r2, ip
 800bda2:	f143 0300 	adc.w	r3, r3, #0
 800bda6:	0852      	lsrs	r2, r2, #1
 800bda8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800bdac:	105b      	asrs	r3, r3, #1
 800bdae:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800bdb2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800bdb6:	e6dd      	b.n	800bb74 <read_submessage_list+0xc8>
 800bdb8:	3b9aca00 	.word	0x3b9aca00

0800bdbc <listen_message_reliably>:
 800bdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	1e0b      	subs	r3, r1, #0
 800bdc2:	b09d      	sub	sp, #116	@ 0x74
 800bdc4:	bfb8      	it	lt
 800bdc6:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800bdca:	4680      	mov	r8, r0
 800bdcc:	9305      	str	r3, [sp, #20]
 800bdce:	f000 fea1 	bl	800cb14 <uxr_millis>
 800bdd2:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800bdd6:	4681      	mov	r9, r0
 800bdd8:	2a00      	cmp	r2, #0
 800bdda:	f000 80a1 	beq.w	800bf20 <listen_message_reliably+0x164>
 800bdde:	2600      	movs	r6, #0
 800bde0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bde4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800bde8:	9303      	str	r3, [sp, #12]
 800bdea:	4630      	mov	r0, r6
 800bdec:	460f      	mov	r7, r1
 800bdee:	e00f      	b.n	800be10 <listen_message_reliably+0x54>
 800bdf0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800bdf4:	9903      	ldr	r1, [sp, #12]
 800bdf6:	455a      	cmp	r2, fp
 800bdf8:	f106 0601 	add.w	r6, r6, #1
 800bdfc:	eb73 0101 	sbcs.w	r1, r3, r1
 800be00:	b2f0      	uxtb	r0, r6
 800be02:	da01      	bge.n	800be08 <listen_message_reliably+0x4c>
 800be04:	4693      	mov	fp, r2
 800be06:	9303      	str	r3, [sp, #12]
 800be08:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800be0c:	4283      	cmp	r3, r0
 800be0e:	d960      	bls.n	800bed2 <listen_message_reliably+0x116>
 800be10:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800be14:	2102      	movs	r1, #2
 800be16:	2201      	movs	r2, #1
 800be18:	f000 fcfe 	bl	800c818 <uxr_stream_id>
 800be1c:	00e4      	lsls	r4, r4, #3
 800be1e:	f104 0520 	add.w	r5, r4, #32
 800be22:	4445      	add	r5, r8
 800be24:	4601      	mov	r1, r0
 800be26:	463b      	mov	r3, r7
 800be28:	464a      	mov	r2, r9
 800be2a:	4628      	mov	r0, r5
 800be2c:	9109      	str	r1, [sp, #36]	@ 0x24
 800be2e:	f007 fd7f 	bl	8013930 <uxr_update_output_stream_heartbeat_timestamp>
 800be32:	eb08 0304 	add.w	r3, r8, r4
 800be36:	2800      	cmp	r0, #0
 800be38:	d0da      	beq.n	800bdf0 <listen_message_reliably+0x34>
 800be3a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800be3e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	4640      	mov	r0, r8
 800be46:	f000 fcaf 	bl	800c7a8 <uxr_session_header_offset>
 800be4a:	3501      	adds	r5, #1
 800be4c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800be50:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800be54:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800be58:	2300      	movs	r3, #0
 800be5a:	2211      	movs	r2, #17
 800be5c:	9000      	str	r0, [sp, #0]
 800be5e:	a90c      	add	r1, sp, #48	@ 0x30
 800be60:	4650      	mov	r0, sl
 800be62:	f7fc fecb 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 800be66:	2300      	movs	r3, #0
 800be68:	2205      	movs	r2, #5
 800be6a:	210b      	movs	r1, #11
 800be6c:	4650      	mov	r0, sl
 800be6e:	f000 fe0b 	bl	800ca88 <uxr_buffer_submessage_header>
 800be72:	8968      	ldrh	r0, [r5, #10]
 800be74:	2101      	movs	r1, #1
 800be76:	f007 ff4d 	bl	8013d14 <uxr_seq_num_add>
 800be7a:	892b      	ldrh	r3, [r5, #8]
 800be7c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800be80:	4602      	mov	r2, r0
 800be82:	9b04      	ldr	r3, [sp, #16]
 800be84:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800be88:	a90a      	add	r1, sp, #40	@ 0x28
 800be8a:	4650      	mov	r0, sl
 800be8c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800be90:	f001 ffe0 	bl	800de54 <uxr_serialize_HEARTBEAT_Payload>
 800be94:	2200      	movs	r2, #0
 800be96:	4611      	mov	r1, r2
 800be98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be9a:	4640      	mov	r0, r8
 800be9c:	f000 fc2e 	bl	800c6fc <uxr_stamp_session_header>
 800bea0:	4650      	mov	r0, sl
 800bea2:	f7fc fee9 	bl	8008c78 <ucdr_buffer_length>
 800bea6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800beaa:	4602      	mov	r2, r0
 800beac:	a90c      	add	r1, sp, #48	@ 0x30
 800beae:	e9d3 0500 	ldrd	r0, r5, [r3]
 800beb2:	4444      	add	r4, r8
 800beb4:	47a8      	blx	r5
 800beb6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800beba:	9903      	ldr	r1, [sp, #12]
 800bebc:	455a      	cmp	r2, fp
 800bebe:	f106 0601 	add.w	r6, r6, #1
 800bec2:	eb73 0101 	sbcs.w	r1, r3, r1
 800bec6:	b2f0      	uxtb	r0, r6
 800bec8:	db9c      	blt.n	800be04 <listen_message_reliably+0x48>
 800beca:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800bece:	4283      	cmp	r3, r0
 800bed0:	d89e      	bhi.n	800be10 <listen_message_reliably+0x54>
 800bed2:	9a03      	ldr	r2, [sp, #12]
 800bed4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bed8:	429a      	cmp	r2, r3
 800beda:	bf08      	it	eq
 800bedc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800bee0:	d01e      	beq.n	800bf20 <listen_message_reliably+0x164>
 800bee2:	ebab 0309 	sub.w	r3, fp, r9
 800bee6:	9905      	ldr	r1, [sp, #20]
 800bee8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800beec:	2b00      	cmp	r3, #0
 800beee:	bf08      	it	eq
 800bef0:	2301      	moveq	r3, #1
 800bef2:	4299      	cmp	r1, r3
 800bef4:	bfa8      	it	ge
 800bef6:	4619      	movge	r1, r3
 800bef8:	6894      	ldr	r4, [r2, #8]
 800befa:	6810      	ldr	r0, [r2, #0]
 800befc:	4689      	mov	r9, r1
 800befe:	460b      	mov	r3, r1
 800bf00:	aa08      	add	r2, sp, #32
 800bf02:	a907      	add	r1, sp, #28
 800bf04:	47a0      	blx	r4
 800bf06:	b968      	cbnz	r0, 800bf24 <listen_message_reliably+0x168>
 800bf08:	9b05      	ldr	r3, [sp, #20]
 800bf0a:	eba3 0309 	sub.w	r3, r3, r9
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	9305      	str	r3, [sp, #20]
 800bf12:	f73f af5c 	bgt.w	800bdce <listen_message_reliably+0x12>
 800bf16:	4604      	mov	r4, r0
 800bf18:	4620      	mov	r0, r4
 800bf1a:	b01d      	add	sp, #116	@ 0x74
 800bf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf20:	9b05      	ldr	r3, [sp, #20]
 800bf22:	e7e0      	b.n	800bee6 <listen_message_reliably+0x12a>
 800bf24:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800bf28:	4604      	mov	r4, r0
 800bf2a:	a80c      	add	r0, sp, #48	@ 0x30
 800bf2c:	f7fc fe78 	bl	8008c20 <ucdr_init_buffer>
 800bf30:	2500      	movs	r5, #0
 800bf32:	f10d 031a 	add.w	r3, sp, #26
 800bf36:	aa06      	add	r2, sp, #24
 800bf38:	a90c      	add	r1, sp, #48	@ 0x30
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	f88d 5018 	strb.w	r5, [sp, #24]
 800bf40:	f000 fbf0 	bl	800c724 <uxr_read_session_header>
 800bf44:	b918      	cbnz	r0, 800bf4e <listen_message_reliably+0x192>
 800bf46:	4620      	mov	r0, r4
 800bf48:	b01d      	add	sp, #116	@ 0x74
 800bf4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4e:	4629      	mov	r1, r5
 800bf50:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800bf54:	f000 fc8a 	bl	800c86c <uxr_stream_id_from_raw>
 800bf58:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800bf5c:	2d01      	cmp	r5, #1
 800bf5e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800bf62:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800bf66:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800bf6a:	d04b      	beq.n	800c004 <listen_message_reliably+0x248>
 800bf6c:	2d02      	cmp	r5, #2
 800bf6e:	d00f      	beq.n	800bf90 <listen_message_reliably+0x1d4>
 800bf70:	2d00      	cmp	r5, #0
 800bf72:	d1e8      	bne.n	800bf46 <listen_message_reliably+0x18a>
 800bf74:	4629      	mov	r1, r5
 800bf76:	4628      	mov	r0, r5
 800bf78:	f000 fc78 	bl	800c86c <uxr_stream_id_from_raw>
 800bf7c:	a90c      	add	r1, sp, #48	@ 0x30
 800bf7e:	4602      	mov	r2, r0
 800bf80:	4640      	mov	r0, r8
 800bf82:	920a      	str	r2, [sp, #40]	@ 0x28
 800bf84:	f7ff fd92 	bl	800baac <read_submessage_list>
 800bf88:	4620      	mov	r0, r4
 800bf8a:	b01d      	add	sp, #116	@ 0x74
 800bf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf90:	4631      	mov	r1, r6
 800bf92:	f108 0008 	add.w	r0, r8, #8
 800bf96:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800bf9a:	f000 fd55 	bl	800ca48 <uxr_get_input_reliable_stream>
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	b338      	cbz	r0, 800bff2 <listen_message_reliably+0x236>
 800bfa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfa4:	9203      	str	r2, [sp, #12]
 800bfa6:	a80c      	add	r0, sp, #48	@ 0x30
 800bfa8:	f7fc fe6a 	bl	8008c80 <ucdr_buffer_remaining>
 800bfac:	4603      	mov	r3, r0
 800bfae:	f10d 0019 	add.w	r0, sp, #25
 800bfb2:	9000      	str	r0, [sp, #0]
 800bfb4:	9a03      	ldr	r2, [sp, #12]
 800bfb6:	4651      	mov	r1, sl
 800bfb8:	4638      	mov	r0, r7
 800bfba:	f007 f8cf 	bl	801315c <uxr_receive_reliable_message>
 800bfbe:	b1c0      	cbz	r0, 800bff2 <listen_message_reliably+0x236>
 800bfc0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bfc4:	b393      	cbz	r3, 800c02c <listen_message_reliably+0x270>
 800bfc6:	ad14      	add	r5, sp, #80	@ 0x50
 800bfc8:	f04f 0a02 	mov.w	sl, #2
 800bfcc:	e00a      	b.n	800bfe4 <listen_message_reliably+0x228>
 800bfce:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800bfd2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800bfd6:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800bfda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfdc:	4629      	mov	r1, r5
 800bfde:	4640      	mov	r0, r8
 800bfe0:	f7ff fd64 	bl	800baac <read_submessage_list>
 800bfe4:	2204      	movs	r2, #4
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	4638      	mov	r0, r7
 800bfea:	f007 f937 	bl	801325c <uxr_next_input_reliable_buffer_available>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d1ed      	bne.n	800bfce <listen_message_reliably+0x212>
 800bff2:	4640      	mov	r0, r8
 800bff4:	4632      	mov	r2, r6
 800bff6:	4649      	mov	r1, r9
 800bff8:	f7ff fbd4 	bl	800b7a4 <write_submessage_acknack.isra.0>
 800bffc:	4620      	mov	r0, r4
 800bffe:	b01d      	add	sp, #116	@ 0x74
 800c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c004:	4631      	mov	r1, r6
 800c006:	f108 0008 	add.w	r0, r8, #8
 800c00a:	f000 fd13 	bl	800ca34 <uxr_get_input_best_effort_stream>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d099      	beq.n	800bf46 <listen_message_reliably+0x18a>
 800c012:	4651      	mov	r1, sl
 800c014:	f007 f80e 	bl	8013034 <uxr_receive_best_effort_message>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d094      	beq.n	800bf46 <listen_message_reliably+0x18a>
 800c01c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800c020:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c022:	a90c      	add	r1, sp, #48	@ 0x30
 800c024:	4640      	mov	r0, r8
 800c026:	f7ff fd41 	bl	800baac <read_submessage_list>
 800c02a:	e78c      	b.n	800bf46 <listen_message_reliably+0x18a>
 800c02c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800c030:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c032:	a90c      	add	r1, sp, #48	@ 0x30
 800c034:	4640      	mov	r0, r8
 800c036:	f7ff fd39 	bl	800baac <read_submessage_list>
 800c03a:	e7c4      	b.n	800bfc6 <listen_message_reliably+0x20a>

0800c03c <uxr_run_session_timeout>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	4604      	mov	r4, r0
 800c040:	460d      	mov	r5, r1
 800c042:	f000 fd67 	bl	800cb14 <uxr_millis>
 800c046:	4606      	mov	r6, r0
 800c048:	4620      	mov	r0, r4
 800c04a:	f7ff fc71 	bl	800b930 <uxr_flash_output_streams>
 800c04e:	4629      	mov	r1, r5
 800c050:	4620      	mov	r0, r4
 800c052:	f7ff feb3 	bl	800bdbc <listen_message_reliably>
 800c056:	f000 fd5d 	bl	800cb14 <uxr_millis>
 800c05a:	1b83      	subs	r3, r0, r6
 800c05c:	1ae9      	subs	r1, r5, r3
 800c05e:	2900      	cmp	r1, #0
 800c060:	dcf6      	bgt.n	800c050 <uxr_run_session_timeout+0x14>
 800c062:	f104 0008 	add.w	r0, r4, #8
 800c066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c06a:	f000 bcf7 	b.w	800ca5c <uxr_output_streams_confirmed>
 800c06e:	bf00      	nop

0800c070 <uxr_run_session_until_data>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	4604      	mov	r4, r0
 800c074:	460d      	mov	r5, r1
 800c076:	f000 fd4d 	bl	800cb14 <uxr_millis>
 800c07a:	4606      	mov	r6, r0
 800c07c:	4620      	mov	r0, r4
 800c07e:	f7ff fc57 	bl	800b930 <uxr_flash_output_streams>
 800c082:	2300      	movs	r3, #0
 800c084:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800c088:	4629      	mov	r1, r5
 800c08a:	e005      	b.n	800c098 <uxr_run_session_until_data+0x28>
 800c08c:	f000 fd42 	bl	800cb14 <uxr_millis>
 800c090:	1b83      	subs	r3, r0, r6
 800c092:	1ae9      	subs	r1, r5, r3
 800c094:	2900      	cmp	r1, #0
 800c096:	dd07      	ble.n	800c0a8 <uxr_run_session_until_data+0x38>
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff fe8f 	bl	800bdbc <listen_message_reliably>
 800c09e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d0f2      	beq.n	800c08c <uxr_run_session_until_data+0x1c>
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
 800c0a8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800c0ac:	bd70      	pop	{r4, r5, r6, pc}
 800c0ae:	bf00      	nop

0800c0b0 <uxr_run_session_until_confirm_delivery>:
 800c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	f000 fd2c 	bl	800cb14 <uxr_millis>
 800c0bc:	4607      	mov	r7, r0
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff fc36 	bl	800b930 <uxr_flash_output_streams>
 800c0c4:	2d00      	cmp	r5, #0
 800c0c6:	f106 0808 	add.w	r8, r6, #8
 800c0ca:	bfa8      	it	ge
 800c0cc:	462c      	movge	r4, r5
 800c0ce:	da07      	bge.n	800c0e0 <uxr_run_session_until_confirm_delivery+0x30>
 800c0d0:	e00e      	b.n	800c0f0 <uxr_run_session_until_confirm_delivery+0x40>
 800c0d2:	f7ff fe73 	bl	800bdbc <listen_message_reliably>
 800c0d6:	f000 fd1d 	bl	800cb14 <uxr_millis>
 800c0da:	1bc3      	subs	r3, r0, r7
 800c0dc:	1aec      	subs	r4, r5, r3
 800c0de:	d407      	bmi.n	800c0f0 <uxr_run_session_until_confirm_delivery+0x40>
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	f000 fcbb 	bl	800ca5c <uxr_output_streams_confirmed>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	4621      	mov	r1, r4
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0f0      	beq.n	800c0d2 <uxr_run_session_until_confirm_delivery+0x22>
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f6:	f000 bcb1 	b.w	800ca5c <uxr_output_streams_confirmed>
 800c0fa:	bf00      	nop

0800c0fc <uxr_run_session_until_all_status>:
 800c0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c100:	9c08      	ldr	r4, [sp, #32]
 800c102:	4606      	mov	r6, r0
 800c104:	460f      	mov	r7, r1
 800c106:	4691      	mov	r9, r2
 800c108:	461d      	mov	r5, r3
 800c10a:	f7ff fc11 	bl	800b930 <uxr_flash_output_streams>
 800c10e:	b124      	cbz	r4, 800c11a <uxr_run_session_until_all_status+0x1e>
 800c110:	4622      	mov	r2, r4
 800c112:	21ff      	movs	r1, #255	@ 0xff
 800c114:	4628      	mov	r0, r5
 800c116:	f009 fbd7 	bl	80158c8 <memset>
 800c11a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800c11e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800c120:	f000 fcf8 	bl	800cb14 <uxr_millis>
 800c124:	3d01      	subs	r5, #1
 800c126:	f1a9 0902 	sub.w	r9, r9, #2
 800c12a:	4680      	mov	r8, r0
 800c12c:	4639      	mov	r1, r7
 800c12e:	4630      	mov	r0, r6
 800c130:	f7ff fe44 	bl	800bdbc <listen_message_reliably>
 800c134:	f000 fcee 	bl	800cb14 <uxr_millis>
 800c138:	eba0 0008 	sub.w	r0, r0, r8
 800c13c:	1a39      	subs	r1, r7, r0
 800c13e:	b344      	cbz	r4, 800c192 <uxr_run_session_until_all_status+0x96>
 800c140:	4628      	mov	r0, r5
 800c142:	46ac      	mov	ip, r5
 800c144:	2301      	movs	r3, #1
 800c146:	e002      	b.n	800c14e <uxr_run_session_until_all_status+0x52>
 800c148:	42a3      	cmp	r3, r4
 800c14a:	d20d      	bcs.n	800c168 <uxr_run_session_until_all_status+0x6c>
 800c14c:	3301      	adds	r3, #1
 800c14e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800c152:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800c156:	d1f7      	bne.n	800c148 <uxr_run_session_until_all_status+0x4c>
 800c158:	42a3      	cmp	r3, r4
 800c15a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800c15e:	d213      	bcs.n	800c188 <uxr_run_session_until_all_status+0x8c>
 800c160:	2a00      	cmp	r2, #0
 800c162:	d0f3      	beq.n	800c14c <uxr_run_session_until_all_status+0x50>
 800c164:	2900      	cmp	r1, #0
 800c166:	dce2      	bgt.n	800c12e <uxr_run_session_until_all_status+0x32>
 800c168:	2300      	movs	r3, #0
 800c16a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800c16c:	442c      	add	r4, r5
 800c16e:	e001      	b.n	800c174 <uxr_run_session_until_all_status+0x78>
 800c170:	2b01      	cmp	r3, #1
 800c172:	d812      	bhi.n	800c19a <uxr_run_session_until_all_status+0x9e>
 800c174:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c178:	4284      	cmp	r4, r0
 800c17a:	d1f9      	bne.n	800c170 <uxr_run_session_until_all_status+0x74>
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	bf8c      	ite	hi
 800c180:	2000      	movhi	r0, #0
 800c182:	2001      	movls	r0, #1
 800c184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c188:	2900      	cmp	r1, #0
 800c18a:	dded      	ble.n	800c168 <uxr_run_session_until_all_status+0x6c>
 800c18c:	2a00      	cmp	r2, #0
 800c18e:	d1ce      	bne.n	800c12e <uxr_run_session_until_all_status+0x32>
 800c190:	e7ea      	b.n	800c168 <uxr_run_session_until_all_status+0x6c>
 800c192:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800c194:	2001      	movs	r0, #1
 800c196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c19a:	2000      	movs	r0, #0
 800c19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c1a0 <wait_session_status>:
 800c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	b09d      	sub	sp, #116	@ 0x74
 800c1a8:	20ff      	movs	r0, #255	@ 0xff
 800c1aa:	7160      	strb	r0, [r4, #5]
 800c1ac:	9303      	str	r3, [sp, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f000 80b6 	beq.w	800c320 <wait_session_status+0x180>
 800c1b4:	468a      	mov	sl, r1
 800c1b6:	4691      	mov	r9, r2
 800c1b8:	f04f 0b00 	mov.w	fp, #0
 800c1bc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c1be:	464a      	mov	r2, r9
 800c1c0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c1c4:	4651      	mov	r1, sl
 800c1c6:	47a8      	blx	r5
 800c1c8:	f000 fca4 	bl	800cb14 <uxr_millis>
 800c1cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	e009      	b.n	800c1e8 <wait_session_status+0x48>
 800c1d4:	f000 fc9e 	bl	800cb14 <uxr_millis>
 800c1d8:	1b40      	subs	r0, r0, r5
 800c1da:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	dd40      	ble.n	800c264 <wait_session_status+0xc4>
 800c1e2:	7960      	ldrb	r0, [r4, #5]
 800c1e4:	28ff      	cmp	r0, #255	@ 0xff
 800c1e6:	d145      	bne.n	800c274 <wait_session_status+0xd4>
 800c1e8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800c1ea:	a908      	add	r1, sp, #32
 800c1ec:	6896      	ldr	r6, [r2, #8]
 800c1ee:	6810      	ldr	r0, [r2, #0]
 800c1f0:	aa09      	add	r2, sp, #36	@ 0x24
 800c1f2:	47b0      	blx	r6
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d0ed      	beq.n	800c1d4 <wait_session_status+0x34>
 800c1f8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c1fc:	a80c      	add	r0, sp, #48	@ 0x30
 800c1fe:	f7fc fd0f 	bl	8008c20 <ucdr_init_buffer>
 800c202:	2600      	movs	r6, #0
 800c204:	f10d 031e 	add.w	r3, sp, #30
 800c208:	aa07      	add	r2, sp, #28
 800c20a:	a90c      	add	r1, sp, #48	@ 0x30
 800c20c:	4620      	mov	r0, r4
 800c20e:	f88d 601c 	strb.w	r6, [sp, #28]
 800c212:	f000 fa87 	bl	800c724 <uxr_read_session_header>
 800c216:	2800      	cmp	r0, #0
 800c218:	d0dc      	beq.n	800c1d4 <wait_session_status+0x34>
 800c21a:	4631      	mov	r1, r6
 800c21c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c220:	f000 fb24 	bl	800c86c <uxr_stream_id_from_raw>
 800c224:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c228:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c22c:	9302      	str	r3, [sp, #8]
 800c22e:	2f01      	cmp	r7, #1
 800c230:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800c234:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c238:	d05c      	beq.n	800c2f4 <wait_session_status+0x154>
 800c23a:	2f02      	cmp	r7, #2
 800c23c:	d020      	beq.n	800c280 <wait_session_status+0xe0>
 800c23e:	2f00      	cmp	r7, #0
 800c240:	d1c8      	bne.n	800c1d4 <wait_session_status+0x34>
 800c242:	4639      	mov	r1, r7
 800c244:	4638      	mov	r0, r7
 800c246:	f000 fb11 	bl	800c86c <uxr_stream_id_from_raw>
 800c24a:	a90c      	add	r1, sp, #48	@ 0x30
 800c24c:	4602      	mov	r2, r0
 800c24e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c250:	4620      	mov	r0, r4
 800c252:	f7ff fc2b 	bl	800baac <read_submessage_list>
 800c256:	f000 fc5d 	bl	800cb14 <uxr_millis>
 800c25a:	1b40      	subs	r0, r0, r5
 800c25c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c260:	2b00      	cmp	r3, #0
 800c262:	dcbe      	bgt.n	800c1e2 <wait_session_status+0x42>
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	7960      	ldrb	r0, [r4, #5]
 800c268:	f10b 0b01 	add.w	fp, fp, #1
 800c26c:	455b      	cmp	r3, fp
 800c26e:	d001      	beq.n	800c274 <wait_session_status+0xd4>
 800c270:	28ff      	cmp	r0, #255	@ 0xff
 800c272:	d0a3      	beq.n	800c1bc <wait_session_status+0x1c>
 800c274:	38ff      	subs	r0, #255	@ 0xff
 800c276:	bf18      	it	ne
 800c278:	2001      	movne	r0, #1
 800c27a:	b01d      	add	sp, #116	@ 0x74
 800c27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c280:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800c284:	9304      	str	r3, [sp, #16]
 800c286:	4631      	mov	r1, r6
 800c288:	f104 0008 	add.w	r0, r4, #8
 800c28c:	f000 fbdc 	bl	800ca48 <uxr_get_input_reliable_stream>
 800c290:	4680      	mov	r8, r0
 800c292:	b348      	cbz	r0, 800c2e8 <wait_session_status+0x148>
 800c294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c296:	9205      	str	r2, [sp, #20]
 800c298:	a80c      	add	r0, sp, #48	@ 0x30
 800c29a:	f7fc fcf1 	bl	8008c80 <ucdr_buffer_remaining>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	f10d 001d 	add.w	r0, sp, #29
 800c2a4:	9000      	str	r0, [sp, #0]
 800c2a6:	9a05      	ldr	r2, [sp, #20]
 800c2a8:	9902      	ldr	r1, [sp, #8]
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	f006 ff56 	bl	801315c <uxr_receive_reliable_message>
 800c2b0:	b1d0      	cbz	r0, 800c2e8 <wait_session_status+0x148>
 800c2b2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d03a      	beq.n	800c330 <wait_session_status+0x190>
 800c2ba:	9f04      	ldr	r7, [sp, #16]
 800c2bc:	e00a      	b.n	800c2d4 <wait_session_status+0x134>
 800c2be:	f04f 0302 	mov.w	r3, #2
 800c2c2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800c2c6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800c2ca:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800c2ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2d0:	f7ff fbec 	bl	800baac <read_submessage_list>
 800c2d4:	a914      	add	r1, sp, #80	@ 0x50
 800c2d6:	2204      	movs	r2, #4
 800c2d8:	4640      	mov	r0, r8
 800c2da:	f006 ffbf 	bl	801325c <uxr_next_input_reliable_buffer_available>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	a914      	add	r1, sp, #80	@ 0x50
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1ea      	bne.n	800c2be <wait_session_status+0x11e>
 800c2e8:	9904      	ldr	r1, [sp, #16]
 800c2ea:	4632      	mov	r2, r6
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f7ff fa59 	bl	800b7a4 <write_submessage_acknack.isra.0>
 800c2f2:	e76f      	b.n	800c1d4 <wait_session_status+0x34>
 800c2f4:	4631      	mov	r1, r6
 800c2f6:	f104 0008 	add.w	r0, r4, #8
 800c2fa:	f000 fb9b 	bl	800ca34 <uxr_get_input_best_effort_stream>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	f43f af68 	beq.w	800c1d4 <wait_session_status+0x34>
 800c304:	9902      	ldr	r1, [sp, #8]
 800c306:	f006 fe95 	bl	8013034 <uxr_receive_best_effort_message>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	f43f af62 	beq.w	800c1d4 <wait_session_status+0x34>
 800c310:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800c314:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c316:	a90c      	add	r1, sp, #48	@ 0x30
 800c318:	4620      	mov	r0, r4
 800c31a:	f7ff fbc7 	bl	800baac <read_submessage_list>
 800c31e:	e759      	b.n	800c1d4 <wait_session_status+0x34>
 800c320:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c322:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c326:	47a0      	blx	r4
 800c328:	2001      	movs	r0, #1
 800c32a:	b01d      	add	sp, #116	@ 0x74
 800c32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c330:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800c334:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c336:	a90c      	add	r1, sp, #48	@ 0x30
 800c338:	4620      	mov	r0, r4
 800c33a:	f7ff fbb7 	bl	800baac <read_submessage_list>
 800c33e:	e7bc      	b.n	800c2ba <wait_session_status+0x11a>

0800c340 <uxr_delete_session_retries>:
 800c340:	b530      	push	{r4, r5, lr}
 800c342:	b08f      	sub	sp, #60	@ 0x3c
 800c344:	4604      	mov	r4, r0
 800c346:	460d      	mov	r5, r1
 800c348:	f000 fa2e 	bl	800c7a8 <uxr_session_header_offset>
 800c34c:	2300      	movs	r3, #0
 800c34e:	2210      	movs	r2, #16
 800c350:	9000      	str	r0, [sp, #0]
 800c352:	a902      	add	r1, sp, #8
 800c354:	a806      	add	r0, sp, #24
 800c356:	f7fc fc51 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 800c35a:	a906      	add	r1, sp, #24
 800c35c:	4620      	mov	r0, r4
 800c35e:	f000 f973 	bl	800c648 <uxr_buffer_delete_session>
 800c362:	2200      	movs	r2, #0
 800c364:	4611      	mov	r1, r2
 800c366:	9b06      	ldr	r3, [sp, #24]
 800c368:	4620      	mov	r0, r4
 800c36a:	f000 f9c7 	bl	800c6fc <uxr_stamp_session_header>
 800c36e:	a806      	add	r0, sp, #24
 800c370:	f7fc fc82 	bl	8008c78 <ucdr_buffer_length>
 800c374:	462b      	mov	r3, r5
 800c376:	4602      	mov	r2, r0
 800c378:	a902      	add	r1, sp, #8
 800c37a:	4620      	mov	r0, r4
 800c37c:	f7ff ff10 	bl	800c1a0 <wait_session_status>
 800c380:	b118      	cbz	r0, 800c38a <uxr_delete_session_retries+0x4a>
 800c382:	7960      	ldrb	r0, [r4, #5]
 800c384:	fab0 f080 	clz	r0, r0
 800c388:	0940      	lsrs	r0, r0, #5
 800c38a:	b00f      	add	sp, #60	@ 0x3c
 800c38c:	bd30      	pop	{r4, r5, pc}
 800c38e:	bf00      	nop

0800c390 <uxr_create_session>:
 800c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c394:	f100 0b08 	add.w	fp, r0, #8
 800c398:	b0ab      	sub	sp, #172	@ 0xac
 800c39a:	4604      	mov	r4, r0
 800c39c:	4658      	mov	r0, fp
 800c39e:	f000 fa99 	bl	800c8d4 <uxr_reset_stream_storage>
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f000 fa00 	bl	800c7a8 <uxr_session_header_offset>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	9000      	str	r0, [sp, #0]
 800c3ac:	221c      	movs	r2, #28
 800c3ae:	a90b      	add	r1, sp, #44	@ 0x2c
 800c3b0:	a812      	add	r0, sp, #72	@ 0x48
 800c3b2:	f7fc fc23 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 800c3b6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c3b8:	8a1a      	ldrh	r2, [r3, #16]
 800c3ba:	3a04      	subs	r2, #4
 800c3bc:	b292      	uxth	r2, r2
 800c3be:	a912      	add	r1, sp, #72	@ 0x48
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f000 f917 	bl	800c5f4 <uxr_buffer_create_session>
 800c3c6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f000 f983 	bl	800c6d4 <uxr_stamp_create_session_header>
 800c3ce:	a812      	add	r0, sp, #72	@ 0x48
 800c3d0:	f7fc fc52 	bl	8008c78 <ucdr_buffer_length>
 800c3d4:	23ff      	movs	r3, #255	@ 0xff
 800c3d6:	7163      	strb	r3, [r4, #5]
 800c3d8:	230a      	movs	r3, #10
 800c3da:	46da      	mov	sl, fp
 800c3dc:	9303      	str	r3, [sp, #12]
 800c3de:	4683      	mov	fp, r0
 800c3e0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c3e2:	465a      	mov	r2, fp
 800c3e4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c3e8:	a90b      	add	r1, sp, #44	@ 0x2c
 800c3ea:	47a8      	blx	r5
 800c3ec:	f000 fb92 	bl	800cb14 <uxr_millis>
 800c3f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	e009      	b.n	800c40c <uxr_create_session+0x7c>
 800c3f8:	f000 fb8c 	bl	800cb14 <uxr_millis>
 800c3fc:	1b40      	subs	r0, r0, r5
 800c3fe:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c402:	2b00      	cmp	r3, #0
 800c404:	7962      	ldrb	r2, [r4, #5]
 800c406:	dd38      	ble.n	800c47a <uxr_create_session+0xea>
 800c408:	2aff      	cmp	r2, #255	@ 0xff
 800c40a:	d13c      	bne.n	800c486 <uxr_create_session+0xf6>
 800c40c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800c40e:	a907      	add	r1, sp, #28
 800c410:	6896      	ldr	r6, [r2, #8]
 800c412:	6810      	ldr	r0, [r2, #0]
 800c414:	aa08      	add	r2, sp, #32
 800c416:	47b0      	blx	r6
 800c418:	2800      	cmp	r0, #0
 800c41a:	d0ed      	beq.n	800c3f8 <uxr_create_session+0x68>
 800c41c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c420:	a81a      	add	r0, sp, #104	@ 0x68
 800c422:	f7fc fbfd 	bl	8008c20 <ucdr_init_buffer>
 800c426:	2600      	movs	r6, #0
 800c428:	f10d 031a 	add.w	r3, sp, #26
 800c42c:	aa06      	add	r2, sp, #24
 800c42e:	a91a      	add	r1, sp, #104	@ 0x68
 800c430:	4620      	mov	r0, r4
 800c432:	f88d 6018 	strb.w	r6, [sp, #24]
 800c436:	f000 f975 	bl	800c724 <uxr_read_session_header>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d0dc      	beq.n	800c3f8 <uxr_create_session+0x68>
 800c43e:	4631      	mov	r1, r6
 800c440:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c444:	f000 fa12 	bl	800c86c <uxr_stream_id_from_raw>
 800c448:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c44c:	2e01      	cmp	r6, #1
 800c44e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800c452:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800c456:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800c45a:	d053      	beq.n	800c504 <uxr_create_session+0x174>
 800c45c:	2e02      	cmp	r6, #2
 800c45e:	d018      	beq.n	800c492 <uxr_create_session+0x102>
 800c460:	2e00      	cmp	r6, #0
 800c462:	d1c9      	bne.n	800c3f8 <uxr_create_session+0x68>
 800c464:	4631      	mov	r1, r6
 800c466:	4630      	mov	r0, r6
 800c468:	f000 fa00 	bl	800c86c <uxr_stream_id_from_raw>
 800c46c:	a91a      	add	r1, sp, #104	@ 0x68
 800c46e:	4602      	mov	r2, r0
 800c470:	900a      	str	r0, [sp, #40]	@ 0x28
 800c472:	4620      	mov	r0, r4
 800c474:	f7ff fb1a 	bl	800baac <read_submessage_list>
 800c478:	e7be      	b.n	800c3f8 <uxr_create_session+0x68>
 800c47a:	9b03      	ldr	r3, [sp, #12]
 800c47c:	3b01      	subs	r3, #1
 800c47e:	9303      	str	r3, [sp, #12]
 800c480:	d001      	beq.n	800c486 <uxr_create_session+0xf6>
 800c482:	2aff      	cmp	r2, #255	@ 0xff
 800c484:	d0ac      	beq.n	800c3e0 <uxr_create_session+0x50>
 800c486:	2a00      	cmp	r2, #0
 800c488:	d051      	beq.n	800c52e <uxr_create_session+0x19e>
 800c48a:	2000      	movs	r0, #0
 800c48c:	b02b      	add	sp, #172	@ 0xac
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800c496:	9304      	str	r3, [sp, #16]
 800c498:	4639      	mov	r1, r7
 800c49a:	4650      	mov	r0, sl
 800c49c:	f000 fad4 	bl	800ca48 <uxr_get_input_reliable_stream>
 800c4a0:	4680      	mov	r8, r0
 800c4a2:	b348      	cbz	r0, 800c4f8 <uxr_create_session+0x168>
 800c4a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c4a6:	9205      	str	r2, [sp, #20]
 800c4a8:	a81a      	add	r0, sp, #104	@ 0x68
 800c4aa:	f7fc fbe9 	bl	8008c80 <ucdr_buffer_remaining>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	f10d 0019 	add.w	r0, sp, #25
 800c4b4:	9000      	str	r0, [sp, #0]
 800c4b6:	9a05      	ldr	r2, [sp, #20]
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	4640      	mov	r0, r8
 800c4bc:	f006 fe4e 	bl	801315c <uxr_receive_reliable_message>
 800c4c0:	b1d0      	cbz	r0, 800c4f8 <uxr_create_session+0x168>
 800c4c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d038      	beq.n	800c53c <uxr_create_session+0x1ac>
 800c4ca:	9e04      	ldr	r6, [sp, #16]
 800c4cc:	e00a      	b.n	800c4e4 <uxr_create_session+0x154>
 800c4ce:	f04f 0302 	mov.w	r3, #2
 800c4d2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800c4d6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800c4da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4e0:	f7ff fae4 	bl	800baac <read_submessage_list>
 800c4e4:	a922      	add	r1, sp, #136	@ 0x88
 800c4e6:	2204      	movs	r2, #4
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	f006 feb7 	bl	801325c <uxr_next_input_reliable_buffer_available>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	a922      	add	r1, sp, #136	@ 0x88
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1ea      	bne.n	800c4ce <uxr_create_session+0x13e>
 800c4f8:	9904      	ldr	r1, [sp, #16]
 800c4fa:	463a      	mov	r2, r7
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	f7ff f951 	bl	800b7a4 <write_submessage_acknack.isra.0>
 800c502:	e779      	b.n	800c3f8 <uxr_create_session+0x68>
 800c504:	4639      	mov	r1, r7
 800c506:	4650      	mov	r0, sl
 800c508:	f000 fa94 	bl	800ca34 <uxr_get_input_best_effort_stream>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	f43f af73 	beq.w	800c3f8 <uxr_create_session+0x68>
 800c512:	4649      	mov	r1, r9
 800c514:	f006 fd8e 	bl	8013034 <uxr_receive_best_effort_message>
 800c518:	2800      	cmp	r0, #0
 800c51a:	f43f af6d 	beq.w	800c3f8 <uxr_create_session+0x68>
 800c51e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800c522:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c524:	a91a      	add	r1, sp, #104	@ 0x68
 800c526:	4620      	mov	r0, r4
 800c528:	f7ff fac0 	bl	800baac <read_submessage_list>
 800c52c:	e764      	b.n	800c3f8 <uxr_create_session+0x68>
 800c52e:	4650      	mov	r0, sl
 800c530:	f000 f9d0 	bl	800c8d4 <uxr_reset_stream_storage>
 800c534:	2001      	movs	r0, #1
 800c536:	b02b      	add	sp, #172	@ 0xac
 800c538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800c540:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c542:	a91a      	add	r1, sp, #104	@ 0x68
 800c544:	4620      	mov	r0, r4
 800c546:	f7ff fab1 	bl	800baac <read_submessage_list>
 800c54a:	e7be      	b.n	800c4ca <uxr_create_session+0x13a>

0800c54c <uxr_prepare_stream_to_write_submessage>:
 800c54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c550:	b082      	sub	sp, #8
 800c552:	4682      	mov	sl, r0
 800c554:	4610      	mov	r0, r2
 800c556:	4615      	mov	r5, r2
 800c558:	461e      	mov	r6, r3
 800c55a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800c55e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800c562:	9101      	str	r1, [sp, #4]
 800c564:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c568:	f000 face 	bl	800cb08 <uxr_submessage_padding>
 800c56c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c570:	f105 0904 	add.w	r9, r5, #4
 800c574:	2b01      	cmp	r3, #1
 800c576:	4481      	add	r9, r0
 800c578:	d01d      	beq.n	800c5b6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d116      	bne.n	800c5ac <uxr_prepare_stream_to_write_submessage+0x60>
 800c57e:	4621      	mov	r1, r4
 800c580:	f10a 0008 	add.w	r0, sl, #8
 800c584:	f000 fa4c 	bl	800ca20 <uxr_get_output_reliable_stream>
 800c588:	4604      	mov	r4, r0
 800c58a:	b158      	cbz	r0, 800c5a4 <uxr_prepare_stream_to_write_submessage+0x58>
 800c58c:	4649      	mov	r1, r9
 800c58e:	4632      	mov	r2, r6
 800c590:	f007 f820 	bl	80135d4 <uxr_prepare_reliable_buffer_to_write>
 800c594:	4604      	mov	r4, r0
 800c596:	b12c      	cbz	r4, 800c5a4 <uxr_prepare_stream_to_write_submessage+0x58>
 800c598:	4643      	mov	r3, r8
 800c59a:	b2aa      	uxth	r2, r5
 800c59c:	4639      	mov	r1, r7
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f000 fa72 	bl	800ca88 <uxr_buffer_submessage_header>
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	b002      	add	sp, #8
 800c5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ac:	2400      	movs	r4, #0
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	b002      	add	sp, #8
 800c5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	f10a 0008 	add.w	r0, sl, #8
 800c5bc:	f000 fa28 	bl	800ca10 <uxr_get_output_best_effort_stream>
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d0ee      	beq.n	800c5a4 <uxr_prepare_stream_to_write_submessage+0x58>
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	4632      	mov	r2, r6
 800c5ca:	f006 ff33 	bl	8013434 <uxr_prepare_best_effort_buffer_to_write>
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	e7e1      	b.n	800c596 <uxr_prepare_stream_to_write_submessage+0x4a>
 800c5d2:	bf00      	nop

0800c5d4 <uxr_init_session_info>:
 800c5d4:	0e13      	lsrs	r3, r2, #24
 800c5d6:	7043      	strb	r3, [r0, #1]
 800c5d8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800c5dc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c5e0:	7001      	strb	r1, [r0, #0]
 800c5e2:	70c3      	strb	r3, [r0, #3]
 800c5e4:	2109      	movs	r1, #9
 800c5e6:	23ff      	movs	r3, #255	@ 0xff
 800c5e8:	f880 c002 	strb.w	ip, [r0, #2]
 800c5ec:	7102      	strb	r2, [r0, #4]
 800c5ee:	80c1      	strh	r1, [r0, #6]
 800c5f0:	7143      	strb	r3, [r0, #5]
 800c5f2:	4770      	bx	lr

0800c5f4 <uxr_buffer_create_session>:
 800c5f4:	b530      	push	{r4, r5, lr}
 800c5f6:	b089      	sub	sp, #36	@ 0x24
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	4d12      	ldr	r5, [pc, #72]	@ (800c644 <uxr_buffer_create_session+0x50>)
 800c5fc:	9307      	str	r3, [sp, #28]
 800c5fe:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c602:	2201      	movs	r2, #1
 800c604:	9301      	str	r3, [sp, #4]
 800c606:	80c2      	strh	r2, [r0, #6]
 800c608:	f88d 2004 	strb.w	r2, [sp, #4]
 800c60c:	682a      	ldr	r2, [r5, #0]
 800c60e:	9200      	str	r2, [sp, #0]
 800c610:	88aa      	ldrh	r2, [r5, #4]
 800c612:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c616:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800c61a:	9202      	str	r2, [sp, #8]
 800c61c:	460c      	mov	r4, r1
 800c61e:	7802      	ldrb	r2, [r0, #0]
 800c620:	9303      	str	r3, [sp, #12]
 800c622:	4619      	mov	r1, r3
 800c624:	f88d 200c 	strb.w	r2, [sp, #12]
 800c628:	4620      	mov	r0, r4
 800c62a:	2210      	movs	r2, #16
 800c62c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c630:	9306      	str	r3, [sp, #24]
 800c632:	f000 fa29 	bl	800ca88 <uxr_buffer_submessage_header>
 800c636:	4669      	mov	r1, sp
 800c638:	4620      	mov	r0, r4
 800c63a:	f001 fa6d 	bl	800db18 <uxr_serialize_CREATE_CLIENT_Payload>
 800c63e:	b009      	add	sp, #36	@ 0x24
 800c640:	bd30      	pop	{r4, r5, pc}
 800c642:	bf00      	nop
 800c644:	08016954 	.word	0x08016954

0800c648 <uxr_buffer_delete_session>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	4b0c      	ldr	r3, [pc, #48]	@ (800c67c <uxr_buffer_delete_session+0x34>)
 800c64c:	b082      	sub	sp, #8
 800c64e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800c652:	f8ad c006 	strh.w	ip, [sp, #6]
 800c656:	460c      	mov	r4, r1
 800c658:	2202      	movs	r2, #2
 800c65a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c65e:	80c2      	strh	r2, [r0, #6]
 800c660:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c664:	2204      	movs	r2, #4
 800c666:	2300      	movs	r3, #0
 800c668:	2103      	movs	r1, #3
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 fa0c 	bl	800ca88 <uxr_buffer_submessage_header>
 800c670:	a901      	add	r1, sp, #4
 800c672:	4620      	mov	r0, r4
 800c674:	f001 faf6 	bl	800dc64 <uxr_serialize_DELETE_Payload>
 800c678:	b002      	add	sp, #8
 800c67a:	bd10      	pop	{r4, pc}
 800c67c:	08016954 	.word	0x08016954

0800c680 <uxr_read_create_session_status>:
 800c680:	b510      	push	{r4, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	4604      	mov	r4, r0
 800c686:	4608      	mov	r0, r1
 800c688:	a901      	add	r1, sp, #4
 800c68a:	f001 fafb 	bl	800dc84 <uxr_deserialize_STATUS_AGENT_Payload>
 800c68e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c692:	7163      	strb	r3, [r4, #5]
 800c694:	b008      	add	sp, #32
 800c696:	bd10      	pop	{r4, pc}

0800c698 <uxr_read_delete_session_status>:
 800c698:	b510      	push	{r4, lr}
 800c69a:	4604      	mov	r4, r0
 800c69c:	b084      	sub	sp, #16
 800c69e:	4608      	mov	r0, r1
 800c6a0:	a902      	add	r1, sp, #8
 800c6a2:	f001 fb1f 	bl	800dce4 <uxr_deserialize_STATUS_Payload>
 800c6a6:	88e3      	ldrh	r3, [r4, #6]
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d001      	beq.n	800c6b0 <uxr_read_delete_session_status+0x18>
 800c6ac:	b004      	add	sp, #16
 800c6ae:	bd10      	pop	{r4, pc}
 800c6b0:	f10d 000a 	add.w	r0, sp, #10
 800c6b4:	f7fe fffc 	bl	800b6b0 <uxr_object_id_from_raw>
 800c6b8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c6bc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c6c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	bf04      	itt	eq
 800c6ca:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800c6ce:	7163      	strbeq	r3, [r4, #5]
 800c6d0:	b004      	add	sp, #16
 800c6d2:	bd10      	pop	{r4, pc}

0800c6d4 <uxr_stamp_create_session_header>:
 800c6d4:	b510      	push	{r4, lr}
 800c6d6:	2208      	movs	r2, #8
 800c6d8:	b08a      	sub	sp, #40	@ 0x28
 800c6da:	4604      	mov	r4, r0
 800c6dc:	eb0d 0002 	add.w	r0, sp, r2
 800c6e0:	f7fc fa9e 	bl	8008c20 <ucdr_init_buffer>
 800c6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e8:	9400      	str	r4, [sp, #0]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800c6f2:	a802      	add	r0, sp, #8
 800c6f4:	f000 fbc2 	bl	800ce7c <uxr_serialize_message_header>
 800c6f8:	b00a      	add	sp, #40	@ 0x28
 800c6fa:	bd10      	pop	{r4, pc}

0800c6fc <uxr_stamp_session_header>:
 800c6fc:	b530      	push	{r4, r5, lr}
 800c6fe:	b08d      	sub	sp, #52	@ 0x34
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	9203      	str	r2, [sp, #12]
 800c706:	4619      	mov	r1, r3
 800c708:	a804      	add	r0, sp, #16
 800c70a:	2208      	movs	r2, #8
 800c70c:	f7fc fa88 	bl	8008c20 <ucdr_init_buffer>
 800c710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c714:	9b03      	ldr	r3, [sp, #12]
 800c716:	9400      	str	r4, [sp, #0]
 800c718:	462a      	mov	r2, r5
 800c71a:	a804      	add	r0, sp, #16
 800c71c:	f000 fbae 	bl	800ce7c <uxr_serialize_message_header>
 800c720:	b00d      	add	sp, #52	@ 0x34
 800c722:	bd30      	pop	{r4, r5, pc}

0800c724 <uxr_read_session_header>:
 800c724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c728:	4607      	mov	r7, r0
 800c72a:	b084      	sub	sp, #16
 800c72c:	4608      	mov	r0, r1
 800c72e:	460c      	mov	r4, r1
 800c730:	4615      	mov	r5, r2
 800c732:	461e      	mov	r6, r3
 800c734:	f7fc faa4 	bl	8008c80 <ucdr_buffer_remaining>
 800c738:	2808      	cmp	r0, #8
 800c73a:	d803      	bhi.n	800c744 <uxr_read_session_header+0x20>
 800c73c:	2000      	movs	r0, #0
 800c73e:	b004      	add	sp, #16
 800c740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c744:	f10d 080c 	add.w	r8, sp, #12
 800c748:	4633      	mov	r3, r6
 800c74a:	462a      	mov	r2, r5
 800c74c:	f8cd 8000 	str.w	r8, [sp]
 800c750:	4620      	mov	r0, r4
 800c752:	f10d 010b 	add.w	r1, sp, #11
 800c756:	f000 fbaf 	bl	800ceb8 <uxr_deserialize_message_header>
 800c75a:	783a      	ldrb	r2, [r7, #0]
 800c75c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800c760:	4293      	cmp	r3, r2
 800c762:	d1eb      	bne.n	800c73c <uxr_read_session_header+0x18>
 800c764:	061b      	lsls	r3, r3, #24
 800c766:	d41c      	bmi.n	800c7a2 <uxr_read_session_header+0x7e>
 800c768:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c76c:	787b      	ldrb	r3, [r7, #1]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d003      	beq.n	800c77a <uxr_read_session_header+0x56>
 800c772:	2001      	movs	r0, #1
 800c774:	f080 0001 	eor.w	r0, r0, #1
 800c778:	e7e1      	b.n	800c73e <uxr_read_session_header+0x1a>
 800c77a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800c77e:	78bb      	ldrb	r3, [r7, #2]
 800c780:	429a      	cmp	r2, r3
 800c782:	f107 0102 	add.w	r1, r7, #2
 800c786:	d1f4      	bne.n	800c772 <uxr_read_session_header+0x4e>
 800c788:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800c78c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c790:	429a      	cmp	r2, r3
 800c792:	d1ee      	bne.n	800c772 <uxr_read_session_header+0x4e>
 800c794:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c798:	784b      	ldrb	r3, [r1, #1]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d1e9      	bne.n	800c772 <uxr_read_session_header+0x4e>
 800c79e:	2000      	movs	r0, #0
 800c7a0:	e7e8      	b.n	800c774 <uxr_read_session_header+0x50>
 800c7a2:	2001      	movs	r0, #1
 800c7a4:	e7cb      	b.n	800c73e <uxr_read_session_header+0x1a>
 800c7a6:	bf00      	nop

0800c7a8 <uxr_session_header_offset>:
 800c7a8:	f990 3000 	ldrsb.w	r3, [r0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bfac      	ite	ge
 800c7b0:	2008      	movge	r0, #8
 800c7b2:	2004      	movlt	r0, #4
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop

0800c7b8 <uxr_init_base_object_request>:
 800c7b8:	b510      	push	{r4, lr}
 800c7ba:	88c3      	ldrh	r3, [r0, #6]
 800c7bc:	b082      	sub	sp, #8
 800c7be:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800c7c2:	9101      	str	r1, [sp, #4]
 800c7c4:	f1a3 010a 	sub.w	r1, r3, #10
 800c7c8:	b289      	uxth	r1, r1
 800c7ca:	42a1      	cmp	r1, r4
 800c7cc:	d80e      	bhi.n	800c7ec <uxr_init_base_object_request+0x34>
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	b29c      	uxth	r4, r3
 800c7d2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	80c4      	strh	r4, [r0, #6]
 800c7da:	9801      	ldr	r0, [sp, #4]
 800c7dc:	7011      	strb	r1, [r2, #0]
 800c7de:	7053      	strb	r3, [r2, #1]
 800c7e0:	1c91      	adds	r1, r2, #2
 800c7e2:	f7fe ff79 	bl	800b6d8 <uxr_object_id_to_raw>
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	b002      	add	sp, #8
 800c7ea:	bd10      	pop	{r4, pc}
 800c7ec:	230a      	movs	r3, #10
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	461c      	mov	r4, r3
 800c7f2:	e7f1      	b.n	800c7d8 <uxr_init_base_object_request+0x20>

0800c7f4 <uxr_parse_base_object_request>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	3002      	adds	r0, #2
 800c7fa:	460d      	mov	r5, r1
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	f7fe ff57 	bl	800b6b0 <uxr_object_id_from_raw>
 800c802:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800c806:	8028      	strh	r0, [r5, #0]
 800c808:	806b      	strh	r3, [r5, #2]
 800c80a:	7822      	ldrb	r2, [r4, #0]
 800c80c:	7863      	ldrb	r3, [r4, #1]
 800c80e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c812:	8033      	strh	r3, [r6, #0]
 800c814:	bd70      	pop	{r4, r5, r6, pc}
 800c816:	bf00      	nop

0800c818 <uxr_stream_id>:
 800c818:	2901      	cmp	r1, #1
 800c81a:	b082      	sub	sp, #8
 800c81c:	d01d      	beq.n	800c85a <uxr_stream_id+0x42>
 800c81e:	2902      	cmp	r1, #2
 800c820:	f04f 0c00 	mov.w	ip, #0
 800c824:	d01e      	beq.n	800c864 <uxr_stream_id+0x4c>
 800c826:	2300      	movs	r3, #0
 800c828:	f36c 0307 	bfi	r3, ip, #0, #8
 800c82c:	f360 230f 	bfi	r3, r0, #8, #8
 800c830:	f361 4317 	bfi	r3, r1, #16, #8
 800c834:	f362 631f 	bfi	r3, r2, #24, #8
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	2000      	movs	r0, #0
 800c83c:	f362 0007 	bfi	r0, r2, #0, #8
 800c840:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c844:	f362 200f 	bfi	r0, r2, #8, #8
 800c848:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c84c:	f362 4017 	bfi	r0, r2, #16, #8
 800c850:	0e1b      	lsrs	r3, r3, #24
 800c852:	f363 601f 	bfi	r0, r3, #24, #8
 800c856:	b002      	add	sp, #8
 800c858:	4770      	bx	lr
 800c85a:	f100 0c01 	add.w	ip, r0, #1
 800c85e:	fa5f fc8c 	uxtb.w	ip, ip
 800c862:	e7e0      	b.n	800c826 <uxr_stream_id+0xe>
 800c864:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800c868:	e7dd      	b.n	800c826 <uxr_stream_id+0xe>
 800c86a:	bf00      	nop

0800c86c <uxr_stream_id_from_raw>:
 800c86c:	b082      	sub	sp, #8
 800c86e:	b130      	cbz	r0, 800c87e <uxr_stream_id_from_raw+0x12>
 800c870:	0603      	lsls	r3, r0, #24
 800c872:	d420      	bmi.n	800c8b6 <uxr_stream_id_from_raw+0x4a>
 800c874:	1e42      	subs	r2, r0, #1
 800c876:	b2d2      	uxtb	r2, r2
 800c878:	f04f 0c01 	mov.w	ip, #1
 800c87c:	e001      	b.n	800c882 <uxr_stream_id_from_raw+0x16>
 800c87e:	4684      	mov	ip, r0
 800c880:	4602      	mov	r2, r0
 800c882:	2300      	movs	r3, #0
 800c884:	f360 0307 	bfi	r3, r0, #0, #8
 800c888:	f362 230f 	bfi	r3, r2, #8, #8
 800c88c:	f36c 4317 	bfi	r3, ip, #16, #8
 800c890:	f361 631f 	bfi	r3, r1, #24, #8
 800c894:	b2da      	uxtb	r2, r3
 800c896:	2000      	movs	r0, #0
 800c898:	f362 0007 	bfi	r0, r2, #0, #8
 800c89c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c8a0:	f362 200f 	bfi	r0, r2, #8, #8
 800c8a4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c8a8:	f362 4017 	bfi	r0, r2, #16, #8
 800c8ac:	0e1b      	lsrs	r3, r3, #24
 800c8ae:	f363 601f 	bfi	r0, r3, #24, #8
 800c8b2:	b002      	add	sp, #8
 800c8b4:	4770      	bx	lr
 800c8b6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800c8ba:	f04f 0c02 	mov.w	ip, #2
 800c8be:	e7e0      	b.n	800c882 <uxr_stream_id_from_raw+0x16>

0800c8c0 <uxr_init_stream_storage>:
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	7403      	strb	r3, [r0, #16]
 800c8c4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800c8c8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800c8cc:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop

0800c8d4 <uxr_reset_stream_storage>:
 800c8d4:	b570      	push	{r4, r5, r6, lr}
 800c8d6:	7c03      	ldrb	r3, [r0, #16]
 800c8d8:	4604      	mov	r4, r0
 800c8da:	b153      	cbz	r3, 800c8f2 <uxr_reset_stream_storage+0x1e>
 800c8dc:	4606      	mov	r6, r0
 800c8de:	2500      	movs	r5, #0
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	f006 fda1 	bl	8013428 <uxr_reset_output_best_effort_stream>
 800c8e6:	7c23      	ldrb	r3, [r4, #16]
 800c8e8:	3501      	adds	r5, #1
 800c8ea:	42ab      	cmp	r3, r5
 800c8ec:	f106 0610 	add.w	r6, r6, #16
 800c8f0:	d8f6      	bhi.n	800c8e0 <uxr_reset_stream_storage+0xc>
 800c8f2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c8f6:	b163      	cbz	r3, 800c912 <uxr_reset_stream_storage+0x3e>
 800c8f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8fc:	2500      	movs	r5, #0
 800c8fe:	4630      	mov	r0, r6
 800c900:	f006 fb94 	bl	801302c <uxr_reset_input_best_effort_stream>
 800c904:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c908:	3501      	adds	r5, #1
 800c90a:	42ab      	cmp	r3, r5
 800c90c:	f106 0602 	add.w	r6, r6, #2
 800c910:	d8f5      	bhi.n	800c8fe <uxr_reset_stream_storage+0x2a>
 800c912:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800c916:	b163      	cbz	r3, 800c932 <uxr_reset_stream_storage+0x5e>
 800c918:	f104 0618 	add.w	r6, r4, #24
 800c91c:	2500      	movs	r5, #0
 800c91e:	4630      	mov	r0, r6
 800c920:	f006 fe2e 	bl	8013580 <uxr_reset_output_reliable_stream>
 800c924:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800c928:	3501      	adds	r5, #1
 800c92a:	42ab      	cmp	r3, r5
 800c92c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800c930:	d8f5      	bhi.n	800c91e <uxr_reset_stream_storage+0x4a>
 800c932:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800c936:	b163      	cbz	r3, 800c952 <uxr_reset_stream_storage+0x7e>
 800c938:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800c93c:	2500      	movs	r5, #0
 800c93e:	4630      	mov	r0, r6
 800c940:	f006 fbe8 	bl	8013114 <uxr_reset_input_reliable_stream>
 800c944:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800c948:	3501      	adds	r5, #1
 800c94a:	42ab      	cmp	r3, r5
 800c94c:	f106 0618 	add.w	r6, r6, #24
 800c950:	d8f5      	bhi.n	800c93e <uxr_reset_stream_storage+0x6a>
 800c952:	bd70      	pop	{r4, r5, r6, pc}

0800c954 <uxr_add_output_best_effort_buffer>:
 800c954:	b510      	push	{r4, lr}
 800c956:	7c04      	ldrb	r4, [r0, #16]
 800c958:	f104 0c01 	add.w	ip, r4, #1
 800c95c:	b082      	sub	sp, #8
 800c95e:	f880 c010 	strb.w	ip, [r0, #16]
 800c962:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800c966:	f006 fd55 	bl	8013414 <uxr_init_output_best_effort_stream>
 800c96a:	2201      	movs	r2, #1
 800c96c:	4611      	mov	r1, r2
 800c96e:	4620      	mov	r0, r4
 800c970:	b002      	add	sp, #8
 800c972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c976:	f7ff bf4f 	b.w	800c818 <uxr_stream_id>
 800c97a:	bf00      	nop

0800c97c <uxr_add_output_reliable_buffer>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	4684      	mov	ip, r0
 800c982:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c986:	9000      	str	r0, [sp, #0]
 800c988:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800c98c:	2028      	movs	r0, #40	@ 0x28
 800c98e:	fb00 c004 	mla	r0, r0, r4, ip
 800c992:	f104 0e01 	add.w	lr, r4, #1
 800c996:	3018      	adds	r0, #24
 800c998:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800c99c:	f006 fdb8 	bl	8013510 <uxr_init_output_reliable_stream>
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	2102      	movs	r1, #2
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	b004      	add	sp, #16
 800c9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9ac:	f7ff bf34 	b.w	800c818 <uxr_stream_id>

0800c9b0 <uxr_add_input_best_effort_buffer>:
 800c9b0:	b510      	push	{r4, lr}
 800c9b2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	1c62      	adds	r2, r4, #1
 800c9ba:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800c9be:	b082      	sub	sp, #8
 800c9c0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c9c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c9c8:	f006 fb2c 	bl	8013024 <uxr_init_input_best_effort_stream>
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	b002      	add	sp, #8
 800c9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9d8:	f7ff bf1e 	b.w	800c818 <uxr_stream_id>

0800c9dc <uxr_add_input_reliable_buffer>:
 800c9dc:	b510      	push	{r4, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	4684      	mov	ip, r0
 800c9e2:	9806      	ldr	r0, [sp, #24]
 800c9e4:	9000      	str	r0, [sp, #0]
 800c9e6:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800c9ea:	2018      	movs	r0, #24
 800c9ec:	fb00 c004 	mla	r0, r0, r4, ip
 800c9f0:	f104 0e01 	add.w	lr, r4, #1
 800c9f4:	3048      	adds	r0, #72	@ 0x48
 800c9f6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800c9fa:	f006 fb5f 	bl	80130bc <uxr_init_input_reliable_stream>
 800c9fe:	2200      	movs	r2, #0
 800ca00:	2102      	movs	r1, #2
 800ca02:	4620      	mov	r0, r4
 800ca04:	b004      	add	sp, #16
 800ca06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca0a:	f7ff bf05 	b.w	800c818 <uxr_stream_id>
 800ca0e:	bf00      	nop

0800ca10 <uxr_get_output_best_effort_stream>:
 800ca10:	7c03      	ldrb	r3, [r0, #16]
 800ca12:	428b      	cmp	r3, r1
 800ca14:	bf8c      	ite	hi
 800ca16:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ca1a:	2000      	movls	r0, #0
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop

0800ca20 <uxr_get_output_reliable_stream>:
 800ca20:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ca24:	428b      	cmp	r3, r1
 800ca26:	bf83      	ittte	hi
 800ca28:	2328      	movhi	r3, #40	@ 0x28
 800ca2a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ca2e:	3018      	addhi	r0, #24
 800ca30:	2000      	movls	r0, #0
 800ca32:	4770      	bx	lr

0800ca34 <uxr_get_input_best_effort_stream>:
 800ca34:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ca38:	428b      	cmp	r3, r1
 800ca3a:	bf86      	itte	hi
 800ca3c:	3121      	addhi	r1, #33	@ 0x21
 800ca3e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ca42:	2000      	movls	r0, #0
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop

0800ca48 <uxr_get_input_reliable_stream>:
 800ca48:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ca4c:	428b      	cmp	r3, r1
 800ca4e:	bf83      	ittte	hi
 800ca50:	2318      	movhi	r3, #24
 800ca52:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ca56:	3048      	addhi	r0, #72	@ 0x48
 800ca58:	2000      	movls	r0, #0
 800ca5a:	4770      	bx	lr

0800ca5c <uxr_output_streams_confirmed>:
 800ca5c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ca60:	b183      	cbz	r3, 800ca84 <uxr_output_streams_confirmed+0x28>
 800ca62:	b570      	push	{r4, r5, r6, lr}
 800ca64:	4606      	mov	r6, r0
 800ca66:	f100 0518 	add.w	r5, r0, #24
 800ca6a:	2400      	movs	r4, #0
 800ca6c:	e001      	b.n	800ca72 <uxr_output_streams_confirmed+0x16>
 800ca6e:	3528      	adds	r5, #40	@ 0x28
 800ca70:	b138      	cbz	r0, 800ca82 <uxr_output_streams_confirmed+0x26>
 800ca72:	4628      	mov	r0, r5
 800ca74:	f006 fff4 	bl	8013a60 <uxr_is_output_up_to_date>
 800ca78:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800ca7c:	3401      	adds	r4, #1
 800ca7e:	42a3      	cmp	r3, r4
 800ca80:	d8f5      	bhi.n	800ca6e <uxr_output_streams_confirmed+0x12>
 800ca82:	bd70      	pop	{r4, r5, r6, pc}
 800ca84:	2001      	movs	r0, #1
 800ca86:	4770      	bx	lr

0800ca88 <uxr_buffer_submessage_header>:
 800ca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	460e      	mov	r6, r1
 800ca8e:	2104      	movs	r1, #4
 800ca90:	4615      	mov	r5, r2
 800ca92:	461f      	mov	r7, r3
 800ca94:	f7fc f8de 	bl	8008c54 <ucdr_align_to>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	ea47 0203 	orr.w	r2, r7, r3
 800ca9e:	4631      	mov	r1, r6
 800caa0:	7523      	strb	r3, [r4, #20]
 800caa2:	4620      	mov	r0, r4
 800caa4:	462b      	mov	r3, r5
 800caa6:	f000 fa27 	bl	800cef8 <uxr_serialize_submessage_header>
 800caaa:	4620      	mov	r0, r4
 800caac:	f7fc f8e8 	bl	8008c80 <ucdr_buffer_remaining>
 800cab0:	42a8      	cmp	r0, r5
 800cab2:	bf34      	ite	cc
 800cab4:	2000      	movcc	r0, #0
 800cab6:	2001      	movcs	r0, #1
 800cab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caba:	bf00      	nop

0800cabc <uxr_read_submessage_header>:
 800cabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac0:	4604      	mov	r4, r0
 800cac2:	460d      	mov	r5, r1
 800cac4:	2104      	movs	r1, #4
 800cac6:	4616      	mov	r6, r2
 800cac8:	4698      	mov	r8, r3
 800caca:	f7fc f8c3 	bl	8008c54 <ucdr_align_to>
 800cace:	4620      	mov	r0, r4
 800cad0:	f7fc f8d6 	bl	8008c80 <ucdr_buffer_remaining>
 800cad4:	2803      	cmp	r0, #3
 800cad6:	bf8c      	ite	hi
 800cad8:	2701      	movhi	r7, #1
 800cada:	2700      	movls	r7, #0
 800cadc:	d802      	bhi.n	800cae4 <uxr_read_submessage_header+0x28>
 800cade:	4638      	mov	r0, r7
 800cae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae4:	4633      	mov	r3, r6
 800cae6:	4642      	mov	r2, r8
 800cae8:	4620      	mov	r0, r4
 800caea:	4629      	mov	r1, r5
 800caec:	f000 fa18 	bl	800cf20 <uxr_deserialize_submessage_header>
 800caf0:	f898 3000 	ldrb.w	r3, [r8]
 800caf4:	f003 0201 	and.w	r2, r3, #1
 800caf8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800cafc:	f888 3000 	strb.w	r3, [r8]
 800cb00:	7522      	strb	r2, [r4, #20]
 800cb02:	4638      	mov	r0, r7
 800cb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb08 <uxr_submessage_padding>:
 800cb08:	f010 0003 	ands.w	r0, r0, #3
 800cb0c:	bf18      	it	ne
 800cb0e:	f1c0 0004 	rsbne	r0, r0, #4
 800cb12:	4770      	bx	lr

0800cb14 <uxr_millis>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	4669      	mov	r1, sp
 800cb1a:	2001      	movs	r0, #1
 800cb1c:	f7f4 fc48 	bl	80013b0 <clock_gettime>
 800cb20:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800cb24:	4906      	ldr	r1, [pc, #24]	@ (800cb40 <uxr_millis+0x2c>)
 800cb26:	fba0 0301 	umull	r0, r3, r0, r1
 800cb2a:	1900      	adds	r0, r0, r4
 800cb2c:	fb01 3102 	mla	r1, r1, r2, r3
 800cb30:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800cb34:	4a03      	ldr	r2, [pc, #12]	@ (800cb44 <uxr_millis+0x30>)
 800cb36:	2300      	movs	r3, #0
 800cb38:	f7f3 fbba 	bl	80002b0 <__aeabi_ldivmod>
 800cb3c:	b004      	add	sp, #16
 800cb3e:	bd10      	pop	{r4, pc}
 800cb40:	3b9aca00 	.word	0x3b9aca00
 800cb44:	000f4240 	.word	0x000f4240

0800cb48 <uxr_nanos>:
 800cb48:	b510      	push	{r4, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	4669      	mov	r1, sp
 800cb4e:	2001      	movs	r0, #1
 800cb50:	f7f4 fc2e 	bl	80013b0 <clock_gettime>
 800cb54:	4a06      	ldr	r2, [pc, #24]	@ (800cb70 <uxr_nanos+0x28>)
 800cb56:	9800      	ldr	r0, [sp, #0]
 800cb58:	9902      	ldr	r1, [sp, #8]
 800cb5a:	9c01      	ldr	r4, [sp, #4]
 800cb5c:	fba0 0302 	umull	r0, r3, r0, r2
 800cb60:	1840      	adds	r0, r0, r1
 800cb62:	fb02 3304 	mla	r3, r2, r4, r3
 800cb66:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800cb6a:	b004      	add	sp, #16
 800cb6c:	bd10      	pop	{r4, pc}
 800cb6e:	bf00      	nop
 800cb70:	3b9aca00 	.word	0x3b9aca00

0800cb74 <on_full_output_buffer_fragmented>:
 800cb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb78:	460c      	mov	r4, r1
 800cb7a:	b08a      	sub	sp, #40	@ 0x28
 800cb7c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800cb80:	4606      	mov	r6, r0
 800cb82:	f104 0008 	add.w	r0, r4, #8
 800cb86:	f7ff ff4b 	bl	800ca20 <uxr_get_output_reliable_stream>
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	f006 ff72 	bl	8013a74 <get_available_free_slots>
 800cb90:	b968      	cbnz	r0, 800cbae <on_full_output_buffer_fragmented+0x3a>
 800cb92:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800cb96:	4620      	mov	r0, r4
 800cb98:	4798      	blx	r3
 800cb9a:	b918      	cbnz	r0, 800cba4 <on_full_output_buffer_fragmented+0x30>
 800cb9c:	2001      	movs	r0, #1
 800cb9e:	b00a      	add	sp, #40	@ 0x28
 800cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba4:	4628      	mov	r0, r5
 800cba6:	f006 ff65 	bl	8013a74 <get_available_free_slots>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d0f6      	beq.n	800cb9c <on_full_output_buffer_fragmented+0x28>
 800cbae:	8929      	ldrh	r1, [r5, #8]
 800cbb0:	89eb      	ldrh	r3, [r5, #14]
 800cbb2:	7b28      	ldrb	r0, [r5, #12]
 800cbb4:	686a      	ldr	r2, [r5, #4]
 800cbb6:	fbb2 f8f1 	udiv	r8, r2, r1
 800cbba:	fbb3 f2f1 	udiv	r2, r3, r1
 800cbbe:	fb01 3112 	mls	r1, r1, r2, r3
 800cbc2:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800cbc6:	b289      	uxth	r1, r1
 800cbc8:	fb08 f101 	mul.w	r1, r8, r1
 800cbcc:	30fc      	adds	r0, #252	@ 0xfc
 800cbce:	f1a8 0804 	sub.w	r8, r8, #4
 800cbd2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800cbd6:	4440      	add	r0, r8
 800cbd8:	b287      	uxth	r7, r0
 800cbda:	1bdb      	subs	r3, r3, r7
 800cbdc:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	3104      	adds	r1, #4
 800cbe4:	4419      	add	r1, r3
 800cbe6:	4642      	mov	r2, r8
 800cbe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	a802      	add	r0, sp, #8
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f7fc f803 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 800cbf6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800cbfa:	f102 0308 	add.w	r3, r2, #8
 800cbfe:	4543      	cmp	r3, r8
 800cc00:	d928      	bls.n	800cc54 <on_full_output_buffer_fragmented+0xe0>
 800cc02:	463a      	mov	r2, r7
 800cc04:	2300      	movs	r3, #0
 800cc06:	210d      	movs	r1, #13
 800cc08:	a802      	add	r0, sp, #8
 800cc0a:	f7ff ff3d 	bl	800ca88 <uxr_buffer_submessage_header>
 800cc0e:	8929      	ldrh	r1, [r5, #8]
 800cc10:	89eb      	ldrh	r3, [r5, #14]
 800cc12:	fbb3 f2f1 	udiv	r2, r3, r1
 800cc16:	fb01 3312 	mls	r3, r1, r2, r3
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	686a      	ldr	r2, [r5, #4]
 800cc1e:	fbb2 f2f1 	udiv	r2, r2, r1
 800cc22:	fb02 f303 	mul.w	r3, r2, r3
 800cc26:	682a      	ldr	r2, [r5, #0]
 800cc28:	f842 8003 	str.w	r8, [r2, r3]
 800cc2c:	89e8      	ldrh	r0, [r5, #14]
 800cc2e:	2101      	movs	r1, #1
 800cc30:	f007 f870 	bl	8013d14 <uxr_seq_num_add>
 800cc34:	9904      	ldr	r1, [sp, #16]
 800cc36:	9a03      	ldr	r2, [sp, #12]
 800cc38:	81e8      	strh	r0, [r5, #14]
 800cc3a:	1a52      	subs	r2, r2, r1
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f7fb ffef 	bl	8008c20 <ucdr_init_buffer>
 800cc42:	4630      	mov	r0, r6
 800cc44:	490f      	ldr	r1, [pc, #60]	@ (800cc84 <on_full_output_buffer_fragmented+0x110>)
 800cc46:	4622      	mov	r2, r4
 800cc48:	f7fb ffbe 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	b00a      	add	sp, #40	@ 0x28
 800cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc54:	b292      	uxth	r2, r2
 800cc56:	2302      	movs	r3, #2
 800cc58:	210d      	movs	r1, #13
 800cc5a:	a802      	add	r0, sp, #8
 800cc5c:	f7ff ff14 	bl	800ca88 <uxr_buffer_submessage_header>
 800cc60:	8928      	ldrh	r0, [r5, #8]
 800cc62:	89eb      	ldrh	r3, [r5, #14]
 800cc64:	fbb3 f1f0 	udiv	r1, r3, r0
 800cc68:	fb00 3311 	mls	r3, r0, r1, r3
 800cc6c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800cc70:	6869      	ldr	r1, [r5, #4]
 800cc72:	fbb1 f1f0 	udiv	r1, r1, r0
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	fb01 f303 	mul.w	r3, r1, r3
 800cc7c:	6829      	ldr	r1, [r5, #0]
 800cc7e:	3208      	adds	r2, #8
 800cc80:	50ca      	str	r2, [r1, r3]
 800cc82:	e7d3      	b.n	800cc2c <on_full_output_buffer_fragmented+0xb8>
 800cc84:	0800cb75 	.word	0x0800cb75

0800cc88 <uxr_prepare_output_stream>:
 800cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc8a:	b087      	sub	sp, #28
 800cc8c:	2707      	movs	r7, #7
 800cc8e:	9202      	str	r2, [sp, #8]
 800cc90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cc92:	9103      	str	r1, [sp, #12]
 800cc94:	2500      	movs	r5, #0
 800cc96:	3204      	adds	r2, #4
 800cc98:	e9cd 7500 	strd	r7, r5, [sp]
 800cc9c:	461c      	mov	r4, r3
 800cc9e:	4606      	mov	r6, r0
 800cca0:	f7ff fc54 	bl	800c54c <uxr_prepare_stream_to_write_submessage>
 800cca4:	f080 0201 	eor.w	r2, r0, #1
 800cca8:	b2d2      	uxtb	r2, r2
 800ccaa:	75a2      	strb	r2, [r4, #22]
 800ccac:	b112      	cbz	r2, 800ccb4 <uxr_prepare_output_stream+0x2c>
 800ccae:	4628      	mov	r0, r5
 800ccb0:	b007      	add	sp, #28
 800ccb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb4:	aa05      	add	r2, sp, #20
 800ccb6:	9902      	ldr	r1, [sp, #8]
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f7ff fd7d 	bl	800c7b8 <uxr_init_base_object_request>
 800ccbe:	a905      	add	r1, sp, #20
 800ccc0:	4605      	mov	r5, r0
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f001 f88c 	bl	800dde0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ccc8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800cccc:	69a6      	ldr	r6, [r4, #24]
 800ccce:	69e7      	ldr	r7, [r4, #28]
 800ccd0:	1a52      	subs	r2, r2, r1
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f7fb ffa4 	bl	8008c20 <ucdr_init_buffer>
 800ccd8:	4620      	mov	r0, r4
 800ccda:	463a      	mov	r2, r7
 800ccdc:	4631      	mov	r1, r6
 800ccde:	f7fb ff73 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 800cce2:	4628      	mov	r0, r5
 800cce4:	b007      	add	sp, #28
 800cce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cce8 <uxr_prepare_output_stream_fragmented>:
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	b091      	sub	sp, #68	@ 0x44
 800ccee:	4605      	mov	r5, r0
 800ccf0:	9105      	str	r1, [sp, #20]
 800ccf2:	3008      	adds	r0, #8
 800ccf4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800ccf8:	461e      	mov	r6, r3
 800ccfa:	9204      	str	r2, [sp, #16]
 800ccfc:	f7ff fe90 	bl	800ca20 <uxr_get_output_reliable_stream>
 800cd00:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	f000 8091 	beq.w	800ce2c <uxr_prepare_output_stream_fragmented+0x144>
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	f000 808d 	beq.w	800ce2c <uxr_prepare_output_stream_fragmented+0x144>
 800cd12:	f006 feaf 	bl	8013a74 <get_available_free_slots>
 800cd16:	2800      	cmp	r0, #0
 800cd18:	f000 8083 	beq.w	800ce22 <uxr_prepare_output_stream_fragmented+0x13a>
 800cd1c:	8922      	ldrh	r2, [r4, #8]
 800cd1e:	89e7      	ldrh	r7, [r4, #14]
 800cd20:	fbb7 f9f2 	udiv	r9, r7, r2
 800cd24:	fb02 7919 	mls	r9, r2, r9, r7
 800cd28:	fa1f f989 	uxth.w	r9, r9
 800cd2c:	6863      	ldr	r3, [r4, #4]
 800cd2e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	9203      	str	r2, [sp, #12]
 800cd36:	fb02 f909 	mul.w	r9, r2, r9
 800cd3a:	f109 0904 	add.w	r9, r9, #4
 800cd3e:	4499      	add	r9, r3
 800cd40:	7b23      	ldrb	r3, [r4, #12]
 800cd42:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800cd46:	4543      	cmp	r3, r8
 800cd48:	f1a2 0b04 	sub.w	fp, r2, #4
 800cd4c:	d37a      	bcc.n	800ce44 <uxr_prepare_output_stream_fragmented+0x15c>
 800cd4e:	f1ab 0a04 	sub.w	sl, fp, #4
 800cd52:	ebaa 0a03 	sub.w	sl, sl, r3
 800cd56:	465a      	mov	r2, fp
 800cd58:	2300      	movs	r3, #0
 800cd5a:	4649      	mov	r1, r9
 800cd5c:	a808      	add	r0, sp, #32
 800cd5e:	f8cd 8000 	str.w	r8, [sp]
 800cd62:	f7fb ff4b 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 800cd66:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800cd68:	fa1f fa8a 	uxth.w	sl, sl
 800cd6c:	4652      	mov	r2, sl
 800cd6e:	f103 0a08 	add.w	sl, r3, #8
 800cd72:	45da      	cmp	sl, fp
 800cd74:	bf34      	ite	cc
 800cd76:	2302      	movcc	r3, #2
 800cd78:	2300      	movcs	r3, #0
 800cd7a:	210d      	movs	r1, #13
 800cd7c:	a808      	add	r0, sp, #32
 800cd7e:	f7ff fe83 	bl	800ca88 <uxr_buffer_submessage_header>
 800cd82:	8921      	ldrh	r1, [r4, #8]
 800cd84:	fbb7 f2f1 	udiv	r2, r7, r1
 800cd88:	fb01 7212 	mls	r2, r1, r2, r7
 800cd8c:	b292      	uxth	r2, r2
 800cd8e:	6863      	ldr	r3, [r4, #4]
 800cd90:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd94:	fb02 f303 	mul.w	r3, r2, r3
 800cd98:	6822      	ldr	r2, [r4, #0]
 800cd9a:	4638      	mov	r0, r7
 800cd9c:	f842 b003 	str.w	fp, [r2, r3]
 800cda0:	2101      	movs	r1, #1
 800cda2:	f006 ffb7 	bl	8013d14 <uxr_seq_num_add>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	f108 0104 	add.w	r1, r8, #4
 800cdac:	f1a3 0208 	sub.w	r2, r3, #8
 800cdb0:	eba2 0208 	sub.w	r2, r2, r8
 800cdb4:	4449      	add	r1, r9
 800cdb6:	4607      	mov	r7, r0
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f7fb ff31 	bl	8008c20 <ucdr_init_buffer>
 800cdbe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800cdc0:	81e7      	strh	r7, [r4, #14]
 800cdc2:	1d1a      	adds	r2, r3, #4
 800cdc4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800cdc8:	bf28      	it	cs
 800cdca:	2200      	movcs	r2, #0
 800cdcc:	2300      	movs	r3, #0
 800cdce:	b292      	uxth	r2, r2
 800cdd0:	2107      	movs	r1, #7
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7ff fe58 	bl	800ca88 <uxr_buffer_submessage_header>
 800cdd8:	9904      	ldr	r1, [sp, #16]
 800cdda:	aa07      	add	r2, sp, #28
 800cddc:	4628      	mov	r0, r5
 800cdde:	f7ff fceb 	bl	800c7b8 <uxr_init_base_object_request>
 800cde2:	4604      	mov	r4, r0
 800cde4:	b318      	cbz	r0, 800ce2e <uxr_prepare_output_stream_fragmented+0x146>
 800cde6:	a907      	add	r1, sp, #28
 800cde8:	4630      	mov	r0, r6
 800cdea:	f000 fff9 	bl	800dde0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800cdee:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	1a52      	subs	r2, r2, r1
 800cdf6:	f7fb ff13 	bl	8008c20 <ucdr_init_buffer>
 800cdfa:	9b05      	ldr	r3, [sp, #20]
 800cdfc:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800ce00:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ce02:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800ce06:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ce08:	491b      	ldr	r1, [pc, #108]	@ (800ce78 <uxr_prepare_output_stream_fragmented+0x190>)
 800ce0a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800ce14:	462a      	mov	r2, r5
 800ce16:	f7fb fed7 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	b011      	add	sp, #68	@ 0x44
 800ce1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce22:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800ce24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ce26:	4628      	mov	r0, r5
 800ce28:	4798      	blx	r3
 800ce2a:	b920      	cbnz	r0, 800ce36 <uxr_prepare_output_stream_fragmented+0x14e>
 800ce2c:	2400      	movs	r4, #0
 800ce2e:	4620      	mov	r0, r4
 800ce30:	b011      	add	sp, #68	@ 0x44
 800ce32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce36:	4620      	mov	r0, r4
 800ce38:	f006 fe1c 	bl	8013a74 <get_available_free_slots>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	f47f af6d 	bne.w	800cd1c <uxr_prepare_output_stream_fragmented+0x34>
 800ce42:	e7f3      	b.n	800ce2c <uxr_prepare_output_stream_fragmented+0x144>
 800ce44:	4638      	mov	r0, r7
 800ce46:	2101      	movs	r1, #1
 800ce48:	f006 ff64 	bl	8013d14 <uxr_seq_num_add>
 800ce4c:	8921      	ldrh	r1, [r4, #8]
 800ce4e:	fbb0 f2f1 	udiv	r2, r0, r1
 800ce52:	fb01 0912 	mls	r9, r1, r2, r0
 800ce56:	fa1f f289 	uxth.w	r2, r9
 800ce5a:	6863      	ldr	r3, [r4, #4]
 800ce5c:	fbb3 f9f1 	udiv	r9, r3, r1
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	fb02 f909 	mul.w	r9, r2, r9
 800ce66:	f109 0904 	add.w	r9, r9, #4
 800ce6a:	4499      	add	r9, r3
 800ce6c:	4607      	mov	r7, r0
 800ce6e:	7b23      	ldrb	r3, [r4, #12]
 800ce70:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ce74:	e76b      	b.n	800cd4e <uxr_prepare_output_stream_fragmented+0x66>
 800ce76:	bf00      	nop
 800ce78:	0800cb75 	.word	0x0800cb75

0800ce7c <uxr_serialize_message_header>:
 800ce7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	4616      	mov	r6, r2
 800ce82:	4604      	mov	r4, r0
 800ce84:	9301      	str	r3, [sp, #4]
 800ce86:	460d      	mov	r5, r1
 800ce88:	9f08      	ldr	r7, [sp, #32]
 800ce8a:	f7fa fd87 	bl	800799c <ucdr_serialize_uint8_t>
 800ce8e:	4631      	mov	r1, r6
 800ce90:	4620      	mov	r0, r4
 800ce92:	f7fa fd83 	bl	800799c <ucdr_serialize_uint8_t>
 800ce96:	9a01      	ldr	r2, [sp, #4]
 800ce98:	2101      	movs	r1, #1
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f7fa fe2a 	bl	8007af4 <ucdr_serialize_endian_uint16_t>
 800cea0:	062b      	lsls	r3, r5, #24
 800cea2:	d501      	bpl.n	800cea8 <uxr_serialize_message_header+0x2c>
 800cea4:	b003      	add	sp, #12
 800cea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cea8:	2204      	movs	r2, #4
 800ceaa:	4639      	mov	r1, r7
 800ceac:	4620      	mov	r0, r4
 800ceae:	b003      	add	sp, #12
 800ceb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ceb4:	f005 bebc 	b.w	8012c30 <ucdr_serialize_array_uint8_t>

0800ceb8 <uxr_deserialize_message_header>:
 800ceb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceba:	b083      	sub	sp, #12
 800cebc:	4616      	mov	r6, r2
 800cebe:	4604      	mov	r4, r0
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	460d      	mov	r5, r1
 800cec4:	9f08      	ldr	r7, [sp, #32]
 800cec6:	f7fa fd7f 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800ceca:	4631      	mov	r1, r6
 800cecc:	4620      	mov	r0, r4
 800cece:	f7fa fd7b 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800ced2:	9a01      	ldr	r2, [sp, #4]
 800ced4:	2101      	movs	r1, #1
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7fa ff00 	bl	8007cdc <ucdr_deserialize_endian_uint16_t>
 800cedc:	f995 3000 	ldrsb.w	r3, [r5]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	da01      	bge.n	800cee8 <uxr_deserialize_message_header+0x30>
 800cee4:	b003      	add	sp, #12
 800cee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cee8:	2204      	movs	r2, #4
 800ceea:	4639      	mov	r1, r7
 800ceec:	4620      	mov	r0, r4
 800ceee:	b003      	add	sp, #12
 800cef0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cef4:	f005 bf00 	b.w	8012cf8 <ucdr_deserialize_array_uint8_t>

0800cef8 <uxr_serialize_submessage_header>:
 800cef8:	b530      	push	{r4, r5, lr}
 800cefa:	b083      	sub	sp, #12
 800cefc:	4615      	mov	r5, r2
 800cefe:	4604      	mov	r4, r0
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	f7fa fd4b 	bl	800799c <ucdr_serialize_uint8_t>
 800cf06:	4629      	mov	r1, r5
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f7fa fd47 	bl	800799c <ucdr_serialize_uint8_t>
 800cf0e:	9a01      	ldr	r2, [sp, #4]
 800cf10:	2101      	movs	r1, #1
 800cf12:	4620      	mov	r0, r4
 800cf14:	b003      	add	sp, #12
 800cf16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf1a:	f7fa bdeb 	b.w	8007af4 <ucdr_serialize_endian_uint16_t>
 800cf1e:	bf00      	nop

0800cf20 <uxr_deserialize_submessage_header>:
 800cf20:	b530      	push	{r4, r5, lr}
 800cf22:	b083      	sub	sp, #12
 800cf24:	4615      	mov	r5, r2
 800cf26:	4604      	mov	r4, r0
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	f7fa fd4d 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800cf2e:	4629      	mov	r1, r5
 800cf30:	4620      	mov	r0, r4
 800cf32:	f7fa fd49 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800cf36:	9a01      	ldr	r2, [sp, #4]
 800cf38:	2101      	movs	r1, #1
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	b003      	add	sp, #12
 800cf3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf42:	f7fa becb 	b.w	8007cdc <ucdr_deserialize_endian_uint16_t>
 800cf46:	bf00      	nop

0800cf48 <uxr_serialize_CLIENT_Representation>:
 800cf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf4c:	2204      	movs	r2, #4
 800cf4e:	460e      	mov	r6, r1
 800cf50:	4605      	mov	r5, r0
 800cf52:	f005 fe6d 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800cf56:	2202      	movs	r2, #2
 800cf58:	4607      	mov	r7, r0
 800cf5a:	1d31      	adds	r1, r6, #4
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	f005 fe67 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800cf62:	4038      	ands	r0, r7
 800cf64:	2202      	movs	r2, #2
 800cf66:	1db1      	adds	r1, r6, #6
 800cf68:	b2c7      	uxtb	r7, r0
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	f005 fe60 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800cf70:	2204      	movs	r2, #4
 800cf72:	4007      	ands	r7, r0
 800cf74:	f106 0108 	add.w	r1, r6, #8
 800cf78:	4628      	mov	r0, r5
 800cf7a:	f005 fe59 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800cf7e:	7b31      	ldrb	r1, [r6, #12]
 800cf80:	4007      	ands	r7, r0
 800cf82:	4628      	mov	r0, r5
 800cf84:	f7fa fd0a 	bl	800799c <ucdr_serialize_uint8_t>
 800cf88:	7b71      	ldrb	r1, [r6, #13]
 800cf8a:	4007      	ands	r7, r0
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f7fa fcd7 	bl	8007940 <ucdr_serialize_bool>
 800cf92:	7b73      	ldrb	r3, [r6, #13]
 800cf94:	ea07 0800 	and.w	r8, r7, r0
 800cf98:	b93b      	cbnz	r3, 800cfaa <uxr_serialize_CLIENT_Representation+0x62>
 800cf9a:	8bb1      	ldrh	r1, [r6, #28]
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f7fa fd29 	bl	80079f4 <ucdr_serialize_uint16_t>
 800cfa2:	ea08 0000 	and.w	r0, r8, r0
 800cfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfaa:	6931      	ldr	r1, [r6, #16]
 800cfac:	4628      	mov	r0, r5
 800cfae:	f7fa ff0b 	bl	8007dc8 <ucdr_serialize_uint32_t>
 800cfb2:	6933      	ldr	r3, [r6, #16]
 800cfb4:	b1e3      	cbz	r3, 800cff0 <uxr_serialize_CLIENT_Representation+0xa8>
 800cfb6:	b1c0      	cbz	r0, 800cfea <uxr_serialize_CLIENT_Representation+0xa2>
 800cfb8:	4637      	mov	r7, r6
 800cfba:	f04f 0900 	mov.w	r9, #0
 800cfbe:	e001      	b.n	800cfc4 <uxr_serialize_CLIENT_Representation+0x7c>
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	b194      	cbz	r4, 800cfea <uxr_serialize_CLIENT_Representation+0xa2>
 800cfc4:	6979      	ldr	r1, [r7, #20]
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	f005 ff52 	bl	8012e70 <ucdr_serialize_string>
 800cfcc:	69b9      	ldr	r1, [r7, #24]
 800cfce:	4604      	mov	r4, r0
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f005 ff4d 	bl	8012e70 <ucdr_serialize_string>
 800cfd6:	6933      	ldr	r3, [r6, #16]
 800cfd8:	f109 0901 	add.w	r9, r9, #1
 800cfdc:	4004      	ands	r4, r0
 800cfde:	4599      	cmp	r9, r3
 800cfe0:	b2e4      	uxtb	r4, r4
 800cfe2:	d3ed      	bcc.n	800cfc0 <uxr_serialize_CLIENT_Representation+0x78>
 800cfe4:	ea08 0804 	and.w	r8, r8, r4
 800cfe8:	e7d7      	b.n	800cf9a <uxr_serialize_CLIENT_Representation+0x52>
 800cfea:	f04f 0800 	mov.w	r8, #0
 800cfee:	e7d4      	b.n	800cf9a <uxr_serialize_CLIENT_Representation+0x52>
 800cff0:	ea08 0800 	and.w	r8, r8, r0
 800cff4:	e7d1      	b.n	800cf9a <uxr_serialize_CLIENT_Representation+0x52>
 800cff6:	bf00      	nop

0800cff8 <uxr_deserialize_CLIENT_Representation>:
 800cff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cffc:	2204      	movs	r2, #4
 800cffe:	460c      	mov	r4, r1
 800d000:	4605      	mov	r5, r0
 800d002:	f005 fe79 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d006:	2202      	movs	r2, #2
 800d008:	4607      	mov	r7, r0
 800d00a:	1d21      	adds	r1, r4, #4
 800d00c:	4628      	mov	r0, r5
 800d00e:	f005 fe73 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d012:	4038      	ands	r0, r7
 800d014:	2202      	movs	r2, #2
 800d016:	1da1      	adds	r1, r4, #6
 800d018:	b2c6      	uxtb	r6, r0
 800d01a:	4628      	mov	r0, r5
 800d01c:	f005 fe6c 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d020:	2204      	movs	r2, #4
 800d022:	4006      	ands	r6, r0
 800d024:	f104 0108 	add.w	r1, r4, #8
 800d028:	4628      	mov	r0, r5
 800d02a:	f005 fe65 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d02e:	f104 010c 	add.w	r1, r4, #12
 800d032:	4006      	ands	r6, r0
 800d034:	4628      	mov	r0, r5
 800d036:	f7fa fcc7 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800d03a:	f104 010d 	add.w	r1, r4, #13
 800d03e:	ea06 0700 	and.w	r7, r6, r0
 800d042:	4628      	mov	r0, r5
 800d044:	f7fa fc92 	bl	800796c <ucdr_deserialize_bool>
 800d048:	7b63      	ldrb	r3, [r4, #13]
 800d04a:	4007      	ands	r7, r0
 800d04c:	b93b      	cbnz	r3, 800d05e <uxr_deserialize_CLIENT_Representation+0x66>
 800d04e:	f104 011c 	add.w	r1, r4, #28
 800d052:	4628      	mov	r0, r5
 800d054:	f7fa fdce 	bl	8007bf4 <ucdr_deserialize_uint16_t>
 800d058:	4038      	ands	r0, r7
 800d05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d05e:	f104 0110 	add.w	r1, r4, #16
 800d062:	4628      	mov	r0, r5
 800d064:	f7fa ffe0 	bl	8008028 <ucdr_deserialize_uint32_t>
 800d068:	6923      	ldr	r3, [r4, #16]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d903      	bls.n	800d076 <uxr_deserialize_CLIENT_Representation+0x7e>
 800d06e:	2301      	movs	r3, #1
 800d070:	75ab      	strb	r3, [r5, #22]
 800d072:	2700      	movs	r7, #0
 800d074:	e7eb      	b.n	800d04e <uxr_deserialize_CLIENT_Representation+0x56>
 800d076:	b30b      	cbz	r3, 800d0bc <uxr_deserialize_CLIENT_Representation+0xc4>
 800d078:	2800      	cmp	r0, #0
 800d07a:	d0fa      	beq.n	800d072 <uxr_deserialize_CLIENT_Representation+0x7a>
 800d07c:	46a0      	mov	r8, r4
 800d07e:	f04f 0900 	mov.w	r9, #0
 800d082:	e001      	b.n	800d088 <uxr_deserialize_CLIENT_Representation+0x90>
 800d084:	2e00      	cmp	r6, #0
 800d086:	d0f4      	beq.n	800d072 <uxr_deserialize_CLIENT_Representation+0x7a>
 800d088:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d08c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d090:	4628      	mov	r0, r5
 800d092:	f005 fefd 	bl	8012e90 <ucdr_deserialize_string>
 800d096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d09a:	4606      	mov	r6, r0
 800d09c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f005 fef5 	bl	8012e90 <ucdr_deserialize_string>
 800d0a6:	6923      	ldr	r3, [r4, #16]
 800d0a8:	f109 0901 	add.w	r9, r9, #1
 800d0ac:	4006      	ands	r6, r0
 800d0ae:	4599      	cmp	r9, r3
 800d0b0:	f108 0808 	add.w	r8, r8, #8
 800d0b4:	b2f6      	uxtb	r6, r6
 800d0b6:	d3e5      	bcc.n	800d084 <uxr_deserialize_CLIENT_Representation+0x8c>
 800d0b8:	4037      	ands	r7, r6
 800d0ba:	e7c8      	b.n	800d04e <uxr_deserialize_CLIENT_Representation+0x56>
 800d0bc:	4007      	ands	r7, r0
 800d0be:	e7c6      	b.n	800d04e <uxr_deserialize_CLIENT_Representation+0x56>

0800d0c0 <uxr_serialize_AGENT_Representation>:
 800d0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c4:	2204      	movs	r2, #4
 800d0c6:	460f      	mov	r7, r1
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	f005 fdb1 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	1d39      	adds	r1, r7, #4
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f005 fdab 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800d0da:	4020      	ands	r0, r4
 800d0dc:	2202      	movs	r2, #2
 800d0de:	1db9      	adds	r1, r7, #6
 800d0e0:	b2c4      	uxtb	r4, r0
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f005 fda4 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800d0e8:	7a39      	ldrb	r1, [r7, #8]
 800d0ea:	4004      	ands	r4, r0
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	f7fa fc27 	bl	8007940 <ucdr_serialize_bool>
 800d0f2:	7a3b      	ldrb	r3, [r7, #8]
 800d0f4:	ea00 0804 	and.w	r8, r0, r4
 800d0f8:	b913      	cbnz	r3, 800d100 <uxr_serialize_AGENT_Representation+0x40>
 800d0fa:	4640      	mov	r0, r8
 800d0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d100:	68f9      	ldr	r1, [r7, #12]
 800d102:	4628      	mov	r0, r5
 800d104:	f7fa fe60 	bl	8007dc8 <ucdr_serialize_uint32_t>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	b303      	cbz	r3, 800d14e <uxr_serialize_AGENT_Representation+0x8e>
 800d10c:	b1d0      	cbz	r0, 800d144 <uxr_serialize_AGENT_Representation+0x84>
 800d10e:	463e      	mov	r6, r7
 800d110:	f04f 0900 	mov.w	r9, #0
 800d114:	e001      	b.n	800d11a <uxr_serialize_AGENT_Representation+0x5a>
 800d116:	3608      	adds	r6, #8
 800d118:	b1a4      	cbz	r4, 800d144 <uxr_serialize_AGENT_Representation+0x84>
 800d11a:	6931      	ldr	r1, [r6, #16]
 800d11c:	4628      	mov	r0, r5
 800d11e:	f005 fea7 	bl	8012e70 <ucdr_serialize_string>
 800d122:	6971      	ldr	r1, [r6, #20]
 800d124:	4604      	mov	r4, r0
 800d126:	4628      	mov	r0, r5
 800d128:	f005 fea2 	bl	8012e70 <ucdr_serialize_string>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f109 0901 	add.w	r9, r9, #1
 800d132:	4004      	ands	r4, r0
 800d134:	4599      	cmp	r9, r3
 800d136:	b2e4      	uxtb	r4, r4
 800d138:	d3ed      	bcc.n	800d116 <uxr_serialize_AGENT_Representation+0x56>
 800d13a:	ea08 0804 	and.w	r8, r8, r4
 800d13e:	4640      	mov	r0, r8
 800d140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d144:	f04f 0800 	mov.w	r8, #0
 800d148:	4640      	mov	r0, r8
 800d14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d14e:	ea08 0800 	and.w	r8, r8, r0
 800d152:	e7d2      	b.n	800d0fa <uxr_serialize_AGENT_Representation+0x3a>

0800d154 <uxr_serialize_DATAWRITER_Representation>:
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	460d      	mov	r5, r1
 800d158:	7809      	ldrb	r1, [r1, #0]
 800d15a:	4606      	mov	r6, r0
 800d15c:	f7fa fc1e 	bl	800799c <ucdr_serialize_uint8_t>
 800d160:	4604      	mov	r4, r0
 800d162:	b130      	cbz	r0, 800d172 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d164:	782b      	ldrb	r3, [r5, #0]
 800d166:	2b02      	cmp	r3, #2
 800d168:	d00c      	beq.n	800d184 <uxr_serialize_DATAWRITER_Representation+0x30>
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d010      	beq.n	800d190 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d008      	beq.n	800d184 <uxr_serialize_DATAWRITER_Representation+0x30>
 800d172:	2202      	movs	r2, #2
 800d174:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800d178:	4630      	mov	r0, r6
 800d17a:	f005 fd59 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800d17e:	4020      	ands	r0, r4
 800d180:	b2c0      	uxtb	r0, r0
 800d182:	bd70      	pop	{r4, r5, r6, pc}
 800d184:	6869      	ldr	r1, [r5, #4]
 800d186:	4630      	mov	r0, r6
 800d188:	f005 fe72 	bl	8012e70 <ucdr_serialize_string>
 800d18c:	4604      	mov	r4, r0
 800d18e:	e7f0      	b.n	800d172 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d190:	4629      	mov	r1, r5
 800d192:	4630      	mov	r0, r6
 800d194:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d198:	3104      	adds	r1, #4
 800d19a:	f005 fe3d 	bl	8012e18 <ucdr_serialize_sequence_uint8_t>
 800d19e:	4604      	mov	r4, r0
 800d1a0:	e7e7      	b.n	800d172 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d1a2:	bf00      	nop

0800d1a4 <uxr_serialize_ObjectVariant.part.0>:
 800d1a4:	b570      	push	{r4, r5, r6, lr}
 800d1a6:	780b      	ldrb	r3, [r1, #0]
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	2b0d      	cmp	r3, #13
 800d1b0:	d854      	bhi.n	800d25c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d1b2:	e8df f003 	tbb	[pc, r3]
 800d1b6:	0730      	.short	0x0730
 800d1b8:	07071b1b 	.word	0x07071b1b
 800d1bc:	0c530707 	.word	0x0c530707
 800d1c0:	494e0c0c 	.word	0x494e0c0c
 800d1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1c8:	3104      	adds	r1, #4
 800d1ca:	f7ff bfc3 	b.w	800d154 <uxr_serialize_DATAWRITER_Representation>
 800d1ce:	7909      	ldrb	r1, [r1, #4]
 800d1d0:	f7fa fbe4 	bl	800799c <ucdr_serialize_uint8_t>
 800d1d4:	b1e8      	cbz	r0, 800d212 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800d1d6:	7923      	ldrb	r3, [r4, #4]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d001      	beq.n	800d1e0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d13d      	bne.n	800d25c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d1e0:	68a1      	ldr	r1, [r4, #8]
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1e8:	f005 be42 	b.w	8012e70 <ucdr_serialize_string>
 800d1ec:	7909      	ldrb	r1, [r1, #4]
 800d1ee:	f7fa fbd5 	bl	800799c <ucdr_serialize_uint8_t>
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	b120      	cbz	r0, 800d200 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d1f6:	7923      	ldrb	r3, [r4, #4]
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d039      	beq.n	800d270 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800d1fc:	2b03      	cmp	r3, #3
 800d1fe:	d02f      	beq.n	800d260 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800d200:	2202      	movs	r2, #2
 800d202:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800d206:	4628      	mov	r0, r5
 800d208:	f005 fd12 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800d20c:	4030      	ands	r0, r6
 800d20e:	b2c0      	uxtb	r0, r0
 800d210:	bd70      	pop	{r4, r5, r6, pc}
 800d212:	2000      	movs	r0, #0
 800d214:	bd70      	pop	{r4, r5, r6, pc}
 800d216:	7909      	ldrb	r1, [r1, #4]
 800d218:	f7fa fbc0 	bl	800799c <ucdr_serialize_uint8_t>
 800d21c:	4606      	mov	r6, r0
 800d21e:	b158      	cbz	r0, 800d238 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d220:	7923      	ldrb	r3, [r4, #4]
 800d222:	2b02      	cmp	r3, #2
 800d224:	d003      	beq.n	800d22e <uxr_serialize_ObjectVariant.part.0+0x8a>
 800d226:	2b03      	cmp	r3, #3
 800d228:	d028      	beq.n	800d27c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d104      	bne.n	800d238 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d22e:	68a1      	ldr	r1, [r4, #8]
 800d230:	4628      	mov	r0, r5
 800d232:	f005 fe1d 	bl	8012e70 <ucdr_serialize_string>
 800d236:	4606      	mov	r6, r0
 800d238:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800d23c:	4628      	mov	r0, r5
 800d23e:	f7fb f8e9 	bl	8008414 <ucdr_serialize_int16_t>
 800d242:	4030      	ands	r0, r6
 800d244:	b2c0      	uxtb	r0, r0
 800d246:	bd70      	pop	{r4, r5, r6, pc}
 800d248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d24c:	3104      	adds	r1, #4
 800d24e:	f7ff be7b 	b.w	800cf48 <uxr_serialize_CLIENT_Representation>
 800d252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d256:	3104      	adds	r1, #4
 800d258:	f7ff bf32 	b.w	800d0c0 <uxr_serialize_AGENT_Representation>
 800d25c:	2001      	movs	r0, #1
 800d25e:	bd70      	pop	{r4, r5, r6, pc}
 800d260:	68a2      	ldr	r2, [r4, #8]
 800d262:	f104 010c 	add.w	r1, r4, #12
 800d266:	4628      	mov	r0, r5
 800d268:	f005 fdd6 	bl	8012e18 <ucdr_serialize_sequence_uint8_t>
 800d26c:	4606      	mov	r6, r0
 800d26e:	e7c7      	b.n	800d200 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d270:	68a1      	ldr	r1, [r4, #8]
 800d272:	4628      	mov	r0, r5
 800d274:	f005 fdfc 	bl	8012e70 <ucdr_serialize_string>
 800d278:	4606      	mov	r6, r0
 800d27a:	e7c1      	b.n	800d200 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d27c:	68a2      	ldr	r2, [r4, #8]
 800d27e:	f104 010c 	add.w	r1, r4, #12
 800d282:	4628      	mov	r0, r5
 800d284:	f005 fdc8 	bl	8012e18 <ucdr_serialize_sequence_uint8_t>
 800d288:	4606      	mov	r6, r0
 800d28a:	e7d5      	b.n	800d238 <uxr_serialize_ObjectVariant.part.0+0x94>

0800d28c <uxr_deserialize_DATAWRITER_Representation>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	4606      	mov	r6, r0
 800d290:	460d      	mov	r5, r1
 800d292:	f7fa fb99 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800d296:	4604      	mov	r4, r0
 800d298:	b130      	cbz	r0, 800d2a8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d29a:	782b      	ldrb	r3, [r5, #0]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d00c      	beq.n	800d2ba <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	d012      	beq.n	800d2ca <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d008      	beq.n	800d2ba <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d2a8:	2202      	movs	r2, #2
 800d2aa:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f005 fd22 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d2b4:	4020      	ands	r0, r4
 800d2b6:	b2c0      	uxtb	r0, r0
 800d2b8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ba:	6869      	ldr	r1, [r5, #4]
 800d2bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	f005 fde5 	bl	8012e90 <ucdr_deserialize_string>
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	e7ee      	b.n	800d2a8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d2ca:	1d2b      	adds	r3, r5, #4
 800d2cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2d0:	f105 0108 	add.w	r1, r5, #8
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	f005 fdb1 	bl	8012e3c <ucdr_deserialize_sequence_uint8_t>
 800d2da:	4604      	mov	r4, r0
 800d2dc:	e7e4      	b.n	800d2a8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d2de:	bf00      	nop

0800d2e0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800d2e0:	b570      	push	{r4, r5, r6, lr}
 800d2e2:	460d      	mov	r5, r1
 800d2e4:	7809      	ldrb	r1, [r1, #0]
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	f7fa fb2a 	bl	8007940 <ucdr_serialize_bool>
 800d2ec:	782b      	ldrb	r3, [r5, #0]
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	b94b      	cbnz	r3, 800d306 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800d2f2:	7a29      	ldrb	r1, [r5, #8]
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7fa fb23 	bl	8007940 <ucdr_serialize_bool>
 800d2fa:	7a2b      	ldrb	r3, [r5, #8]
 800d2fc:	4004      	ands	r4, r0
 800d2fe:	b2e4      	uxtb	r4, r4
 800d300:	b943      	cbnz	r3, 800d314 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800d302:	4620      	mov	r0, r4
 800d304:	bd70      	pop	{r4, r5, r6, pc}
 800d306:	6869      	ldr	r1, [r5, #4]
 800d308:	4630      	mov	r0, r6
 800d30a:	f005 fdb1 	bl	8012e70 <ucdr_serialize_string>
 800d30e:	4004      	ands	r4, r0
 800d310:	b2e4      	uxtb	r4, r4
 800d312:	e7ee      	b.n	800d2f2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800d314:	68e9      	ldr	r1, [r5, #12]
 800d316:	4630      	mov	r0, r6
 800d318:	f005 fdaa 	bl	8012e70 <ucdr_serialize_string>
 800d31c:	4004      	ands	r4, r0
 800d31e:	4620      	mov	r0, r4
 800d320:	bd70      	pop	{r4, r5, r6, pc}
 800d322:	bf00      	nop

0800d324 <uxr_serialize_OBJK_Topic_Binary>:
 800d324:	b570      	push	{r4, r5, r6, lr}
 800d326:	460d      	mov	r5, r1
 800d328:	6809      	ldr	r1, [r1, #0]
 800d32a:	4606      	mov	r6, r0
 800d32c:	f005 fda0 	bl	8012e70 <ucdr_serialize_string>
 800d330:	7929      	ldrb	r1, [r5, #4]
 800d332:	4604      	mov	r4, r0
 800d334:	4630      	mov	r0, r6
 800d336:	f7fa fb03 	bl	8007940 <ucdr_serialize_bool>
 800d33a:	792b      	ldrb	r3, [r5, #4]
 800d33c:	4004      	ands	r4, r0
 800d33e:	b2e4      	uxtb	r4, r4
 800d340:	b943      	cbnz	r3, 800d354 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800d342:	7b29      	ldrb	r1, [r5, #12]
 800d344:	4630      	mov	r0, r6
 800d346:	f7fa fafb 	bl	8007940 <ucdr_serialize_bool>
 800d34a:	7b2b      	ldrb	r3, [r5, #12]
 800d34c:	4004      	ands	r4, r0
 800d34e:	b93b      	cbnz	r3, 800d360 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800d350:	4620      	mov	r0, r4
 800d352:	bd70      	pop	{r4, r5, r6, pc}
 800d354:	68a9      	ldr	r1, [r5, #8]
 800d356:	4630      	mov	r0, r6
 800d358:	f005 fd8a 	bl	8012e70 <ucdr_serialize_string>
 800d35c:	4004      	ands	r4, r0
 800d35e:	e7f0      	b.n	800d342 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800d360:	6929      	ldr	r1, [r5, #16]
 800d362:	4630      	mov	r0, r6
 800d364:	f005 fd84 	bl	8012e70 <ucdr_serialize_string>
 800d368:	4004      	ands	r4, r0
 800d36a:	b2e4      	uxtb	r4, r4
 800d36c:	4620      	mov	r0, r4
 800d36e:	bd70      	pop	{r4, r5, r6, pc}

0800d370 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800d370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d374:	460c      	mov	r4, r1
 800d376:	7809      	ldrb	r1, [r1, #0]
 800d378:	4606      	mov	r6, r0
 800d37a:	f7fa fae1 	bl	8007940 <ucdr_serialize_bool>
 800d37e:	7823      	ldrb	r3, [r4, #0]
 800d380:	4605      	mov	r5, r0
 800d382:	b96b      	cbnz	r3, 800d3a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800d384:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800d388:	4630      	mov	r0, r6
 800d38a:	f7fa fad9 	bl	8007940 <ucdr_serialize_bool>
 800d38e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d392:	4005      	ands	r5, r0
 800d394:	b2ed      	uxtb	r5, r5
 800d396:	2b00      	cmp	r3, #0
 800d398:	d169      	bne.n	800d46e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800d39a:	4628      	mov	r0, r5
 800d39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a0:	6861      	ldr	r1, [r4, #4]
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f7fa fd10 	bl	8007dc8 <ucdr_serialize_uint32_t>
 800d3a8:	6863      	ldr	r3, [r4, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d06b      	beq.n	800d486 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d067      	beq.n	800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d3b2:	68a1      	ldr	r1, [r4, #8]
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	f005 fd5b 	bl	8012e70 <ucdr_serialize_string>
 800d3ba:	6863      	ldr	r3, [r4, #4]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d953      	bls.n	800d468 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d05e      	beq.n	800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d3c4:	68e1      	ldr	r1, [r4, #12]
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	f005 fd52 	bl	8012e70 <ucdr_serialize_string>
 800d3cc:	6863      	ldr	r3, [r4, #4]
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d94a      	bls.n	800d468 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d055      	beq.n	800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d3d6:	6921      	ldr	r1, [r4, #16]
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f005 fd49 	bl	8012e70 <ucdr_serialize_string>
 800d3de:	6863      	ldr	r3, [r4, #4]
 800d3e0:	2b03      	cmp	r3, #3
 800d3e2:	d941      	bls.n	800d468 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d04c      	beq.n	800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d3e8:	6961      	ldr	r1, [r4, #20]
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f005 fd40 	bl	8012e70 <ucdr_serialize_string>
 800d3f0:	6863      	ldr	r3, [r4, #4]
 800d3f2:	2b04      	cmp	r3, #4
 800d3f4:	d938      	bls.n	800d468 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d043      	beq.n	800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d3fa:	69a1      	ldr	r1, [r4, #24]
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f005 fd37 	bl	8012e70 <ucdr_serialize_string>
 800d402:	6863      	ldr	r3, [r4, #4]
 800d404:	2b05      	cmp	r3, #5
 800d406:	d92f      	bls.n	800d468 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d408:	2800      	cmp	r0, #0
 800d40a:	d03a      	beq.n	800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d40c:	69e1      	ldr	r1, [r4, #28]
 800d40e:	4630      	mov	r0, r6
 800d410:	f005 fd2e 	bl	8012e70 <ucdr_serialize_string>
 800d414:	6863      	ldr	r3, [r4, #4]
 800d416:	2b06      	cmp	r3, #6
 800d418:	d926      	bls.n	800d468 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d41a:	b390      	cbz	r0, 800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d41c:	6a21      	ldr	r1, [r4, #32]
 800d41e:	4630      	mov	r0, r6
 800d420:	f005 fd26 	bl	8012e70 <ucdr_serialize_string>
 800d424:	6863      	ldr	r3, [r4, #4]
 800d426:	2b07      	cmp	r3, #7
 800d428:	d91e      	bls.n	800d468 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d42a:	b350      	cbz	r0, 800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d42c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d42e:	4630      	mov	r0, r6
 800d430:	f005 fd1e 	bl	8012e70 <ucdr_serialize_string>
 800d434:	6863      	ldr	r3, [r4, #4]
 800d436:	2b08      	cmp	r3, #8
 800d438:	d916      	bls.n	800d468 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d43a:	b310      	cbz	r0, 800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d43c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d43e:	4630      	mov	r0, r6
 800d440:	f005 fd16 	bl	8012e70 <ucdr_serialize_string>
 800d444:	6863      	ldr	r3, [r4, #4]
 800d446:	2b09      	cmp	r3, #9
 800d448:	d90e      	bls.n	800d468 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d44a:	b1d0      	cbz	r0, 800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d44c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800d450:	2709      	movs	r7, #9
 800d452:	e000      	b.n	800d456 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800d454:	b1a8      	cbz	r0, 800d482 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d456:	f858 1b04 	ldr.w	r1, [r8], #4
 800d45a:	4630      	mov	r0, r6
 800d45c:	f005 fd08 	bl	8012e70 <ucdr_serialize_string>
 800d460:	6862      	ldr	r2, [r4, #4]
 800d462:	3701      	adds	r7, #1
 800d464:	4297      	cmp	r7, r2
 800d466:	d3f5      	bcc.n	800d454 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800d468:	4005      	ands	r5, r0
 800d46a:	b2ed      	uxtb	r5, r5
 800d46c:	e78a      	b.n	800d384 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d46e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d470:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800d474:	4630      	mov	r0, r6
 800d476:	f005 fccf 	bl	8012e18 <ucdr_serialize_sequence_uint8_t>
 800d47a:	4005      	ands	r5, r0
 800d47c:	4628      	mov	r0, r5
 800d47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d482:	2500      	movs	r5, #0
 800d484:	e77e      	b.n	800d384 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d486:	4028      	ands	r0, r5
 800d488:	b2c5      	uxtb	r5, r0
 800d48a:	e77b      	b.n	800d384 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800d48c <uxr_serialize_OBJK_Publisher_Binary>:
 800d48c:	b570      	push	{r4, r5, r6, lr}
 800d48e:	460d      	mov	r5, r1
 800d490:	7809      	ldrb	r1, [r1, #0]
 800d492:	4606      	mov	r6, r0
 800d494:	f7fa fa54 	bl	8007940 <ucdr_serialize_bool>
 800d498:	782b      	ldrb	r3, [r5, #0]
 800d49a:	4604      	mov	r4, r0
 800d49c:	b94b      	cbnz	r3, 800d4b2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800d49e:	7a29      	ldrb	r1, [r5, #8]
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7fa fa4d 	bl	8007940 <ucdr_serialize_bool>
 800d4a6:	7a2b      	ldrb	r3, [r5, #8]
 800d4a8:	4004      	ands	r4, r0
 800d4aa:	b2e4      	uxtb	r4, r4
 800d4ac:	b943      	cbnz	r3, 800d4c0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	bd70      	pop	{r4, r5, r6, pc}
 800d4b2:	6869      	ldr	r1, [r5, #4]
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f005 fcdb 	bl	8012e70 <ucdr_serialize_string>
 800d4ba:	4004      	ands	r4, r0
 800d4bc:	b2e4      	uxtb	r4, r4
 800d4be:	e7ee      	b.n	800d49e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800d4c0:	f105 010c 	add.w	r1, r5, #12
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	f7ff ff53 	bl	800d370 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800d4ca:	4004      	ands	r4, r0
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}

0800d4d0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800d4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d4:	460c      	mov	r4, r1
 800d4d6:	7809      	ldrb	r1, [r1, #0]
 800d4d8:	4606      	mov	r6, r0
 800d4da:	f7fa fa31 	bl	8007940 <ucdr_serialize_bool>
 800d4de:	7823      	ldrb	r3, [r4, #0]
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	b96b      	cbnz	r3, 800d500 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800d4e4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f7fa fa29 	bl	8007940 <ucdr_serialize_bool>
 800d4ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d4f2:	4005      	ands	r5, r0
 800d4f4:	b2ed      	uxtb	r5, r5
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d169      	bne.n	800d5ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d500:	6861      	ldr	r1, [r4, #4]
 800d502:	4630      	mov	r0, r6
 800d504:	f7fa fc60 	bl	8007dc8 <ucdr_serialize_uint32_t>
 800d508:	6863      	ldr	r3, [r4, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d06b      	beq.n	800d5e6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800d50e:	2800      	cmp	r0, #0
 800d510:	d067      	beq.n	800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d512:	68a1      	ldr	r1, [r4, #8]
 800d514:	4630      	mov	r0, r6
 800d516:	f005 fcab 	bl	8012e70 <ucdr_serialize_string>
 800d51a:	6863      	ldr	r3, [r4, #4]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d953      	bls.n	800d5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d520:	2800      	cmp	r0, #0
 800d522:	d05e      	beq.n	800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d524:	68e1      	ldr	r1, [r4, #12]
 800d526:	4630      	mov	r0, r6
 800d528:	f005 fca2 	bl	8012e70 <ucdr_serialize_string>
 800d52c:	6863      	ldr	r3, [r4, #4]
 800d52e:	2b02      	cmp	r3, #2
 800d530:	d94a      	bls.n	800d5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d532:	2800      	cmp	r0, #0
 800d534:	d055      	beq.n	800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d536:	6921      	ldr	r1, [r4, #16]
 800d538:	4630      	mov	r0, r6
 800d53a:	f005 fc99 	bl	8012e70 <ucdr_serialize_string>
 800d53e:	6863      	ldr	r3, [r4, #4]
 800d540:	2b03      	cmp	r3, #3
 800d542:	d941      	bls.n	800d5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d544:	2800      	cmp	r0, #0
 800d546:	d04c      	beq.n	800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d548:	6961      	ldr	r1, [r4, #20]
 800d54a:	4630      	mov	r0, r6
 800d54c:	f005 fc90 	bl	8012e70 <ucdr_serialize_string>
 800d550:	6863      	ldr	r3, [r4, #4]
 800d552:	2b04      	cmp	r3, #4
 800d554:	d938      	bls.n	800d5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d556:	2800      	cmp	r0, #0
 800d558:	d043      	beq.n	800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d55a:	69a1      	ldr	r1, [r4, #24]
 800d55c:	4630      	mov	r0, r6
 800d55e:	f005 fc87 	bl	8012e70 <ucdr_serialize_string>
 800d562:	6863      	ldr	r3, [r4, #4]
 800d564:	2b05      	cmp	r3, #5
 800d566:	d92f      	bls.n	800d5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d568:	2800      	cmp	r0, #0
 800d56a:	d03a      	beq.n	800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d56c:	69e1      	ldr	r1, [r4, #28]
 800d56e:	4630      	mov	r0, r6
 800d570:	f005 fc7e 	bl	8012e70 <ucdr_serialize_string>
 800d574:	6863      	ldr	r3, [r4, #4]
 800d576:	2b06      	cmp	r3, #6
 800d578:	d926      	bls.n	800d5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d57a:	b390      	cbz	r0, 800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d57c:	6a21      	ldr	r1, [r4, #32]
 800d57e:	4630      	mov	r0, r6
 800d580:	f005 fc76 	bl	8012e70 <ucdr_serialize_string>
 800d584:	6863      	ldr	r3, [r4, #4]
 800d586:	2b07      	cmp	r3, #7
 800d588:	d91e      	bls.n	800d5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d58a:	b350      	cbz	r0, 800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d58c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d58e:	4630      	mov	r0, r6
 800d590:	f005 fc6e 	bl	8012e70 <ucdr_serialize_string>
 800d594:	6863      	ldr	r3, [r4, #4]
 800d596:	2b08      	cmp	r3, #8
 800d598:	d916      	bls.n	800d5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d59a:	b310      	cbz	r0, 800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d59c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f005 fc66 	bl	8012e70 <ucdr_serialize_string>
 800d5a4:	6863      	ldr	r3, [r4, #4]
 800d5a6:	2b09      	cmp	r3, #9
 800d5a8:	d90e      	bls.n	800d5c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d5aa:	b1d0      	cbz	r0, 800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d5ac:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800d5b0:	2709      	movs	r7, #9
 800d5b2:	e000      	b.n	800d5b6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800d5b4:	b1a8      	cbz	r0, 800d5e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d5b6:	f858 1b04 	ldr.w	r1, [r8], #4
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f005 fc58 	bl	8012e70 <ucdr_serialize_string>
 800d5c0:	6862      	ldr	r2, [r4, #4]
 800d5c2:	3701      	adds	r7, #1
 800d5c4:	4297      	cmp	r7, r2
 800d5c6:	d3f5      	bcc.n	800d5b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800d5c8:	4005      	ands	r5, r0
 800d5ca:	b2ed      	uxtb	r5, r5
 800d5cc:	e78a      	b.n	800d4e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d5ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d5d0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	f005 fc1f 	bl	8012e18 <ucdr_serialize_sequence_uint8_t>
 800d5da:	4005      	ands	r5, r0
 800d5dc:	4628      	mov	r0, r5
 800d5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e2:	2500      	movs	r5, #0
 800d5e4:	e77e      	b.n	800d4e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d5e6:	4028      	ands	r0, r5
 800d5e8:	b2c5      	uxtb	r5, r0
 800d5ea:	e77b      	b.n	800d4e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800d5ec <uxr_serialize_OBJK_Subscriber_Binary>:
 800d5ec:	b570      	push	{r4, r5, r6, lr}
 800d5ee:	460d      	mov	r5, r1
 800d5f0:	7809      	ldrb	r1, [r1, #0]
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	f7fa f9a4 	bl	8007940 <ucdr_serialize_bool>
 800d5f8:	782b      	ldrb	r3, [r5, #0]
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	b94b      	cbnz	r3, 800d612 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800d5fe:	7a29      	ldrb	r1, [r5, #8]
 800d600:	4630      	mov	r0, r6
 800d602:	f7fa f99d 	bl	8007940 <ucdr_serialize_bool>
 800d606:	7a2b      	ldrb	r3, [r5, #8]
 800d608:	4004      	ands	r4, r0
 800d60a:	b2e4      	uxtb	r4, r4
 800d60c:	b943      	cbnz	r3, 800d620 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800d60e:	4620      	mov	r0, r4
 800d610:	bd70      	pop	{r4, r5, r6, pc}
 800d612:	6869      	ldr	r1, [r5, #4]
 800d614:	4630      	mov	r0, r6
 800d616:	f005 fc2b 	bl	8012e70 <ucdr_serialize_string>
 800d61a:	4004      	ands	r4, r0
 800d61c:	b2e4      	uxtb	r4, r4
 800d61e:	e7ee      	b.n	800d5fe <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800d620:	f105 010c 	add.w	r1, r5, #12
 800d624:	4630      	mov	r0, r6
 800d626:	f7ff ff53 	bl	800d4d0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800d62a:	4004      	ands	r4, r0
 800d62c:	4620      	mov	r0, r4
 800d62e:	bd70      	pop	{r4, r5, r6, pc}

0800d630 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800d630:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800d634:	4688      	mov	r8, r1
 800d636:	8809      	ldrh	r1, [r1, #0]
 800d638:	4681      	mov	r9, r0
 800d63a:	f7fa f9db 	bl	80079f4 <ucdr_serialize_uint16_t>
 800d63e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800d642:	4606      	mov	r6, r0
 800d644:	4648      	mov	r0, r9
 800d646:	f7fa f97b 	bl	8007940 <ucdr_serialize_bool>
 800d64a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d64e:	4006      	ands	r6, r0
 800d650:	b2f5      	uxtb	r5, r6
 800d652:	b9eb      	cbnz	r3, 800d690 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800d654:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d658:	4648      	mov	r0, r9
 800d65a:	f7fa f971 	bl	8007940 <ucdr_serialize_bool>
 800d65e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800d662:	4005      	ands	r5, r0
 800d664:	bb7b      	cbnz	r3, 800d6c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800d666:	f898 100c 	ldrb.w	r1, [r8, #12]
 800d66a:	4648      	mov	r0, r9
 800d66c:	f7fa f968 	bl	8007940 <ucdr_serialize_bool>
 800d670:	f898 300c 	ldrb.w	r3, [r8, #12]
 800d674:	4005      	ands	r5, r0
 800d676:	b9f3      	cbnz	r3, 800d6b6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800d678:	f898 1014 	ldrb.w	r1, [r8, #20]
 800d67c:	4648      	mov	r0, r9
 800d67e:	f7fa f95f 	bl	8007940 <ucdr_serialize_bool>
 800d682:	f898 3014 	ldrb.w	r3, [r8, #20]
 800d686:	4005      	ands	r5, r0
 800d688:	b94b      	cbnz	r3, 800d69e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800d68a:	4628      	mov	r0, r5
 800d68c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d690:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800d694:	4648      	mov	r0, r9
 800d696:	f7fa f9ad 	bl	80079f4 <ucdr_serialize_uint16_t>
 800d69a:	4005      	ands	r5, r0
 800d69c:	e7da      	b.n	800d654 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800d69e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d6a2:	f108 011c 	add.w	r1, r8, #28
 800d6a6:	4648      	mov	r0, r9
 800d6a8:	f005 fbb6 	bl	8012e18 <ucdr_serialize_sequence_uint8_t>
 800d6ac:	4028      	ands	r0, r5
 800d6ae:	b2c5      	uxtb	r5, r0
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d6b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d6ba:	4648      	mov	r0, r9
 800d6bc:	f7fa fb84 	bl	8007dc8 <ucdr_serialize_uint32_t>
 800d6c0:	4028      	ands	r0, r5
 800d6c2:	b2c5      	uxtb	r5, r0
 800d6c4:	e7d8      	b.n	800d678 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800d6c6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d6ca:	4648      	mov	r0, r9
 800d6cc:	f7fa fb7c 	bl	8007dc8 <ucdr_serialize_uint32_t>
 800d6d0:	4028      	ands	r0, r5
 800d6d2:	b2c5      	uxtb	r5, r0
 800d6d4:	e7c7      	b.n	800d666 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800d6d6:	bf00      	nop

0800d6d8 <uxr_serialize_OBJK_DataReader_Binary>:
 800d6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6da:	2202      	movs	r2, #2
 800d6dc:	460c      	mov	r4, r1
 800d6de:	4606      	mov	r6, r0
 800d6e0:	f005 faa6 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800d6e4:	78a1      	ldrb	r1, [r4, #2]
 800d6e6:	4605      	mov	r5, r0
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f7fa f929 	bl	8007940 <ucdr_serialize_bool>
 800d6ee:	78a3      	ldrb	r3, [r4, #2]
 800d6f0:	4005      	ands	r5, r0
 800d6f2:	b2ed      	uxtb	r5, r5
 800d6f4:	b90b      	cbnz	r3, 800d6fa <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6fa:	f104 0108 	add.w	r1, r4, #8
 800d6fe:	4630      	mov	r0, r6
 800d700:	f7ff ff96 	bl	800d630 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d704:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800d708:	4607      	mov	r7, r0
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7fa f918 	bl	8007940 <ucdr_serialize_bool>
 800d710:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d714:	4038      	ands	r0, r7
 800d716:	b2c7      	uxtb	r7, r0
 800d718:	b95b      	cbnz	r3, 800d732 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800d71a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800d71e:	4630      	mov	r0, r6
 800d720:	f7fa f90e 	bl	8007940 <ucdr_serialize_bool>
 800d724:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800d728:	4007      	ands	r7, r0
 800d72a:	b94b      	cbnz	r3, 800d740 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800d72c:	403d      	ands	r5, r7
 800d72e:	4628      	mov	r0, r5
 800d730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d732:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800d736:	4630      	mov	r0, r6
 800d738:	f7fa fd9c 	bl	8008274 <ucdr_serialize_uint64_t>
 800d73c:	4007      	ands	r7, r0
 800d73e:	e7ec      	b.n	800d71a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800d740:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800d742:	4630      	mov	r0, r6
 800d744:	f005 fb94 	bl	8012e70 <ucdr_serialize_string>
 800d748:	4007      	ands	r7, r0
 800d74a:	b2ff      	uxtb	r7, r7
 800d74c:	e7ee      	b.n	800d72c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800d74e:	bf00      	nop

0800d750 <uxr_serialize_OBJK_DataWriter_Binary>:
 800d750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d752:	2202      	movs	r2, #2
 800d754:	460d      	mov	r5, r1
 800d756:	4606      	mov	r6, r0
 800d758:	f005 fa6a 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800d75c:	78a9      	ldrb	r1, [r5, #2]
 800d75e:	4604      	mov	r4, r0
 800d760:	4630      	mov	r0, r6
 800d762:	f7fa f8ed 	bl	8007940 <ucdr_serialize_bool>
 800d766:	78ab      	ldrb	r3, [r5, #2]
 800d768:	4004      	ands	r4, r0
 800d76a:	b2e4      	uxtb	r4, r4
 800d76c:	b90b      	cbnz	r3, 800d772 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800d76e:	4620      	mov	r0, r4
 800d770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d772:	f105 0108 	add.w	r1, r5, #8
 800d776:	4630      	mov	r0, r6
 800d778:	f7ff ff5a 	bl	800d630 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d77c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800d780:	4607      	mov	r7, r0
 800d782:	4630      	mov	r0, r6
 800d784:	f7fa f8dc 	bl	8007940 <ucdr_serialize_bool>
 800d788:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800d78c:	4038      	ands	r0, r7
 800d78e:	b2c7      	uxtb	r7, r0
 800d790:	b913      	cbnz	r3, 800d798 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800d792:	403c      	ands	r4, r7
 800d794:	4620      	mov	r0, r4
 800d796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d798:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800d79c:	4630      	mov	r0, r6
 800d79e:	f7fa fd69 	bl	8008274 <ucdr_serialize_uint64_t>
 800d7a2:	4007      	ands	r7, r0
 800d7a4:	e7f5      	b.n	800d792 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800d7a6:	bf00      	nop

0800d7a8 <uxr_deserialize_ObjectVariant>:
 800d7a8:	b570      	push	{r4, r5, r6, lr}
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	460e      	mov	r6, r1
 800d7ae:	f7fa f90b 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800d7b2:	b168      	cbz	r0, 800d7d0 <uxr_deserialize_ObjectVariant+0x28>
 800d7b4:	7833      	ldrb	r3, [r6, #0]
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	4604      	mov	r4, r0
 800d7ba:	2b0d      	cmp	r3, #13
 800d7bc:	d809      	bhi.n	800d7d2 <uxr_deserialize_ObjectVariant+0x2a>
 800d7be:	e8df f003 	tbb	[pc, r3]
 800d7c2:	0a41      	.short	0x0a41
 800d7c4:	0a0a2323 	.word	0x0a0a2323
 800d7c8:	10080a0a 	.word	0x10080a0a
 800d7cc:	565c1010 	.word	0x565c1010
 800d7d0:	2400      	movs	r4, #0
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	bd70      	pop	{r4, r5, r6, pc}
 800d7d6:	1d31      	adds	r1, r6, #4
 800d7d8:	4628      	mov	r0, r5
 800d7da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7de:	f7ff bd55 	b.w	800d28c <uxr_deserialize_DATAWRITER_Representation>
 800d7e2:	1d31      	adds	r1, r6, #4
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	f7fa f8ef 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d0f0      	beq.n	800d7d0 <uxr_deserialize_ObjectVariant+0x28>
 800d7ee:	7933      	ldrb	r3, [r6, #4]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d001      	beq.n	800d7f8 <uxr_deserialize_ObjectVariant+0x50>
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d1ec      	bne.n	800d7d2 <uxr_deserialize_ObjectVariant+0x2a>
 800d7f8:	68b1      	ldr	r1, [r6, #8]
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d804:	f005 bb44 	b.w	8012e90 <ucdr_deserialize_string>
 800d808:	1d31      	adds	r1, r6, #4
 800d80a:	4628      	mov	r0, r5
 800d80c:	f7fa f8dc 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800d810:	4604      	mov	r4, r0
 800d812:	b170      	cbz	r0, 800d832 <uxr_deserialize_ObjectVariant+0x8a>
 800d814:	7933      	ldrb	r3, [r6, #4]
 800d816:	2b02      	cmp	r3, #2
 800d818:	d04c      	beq.n	800d8b4 <uxr_deserialize_ObjectVariant+0x10c>
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d109      	bne.n	800d832 <uxr_deserialize_ObjectVariant+0x8a>
 800d81e:	f106 0308 	add.w	r3, r6, #8
 800d822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d826:	f106 010c 	add.w	r1, r6, #12
 800d82a:	4628      	mov	r0, r5
 800d82c:	f005 fb06 	bl	8012e3c <ucdr_deserialize_sequence_uint8_t>
 800d830:	4604      	mov	r4, r0
 800d832:	2202      	movs	r2, #2
 800d834:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800d838:	4628      	mov	r0, r5
 800d83a:	f005 fa5d 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d83e:	4020      	ands	r0, r4
 800d840:	b2c4      	uxtb	r4, r0
 800d842:	e7c6      	b.n	800d7d2 <uxr_deserialize_ObjectVariant+0x2a>
 800d844:	1d31      	adds	r1, r6, #4
 800d846:	4628      	mov	r0, r5
 800d848:	f7fa f8be 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800d84c:	4604      	mov	r4, r0
 800d84e:	b130      	cbz	r0, 800d85e <uxr_deserialize_ObjectVariant+0xb6>
 800d850:	7933      	ldrb	r3, [r6, #4]
 800d852:	2b02      	cmp	r3, #2
 800d854:	d036      	beq.n	800d8c4 <uxr_deserialize_ObjectVariant+0x11c>
 800d856:	2b03      	cmp	r3, #3
 800d858:	d03c      	beq.n	800d8d4 <uxr_deserialize_ObjectVariant+0x12c>
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d032      	beq.n	800d8c4 <uxr_deserialize_ObjectVariant+0x11c>
 800d85e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800d862:	4628      	mov	r0, r5
 800d864:	f7fa fe56 	bl	8008514 <ucdr_deserialize_int16_t>
 800d868:	4020      	ands	r0, r4
 800d86a:	b2c4      	uxtb	r4, r0
 800d86c:	e7b1      	b.n	800d7d2 <uxr_deserialize_ObjectVariant+0x2a>
 800d86e:	1d31      	adds	r1, r6, #4
 800d870:	4628      	mov	r0, r5
 800d872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d876:	f7ff bbbf 	b.w	800cff8 <uxr_deserialize_CLIENT_Representation>
 800d87a:	2204      	movs	r2, #4
 800d87c:	18b1      	adds	r1, r6, r2
 800d87e:	4628      	mov	r0, r5
 800d880:	f005 fa3a 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d884:	2202      	movs	r2, #2
 800d886:	f106 0108 	add.w	r1, r6, #8
 800d88a:	4604      	mov	r4, r0
 800d88c:	4628      	mov	r0, r5
 800d88e:	f005 fa33 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d892:	2202      	movs	r2, #2
 800d894:	4004      	ands	r4, r0
 800d896:	f106 010a 	add.w	r1, r6, #10
 800d89a:	4628      	mov	r0, r5
 800d89c:	f005 fa2c 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d8a0:	b2e4      	uxtb	r4, r4
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	f106 010c 	add.w	r1, r6, #12
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	401c      	ands	r4, r3
 800d8ac:	f7fa f85e 	bl	800796c <ucdr_deserialize_bool>
 800d8b0:	4004      	ands	r4, r0
 800d8b2:	e78e      	b.n	800d7d2 <uxr_deserialize_ObjectVariant+0x2a>
 800d8b4:	68b1      	ldr	r1, [r6, #8]
 800d8b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	f005 fae8 	bl	8012e90 <ucdr_deserialize_string>
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	e7b6      	b.n	800d832 <uxr_deserialize_ObjectVariant+0x8a>
 800d8c4:	68b1      	ldr	r1, [r6, #8]
 800d8c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	f005 fae0 	bl	8012e90 <ucdr_deserialize_string>
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	e7c4      	b.n	800d85e <uxr_deserialize_ObjectVariant+0xb6>
 800d8d4:	f106 0308 	add.w	r3, r6, #8
 800d8d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8dc:	f106 010c 	add.w	r1, r6, #12
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	f005 faab 	bl	8012e3c <ucdr_deserialize_sequence_uint8_t>
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	e7b9      	b.n	800d85e <uxr_deserialize_ObjectVariant+0xb6>
 800d8ea:	bf00      	nop

0800d8ec <uxr_deserialize_BaseObjectRequest>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	460e      	mov	r6, r1
 800d8f4:	f005 fa00 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d8f8:	2202      	movs	r2, #2
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	18b1      	adds	r1, r6, r2
 800d8fe:	4628      	mov	r0, r5
 800d900:	f005 f9fa 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800d904:	4020      	ands	r0, r4
 800d906:	b2c0      	uxtb	r0, r0
 800d908:	bd70      	pop	{r4, r5, r6, pc}
 800d90a:	bf00      	nop

0800d90c <uxr_serialize_ActivityInfoVariant>:
 800d90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d910:	460d      	mov	r5, r1
 800d912:	7809      	ldrb	r1, [r1, #0]
 800d914:	4607      	mov	r7, r0
 800d916:	f7fa f841 	bl	800799c <ucdr_serialize_uint8_t>
 800d91a:	4681      	mov	r9, r0
 800d91c:	b138      	cbz	r0, 800d92e <uxr_serialize_ActivityInfoVariant+0x22>
 800d91e:	782b      	ldrb	r3, [r5, #0]
 800d920:	2b06      	cmp	r3, #6
 800d922:	f000 8082 	beq.w	800da2a <uxr_serialize_ActivityInfoVariant+0x11e>
 800d926:	2b0d      	cmp	r3, #13
 800d928:	d016      	beq.n	800d958 <uxr_serialize_ActivityInfoVariant+0x4c>
 800d92a:	2b05      	cmp	r3, #5
 800d92c:	d002      	beq.n	800d934 <uxr_serialize_ActivityInfoVariant+0x28>
 800d92e:	4648      	mov	r0, r9
 800d930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d934:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d938:	4638      	mov	r0, r7
 800d93a:	f7fa fd6b 	bl	8008414 <ucdr_serialize_int16_t>
 800d93e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800d942:	4681      	mov	r9, r0
 800d944:	4638      	mov	r0, r7
 800d946:	f7fa fc95 	bl	8008274 <ucdr_serialize_uint64_t>
 800d94a:	ea09 0000 	and.w	r0, r9, r0
 800d94e:	fa5f f980 	uxtb.w	r9, r0
 800d952:	4648      	mov	r0, r9
 800d954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d958:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d95c:	4638      	mov	r0, r7
 800d95e:	f7fa fd59 	bl	8008414 <ucdr_serialize_int16_t>
 800d962:	68e9      	ldr	r1, [r5, #12]
 800d964:	4681      	mov	r9, r0
 800d966:	4638      	mov	r0, r7
 800d968:	f7fa fa2e 	bl	8007dc8 <ucdr_serialize_uint32_t>
 800d96c:	68eb      	ldr	r3, [r5, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0eb      	beq.n	800d94a <uxr_serialize_ActivityInfoVariant+0x3e>
 800d972:	b320      	cbz	r0, 800d9be <uxr_serialize_ActivityInfoVariant+0xb2>
 800d974:	f105 080c 	add.w	r8, r5, #12
 800d978:	2600      	movs	r6, #0
 800d97a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800d97e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800d982:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800d986:	4638      	mov	r0, r7
 800d988:	f7fa f808 	bl	800799c <ucdr_serialize_uint8_t>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d053      	beq.n	800da38 <uxr_serialize_ActivityInfoVariant+0x12c>
 800d990:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800d994:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800d998:	0074      	lsls	r4, r6, #1
 800d99a:	00c9      	lsls	r1, r1, #3
 800d99c:	2b03      	cmp	r3, #3
 800d99e:	d854      	bhi.n	800da4a <uxr_serialize_ActivityInfoVariant+0x13e>
 800d9a0:	e8df f003 	tbb	[pc, r3]
 800d9a4:	02102132 	.word	0x02102132
 800d9a8:	4441      	add	r1, r8
 800d9aa:	4638      	mov	r0, r7
 800d9ac:	6889      	ldr	r1, [r1, #8]
 800d9ae:	f005 fa5f 	bl	8012e70 <ucdr_serialize_string>
 800d9b2:	68ea      	ldr	r2, [r5, #12]
 800d9b4:	3601      	adds	r6, #1
 800d9b6:	4296      	cmp	r6, r2
 800d9b8:	d242      	bcs.n	800da40 <uxr_serialize_ActivityInfoVariant+0x134>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d1dd      	bne.n	800d97a <uxr_serialize_ActivityInfoVariant+0x6e>
 800d9be:	f04f 0900 	mov.w	r9, #0
 800d9c2:	e7b4      	b.n	800d92e <uxr_serialize_ActivityInfoVariant+0x22>
 800d9c4:	3108      	adds	r1, #8
 800d9c6:	4441      	add	r1, r8
 800d9c8:	2210      	movs	r2, #16
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	f005 f930 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800d9d0:	4434      	add	r4, r6
 800d9d2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d9da:	4638      	mov	r0, r7
 800d9dc:	f7fa f9f4 	bl	8007dc8 <ucdr_serialize_uint32_t>
 800d9e0:	4020      	ands	r0, r4
 800d9e2:	b2c0      	uxtb	r0, r0
 800d9e4:	e7e5      	b.n	800d9b2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800d9e6:	3108      	adds	r1, #8
 800d9e8:	4441      	add	r1, r8
 800d9ea:	2204      	movs	r2, #4
 800d9ec:	4638      	mov	r0, r7
 800d9ee:	f005 f91f 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800d9f2:	4434      	add	r4, r6
 800d9f4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d9f8:	4604      	mov	r4, r0
 800d9fa:	8b19      	ldrh	r1, [r3, #24]
 800d9fc:	4638      	mov	r0, r7
 800d9fe:	f7f9 fff9 	bl	80079f4 <ucdr_serialize_uint16_t>
 800da02:	4020      	ands	r0, r4
 800da04:	b2c0      	uxtb	r0, r0
 800da06:	e7d4      	b.n	800d9b2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800da08:	3108      	adds	r1, #8
 800da0a:	4441      	add	r1, r8
 800da0c:	2202      	movs	r2, #2
 800da0e:	4638      	mov	r0, r7
 800da10:	f005 f90e 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800da14:	4434      	add	r4, r6
 800da16:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800da1a:	4604      	mov	r4, r0
 800da1c:	7d99      	ldrb	r1, [r3, #22]
 800da1e:	4638      	mov	r0, r7
 800da20:	f7f9 ffbc 	bl	800799c <ucdr_serialize_uint8_t>
 800da24:	4020      	ands	r0, r4
 800da26:	b2c0      	uxtb	r0, r0
 800da28:	e7c3      	b.n	800d9b2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800da2a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800da2e:	4638      	mov	r0, r7
 800da30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da34:	f7fa bcee 	b.w	8008414 <ucdr_serialize_int16_t>
 800da38:	68ea      	ldr	r2, [r5, #12]
 800da3a:	3601      	adds	r6, #1
 800da3c:	42b2      	cmp	r2, r6
 800da3e:	d8be      	bhi.n	800d9be <uxr_serialize_ActivityInfoVariant+0xb2>
 800da40:	ea09 0900 	and.w	r9, r9, r0
 800da44:	fa5f f989 	uxtb.w	r9, r9
 800da48:	e771      	b.n	800d92e <uxr_serialize_ActivityInfoVariant+0x22>
 800da4a:	68eb      	ldr	r3, [r5, #12]
 800da4c:	3601      	adds	r6, #1
 800da4e:	429e      	cmp	r6, r3
 800da50:	f10a 0a18 	add.w	sl, sl, #24
 800da54:	d395      	bcc.n	800d982 <uxr_serialize_ActivityInfoVariant+0x76>
 800da56:	e76a      	b.n	800d92e <uxr_serialize_ActivityInfoVariant+0x22>

0800da58 <uxr_deserialize_BaseObjectReply>:
 800da58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da5c:	2202      	movs	r2, #2
 800da5e:	4606      	mov	r6, r0
 800da60:	460f      	mov	r7, r1
 800da62:	f005 f949 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800da66:	2202      	movs	r2, #2
 800da68:	18b9      	adds	r1, r7, r2
 800da6a:	4605      	mov	r5, r0
 800da6c:	4630      	mov	r0, r6
 800da6e:	f005 f943 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800da72:	1d39      	adds	r1, r7, #4
 800da74:	4680      	mov	r8, r0
 800da76:	4630      	mov	r0, r6
 800da78:	f7f9 ffa6 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800da7c:	1d79      	adds	r1, r7, #5
 800da7e:	4604      	mov	r4, r0
 800da80:	4630      	mov	r0, r6
 800da82:	f7f9 ffa1 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800da86:	ea05 0508 	and.w	r5, r5, r8
 800da8a:	402c      	ands	r4, r5
 800da8c:	4020      	ands	r0, r4
 800da8e:	b2c0      	uxtb	r0, r0
 800da90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da94 <uxr_serialize_ReadSpecification>:
 800da94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da98:	460e      	mov	r6, r1
 800da9a:	7809      	ldrb	r1, [r1, #0]
 800da9c:	4607      	mov	r7, r0
 800da9e:	f7f9 ff7d 	bl	800799c <ucdr_serialize_uint8_t>
 800daa2:	7871      	ldrb	r1, [r6, #1]
 800daa4:	4604      	mov	r4, r0
 800daa6:	4638      	mov	r0, r7
 800daa8:	f7f9 ff78 	bl	800799c <ucdr_serialize_uint8_t>
 800daac:	78b1      	ldrb	r1, [r6, #2]
 800daae:	4004      	ands	r4, r0
 800dab0:	4638      	mov	r0, r7
 800dab2:	f7f9 ff45 	bl	8007940 <ucdr_serialize_bool>
 800dab6:	78b3      	ldrb	r3, [r6, #2]
 800dab8:	b2e4      	uxtb	r4, r4
 800daba:	4004      	ands	r4, r0
 800dabc:	b94b      	cbnz	r3, 800dad2 <uxr_serialize_ReadSpecification+0x3e>
 800dabe:	7a31      	ldrb	r1, [r6, #8]
 800dac0:	4638      	mov	r0, r7
 800dac2:	f7f9 ff3d 	bl	8007940 <ucdr_serialize_bool>
 800dac6:	7a33      	ldrb	r3, [r6, #8]
 800dac8:	4004      	ands	r4, r0
 800daca:	b943      	cbnz	r3, 800dade <uxr_serialize_ReadSpecification+0x4a>
 800dacc:	4620      	mov	r0, r4
 800dace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad2:	6871      	ldr	r1, [r6, #4]
 800dad4:	4638      	mov	r0, r7
 800dad6:	f005 f9cb 	bl	8012e70 <ucdr_serialize_string>
 800dada:	4004      	ands	r4, r0
 800dadc:	e7ef      	b.n	800dabe <uxr_serialize_ReadSpecification+0x2a>
 800dade:	8971      	ldrh	r1, [r6, #10]
 800dae0:	4638      	mov	r0, r7
 800dae2:	f7f9 ff87 	bl	80079f4 <ucdr_serialize_uint16_t>
 800dae6:	89b1      	ldrh	r1, [r6, #12]
 800dae8:	4605      	mov	r5, r0
 800daea:	4638      	mov	r0, r7
 800daec:	f7f9 ff82 	bl	80079f4 <ucdr_serialize_uint16_t>
 800daf0:	89f1      	ldrh	r1, [r6, #14]
 800daf2:	4005      	ands	r5, r0
 800daf4:	4638      	mov	r0, r7
 800daf6:	f7f9 ff7d 	bl	80079f4 <ucdr_serialize_uint16_t>
 800dafa:	8a31      	ldrh	r1, [r6, #16]
 800dafc:	4680      	mov	r8, r0
 800dafe:	4638      	mov	r0, r7
 800db00:	f7f9 ff78 	bl	80079f4 <ucdr_serialize_uint16_t>
 800db04:	b2ed      	uxtb	r5, r5
 800db06:	4025      	ands	r5, r4
 800db08:	ea08 0505 	and.w	r5, r8, r5
 800db0c:	ea00 0405 	and.w	r4, r0, r5
 800db10:	4620      	mov	r0, r4
 800db12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db16:	bf00      	nop

0800db18 <uxr_serialize_CREATE_CLIENT_Payload>:
 800db18:	f7ff ba16 	b.w	800cf48 <uxr_serialize_CLIENT_Representation>

0800db1c <uxr_serialize_CREATE_Payload>:
 800db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1e:	2202      	movs	r2, #2
 800db20:	4607      	mov	r7, r0
 800db22:	460e      	mov	r6, r1
 800db24:	f005 f884 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800db28:	2202      	movs	r2, #2
 800db2a:	18b1      	adds	r1, r6, r2
 800db2c:	4605      	mov	r5, r0
 800db2e:	4638      	mov	r0, r7
 800db30:	f005 f87e 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800db34:	7931      	ldrb	r1, [r6, #4]
 800db36:	4604      	mov	r4, r0
 800db38:	4638      	mov	r0, r7
 800db3a:	f7f9 ff2f 	bl	800799c <ucdr_serialize_uint8_t>
 800db3e:	b170      	cbz	r0, 800db5e <uxr_serialize_CREATE_Payload+0x42>
 800db40:	7933      	ldrb	r3, [r6, #4]
 800db42:	402c      	ands	r4, r5
 800db44:	3b01      	subs	r3, #1
 800db46:	b2e4      	uxtb	r4, r4
 800db48:	2b0d      	cmp	r3, #13
 800db4a:	d809      	bhi.n	800db60 <uxr_serialize_CREATE_Payload+0x44>
 800db4c:	e8df f003 	tbb	[pc, r3]
 800db50:	23230a4c 	.word	0x23230a4c
 800db54:	0a0a0a0a 	.word	0x0a0a0a0a
 800db58:	12121208 	.word	0x12121208
 800db5c:	3e45      	.short	0x3e45
 800db5e:	2400      	movs	r4, #0
 800db60:	4620      	mov	r0, r4
 800db62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db64:	f106 0108 	add.w	r1, r6, #8
 800db68:	4638      	mov	r0, r7
 800db6a:	f7ff faf3 	bl	800d154 <uxr_serialize_DATAWRITER_Representation>
 800db6e:	4004      	ands	r4, r0
 800db70:	4620      	mov	r0, r4
 800db72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db74:	7a31      	ldrb	r1, [r6, #8]
 800db76:	4638      	mov	r0, r7
 800db78:	f7f9 ff10 	bl	800799c <ucdr_serialize_uint8_t>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d0ee      	beq.n	800db5e <uxr_serialize_CREATE_Payload+0x42>
 800db80:	7a33      	ldrb	r3, [r6, #8]
 800db82:	2b01      	cmp	r3, #1
 800db84:	d001      	beq.n	800db8a <uxr_serialize_CREATE_Payload+0x6e>
 800db86:	2b02      	cmp	r3, #2
 800db88:	d1ea      	bne.n	800db60 <uxr_serialize_CREATE_Payload+0x44>
 800db8a:	68f1      	ldr	r1, [r6, #12]
 800db8c:	4638      	mov	r0, r7
 800db8e:	f005 f96f 	bl	8012e70 <ucdr_serialize_string>
 800db92:	4004      	ands	r4, r0
 800db94:	e7e4      	b.n	800db60 <uxr_serialize_CREATE_Payload+0x44>
 800db96:	7a31      	ldrb	r1, [r6, #8]
 800db98:	4638      	mov	r0, r7
 800db9a:	f7f9 feff 	bl	800799c <ucdr_serialize_uint8_t>
 800db9e:	4605      	mov	r5, r0
 800dba0:	b158      	cbz	r0, 800dbba <uxr_serialize_CREATE_Payload+0x9e>
 800dba2:	7a33      	ldrb	r3, [r6, #8]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	d034      	beq.n	800dc12 <uxr_serialize_CREATE_Payload+0xf6>
 800dba8:	2b03      	cmp	r3, #3
 800dbaa:	d106      	bne.n	800dbba <uxr_serialize_CREATE_Payload+0x9e>
 800dbac:	68f2      	ldr	r2, [r6, #12]
 800dbae:	f106 0110 	add.w	r1, r6, #16
 800dbb2:	4638      	mov	r0, r7
 800dbb4:	f005 f930 	bl	8012e18 <ucdr_serialize_sequence_uint8_t>
 800dbb8:	4605      	mov	r5, r0
 800dbba:	2202      	movs	r2, #2
 800dbbc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	f005 f835 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800dbc6:	4028      	ands	r0, r5
 800dbc8:	4004      	ands	r4, r0
 800dbca:	e7c9      	b.n	800db60 <uxr_serialize_CREATE_Payload+0x44>
 800dbcc:	f106 0108 	add.w	r1, r6, #8
 800dbd0:	4638      	mov	r0, r7
 800dbd2:	f7ff f9b9 	bl	800cf48 <uxr_serialize_CLIENT_Representation>
 800dbd6:	4004      	ands	r4, r0
 800dbd8:	e7c2      	b.n	800db60 <uxr_serialize_CREATE_Payload+0x44>
 800dbda:	f106 0108 	add.w	r1, r6, #8
 800dbde:	4638      	mov	r0, r7
 800dbe0:	f7ff fa6e 	bl	800d0c0 <uxr_serialize_AGENT_Representation>
 800dbe4:	4004      	ands	r4, r0
 800dbe6:	e7bb      	b.n	800db60 <uxr_serialize_CREATE_Payload+0x44>
 800dbe8:	7a31      	ldrb	r1, [r6, #8]
 800dbea:	4638      	mov	r0, r7
 800dbec:	f7f9 fed6 	bl	800799c <ucdr_serialize_uint8_t>
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	b130      	cbz	r0, 800dc02 <uxr_serialize_CREATE_Payload+0xe6>
 800dbf4:	7a33      	ldrb	r3, [r6, #8]
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d011      	beq.n	800dc1e <uxr_serialize_CREATE_Payload+0x102>
 800dbfa:	2b03      	cmp	r3, #3
 800dbfc:	d015      	beq.n	800dc2a <uxr_serialize_CREATE_Payload+0x10e>
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d00d      	beq.n	800dc1e <uxr_serialize_CREATE_Payload+0x102>
 800dc02:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800dc06:	4638      	mov	r0, r7
 800dc08:	f7fa fc04 	bl	8008414 <ucdr_serialize_int16_t>
 800dc0c:	4028      	ands	r0, r5
 800dc0e:	4004      	ands	r4, r0
 800dc10:	e7a6      	b.n	800db60 <uxr_serialize_CREATE_Payload+0x44>
 800dc12:	68f1      	ldr	r1, [r6, #12]
 800dc14:	4638      	mov	r0, r7
 800dc16:	f005 f92b 	bl	8012e70 <ucdr_serialize_string>
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	e7cd      	b.n	800dbba <uxr_serialize_CREATE_Payload+0x9e>
 800dc1e:	68f1      	ldr	r1, [r6, #12]
 800dc20:	4638      	mov	r0, r7
 800dc22:	f005 f925 	bl	8012e70 <ucdr_serialize_string>
 800dc26:	4605      	mov	r5, r0
 800dc28:	e7eb      	b.n	800dc02 <uxr_serialize_CREATE_Payload+0xe6>
 800dc2a:	68f2      	ldr	r2, [r6, #12]
 800dc2c:	f106 0110 	add.w	r1, r6, #16
 800dc30:	4638      	mov	r0, r7
 800dc32:	f005 f8f1 	bl	8012e18 <ucdr_serialize_sequence_uint8_t>
 800dc36:	4605      	mov	r5, r0
 800dc38:	e7e3      	b.n	800dc02 <uxr_serialize_CREATE_Payload+0xe6>
 800dc3a:	bf00      	nop

0800dc3c <uxr_deserialize_GET_INFO_Payload>:
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	2202      	movs	r2, #2
 800dc40:	4605      	mov	r5, r0
 800dc42:	460e      	mov	r6, r1
 800dc44:	f005 f858 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800dc48:	2202      	movs	r2, #2
 800dc4a:	18b1      	adds	r1, r6, r2
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	4628      	mov	r0, r5
 800dc50:	f005 f852 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800dc54:	1d31      	adds	r1, r6, #4
 800dc56:	4004      	ands	r4, r0
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f7fa f9e5 	bl	8008028 <ucdr_deserialize_uint32_t>
 800dc5e:	b2e4      	uxtb	r4, r4
 800dc60:	4020      	ands	r0, r4
 800dc62:	bd70      	pop	{r4, r5, r6, pc}

0800dc64 <uxr_serialize_DELETE_Payload>:
 800dc64:	b570      	push	{r4, r5, r6, lr}
 800dc66:	2202      	movs	r2, #2
 800dc68:	4605      	mov	r5, r0
 800dc6a:	460e      	mov	r6, r1
 800dc6c:	f004 ffe0 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800dc70:	2202      	movs	r2, #2
 800dc72:	4604      	mov	r4, r0
 800dc74:	18b1      	adds	r1, r6, r2
 800dc76:	4628      	mov	r0, r5
 800dc78:	f004 ffda 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800dc7c:	4020      	ands	r0, r4
 800dc7e:	b2c0      	uxtb	r0, r0
 800dc80:	bd70      	pop	{r4, r5, r6, pc}
 800dc82:	bf00      	nop

0800dc84 <uxr_deserialize_STATUS_AGENT_Payload>:
 800dc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc88:	4605      	mov	r5, r0
 800dc8a:	460e      	mov	r6, r1
 800dc8c:	f7f9 fe9c 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800dc90:	1c71      	adds	r1, r6, #1
 800dc92:	4604      	mov	r4, r0
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7f9 fe97 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800dc9a:	2204      	movs	r2, #4
 800dc9c:	18b1      	adds	r1, r6, r2
 800dc9e:	4680      	mov	r8, r0
 800dca0:	4628      	mov	r0, r5
 800dca2:	f005 f829 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800dca6:	f106 0108 	add.w	r1, r6, #8
 800dcaa:	4607      	mov	r7, r0
 800dcac:	2202      	movs	r2, #2
 800dcae:	4628      	mov	r0, r5
 800dcb0:	f005 f822 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800dcb4:	ea04 0308 	and.w	r3, r4, r8
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	ea03 0407 	and.w	r4, r3, r7
 800dcbe:	2202      	movs	r2, #2
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	f106 010a 	add.w	r1, r6, #10
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	f005 f816 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800dccc:	f106 010c 	add.w	r1, r6, #12
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	461d      	mov	r5, r3
 800dcd6:	f7f9 fe49 	bl	800796c <ucdr_deserialize_bool>
 800dcda:	403c      	ands	r4, r7
 800dcdc:	4025      	ands	r5, r4
 800dcde:	4028      	ands	r0, r5
 800dce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dce4 <uxr_deserialize_STATUS_Payload>:
 800dce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce8:	2202      	movs	r2, #2
 800dcea:	4606      	mov	r6, r0
 800dcec:	460f      	mov	r7, r1
 800dcee:	f005 f803 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800dcf2:	2202      	movs	r2, #2
 800dcf4:	18b9      	adds	r1, r7, r2
 800dcf6:	4605      	mov	r5, r0
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	f004 fffd 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800dcfe:	1d39      	adds	r1, r7, #4
 800dd00:	4680      	mov	r8, r0
 800dd02:	4630      	mov	r0, r6
 800dd04:	f7f9 fe60 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800dd08:	1d79      	adds	r1, r7, #5
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	f7f9 fe5b 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800dd12:	ea05 0508 	and.w	r5, r5, r8
 800dd16:	402c      	ands	r4, r5
 800dd18:	4020      	ands	r0, r4
 800dd1a:	b2c0      	uxtb	r0, r0
 800dd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd20 <uxr_serialize_INFO_Payload>:
 800dd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd24:	2202      	movs	r2, #2
 800dd26:	460c      	mov	r4, r1
 800dd28:	4605      	mov	r5, r0
 800dd2a:	f004 ff81 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800dd2e:	2202      	movs	r2, #2
 800dd30:	18a1      	adds	r1, r4, r2
 800dd32:	4680      	mov	r8, r0
 800dd34:	4628      	mov	r0, r5
 800dd36:	f004 ff7b 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800dd3a:	7921      	ldrb	r1, [r4, #4]
 800dd3c:	4607      	mov	r7, r0
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f7f9 fe2c 	bl	800799c <ucdr_serialize_uint8_t>
 800dd44:	7961      	ldrb	r1, [r4, #5]
 800dd46:	4606      	mov	r6, r0
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f7f9 fe27 	bl	800799c <ucdr_serialize_uint8_t>
 800dd4e:	ea08 0807 	and.w	r8, r8, r7
 800dd52:	ea06 0608 	and.w	r6, r6, r8
 800dd56:	4006      	ands	r6, r0
 800dd58:	7a21      	ldrb	r1, [r4, #8]
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f7f9 fdf0 	bl	8007940 <ucdr_serialize_bool>
 800dd60:	7a23      	ldrb	r3, [r4, #8]
 800dd62:	b2f7      	uxtb	r7, r6
 800dd64:	4606      	mov	r6, r0
 800dd66:	b96b      	cbnz	r3, 800dd84 <uxr_serialize_INFO_Payload+0x64>
 800dd68:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f7f9 fde7 	bl	8007940 <ucdr_serialize_bool>
 800dd72:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800dd76:	4030      	ands	r0, r6
 800dd78:	b2c6      	uxtb	r6, r0
 800dd7a:	b983      	cbnz	r3, 800dd9e <uxr_serialize_INFO_Payload+0x7e>
 800dd7c:	ea06 0007 	and.w	r0, r6, r7
 800dd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd84:	7b21      	ldrb	r1, [r4, #12]
 800dd86:	4628      	mov	r0, r5
 800dd88:	f7f9 fe08 	bl	800799c <ucdr_serialize_uint8_t>
 800dd8c:	b188      	cbz	r0, 800ddb2 <uxr_serialize_INFO_Payload+0x92>
 800dd8e:	f104 010c 	add.w	r1, r4, #12
 800dd92:	4628      	mov	r0, r5
 800dd94:	f7ff fa06 	bl	800d1a4 <uxr_serialize_ObjectVariant.part.0>
 800dd98:	4030      	ands	r0, r6
 800dd9a:	b2c6      	uxtb	r6, r0
 800dd9c:	e7e4      	b.n	800dd68 <uxr_serialize_INFO_Payload+0x48>
 800dd9e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800dda2:	4628      	mov	r0, r5
 800dda4:	f7ff fdb2 	bl	800d90c <uxr_serialize_ActivityInfoVariant>
 800dda8:	4006      	ands	r6, r0
 800ddaa:	ea06 0007 	and.w	r0, r6, r7
 800ddae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	e7d8      	b.n	800dd68 <uxr_serialize_INFO_Payload+0x48>
 800ddb6:	bf00      	nop

0800ddb8 <uxr_serialize_READ_DATA_Payload>:
 800ddb8:	b570      	push	{r4, r5, r6, lr}
 800ddba:	2202      	movs	r2, #2
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	460e      	mov	r6, r1
 800ddc0:	f004 ff36 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800ddc4:	2202      	movs	r2, #2
 800ddc6:	18b1      	adds	r1, r6, r2
 800ddc8:	4604      	mov	r4, r0
 800ddca:	4628      	mov	r0, r5
 800ddcc:	f004 ff30 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800ddd0:	1d31      	adds	r1, r6, #4
 800ddd2:	4004      	ands	r4, r0
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	f7ff fe5d 	bl	800da94 <uxr_serialize_ReadSpecification>
 800ddda:	b2e4      	uxtb	r4, r4
 800dddc:	4020      	ands	r0, r4
 800ddde:	bd70      	pop	{r4, r5, r6, pc}

0800dde0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800dde0:	b570      	push	{r4, r5, r6, lr}
 800dde2:	2202      	movs	r2, #2
 800dde4:	4605      	mov	r5, r0
 800dde6:	460e      	mov	r6, r1
 800dde8:	f004 ff22 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800ddec:	2202      	movs	r2, #2
 800ddee:	4604      	mov	r4, r0
 800ddf0:	18b1      	adds	r1, r6, r2
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	f004 ff1c 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800ddf8:	4020      	ands	r0, r4
 800ddfa:	b2c0      	uxtb	r0, r0
 800ddfc:	bd70      	pop	{r4, r5, r6, pc}
 800ddfe:	bf00      	nop

0800de00 <uxr_serialize_ACKNACK_Payload>:
 800de00:	b570      	push	{r4, r5, r6, lr}
 800de02:	460c      	mov	r4, r1
 800de04:	460e      	mov	r6, r1
 800de06:	f834 1b02 	ldrh.w	r1, [r4], #2
 800de0a:	4605      	mov	r5, r0
 800de0c:	f7f9 fdf2 	bl	80079f4 <ucdr_serialize_uint16_t>
 800de10:	2202      	movs	r2, #2
 800de12:	4621      	mov	r1, r4
 800de14:	4604      	mov	r4, r0
 800de16:	4628      	mov	r0, r5
 800de18:	f004 ff0a 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800de1c:	7931      	ldrb	r1, [r6, #4]
 800de1e:	4004      	ands	r4, r0
 800de20:	4628      	mov	r0, r5
 800de22:	f7f9 fdbb 	bl	800799c <ucdr_serialize_uint8_t>
 800de26:	b2e4      	uxtb	r4, r4
 800de28:	4020      	ands	r0, r4
 800de2a:	bd70      	pop	{r4, r5, r6, pc}

0800de2c <uxr_deserialize_ACKNACK_Payload>:
 800de2c:	b570      	push	{r4, r5, r6, lr}
 800de2e:	4605      	mov	r5, r0
 800de30:	460e      	mov	r6, r1
 800de32:	f7f9 fedf 	bl	8007bf4 <ucdr_deserialize_uint16_t>
 800de36:	2202      	movs	r2, #2
 800de38:	18b1      	adds	r1, r6, r2
 800de3a:	4604      	mov	r4, r0
 800de3c:	4628      	mov	r0, r5
 800de3e:	f004 ff5b 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800de42:	1d31      	adds	r1, r6, #4
 800de44:	4004      	ands	r4, r0
 800de46:	4628      	mov	r0, r5
 800de48:	f7f9 fdbe 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800de4c:	b2e4      	uxtb	r4, r4
 800de4e:	4020      	ands	r0, r4
 800de50:	bd70      	pop	{r4, r5, r6, pc}
 800de52:	bf00      	nop

0800de54 <uxr_serialize_HEARTBEAT_Payload>:
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	460d      	mov	r5, r1
 800de58:	8809      	ldrh	r1, [r1, #0]
 800de5a:	4606      	mov	r6, r0
 800de5c:	f7f9 fdca 	bl	80079f4 <ucdr_serialize_uint16_t>
 800de60:	8869      	ldrh	r1, [r5, #2]
 800de62:	4604      	mov	r4, r0
 800de64:	4630      	mov	r0, r6
 800de66:	f7f9 fdc5 	bl	80079f4 <ucdr_serialize_uint16_t>
 800de6a:	7929      	ldrb	r1, [r5, #4]
 800de6c:	4004      	ands	r4, r0
 800de6e:	4630      	mov	r0, r6
 800de70:	f7f9 fd94 	bl	800799c <ucdr_serialize_uint8_t>
 800de74:	b2e4      	uxtb	r4, r4
 800de76:	4020      	ands	r0, r4
 800de78:	bd70      	pop	{r4, r5, r6, pc}
 800de7a:	bf00      	nop

0800de7c <uxr_deserialize_HEARTBEAT_Payload>:
 800de7c:	b570      	push	{r4, r5, r6, lr}
 800de7e:	4605      	mov	r5, r0
 800de80:	460e      	mov	r6, r1
 800de82:	f7f9 feb7 	bl	8007bf4 <ucdr_deserialize_uint16_t>
 800de86:	1cb1      	adds	r1, r6, #2
 800de88:	4604      	mov	r4, r0
 800de8a:	4628      	mov	r0, r5
 800de8c:	f7f9 feb2 	bl	8007bf4 <ucdr_deserialize_uint16_t>
 800de90:	1d31      	adds	r1, r6, #4
 800de92:	4004      	ands	r4, r0
 800de94:	4628      	mov	r0, r5
 800de96:	f7f9 fd97 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800de9a:	b2e4      	uxtb	r4, r4
 800de9c:	4020      	ands	r0, r4
 800de9e:	bd70      	pop	{r4, r5, r6, pc}

0800dea0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800dea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea4:	4605      	mov	r5, r0
 800dea6:	460e      	mov	r6, r1
 800dea8:	f7fa fc40 	bl	800872c <ucdr_deserialize_int32_t>
 800deac:	1d31      	adds	r1, r6, #4
 800deae:	4607      	mov	r7, r0
 800deb0:	4628      	mov	r0, r5
 800deb2:	f7fa f8b9 	bl	8008028 <ucdr_deserialize_uint32_t>
 800deb6:	f106 0108 	add.w	r1, r6, #8
 800deba:	4680      	mov	r8, r0
 800debc:	4628      	mov	r0, r5
 800debe:	f7fa fc35 	bl	800872c <ucdr_deserialize_int32_t>
 800dec2:	f106 010c 	add.w	r1, r6, #12
 800dec6:	4604      	mov	r4, r0
 800dec8:	4628      	mov	r0, r5
 800deca:	f7fa f8ad 	bl	8008028 <ucdr_deserialize_uint32_t>
 800dece:	ea07 0708 	and.w	r7, r7, r8
 800ded2:	403c      	ands	r4, r7
 800ded4:	f106 0110 	add.w	r1, r6, #16
 800ded8:	4004      	ands	r4, r0
 800deda:	4628      	mov	r0, r5
 800dedc:	f7fa fc26 	bl	800872c <ucdr_deserialize_int32_t>
 800dee0:	f106 0114 	add.w	r1, r6, #20
 800dee4:	4607      	mov	r7, r0
 800dee6:	4628      	mov	r0, r5
 800dee8:	f7fa f89e 	bl	8008028 <ucdr_deserialize_uint32_t>
 800deec:	b2e4      	uxtb	r4, r4
 800deee:	403c      	ands	r4, r7
 800def0:	4020      	ands	r0, r4
 800def2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def6:	bf00      	nop

0800def8 <uxr_serialize_SampleIdentity>:
 800def8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800defc:	220c      	movs	r2, #12
 800defe:	4604      	mov	r4, r0
 800df00:	460d      	mov	r5, r1
 800df02:	f004 fe95 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800df06:	2203      	movs	r2, #3
 800df08:	f105 010c 	add.w	r1, r5, #12
 800df0c:	4607      	mov	r7, r0
 800df0e:	4620      	mov	r0, r4
 800df10:	f004 fe8e 	bl	8012c30 <ucdr_serialize_array_uint8_t>
 800df14:	7be9      	ldrb	r1, [r5, #15]
 800df16:	4680      	mov	r8, r0
 800df18:	4620      	mov	r0, r4
 800df1a:	f7f9 fd3f 	bl	800799c <ucdr_serialize_uint8_t>
 800df1e:	6929      	ldr	r1, [r5, #16]
 800df20:	4606      	mov	r6, r0
 800df22:	4620      	mov	r0, r4
 800df24:	f7fa fb6a 	bl	80085fc <ucdr_serialize_int32_t>
 800df28:	6969      	ldr	r1, [r5, #20]
 800df2a:	4603      	mov	r3, r0
 800df2c:	4620      	mov	r0, r4
 800df2e:	ea07 0708 	and.w	r7, r7, r8
 800df32:	461c      	mov	r4, r3
 800df34:	f7f9 ff48 	bl	8007dc8 <ucdr_serialize_uint32_t>
 800df38:	403e      	ands	r6, r7
 800df3a:	4034      	ands	r4, r6
 800df3c:	4020      	ands	r0, r4
 800df3e:	b2c0      	uxtb	r0, r0
 800df40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df44 <uxr_deserialize_SampleIdentity>:
 800df44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df48:	220c      	movs	r2, #12
 800df4a:	4604      	mov	r4, r0
 800df4c:	460d      	mov	r5, r1
 800df4e:	f004 fed3 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800df52:	2203      	movs	r2, #3
 800df54:	f105 010c 	add.w	r1, r5, #12
 800df58:	4607      	mov	r7, r0
 800df5a:	4620      	mov	r0, r4
 800df5c:	f004 fecc 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 800df60:	f105 010f 	add.w	r1, r5, #15
 800df64:	4680      	mov	r8, r0
 800df66:	4620      	mov	r0, r4
 800df68:	f7f9 fd2e 	bl	80079c8 <ucdr_deserialize_uint8_t>
 800df6c:	f105 0110 	add.w	r1, r5, #16
 800df70:	4606      	mov	r6, r0
 800df72:	4620      	mov	r0, r4
 800df74:	f7fa fbda 	bl	800872c <ucdr_deserialize_int32_t>
 800df78:	f105 0114 	add.w	r1, r5, #20
 800df7c:	4603      	mov	r3, r0
 800df7e:	4620      	mov	r0, r4
 800df80:	ea07 0708 	and.w	r7, r7, r8
 800df84:	461c      	mov	r4, r3
 800df86:	f7fa f84f 	bl	8008028 <ucdr_deserialize_uint32_t>
 800df8a:	403e      	ands	r6, r7
 800df8c:	4034      	ands	r4, r6
 800df8e:	4020      	ands	r0, r4
 800df90:	b2c0      	uxtb	r0, r0
 800df92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df96:	bf00      	nop

0800df98 <rcl_client_get_rmw_handle>:
 800df98:	b118      	cbz	r0, 800dfa2 <rcl_client_get_rmw_handle+0xa>
 800df9a:	6800      	ldr	r0, [r0, #0]
 800df9c:	b108      	cbz	r0, 800dfa2 <rcl_client_get_rmw_handle+0xa>
 800df9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800dfa2:	4770      	bx	lr

0800dfa4 <rcl_send_request>:
 800dfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfa6:	b08b      	sub	sp, #44	@ 0x2c
 800dfa8:	b1e8      	cbz	r0, 800dfe6 <rcl_send_request+0x42>
 800dfaa:	4604      	mov	r4, r0
 800dfac:	6800      	ldr	r0, [r0, #0]
 800dfae:	b1d0      	cbz	r0, 800dfe6 <rcl_send_request+0x42>
 800dfb0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800dfb4:	b1bb      	cbz	r3, 800dfe6 <rcl_send_request+0x42>
 800dfb6:	460f      	mov	r7, r1
 800dfb8:	b1d1      	cbz	r1, 800dff0 <rcl_send_request+0x4c>
 800dfba:	4616      	mov	r6, r2
 800dfbc:	b1c2      	cbz	r2, 800dff0 <rcl_send_request+0x4c>
 800dfbe:	2105      	movs	r1, #5
 800dfc0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800dfc4:	f7fc f9da 	bl	800a37c <__atomic_load_8>
 800dfc8:	6823      	ldr	r3, [r4, #0]
 800dfca:	e9c6 0100 	strd	r0, r1, [r6]
 800dfce:	4632      	mov	r2, r6
 800dfd0:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	f004 f88d 	bl	80120f4 <rmw_send_request>
 800dfda:	4605      	mov	r5, r0
 800dfdc:	b160      	cbz	r0, 800dff8 <rcl_send_request+0x54>
 800dfde:	2501      	movs	r5, #1
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	b00b      	add	sp, #44	@ 0x2c
 800dfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfe6:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800dfea:	4628      	mov	r0, r5
 800dfec:	b00b      	add	sp, #44	@ 0x2c
 800dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff0:	250b      	movs	r5, #11
 800dff2:	4628      	mov	r0, r5
 800dff4:	b00b      	add	sp, #44	@ 0x2c
 800dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff8:	6820      	ldr	r0, [r4, #0]
 800dffa:	2305      	movs	r3, #5
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e002:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800e006:	f7fc fa25 	bl	800a454 <__atomic_exchange_8>
 800e00a:	6823      	ldr	r3, [r4, #0]
 800e00c:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800e010:	2a00      	cmp	r2, #0
 800e012:	d0e5      	beq.n	800dfe0 <rcl_send_request+0x3c>
 800e014:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e018:	a905      	add	r1, sp, #20
 800e01a:	f003 fc5f 	bl	80118dc <rmw_get_gid_for_client>
 800e01e:	b970      	cbnz	r0, 800e03e <rcl_send_request+0x9a>
 800e020:	6822      	ldr	r2, [r4, #0]
 800e022:	ab06      	add	r3, sp, #24
 800e024:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 800e028:	9302      	str	r3, [sp, #8]
 800e02a:	4629      	mov	r1, r5
 800e02c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800e030:	463a      	mov	r2, r7
 800e032:	e9cd 4500 	strd	r4, r5, [sp]
 800e036:	f001 f843 	bl	800f0c0 <rcl_send_service_event_message>
 800e03a:	4605      	mov	r5, r0
 800e03c:	e7d0      	b.n	800dfe0 <rcl_send_request+0x3c>
 800e03e:	f000 f875 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800e042:	4605      	mov	r5, r0
 800e044:	e7cc      	b.n	800dfe0 <rcl_send_request+0x3c>
 800e046:	bf00      	nop

0800e048 <rcl_take_response>:
 800e048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e04a:	468e      	mov	lr, r1
 800e04c:	460c      	mov	r4, r1
 800e04e:	4616      	mov	r6, r2
 800e050:	4605      	mov	r5, r0
 800e052:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e056:	b095      	sub	sp, #84	@ 0x54
 800e058:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800e05c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e060:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e064:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e068:	2d00      	cmp	r5, #0
 800e06a:	d042      	beq.n	800e0f2 <rcl_take_response+0xaa>
 800e06c:	682b      	ldr	r3, [r5, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d03f      	beq.n	800e0f2 <rcl_take_response+0xaa>
 800e072:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e076:	2800      	cmp	r0, #0
 800e078:	d03b      	beq.n	800e0f2 <rcl_take_response+0xaa>
 800e07a:	2e00      	cmp	r6, #0
 800e07c:	d03c      	beq.n	800e0f8 <rcl_take_response+0xb0>
 800e07e:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 800e110 <rcl_take_response+0xc8>
 800e082:	2300      	movs	r3, #0
 800e084:	f88d 3013 	strb.w	r3, [sp, #19]
 800e088:	4632      	mov	r2, r6
 800e08a:	f10d 0313 	add.w	r3, sp, #19
 800e08e:	a90a      	add	r1, sp, #40	@ 0x28
 800e090:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e094:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e098:	f004 f934 	bl	8012304 <rmw_take_response>
 800e09c:	4607      	mov	r7, r0
 800e09e:	bb68      	cbnz	r0, 800e0fc <rcl_take_response+0xb4>
 800e0a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800e0a4:	b363      	cbz	r3, 800e100 <rcl_take_response+0xb8>
 800e0a6:	682b      	ldr	r3, [r5, #0]
 800e0a8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800e0ac:	b19a      	cbz	r2, 800e0d6 <rcl_take_response+0x8e>
 800e0ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e0b2:	a905      	add	r1, sp, #20
 800e0b4:	f003 fc12 	bl	80118dc <rmw_get_gid_for_client>
 800e0b8:	bb28      	cbnz	r0, 800e106 <rcl_take_response+0xbe>
 800e0ba:	682a      	ldr	r2, [r5, #0]
 800e0bc:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 800e0c0:	4632      	mov	r2, r6
 800e0c2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	@ 0x48
 800e0c6:	ab06      	add	r3, sp, #24
 800e0c8:	e9cd 6700 	strd	r6, r7, [sp]
 800e0cc:	9302      	str	r3, [sp, #8]
 800e0ce:	2103      	movs	r1, #3
 800e0d0:	f000 fff6 	bl	800f0c0 <rcl_send_service_event_message>
 800e0d4:	4607      	mov	r7, r0
 800e0d6:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 800e0da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e0de:	46a4      	mov	ip, r4
 800e0e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e0e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	b015      	add	sp, #84	@ 0x54
 800e0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f2:	f44f 77fa 	mov.w	r7, #500	@ 0x1f4
 800e0f6:	e7ee      	b.n	800e0d6 <rcl_take_response+0x8e>
 800e0f8:	270b      	movs	r7, #11
 800e0fa:	e7ec      	b.n	800e0d6 <rcl_take_response+0x8e>
 800e0fc:	2701      	movs	r7, #1
 800e0fe:	e7ea      	b.n	800e0d6 <rcl_take_response+0x8e>
 800e100:	f240 17f5 	movw	r7, #501	@ 0x1f5
 800e104:	e7e7      	b.n	800e0d6 <rcl_take_response+0x8e>
 800e106:	f000 f811 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800e10a:	4607      	mov	r7, r0
 800e10c:	e7e3      	b.n	800e0d6 <rcl_take_response+0x8e>
 800e10e:	bf00      	nop
	...

0800e118 <rcl_client_is_valid>:
 800e118:	b130      	cbz	r0, 800e128 <rcl_client_is_valid+0x10>
 800e11a:	6800      	ldr	r0, [r0, #0]
 800e11c:	b120      	cbz	r0, 800e128 <rcl_client_is_valid+0x10>
 800e11e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e122:	3800      	subs	r0, #0
 800e124:	bf18      	it	ne
 800e126:	2001      	movne	r0, #1
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop

0800e12c <rcl_convert_rmw_ret_to_rcl_ret>:
 800e12c:	280b      	cmp	r0, #11
 800e12e:	dc0d      	bgt.n	800e14c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e130:	2800      	cmp	r0, #0
 800e132:	db09      	blt.n	800e148 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e134:	280b      	cmp	r0, #11
 800e136:	d807      	bhi.n	800e148 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e138:	e8df f000 	tbb	[pc, r0]
 800e13c:	07060607 	.word	0x07060607
 800e140:	06060606 	.word	0x06060606
 800e144:	07070606 	.word	0x07070606
 800e148:	2001      	movs	r0, #1
 800e14a:	4770      	bx	lr
 800e14c:	28cb      	cmp	r0, #203	@ 0xcb
 800e14e:	bf18      	it	ne
 800e150:	2001      	movne	r0, #1
 800e152:	4770      	bx	lr

0800e154 <rcl_get_zero_initialized_context>:
 800e154:	4a03      	ldr	r2, [pc, #12]	@ (800e164 <rcl_get_zero_initialized_context+0x10>)
 800e156:	4603      	mov	r3, r0
 800e158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e15c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e160:	4618      	mov	r0, r3
 800e162:	4770      	bx	lr
 800e164:	08016f2c 	.word	0x08016f2c

0800e168 <rcl_context_is_valid>:
 800e168:	b118      	cbz	r0, 800e172 <rcl_context_is_valid+0xa>
 800e16a:	6840      	ldr	r0, [r0, #4]
 800e16c:	3800      	subs	r0, #0
 800e16e:	bf18      	it	ne
 800e170:	2001      	movne	r0, #1
 800e172:	4770      	bx	lr

0800e174 <__cleanup_context>:
 800e174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e178:	4606      	mov	r6, r0
 800e17a:	6800      	ldr	r0, [r0, #0]
 800e17c:	2300      	movs	r3, #0
 800e17e:	6073      	str	r3, [r6, #4]
 800e180:	2800      	cmp	r0, #0
 800e182:	d049      	beq.n	800e218 <__cleanup_context+0xa4>
 800e184:	6947      	ldr	r7, [r0, #20]
 800e186:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e18a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e18e:	b137      	cbz	r7, 800e19e <__cleanup_context+0x2a>
 800e190:	3014      	adds	r0, #20
 800e192:	f000 faf1 	bl	800e778 <rcl_init_options_fini>
 800e196:	4607      	mov	r7, r0
 800e198:	2800      	cmp	r0, #0
 800e19a:	d144      	bne.n	800e226 <__cleanup_context+0xb2>
 800e19c:	6830      	ldr	r0, [r6, #0]
 800e19e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e1a0:	b143      	cbz	r3, 800e1b4 <__cleanup_context+0x40>
 800e1a2:	3028      	adds	r0, #40	@ 0x28
 800e1a4:	f003 fdee 	bl	8011d84 <rmw_context_fini>
 800e1a8:	b118      	cbz	r0, 800e1b2 <__cleanup_context+0x3e>
 800e1aa:	2f00      	cmp	r7, #0
 800e1ac:	d03e      	beq.n	800e22c <__cleanup_context+0xb8>
 800e1ae:	f7fc f99f 	bl	800a4f0 <rcutils_reset_error>
 800e1b2:	6830      	ldr	r0, [r6, #0]
 800e1b4:	6a03      	ldr	r3, [r0, #32]
 800e1b6:	b1db      	cbz	r3, 800e1f0 <__cleanup_context+0x7c>
 800e1b8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e1bc:	2a01      	cmp	r2, #1
 800e1be:	f17c 0100 	sbcs.w	r1, ip, #0
 800e1c2:	db11      	blt.n	800e1e8 <__cleanup_context+0x74>
 800e1c4:	2400      	movs	r4, #0
 800e1c6:	4625      	mov	r5, r4
 800e1c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e1cc:	4649      	mov	r1, r9
 800e1ce:	b1b8      	cbz	r0, 800e200 <__cleanup_context+0x8c>
 800e1d0:	47c0      	blx	r8
 800e1d2:	6833      	ldr	r3, [r6, #0]
 800e1d4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e1d8:	3401      	adds	r4, #1
 800e1da:	f145 0500 	adc.w	r5, r5, #0
 800e1de:	4294      	cmp	r4, r2
 800e1e0:	eb75 010c 	sbcs.w	r1, r5, ip
 800e1e4:	6a1b      	ldr	r3, [r3, #32]
 800e1e6:	dbef      	blt.n	800e1c8 <__cleanup_context+0x54>
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	4649      	mov	r1, r9
 800e1ec:	47c0      	blx	r8
 800e1ee:	6830      	ldr	r0, [r6, #0]
 800e1f0:	4649      	mov	r1, r9
 800e1f2:	47c0      	blx	r8
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	e9c6 3300 	strd	r3, r3, [r6]
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e200:	3401      	adds	r4, #1
 800e202:	f145 0500 	adc.w	r5, r5, #0
 800e206:	4294      	cmp	r4, r2
 800e208:	eb75 010c 	sbcs.w	r1, r5, ip
 800e20c:	dbdc      	blt.n	800e1c8 <__cleanup_context+0x54>
 800e20e:	4618      	mov	r0, r3
 800e210:	4649      	mov	r1, r9
 800e212:	47c0      	blx	r8
 800e214:	6830      	ldr	r0, [r6, #0]
 800e216:	e7eb      	b.n	800e1f0 <__cleanup_context+0x7c>
 800e218:	4607      	mov	r7, r0
 800e21a:	2300      	movs	r3, #0
 800e21c:	e9c6 3300 	strd	r3, r3, [r6]
 800e220:	4638      	mov	r0, r7
 800e222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e226:	f7fc f963 	bl	800a4f0 <rcutils_reset_error>
 800e22a:	e7b7      	b.n	800e19c <__cleanup_context+0x28>
 800e22c:	f7ff ff7e 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800e230:	4607      	mov	r7, r0
 800e232:	e7bc      	b.n	800e1ae <__cleanup_context+0x3a>

0800e234 <rcl_get_zero_initialized_guard_condition>:
 800e234:	4a03      	ldr	r2, [pc, #12]	@ (800e244 <rcl_get_zero_initialized_guard_condition+0x10>)
 800e236:	4603      	mov	r3, r0
 800e238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e23c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e240:	4618      	mov	r0, r3
 800e242:	4770      	bx	lr
 800e244:	08016f34 	.word	0x08016f34

0800e248 <rcl_guard_condition_init>:
 800e248:	b082      	sub	sp, #8
 800e24a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e24c:	b087      	sub	sp, #28
 800e24e:	ac0c      	add	r4, sp, #48	@ 0x30
 800e250:	e884 000c 	stmia.w	r4, {r2, r3}
 800e254:	46a6      	mov	lr, r4
 800e256:	460d      	mov	r5, r1
 800e258:	4604      	mov	r4, r0
 800e25a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e25e:	f10d 0c04 	add.w	ip, sp, #4
 800e262:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e266:	f8de 3000 	ldr.w	r3, [lr]
 800e26a:	f8cc 3000 	str.w	r3, [ip]
 800e26e:	a801      	add	r0, sp, #4
 800e270:	f7fc f876 	bl	800a360 <rcutils_allocator_is_valid>
 800e274:	b338      	cbz	r0, 800e2c6 <rcl_guard_condition_init+0x7e>
 800e276:	b334      	cbz	r4, 800e2c6 <rcl_guard_condition_init+0x7e>
 800e278:	6866      	ldr	r6, [r4, #4]
 800e27a:	b9ee      	cbnz	r6, 800e2b8 <rcl_guard_condition_init+0x70>
 800e27c:	b31d      	cbz	r5, 800e2c6 <rcl_guard_condition_init+0x7e>
 800e27e:	4628      	mov	r0, r5
 800e280:	f7ff ff72 	bl	800e168 <rcl_context_is_valid>
 800e284:	b308      	cbz	r0, 800e2ca <rcl_guard_condition_init+0x82>
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	9905      	ldr	r1, [sp, #20]
 800e28a:	201c      	movs	r0, #28
 800e28c:	4798      	blx	r3
 800e28e:	4607      	mov	r7, r0
 800e290:	6060      	str	r0, [r4, #4]
 800e292:	b310      	cbz	r0, 800e2da <rcl_guard_condition_init+0x92>
 800e294:	6828      	ldr	r0, [r5, #0]
 800e296:	3028      	adds	r0, #40	@ 0x28
 800e298:	f003 fb44 	bl	8011924 <rmw_create_guard_condition>
 800e29c:	6038      	str	r0, [r7, #0]
 800e29e:	6860      	ldr	r0, [r4, #4]
 800e2a0:	6805      	ldr	r5, [r0, #0]
 800e2a2:	b1a5      	cbz	r5, 800e2ce <rcl_guard_condition_init+0x86>
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	ac01      	add	r4, sp, #4
 800e2a8:	7103      	strb	r3, [r0, #4]
 800e2aa:	f100 0708 	add.w	r7, r0, #8
 800e2ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e2b0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	603b      	str	r3, [r7, #0]
 800e2b6:	e000      	b.n	800e2ba <rcl_guard_condition_init+0x72>
 800e2b8:	2664      	movs	r6, #100	@ 0x64
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	b007      	add	sp, #28
 800e2be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e2c2:	b002      	add	sp, #8
 800e2c4:	4770      	bx	lr
 800e2c6:	260b      	movs	r6, #11
 800e2c8:	e7f7      	b.n	800e2ba <rcl_guard_condition_init+0x72>
 800e2ca:	2665      	movs	r6, #101	@ 0x65
 800e2cc:	e7f5      	b.n	800e2ba <rcl_guard_condition_init+0x72>
 800e2ce:	9b02      	ldr	r3, [sp, #8]
 800e2d0:	9905      	ldr	r1, [sp, #20]
 800e2d2:	4798      	blx	r3
 800e2d4:	2601      	movs	r6, #1
 800e2d6:	6065      	str	r5, [r4, #4]
 800e2d8:	e7ef      	b.n	800e2ba <rcl_guard_condition_init+0x72>
 800e2da:	260a      	movs	r6, #10
 800e2dc:	e7ed      	b.n	800e2ba <rcl_guard_condition_init+0x72>
 800e2de:	bf00      	nop

0800e2e0 <rcl_guard_condition_init_from_rmw>:
 800e2e0:	b082      	sub	sp, #8
 800e2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e6:	b086      	sub	sp, #24
 800e2e8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	f84c 3f04 	str.w	r3, [ip, #4]!
 800e2f2:	460e      	mov	r6, r1
 800e2f4:	4617      	mov	r7, r2
 800e2f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e2fa:	f10d 0e04 	add.w	lr, sp, #4
 800e2fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e302:	f8dc 3000 	ldr.w	r3, [ip]
 800e306:	f8ce 3000 	str.w	r3, [lr]
 800e30a:	a801      	add	r0, sp, #4
 800e30c:	f7fc f828 	bl	800a360 <rcutils_allocator_is_valid>
 800e310:	b350      	cbz	r0, 800e368 <rcl_guard_condition_init_from_rmw+0x88>
 800e312:	b34c      	cbz	r4, 800e368 <rcl_guard_condition_init_from_rmw+0x88>
 800e314:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e318:	f1b8 0f00 	cmp.w	r8, #0
 800e31c:	d11e      	bne.n	800e35c <rcl_guard_condition_init_from_rmw+0x7c>
 800e31e:	b31f      	cbz	r7, 800e368 <rcl_guard_condition_init_from_rmw+0x88>
 800e320:	4638      	mov	r0, r7
 800e322:	f7ff ff21 	bl	800e168 <rcl_context_is_valid>
 800e326:	b328      	cbz	r0, 800e374 <rcl_guard_condition_init_from_rmw+0x94>
 800e328:	9b01      	ldr	r3, [sp, #4]
 800e32a:	9905      	ldr	r1, [sp, #20]
 800e32c:	201c      	movs	r0, #28
 800e32e:	4798      	blx	r3
 800e330:	4605      	mov	r5, r0
 800e332:	6060      	str	r0, [r4, #4]
 800e334:	b358      	cbz	r0, 800e38e <rcl_guard_condition_init_from_rmw+0xae>
 800e336:	b1fe      	cbz	r6, 800e378 <rcl_guard_condition_init_from_rmw+0x98>
 800e338:	6006      	str	r6, [r0, #0]
 800e33a:	f880 8004 	strb.w	r8, [r0, #4]
 800e33e:	ac01      	add	r4, sp, #4
 800e340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e342:	f105 0c08 	add.w	ip, r5, #8
 800e346:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e34a:	6823      	ldr	r3, [r4, #0]
 800e34c:	f8cc 3000 	str.w	r3, [ip]
 800e350:	2000      	movs	r0, #0
 800e352:	b006      	add	sp, #24
 800e354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e358:	b002      	add	sp, #8
 800e35a:	4770      	bx	lr
 800e35c:	2064      	movs	r0, #100	@ 0x64
 800e35e:	b006      	add	sp, #24
 800e360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e364:	b002      	add	sp, #8
 800e366:	4770      	bx	lr
 800e368:	200b      	movs	r0, #11
 800e36a:	b006      	add	sp, #24
 800e36c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e370:	b002      	add	sp, #8
 800e372:	4770      	bx	lr
 800e374:	2065      	movs	r0, #101	@ 0x65
 800e376:	e7f2      	b.n	800e35e <rcl_guard_condition_init_from_rmw+0x7e>
 800e378:	6838      	ldr	r0, [r7, #0]
 800e37a:	3028      	adds	r0, #40	@ 0x28
 800e37c:	f003 fad2 	bl	8011924 <rmw_create_guard_condition>
 800e380:	6028      	str	r0, [r5, #0]
 800e382:	6865      	ldr	r5, [r4, #4]
 800e384:	682e      	ldr	r6, [r5, #0]
 800e386:	b126      	cbz	r6, 800e392 <rcl_guard_condition_init_from_rmw+0xb2>
 800e388:	2301      	movs	r3, #1
 800e38a:	712b      	strb	r3, [r5, #4]
 800e38c:	e7d7      	b.n	800e33e <rcl_guard_condition_init_from_rmw+0x5e>
 800e38e:	200a      	movs	r0, #10
 800e390:	e7e5      	b.n	800e35e <rcl_guard_condition_init_from_rmw+0x7e>
 800e392:	4628      	mov	r0, r5
 800e394:	9b02      	ldr	r3, [sp, #8]
 800e396:	9905      	ldr	r1, [sp, #20]
 800e398:	4798      	blx	r3
 800e39a:	6066      	str	r6, [r4, #4]
 800e39c:	2001      	movs	r0, #1
 800e39e:	e7de      	b.n	800e35e <rcl_guard_condition_init_from_rmw+0x7e>

0800e3a0 <rcl_guard_condition_fini>:
 800e3a0:	b570      	push	{r4, r5, r6, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	b1f0      	cbz	r0, 800e3e4 <rcl_guard_condition_fini+0x44>
 800e3a6:	6843      	ldr	r3, [r0, #4]
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	b163      	cbz	r3, 800e3c6 <rcl_guard_condition_fini+0x26>
 800e3ac:	6818      	ldr	r0, [r3, #0]
 800e3ae:	68de      	ldr	r6, [r3, #12]
 800e3b0:	6999      	ldr	r1, [r3, #24]
 800e3b2:	b160      	cbz	r0, 800e3ce <rcl_guard_condition_fini+0x2e>
 800e3b4:	791d      	ldrb	r5, [r3, #4]
 800e3b6:	b965      	cbnz	r5, 800e3d2 <rcl_guard_condition_fini+0x32>
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	47b0      	blx	r6
 800e3bc:	2300      	movs	r3, #0
 800e3be:	4628      	mov	r0, r5
 800e3c0:	6063      	str	r3, [r4, #4]
 800e3c2:	b002      	add	sp, #8
 800e3c4:	bd70      	pop	{r4, r5, r6, pc}
 800e3c6:	461d      	mov	r5, r3
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	b002      	add	sp, #8
 800e3cc:	bd70      	pop	{r4, r5, r6, pc}
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	e7f2      	b.n	800e3b8 <rcl_guard_condition_fini+0x18>
 800e3d2:	9101      	str	r1, [sp, #4]
 800e3d4:	f003 faba 	bl	801194c <rmw_destroy_guard_condition>
 800e3d8:	1e05      	subs	r5, r0, #0
 800e3da:	6863      	ldr	r3, [r4, #4]
 800e3dc:	9901      	ldr	r1, [sp, #4]
 800e3de:	bf18      	it	ne
 800e3e0:	2501      	movne	r5, #1
 800e3e2:	e7e9      	b.n	800e3b8 <rcl_guard_condition_fini+0x18>
 800e3e4:	250b      	movs	r5, #11
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	b002      	add	sp, #8
 800e3ea:	bd70      	pop	{r4, r5, r6, pc}

0800e3ec <rcl_guard_condition_get_default_options>:
 800e3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ee:	b087      	sub	sp, #28
 800e3f0:	4606      	mov	r6, r0
 800e3f2:	4668      	mov	r0, sp
 800e3f4:	f7fb ffa6 	bl	800a344 <rcutils_get_default_allocator>
 800e3f8:	4b09      	ldr	r3, [pc, #36]	@ (800e420 <rcl_guard_condition_get_default_options+0x34>)
 800e3fa:	46ee      	mov	lr, sp
 800e3fc:	469c      	mov	ip, r3
 800e3fe:	461d      	mov	r5, r3
 800e400:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e404:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e40a:	4634      	mov	r4, r6
 800e40c:	f8de 7000 	ldr.w	r7, [lr]
 800e410:	f8cc 7000 	str.w	r7, [ip]
 800e414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e416:	4630      	mov	r0, r6
 800e418:	6027      	str	r7, [r4, #0]
 800e41a:	b007      	add	sp, #28
 800e41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e41e:	bf00      	nop
 800e420:	20011108 	.word	0x20011108

0800e424 <rcl_trigger_guard_condition>:
 800e424:	b148      	cbz	r0, 800e43a <rcl_trigger_guard_condition+0x16>
 800e426:	b508      	push	{r3, lr}
 800e428:	6843      	ldr	r3, [r0, #4]
 800e42a:	b143      	cbz	r3, 800e43e <rcl_trigger_guard_condition+0x1a>
 800e42c:	6818      	ldr	r0, [r3, #0]
 800e42e:	f004 f99d 	bl	801276c <rmw_trigger_guard_condition>
 800e432:	3800      	subs	r0, #0
 800e434:	bf18      	it	ne
 800e436:	2001      	movne	r0, #1
 800e438:	bd08      	pop	{r3, pc}
 800e43a:	200b      	movs	r0, #11
 800e43c:	4770      	bx	lr
 800e43e:	200b      	movs	r0, #11
 800e440:	bd08      	pop	{r3, pc}
 800e442:	bf00      	nop

0800e444 <rcl_guard_condition_get_rmw_handle>:
 800e444:	b110      	cbz	r0, 800e44c <rcl_guard_condition_get_rmw_handle+0x8>
 800e446:	6840      	ldr	r0, [r0, #4]
 800e448:	b100      	cbz	r0, 800e44c <rcl_guard_condition_get_rmw_handle+0x8>
 800e44a:	6800      	ldr	r0, [r0, #0]
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop

0800e450 <rcl_init>:
 800e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e454:	1e05      	subs	r5, r0, #0
 800e456:	b0a7      	sub	sp, #156	@ 0x9c
 800e458:	460e      	mov	r6, r1
 800e45a:	4690      	mov	r8, r2
 800e45c:	461f      	mov	r7, r3
 800e45e:	f340 809d 	ble.w	800e59c <rcl_init+0x14c>
 800e462:	2900      	cmp	r1, #0
 800e464:	f000 809d 	beq.w	800e5a2 <rcl_init+0x152>
 800e468:	f1a1 0e04 	sub.w	lr, r1, #4
 800e46c:	f04f 0c00 	mov.w	ip, #0
 800e470:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800e474:	f10c 0c01 	add.w	ip, ip, #1
 800e478:	2c00      	cmp	r4, #0
 800e47a:	f000 8092 	beq.w	800e5a2 <rcl_init+0x152>
 800e47e:	4565      	cmp	r5, ip
 800e480:	d1f6      	bne.n	800e470 <rcl_init+0x20>
 800e482:	f1b8 0f00 	cmp.w	r8, #0
 800e486:	f000 808c 	beq.w	800e5a2 <rcl_init+0x152>
 800e48a:	f8d8 4000 	ldr.w	r4, [r8]
 800e48e:	2c00      	cmp	r4, #0
 800e490:	f000 8087 	beq.w	800e5a2 <rcl_init+0x152>
 800e494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e496:	f10d 0c84 	add.w	ip, sp, #132	@ 0x84
 800e49a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	f8cc 3000 	str.w	r3, [ip]
 800e4a4:	a821      	add	r0, sp, #132	@ 0x84
 800e4a6:	f7fb ff5b 	bl	800a360 <rcutils_allocator_is_valid>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d079      	beq.n	800e5a2 <rcl_init+0x152>
 800e4ae:	2f00      	cmp	r7, #0
 800e4b0:	d077      	beq.n	800e5a2 <rcl_init+0x152>
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d179      	bne.n	800e5ac <rcl_init+0x15c>
 800e4b8:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800e4bc:	2198      	movs	r1, #152	@ 0x98
 800e4be:	2001      	movs	r0, #1
 800e4c0:	4798      	blx	r3
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	6038      	str	r0, [r7, #0]
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	f000 80cd 	beq.w	800e666 <rcl_init+0x216>
 800e4cc:	a802      	add	r0, sp, #8
 800e4ce:	f002 ff89 	bl	80113e4 <rmw_get_zero_initialized_context>
 800e4d2:	a902      	add	r1, sp, #8
 800e4d4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e4d8:	2270      	movs	r2, #112	@ 0x70
 800e4da:	f007 fad0 	bl	8015a7e <memcpy>
 800e4de:	f10d 0c84 	add.w	ip, sp, #132	@ 0x84
 800e4e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4e6:	f8d7 e000 	ldr.w	lr, [r7]
 800e4ea:	4674      	mov	r4, lr
 800e4ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e4f2:	6023      	str	r3, [r4, #0]
 800e4f4:	f10e 0114 	add.w	r1, lr, #20
 800e4f8:	4640      	mov	r0, r8
 800e4fa:	f000 f967 	bl	800e7cc <rcl_init_options_copy>
 800e4fe:	4604      	mov	r4, r0
 800e500:	2800      	cmp	r0, #0
 800e502:	d144      	bne.n	800e58e <rcl_init+0x13e>
 800e504:	f8d7 9000 	ldr.w	r9, [r7]
 800e508:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800e50c:	f8c9 0020 	str.w	r0, [r9, #32]
 800e510:	f8c9 5018 	str.w	r5, [r9, #24]
 800e514:	f8c9 a01c 	str.w	sl, [r9, #28]
 800e518:	2d00      	cmp	r5, #0
 800e51a:	d04e      	beq.n	800e5ba <rcl_init+0x16a>
 800e51c:	2e00      	cmp	r6, #0
 800e51e:	d04c      	beq.n	800e5ba <rcl_init+0x16a>
 800e520:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800e524:	2104      	movs	r1, #4
 800e526:	4628      	mov	r0, r5
 800e528:	4798      	blx	r3
 800e52a:	f8c9 0020 	str.w	r0, [r9, #32]
 800e52e:	f8d7 9000 	ldr.w	r9, [r7]
 800e532:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800e536:	46cb      	mov	fp, r9
 800e538:	b343      	cbz	r3, 800e58c <rcl_init+0x13c>
 800e53a:	2d01      	cmp	r5, #1
 800e53c:	f17a 0300 	sbcs.w	r3, sl, #0
 800e540:	db3b      	blt.n	800e5ba <rcl_init+0x16a>
 800e542:	2400      	movs	r4, #0
 800e544:	3e04      	subs	r6, #4
 800e546:	46a1      	mov	r9, r4
 800e548:	e00b      	b.n	800e562 <rcl_init+0x112>
 800e54a:	6831      	ldr	r1, [r6, #0]
 800e54c:	f007 fa97 	bl	8015a7e <memcpy>
 800e550:	3401      	adds	r4, #1
 800e552:	f149 0900 	adc.w	r9, r9, #0
 800e556:	45ca      	cmp	sl, r9
 800e558:	bf08      	it	eq
 800e55a:	42a5      	cmpeq	r5, r4
 800e55c:	d02b      	beq.n	800e5b6 <rcl_init+0x166>
 800e55e:	f8d7 b000 	ldr.w	fp, [r7]
 800e562:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800e566:	f7f1 fe9b 	bl	80002a0 <strlen>
 800e56a:	1c42      	adds	r2, r0, #1
 800e56c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e56e:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800e570:	f8db b020 	ldr.w	fp, [fp, #32]
 800e574:	9201      	str	r2, [sp, #4]
 800e576:	4610      	mov	r0, r2
 800e578:	4798      	blx	r3
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800e580:	6a1b      	ldr	r3, [r3, #32]
 800e582:	9a01      	ldr	r2, [sp, #4]
 800e584:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e588:	2800      	cmp	r0, #0
 800e58a:	d1de      	bne.n	800e54a <rcl_init+0xfa>
 800e58c:	240a      	movs	r4, #10
 800e58e:	4638      	mov	r0, r7
 800e590:	f7ff fdf0 	bl	800e174 <__cleanup_context>
 800e594:	4620      	mov	r0, r4
 800e596:	b027      	add	sp, #156	@ 0x9c
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59c:	2900      	cmp	r1, #0
 800e59e:	f43f af70 	beq.w	800e482 <rcl_init+0x32>
 800e5a2:	240b      	movs	r4, #11
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	b027      	add	sp, #156	@ 0x9c
 800e5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ac:	2464      	movs	r4, #100	@ 0x64
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	b027      	add	sp, #156	@ 0x9c
 800e5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b6:	f8d7 9000 	ldr.w	r9, [r7]
 800e5ba:	493f      	ldr	r1, [pc, #252]	@ (800e6b8 <rcl_init+0x268>)
 800e5bc:	680b      	ldr	r3, [r1, #0]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	d04c      	beq.n	800e65c <rcl_init+0x20c>
 800e5c2:	600b      	str	r3, [r1, #0]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800e5cc:	607b      	str	r3, [r7, #4]
 800e5ce:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	e9c5 2006 	strd	r2, r0, [r5, #24]
 800e5d6:	d05c      	beq.n	800e692 <rcl_init+0x242>
 800e5d8:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d044      	beq.n	800e66a <rcl_init+0x21a>
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d04e      	beq.n	800e682 <rcl_init+0x232>
 800e5e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e5e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e5ec:	f105 0634 	add.w	r6, r5, #52	@ 0x34
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d059      	beq.n	800e6a8 <rcl_init+0x258>
 800e5f4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800e5f6:	b953      	cbnz	r3, 800e60e <rcl_init+0x1be>
 800e5f8:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 800e5fc:	2801      	cmp	r0, #1
 800e5fe:	d008      	beq.n	800e612 <rcl_init+0x1c2>
 800e600:	a921      	add	r1, sp, #132	@ 0x84
 800e602:	4630      	mov	r0, r6
 800e604:	f006 f884 	bl	8014710 <rcl_get_discovery_static_peers>
 800e608:	4604      	mov	r4, r0
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d1bf      	bne.n	800e58e <rcl_init+0x13e>
 800e60e:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 800e612:	f006 f873 	bl	80146fc <rcl_automatic_discovery_range_to_string>
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	695b      	ldr	r3, [r3, #20]
 800e61a:	aa20      	add	r2, sp, #128	@ 0x80
 800e61c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800e61e:	a91f      	add	r1, sp, #124	@ 0x7c
 800e620:	f001 f8ec 	bl	800f7fc <rcl_validate_enclave_name>
 800e624:	4604      	mov	r4, r0
 800e626:	2800      	cmp	r0, #0
 800e628:	d1b1      	bne.n	800e58e <rcl_init+0x13e>
 800e62a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e62c:	bb7b      	cbnz	r3, 800e68e <rcl_init+0x23e>
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	694b      	ldr	r3, [r1, #20]
 800e632:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800e634:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800e638:	f000 fc60 	bl	800eefc <rcl_get_security_options_from_environment>
 800e63c:	4604      	mov	r4, r0
 800e63e:	2800      	cmp	r0, #0
 800e640:	d1a5      	bne.n	800e58e <rcl_init+0x13e>
 800e642:	6839      	ldr	r1, [r7, #0]
 800e644:	6948      	ldr	r0, [r1, #20]
 800e646:	3128      	adds	r1, #40	@ 0x28
 800e648:	3018      	adds	r0, #24
 800e64a:	f003 fa65 	bl	8011b18 <rmw_init>
 800e64e:	4604      	mov	r4, r0
 800e650:	2800      	cmp	r0, #0
 800e652:	d0a7      	beq.n	800e5a4 <rcl_init+0x154>
 800e654:	f7ff fd6a 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800e658:	4604      	mov	r4, r0
 800e65a:	e798      	b.n	800e58e <rcl_init+0x13e>
 800e65c:	2201      	movs	r2, #1
 800e65e:	4618      	mov	r0, r3
 800e660:	600a      	str	r2, [r1, #0]
 800e662:	4613      	mov	r3, r2
 800e664:	e7b0      	b.n	800e5c8 <rcl_init+0x178>
 800e666:	240a      	movs	r4, #10
 800e668:	e79c      	b.n	800e5a4 <rcl_init+0x154>
 800e66a:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800e66e:	f000 f909 	bl	800e884 <rcl_get_localhost_only>
 800e672:	4604      	mov	r4, r0
 800e674:	2800      	cmp	r0, #0
 800e676:	d18a      	bne.n	800e58e <rcl_init+0x13e>
 800e678:	683a      	ldr	r2, [r7, #0]
 800e67a:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800e67e:	6955      	ldr	r5, [r2, #20]
 800e680:	e7ae      	b.n	800e5e0 <rcl_init+0x190>
 800e682:	2002      	movs	r0, #2
 800e684:	2300      	movs	r3, #0
 800e686:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 800e68a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800e68c:	e7c1      	b.n	800e612 <rcl_init+0x1c2>
 800e68e:	2401      	movs	r4, #1
 800e690:	e77d      	b.n	800e58e <rcl_init+0x13e>
 800e692:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800e696:	f006 f8a1 	bl	80147dc <rcl_get_default_domain_id>
 800e69a:	4604      	mov	r4, r0
 800e69c:	2800      	cmp	r0, #0
 800e69e:	f47f af76 	bne.w	800e58e <rcl_init+0x13e>
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	695d      	ldr	r5, [r3, #20]
 800e6a6:	e797      	b.n	800e5d8 <rcl_init+0x188>
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	f005 ffe5 	bl	8014678 <rcl_get_automatic_discovery_range>
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d09f      	beq.n	800e5f4 <rcl_init+0x1a4>
 800e6b4:	e76b      	b.n	800e58e <rcl_init+0x13e>
 800e6b6:	bf00      	nop
 800e6b8:	2001111c 	.word	0x2001111c

0800e6bc <rcl_get_zero_initialized_init_options>:
 800e6bc:	2000      	movs	r0, #0
 800e6be:	4770      	bx	lr

0800e6c0 <rcl_init_options_init>:
 800e6c0:	b084      	sub	sp, #16
 800e6c2:	b570      	push	{r4, r5, r6, lr}
 800e6c4:	b09e      	sub	sp, #120	@ 0x78
 800e6c6:	ad23      	add	r5, sp, #140	@ 0x8c
 800e6c8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	d046      	beq.n	800e75e <rcl_init_options_init+0x9e>
 800e6d0:	6803      	ldr	r3, [r0, #0]
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	b133      	cbz	r3, 800e6e4 <rcl_init_options_init+0x24>
 800e6d6:	2564      	movs	r5, #100	@ 0x64
 800e6d8:	4628      	mov	r0, r5
 800e6da:	b01e      	add	sp, #120	@ 0x78
 800e6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6e0:	b004      	add	sp, #16
 800e6e2:	4770      	bx	lr
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f7fb fe3b 	bl	800a360 <rcutils_allocator_is_valid>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d037      	beq.n	800e75e <rcl_init_options_init+0x9e>
 800e6ee:	46ae      	mov	lr, r5
 800e6f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6f4:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e6f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6fc:	f8de 3000 	ldr.w	r3, [lr]
 800e700:	f8cc 3000 	str.w	r3, [ip]
 800e704:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800e706:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e708:	2070      	movs	r0, #112	@ 0x70
 800e70a:	4798      	blx	r3
 800e70c:	4606      	mov	r6, r0
 800e70e:	6020      	str	r0, [r4, #0]
 800e710:	b338      	cbz	r0, 800e762 <rcl_init_options_init+0xa2>
 800e712:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e716:	4686      	mov	lr, r0
 800e718:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e71c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e720:	f8dc 3000 	ldr.w	r3, [ip]
 800e724:	f8ce 3000 	str.w	r3, [lr]
 800e728:	a802      	add	r0, sp, #8
 800e72a:	f002 fe6b 	bl	8011404 <rmw_get_zero_initialized_init_options>
 800e72e:	2258      	movs	r2, #88	@ 0x58
 800e730:	a902      	add	r1, sp, #8
 800e732:	f106 0018 	add.w	r0, r6, #24
 800e736:	f007 f9a2 	bl	8015a7e <memcpy>
 800e73a:	ab26      	add	r3, sp, #152	@ 0x98
 800e73c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e740:	6826      	ldr	r6, [r4, #0]
 800e742:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e746:	f106 0018 	add.w	r0, r6, #24
 800e74a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800e74e:	f003 f911 	bl	8011974 <rmw_init_options_init>
 800e752:	4605      	mov	r5, r0
 800e754:	b938      	cbnz	r0, 800e766 <rcl_init_options_init+0xa6>
 800e756:	6823      	ldr	r3, [r4, #0]
 800e758:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 800e75c:	e7bc      	b.n	800e6d8 <rcl_init_options_init+0x18>
 800e75e:	250b      	movs	r5, #11
 800e760:	e7ba      	b.n	800e6d8 <rcl_init_options_init+0x18>
 800e762:	250a      	movs	r5, #10
 800e764:	e7b8      	b.n	800e6d8 <rcl_init_options_init+0x18>
 800e766:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800e768:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e76a:	6820      	ldr	r0, [r4, #0]
 800e76c:	4798      	blx	r3
 800e76e:	4628      	mov	r0, r5
 800e770:	f7ff fcdc 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800e774:	4605      	mov	r5, r0
 800e776:	e7af      	b.n	800e6d8 <rcl_init_options_init+0x18>

0800e778 <rcl_init_options_fini>:
 800e778:	b530      	push	{r4, r5, lr}
 800e77a:	b087      	sub	sp, #28
 800e77c:	b1f0      	cbz	r0, 800e7bc <rcl_init_options_fini+0x44>
 800e77e:	6803      	ldr	r3, [r0, #0]
 800e780:	4604      	mov	r4, r0
 800e782:	b1db      	cbz	r3, 800e7bc <rcl_init_options_fini+0x44>
 800e784:	469c      	mov	ip, r3
 800e786:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e78a:	f10d 0e04 	add.w	lr, sp, #4
 800e78e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e792:	f8dc 3000 	ldr.w	r3, [ip]
 800e796:	f8ce 3000 	str.w	r3, [lr]
 800e79a:	a801      	add	r0, sp, #4
 800e79c:	f7fb fde0 	bl	800a360 <rcutils_allocator_is_valid>
 800e7a0:	b160      	cbz	r0, 800e7bc <rcl_init_options_fini+0x44>
 800e7a2:	6820      	ldr	r0, [r4, #0]
 800e7a4:	3018      	adds	r0, #24
 800e7a6:	f003 f981 	bl	8011aac <rmw_init_options_fini>
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	b950      	cbnz	r0, 800e7c4 <rcl_init_options_fini+0x4c>
 800e7ae:	6820      	ldr	r0, [r4, #0]
 800e7b0:	9b02      	ldr	r3, [sp, #8]
 800e7b2:	9905      	ldr	r1, [sp, #20]
 800e7b4:	4798      	blx	r3
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	b007      	add	sp, #28
 800e7ba:	bd30      	pop	{r4, r5, pc}
 800e7bc:	250b      	movs	r5, #11
 800e7be:	4628      	mov	r0, r5
 800e7c0:	b007      	add	sp, #28
 800e7c2:	bd30      	pop	{r4, r5, pc}
 800e7c4:	f7ff fcb2 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	e7f8      	b.n	800e7be <rcl_init_options_fini+0x46>

0800e7cc <rcl_init_options_copy>:
 800e7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ce:	b09d      	sub	sp, #116	@ 0x74
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d04a      	beq.n	800e86a <rcl_init_options_copy+0x9e>
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	6800      	ldr	r0, [r0, #0]
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d046      	beq.n	800e86a <rcl_init_options_copy+0x9e>
 800e7dc:	460d      	mov	r5, r1
 800e7de:	f7fb fdbf 	bl	800a360 <rcutils_allocator_is_valid>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d041      	beq.n	800e86a <rcl_init_options_copy+0x9e>
 800e7e6:	2d00      	cmp	r5, #0
 800e7e8:	d03f      	beq.n	800e86a <rcl_init_options_copy+0x9e>
 800e7ea:	682b      	ldr	r3, [r5, #0]
 800e7ec:	b11b      	cbz	r3, 800e7f6 <rcl_init_options_copy+0x2a>
 800e7ee:	2464      	movs	r4, #100	@ 0x64
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	b01d      	add	sp, #116	@ 0x74
 800e7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7f6:	6826      	ldr	r6, [r4, #0]
 800e7f8:	46b6      	mov	lr, r6
 800e7fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7fe:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e806:	f8de 3000 	ldr.w	r3, [lr]
 800e80a:	6837      	ldr	r7, [r6, #0]
 800e80c:	f8cc 3000 	str.w	r3, [ip]
 800e810:	4619      	mov	r1, r3
 800e812:	2070      	movs	r0, #112	@ 0x70
 800e814:	47b8      	blx	r7
 800e816:	4606      	mov	r6, r0
 800e818:	6028      	str	r0, [r5, #0]
 800e81a:	b350      	cbz	r0, 800e872 <rcl_init_options_copy+0xa6>
 800e81c:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e820:	4686      	mov	lr, r0
 800e822:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e826:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e82a:	f8dc 3000 	ldr.w	r3, [ip]
 800e82e:	f8ce 3000 	str.w	r3, [lr]
 800e832:	4668      	mov	r0, sp
 800e834:	f002 fde6 	bl	8011404 <rmw_get_zero_initialized_init_options>
 800e838:	2258      	movs	r2, #88	@ 0x58
 800e83a:	4669      	mov	r1, sp
 800e83c:	f106 0018 	add.w	r0, r6, #24
 800e840:	f007 f91d 	bl	8015a7e <memcpy>
 800e844:	6820      	ldr	r0, [r4, #0]
 800e846:	6829      	ldr	r1, [r5, #0]
 800e848:	3018      	adds	r0, #24
 800e84a:	3118      	adds	r1, #24
 800e84c:	f003 f8fa 	bl	8011a44 <rmw_init_options_copy>
 800e850:	4604      	mov	r4, r0
 800e852:	2800      	cmp	r0, #0
 800e854:	d0cc      	beq.n	800e7f0 <rcl_init_options_copy+0x24>
 800e856:	f7fb fe35 	bl	800a4c4 <rcutils_get_error_string>
 800e85a:	f7fb fe49 	bl	800a4f0 <rcutils_reset_error>
 800e85e:	4628      	mov	r0, r5
 800e860:	f7ff ff8a 	bl	800e778 <rcl_init_options_fini>
 800e864:	b138      	cbz	r0, 800e876 <rcl_init_options_copy+0xaa>
 800e866:	4604      	mov	r4, r0
 800e868:	e7c2      	b.n	800e7f0 <rcl_init_options_copy+0x24>
 800e86a:	240b      	movs	r4, #11
 800e86c:	4620      	mov	r0, r4
 800e86e:	b01d      	add	sp, #116	@ 0x74
 800e870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e872:	240a      	movs	r4, #10
 800e874:	e7bc      	b.n	800e7f0 <rcl_init_options_copy+0x24>
 800e876:	4620      	mov	r0, r4
 800e878:	b01d      	add	sp, #116	@ 0x74
 800e87a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e87e:	f7ff bc55 	b.w	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800e882:	bf00      	nop

0800e884 <rcl_get_localhost_only>:
 800e884:	b510      	push	{r4, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	2300      	movs	r3, #0
 800e88a:	9301      	str	r3, [sp, #4]
 800e88c:	b1c0      	cbz	r0, 800e8c0 <rcl_get_localhost_only+0x3c>
 800e88e:	4604      	mov	r4, r0
 800e890:	a901      	add	r1, sp, #4
 800e892:	480d      	ldr	r0, [pc, #52]	@ (800e8c8 <rcl_get_localhost_only+0x44>)
 800e894:	f002 fb18 	bl	8010ec8 <rcutils_get_env>
 800e898:	b110      	cbz	r0, 800e8a0 <rcl_get_localhost_only+0x1c>
 800e89a:	2001      	movs	r0, #1
 800e89c:	b002      	add	sp, #8
 800e89e:	bd10      	pop	{r4, pc}
 800e8a0:	9b01      	ldr	r3, [sp, #4]
 800e8a2:	b10b      	cbz	r3, 800e8a8 <rcl_get_localhost_only+0x24>
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	b923      	cbnz	r3, 800e8b2 <rcl_get_localhost_only+0x2e>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	7023      	strb	r3, [r4, #0]
 800e8ae:	b002      	add	sp, #8
 800e8b0:	bd10      	pop	{r4, pc}
 800e8b2:	2b31      	cmp	r3, #49	@ 0x31
 800e8b4:	bf0c      	ite	eq
 800e8b6:	2301      	moveq	r3, #1
 800e8b8:	2302      	movne	r3, #2
 800e8ba:	7023      	strb	r3, [r4, #0]
 800e8bc:	b002      	add	sp, #8
 800e8be:	bd10      	pop	{r4, pc}
 800e8c0:	200b      	movs	r0, #11
 800e8c2:	b002      	add	sp, #8
 800e8c4:	bd10      	pop	{r4, pc}
 800e8c6:	bf00      	nop
 800e8c8:	08016f3c 	.word	0x08016f3c

0800e8cc <rcl_get_zero_initialized_node>:
 800e8cc:	4a03      	ldr	r2, [pc, #12]	@ (800e8dc <rcl_get_zero_initialized_node+0x10>)
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	4770      	bx	lr
 800e8dc:	08016f80 	.word	0x08016f80

0800e8e0 <rcl_node_init>:
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e4:	b0ab      	sub	sp, #172	@ 0xac
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 800e8ec:	a825      	add	r0, sp, #148	@ 0x94
 800e8ee:	460e      	mov	r6, r1
 800e8f0:	4615      	mov	r5, r2
 800e8f2:	461f      	mov	r7, r3
 800e8f4:	f7ff fd7a 	bl	800e3ec <rcl_guard_condition_get_default_options>
 800e8f8:	f1b8 0f00 	cmp.w	r8, #0
 800e8fc:	f000 80e6 	beq.w	800eacc <rcl_node_init+0x1ec>
 800e900:	4640      	mov	r0, r8
 800e902:	f7fb fd2d 	bl	800a360 <rcutils_allocator_is_valid>
 800e906:	2800      	cmp	r0, #0
 800e908:	f000 80e0 	beq.w	800eacc <rcl_node_init+0x1ec>
 800e90c:	2e00      	cmp	r6, #0
 800e90e:	f000 80dd 	beq.w	800eacc <rcl_node_init+0x1ec>
 800e912:	2d00      	cmp	r5, #0
 800e914:	f000 80da 	beq.w	800eacc <rcl_node_init+0x1ec>
 800e918:	2c00      	cmp	r4, #0
 800e91a:	f000 80d7 	beq.w	800eacc <rcl_node_init+0x1ec>
 800e91e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e922:	f1b9 0f00 	cmp.w	r9, #0
 800e926:	f040 80fd 	bne.w	800eb24 <rcl_node_init+0x244>
 800e92a:	2f00      	cmp	r7, #0
 800e92c:	f000 80ce 	beq.w	800eacc <rcl_node_init+0x1ec>
 800e930:	4638      	mov	r0, r7
 800e932:	f7ff fc19 	bl	800e168 <rcl_context_is_valid>
 800e936:	4682      	mov	sl, r0
 800e938:	2800      	cmp	r0, #0
 800e93a:	f000 80cd 	beq.w	800ead8 <rcl_node_init+0x1f8>
 800e93e:	464a      	mov	r2, r9
 800e940:	a924      	add	r1, sp, #144	@ 0x90
 800e942:	4630      	mov	r0, r6
 800e944:	f8cd 9090 	str.w	r9, [sp, #144]	@ 0x90
 800e948:	f002 ff02 	bl	8011750 <rmw_validate_node_name>
 800e94c:	4681      	mov	r9, r0
 800e94e:	2800      	cmp	r0, #0
 800e950:	f040 80be 	bne.w	800ead0 <rcl_node_init+0x1f0>
 800e954:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800e956:	2800      	cmp	r0, #0
 800e958:	f040 80f0 	bne.w	800eb3c <rcl_node_init+0x25c>
 800e95c:	4628      	mov	r0, r5
 800e95e:	f7f1 fc9f 	bl	80002a0 <strlen>
 800e962:	2800      	cmp	r0, #0
 800e964:	f040 80bb 	bne.w	800eade <rcl_node_init+0x1fe>
 800e968:	4d7c      	ldr	r5, [pc, #496]	@ (800eb5c <rcl_node_init+0x27c>)
 800e96a:	a924      	add	r1, sp, #144	@ 0x90
 800e96c:	2200      	movs	r2, #0
 800e96e:	4628      	mov	r0, r5
 800e970:	f002 fed0 	bl	8011714 <rmw_validate_namespace>
 800e974:	4681      	mov	r9, r0
 800e976:	2800      	cmp	r0, #0
 800e978:	f040 80aa 	bne.w	800ead0 <rcl_node_init+0x1f0>
 800e97c:	4682      	mov	sl, r0
 800e97e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800e980:	2800      	cmp	r0, #0
 800e982:	f040 80e0 	bne.w	800eb46 <rcl_node_init+0x266>
 800e986:	f8d8 3000 	ldr.w	r3, [r8]
 800e98a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e98e:	2080      	movs	r0, #128	@ 0x80
 800e990:	4798      	blx	r3
 800e992:	4681      	mov	r9, r0
 800e994:	6060      	str	r0, [r4, #4]
 800e996:	2800      	cmp	r0, #0
 800e998:	f000 80ca 	beq.w	800eb30 <rcl_node_init+0x250>
 800e99c:	2200      	movs	r2, #0
 800e99e:	2300      	movs	r3, #0
 800e9a0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800e9a4:	e9c9 231e 	strd	r2, r3, [r9, #120]	@ 0x78
 800e9a8:	a808      	add	r0, sp, #32
 800e9aa:	f000 f927 	bl	800ebfc <rcl_node_get_default_options>
 800e9ae:	a908      	add	r1, sp, #32
 800e9b0:	4648      	mov	r0, r9
 800e9b2:	2270      	movs	r2, #112	@ 0x70
 800e9b4:	f007 f863 	bl	8015a7e <memcpy>
 800e9b8:	6861      	ldr	r1, [r4, #4]
 800e9ba:	6027      	str	r7, [r4, #0]
 800e9bc:	4640      	mov	r0, r8
 800e9be:	f000 f92b 	bl	800ec18 <rcl_node_options_copy>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d158      	bne.n	800ea78 <rcl_node_init+0x198>
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f7f1 fc6a 	bl	80002a0 <strlen>
 800e9cc:	4428      	add	r0, r5
 800e9ce:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e9d2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800e9d6:	2b2f      	cmp	r3, #47	@ 0x2f
 800e9d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	bf0c      	ite	eq
 800e9e0:	4b5f      	ldreq	r3, [pc, #380]	@ (800eb60 <rcl_node_init+0x280>)
 800e9e2:	4b60      	ldrne	r3, [pc, #384]	@ (800eb64 <rcl_node_init+0x284>)
 800e9e4:	9302      	str	r3, [sp, #8]
 800e9e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e9ea:	9301      	str	r3, [sp, #4]
 800e9ec:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e9f0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e9f4:	f002 fa90 	bl	8010f18 <rcutils_format_string_limit>
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	f8c9 007c 	str.w	r0, [r9, #124]	@ 0x7c
 800e9fe:	6818      	ldr	r0, [r3, #0]
 800ea00:	4631      	mov	r1, r6
 800ea02:	3028      	adds	r0, #40	@ 0x28
 800ea04:	462a      	mov	r2, r5
 800ea06:	6866      	ldr	r6, [r4, #4]
 800ea08:	f003 fada 	bl	8011fc0 <rmw_create_node>
 800ea0c:	6863      	ldr	r3, [r4, #4]
 800ea0e:	6730      	str	r0, [r6, #112]	@ 0x70
 800ea10:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d032      	beq.n	800ea7c <rcl_node_init+0x19c>
 800ea16:	f003 fb67 	bl	80120e8 <rmw_node_get_graph_guard_condition>
 800ea1a:	4681      	mov	r9, r0
 800ea1c:	b360      	cbz	r0, 800ea78 <rcl_node_init+0x198>
 800ea1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ea22:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ea26:	6866      	ldr	r6, [r4, #4]
 800ea28:	2008      	movs	r0, #8
 800ea2a:	4798      	blx	r3
 800ea2c:	6863      	ldr	r3, [r4, #4]
 800ea2e:	6770      	str	r0, [r6, #116]	@ 0x74
 800ea30:	f8d3 b074 	ldr.w	fp, [r3, #116]	@ 0x74
 800ea34:	f1bb 0f00 	cmp.w	fp, #0
 800ea38:	d020      	beq.n	800ea7c <rcl_node_init+0x19c>
 800ea3a:	a806      	add	r0, sp, #24
 800ea3c:	f7ff fbfa 	bl	800e234 <rcl_get_zero_initialized_guard_condition>
 800ea40:	a806      	add	r0, sp, #24
 800ea42:	c803      	ldmia	r0, {r0, r1}
 800ea44:	6863      	ldr	r3, [r4, #4]
 800ea46:	46c4      	mov	ip, r8
 800ea48:	f8d3 e074 	ldr.w	lr, [r3, #116]	@ 0x74
 800ea4c:	e88b 0003 	stmia.w	fp, {r0, r1}
 800ea50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ea54:	ae25      	add	r6, sp, #148	@ 0x94
 800ea56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ea58:	f8dc 3000 	ldr.w	r3, [ip]
 800ea5c:	6033      	str	r3, [r6, #0]
 800ea5e:	ab2a      	add	r3, sp, #168	@ 0xa8
 800ea60:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ea64:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ea68:	4649      	mov	r1, r9
 800ea6a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800ea6c:	463a      	mov	r2, r7
 800ea6e:	4670      	mov	r0, lr
 800ea70:	f7ff fc36 	bl	800e2e0 <rcl_guard_condition_init_from_rmw>
 800ea74:	4681      	mov	r9, r0
 800ea76:	b328      	cbz	r0, 800eac4 <rcl_node_init+0x1e4>
 800ea78:	6863      	ldr	r3, [r4, #4]
 800ea7a:	b1f3      	cbz	r3, 800eaba <rcl_node_init+0x1da>
 800ea7c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ea7e:	b128      	cbz	r0, 800ea8c <rcl_node_init+0x1ac>
 800ea80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea84:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ea88:	4798      	blx	r3
 800ea8a:	6863      	ldr	r3, [r4, #4]
 800ea8c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ea8e:	b110      	cbz	r0, 800ea96 <rcl_node_init+0x1b6>
 800ea90:	f003 faae 	bl	8011ff0 <rmw_destroy_node>
 800ea94:	6863      	ldr	r3, [r4, #4]
 800ea96:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ea98:	b148      	cbz	r0, 800eaae <rcl_node_init+0x1ce>
 800ea9a:	f7ff fc81 	bl	800e3a0 <rcl_guard_condition_fini>
 800ea9e:	6863      	ldr	r3, [r4, #4]
 800eaa0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eaa4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800eaa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eaaa:	4798      	blx	r3
 800eaac:	6863      	ldr	r3, [r4, #4]
 800eaae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eab8:	4798      	blx	r3
 800eaba:	2300      	movs	r3, #0
 800eabc:	e9c4 3300 	strd	r3, r3, [r4]
 800eac0:	f04f 0901 	mov.w	r9, #1
 800eac4:	f1ba 0f00 	cmp.w	sl, #0
 800eac8:	d125      	bne.n	800eb16 <rcl_node_init+0x236>
 800eaca:	e001      	b.n	800ead0 <rcl_node_init+0x1f0>
 800eacc:	f04f 090b 	mov.w	r9, #11
 800ead0:	4648      	mov	r0, r9
 800ead2:	b02b      	add	sp, #172	@ 0xac
 800ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800eadc:	e7f8      	b.n	800ead0 <rcl_node_init+0x1f0>
 800eade:	782b      	ldrb	r3, [r5, #0]
 800eae0:	2b2f      	cmp	r3, #47	@ 0x2f
 800eae2:	f43f af42 	beq.w	800e96a <rcl_node_init+0x8a>
 800eae6:	9503      	str	r5, [sp, #12]
 800eae8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	4b1e      	ldr	r3, [pc, #120]	@ (800eb68 <rcl_node_init+0x288>)
 800eaf0:	9302      	str	r3, [sp, #8]
 800eaf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eaf6:	9301      	str	r3, [sp, #4]
 800eaf8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800eafc:	f002 fa0c 	bl	8010f18 <rcutils_format_string_limit>
 800eb00:	4605      	mov	r5, r0
 800eb02:	b340      	cbz	r0, 800eb56 <rcl_node_init+0x276>
 800eb04:	2200      	movs	r2, #0
 800eb06:	a924      	add	r1, sp, #144	@ 0x90
 800eb08:	9224      	str	r2, [sp, #144]	@ 0x90
 800eb0a:	f002 fe03 	bl	8011714 <rmw_validate_namespace>
 800eb0e:	4681      	mov	r9, r0
 800eb10:	2800      	cmp	r0, #0
 800eb12:	f43f af34 	beq.w	800e97e <rcl_node_init+0x9e>
 800eb16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb1a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eb1e:	4628      	mov	r0, r5
 800eb20:	4798      	blx	r3
 800eb22:	e7d5      	b.n	800ead0 <rcl_node_init+0x1f0>
 800eb24:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800eb28:	4648      	mov	r0, r9
 800eb2a:	b02b      	add	sp, #172	@ 0xac
 800eb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb30:	f04f 090a 	mov.w	r9, #10
 800eb34:	f1ba 0f00 	cmp.w	sl, #0
 800eb38:	d1ed      	bne.n	800eb16 <rcl_node_init+0x236>
 800eb3a:	e7c9      	b.n	800ead0 <rcl_node_init+0x1f0>
 800eb3c:	f002 fe5a 	bl	80117f4 <rmw_node_name_validation_result_string>
 800eb40:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800eb44:	e7c4      	b.n	800ead0 <rcl_node_init+0x1f0>
 800eb46:	f002 fdf7 	bl	8011738 <rmw_namespace_validation_result_string>
 800eb4a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800eb4e:	f1ba 0f00 	cmp.w	sl, #0
 800eb52:	d1e0      	bne.n	800eb16 <rcl_node_init+0x236>
 800eb54:	e7bc      	b.n	800ead0 <rcl_node_init+0x1f0>
 800eb56:	f04f 090a 	mov.w	r9, #10
 800eb5a:	e7b9      	b.n	800ead0 <rcl_node_init+0x1f0>
 800eb5c:	08016f54 	.word	0x08016f54
 800eb60:	08016d34 	.word	0x08016d34
 800eb64:	08016f5c 	.word	0x08016f5c
 800eb68:	08016f58 	.word	0x08016f58

0800eb6c <rcl_node_is_valid>:
 800eb6c:	b130      	cbz	r0, 800eb7c <rcl_node_is_valid+0x10>
 800eb6e:	6843      	ldr	r3, [r0, #4]
 800eb70:	b123      	cbz	r3, 800eb7c <rcl_node_is_valid+0x10>
 800eb72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb74:	b113      	cbz	r3, 800eb7c <rcl_node_is_valid+0x10>
 800eb76:	6800      	ldr	r0, [r0, #0]
 800eb78:	f7ff baf6 	b.w	800e168 <rcl_context_is_valid>
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	4770      	bx	lr

0800eb80 <rcl_node_get_name>:
 800eb80:	b120      	cbz	r0, 800eb8c <rcl_node_get_name+0xc>
 800eb82:	6840      	ldr	r0, [r0, #4]
 800eb84:	b110      	cbz	r0, 800eb8c <rcl_node_get_name+0xc>
 800eb86:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 800eb88:	b100      	cbz	r0, 800eb8c <rcl_node_get_name+0xc>
 800eb8a:	6880      	ldr	r0, [r0, #8]
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop

0800eb90 <rcl_node_get_namespace>:
 800eb90:	b120      	cbz	r0, 800eb9c <rcl_node_get_namespace+0xc>
 800eb92:	6840      	ldr	r0, [r0, #4]
 800eb94:	b110      	cbz	r0, 800eb9c <rcl_node_get_namespace+0xc>
 800eb96:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 800eb98:	b100      	cbz	r0, 800eb9c <rcl_node_get_namespace+0xc>
 800eb9a:	68c0      	ldr	r0, [r0, #12]
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop

0800eba0 <rcl_node_get_options>:
 800eba0:	b128      	cbz	r0, 800ebae <rcl_node_get_options+0xe>
 800eba2:	6840      	ldr	r0, [r0, #4]
 800eba4:	b118      	cbz	r0, 800ebae <rcl_node_get_options+0xe>
 800eba6:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	bf08      	it	eq
 800ebac:	2000      	moveq	r0, #0
 800ebae:	4770      	bx	lr

0800ebb0 <rcl_node_get_rmw_handle>:
 800ebb0:	b110      	cbz	r0, 800ebb8 <rcl_node_get_rmw_handle+0x8>
 800ebb2:	6840      	ldr	r0, [r0, #4]
 800ebb4:	b100      	cbz	r0, 800ebb8 <rcl_node_get_rmw_handle+0x8>
 800ebb6:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop

0800ebbc <rcl_get_disable_loaned_message>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	9301      	str	r3, [sp, #4]
 800ebc4:	b1a0      	cbz	r0, 800ebf0 <rcl_get_disable_loaned_message+0x34>
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	a901      	add	r1, sp, #4
 800ebca:	480b      	ldr	r0, [pc, #44]	@ (800ebf8 <rcl_get_disable_loaned_message+0x3c>)
 800ebcc:	f002 f97c 	bl	8010ec8 <rcutils_get_env>
 800ebd0:	b110      	cbz	r0, 800ebd8 <rcl_get_disable_loaned_message+0x1c>
 800ebd2:	2001      	movs	r0, #1
 800ebd4:	b002      	add	sp, #8
 800ebd6:	bd10      	pop	{r4, pc}
 800ebd8:	9a01      	ldr	r2, [sp, #4]
 800ebda:	7813      	ldrb	r3, [r2, #0]
 800ebdc:	3b31      	subs	r3, #49	@ 0x31
 800ebde:	bf08      	it	eq
 800ebe0:	7853      	ldrbeq	r3, [r2, #1]
 800ebe2:	fab3 f383 	clz	r3, r3
 800ebe6:	095b      	lsrs	r3, r3, #5
 800ebe8:	2000      	movs	r0, #0
 800ebea:	7023      	strb	r3, [r4, #0]
 800ebec:	b002      	add	sp, #8
 800ebee:	bd10      	pop	{r4, pc}
 800ebf0:	200b      	movs	r0, #11
 800ebf2:	b002      	add	sp, #8
 800ebf4:	bd10      	pop	{r4, pc}
 800ebf6:	bf00      	nop
 800ebf8:	08016f64 	.word	0x08016f64

0800ebfc <rcl_node_get_default_options>:
 800ebfc:	b510      	push	{r4, lr}
 800ebfe:	2270      	movs	r2, #112	@ 0x70
 800ec00:	4604      	mov	r4, r0
 800ec02:	2100      	movs	r1, #0
 800ec04:	f006 fe60 	bl	80158c8 <memset>
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f7fb fb9b 	bl	800a344 <rcutils_get_default_allocator>
 800ec0e:	2301      	movs	r3, #1
 800ec10:	7523      	strb	r3, [r4, #20]
 800ec12:	4620      	mov	r0, r4
 800ec14:	bd10      	pop	{r4, pc}
 800ec16:	bf00      	nop

0800ec18 <rcl_node_options_copy>:
 800ec18:	b1d0      	cbz	r0, 800ec50 <rcl_node_options_copy+0x38>
 800ec1a:	b570      	push	{r4, r5, r6, lr}
 800ec1c:	460c      	mov	r4, r1
 800ec1e:	b1a9      	cbz	r1, 800ec4c <rcl_node_options_copy+0x34>
 800ec20:	4288      	cmp	r0, r1
 800ec22:	4684      	mov	ip, r0
 800ec24:	d012      	beq.n	800ec4c <rcl_node_options_copy+0x34>
 800ec26:	4605      	mov	r5, r0
 800ec28:	8a86      	ldrh	r6, [r0, #20]
 800ec2a:	468e      	mov	lr, r1
 800ec2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec32:	682b      	ldr	r3, [r5, #0]
 800ec34:	f8ce 3000 	str.w	r3, [lr]
 800ec38:	f10c 0118 	add.w	r1, ip, #24
 800ec3c:	2250      	movs	r2, #80	@ 0x50
 800ec3e:	82a6      	strh	r6, [r4, #20]
 800ec40:	f104 0018 	add.w	r0, r4, #24
 800ec44:	f006 ff1b 	bl	8015a7e <memcpy>
 800ec48:	2000      	movs	r0, #0
 800ec4a:	bd70      	pop	{r4, r5, r6, pc}
 800ec4c:	200b      	movs	r0, #11
 800ec4e:	bd70      	pop	{r4, r5, r6, pc}
 800ec50:	200b      	movs	r0, #11
 800ec52:	4770      	bx	lr

0800ec54 <rcl_node_resolve_name>:
 800ec54:	b082      	sub	sp, #8
 800ec56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5a:	b091      	sub	sp, #68	@ 0x44
 800ec5c:	ac1a      	add	r4, sp, #104	@ 0x68
 800ec5e:	e884 000c 	stmia.w	r4, {r2, r3}
 800ec62:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d03b      	beq.n	800ece2 <rcl_node_resolve_name+0x8e>
 800ec6a:	460c      	mov	r4, r1
 800ec6c:	4605      	mov	r5, r0
 800ec6e:	f7ff ff97 	bl	800eba0 <rcl_node_get_options>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d037      	beq.n	800ece6 <rcl_node_resolve_name+0x92>
 800ec76:	4628      	mov	r0, r5
 800ec78:	f7ff ff82 	bl	800eb80 <rcl_node_get_name>
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f7ff ff86 	bl	800eb90 <rcl_node_get_namespace>
 800ec84:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800ec88:	4681      	mov	r9, r0
 800ec8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec8e:	ad0b      	add	r5, sp, #44	@ 0x2c
 800ec90:	46ac      	mov	ip, r5
 800ec92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec96:	f8de 3000 	ldr.w	r3, [lr]
 800ec9a:	f8cc 3000 	str.w	r3, [ip]
 800ec9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eca0:	b1fb      	cbz	r3, 800ece2 <rcl_node_resolve_name+0x8e>
 800eca2:	468a      	mov	sl, r1
 800eca4:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800eca8:	f002 fa98 	bl	80111dc <rcutils_get_zero_initialized_string_map>
 800ecac:	ab10      	add	r3, sp, #64	@ 0x40
 800ecae:	9008      	str	r0, [sp, #32]
 800ecb0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ecb4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ecb8:	2100      	movs	r1, #0
 800ecba:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ecbe:	a808      	add	r0, sp, #32
 800ecc0:	f002 fade 	bl	8011280 <rcutils_string_map_init>
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	b180      	cbz	r0, 800ecea <rcl_node_resolve_name+0x96>
 800ecc8:	f7fb fbfc 	bl	800a4c4 <rcutils_get_error_string>
 800eccc:	f7fb fc10 	bl	800a4f0 <rcutils_reset_error>
 800ecd0:	2f0a      	cmp	r7, #10
 800ecd2:	bf18      	it	ne
 800ecd4:	2701      	movne	r7, #1
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	b011      	add	sp, #68	@ 0x44
 800ecda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecde:	b002      	add	sp, #8
 800ece0:	4770      	bx	lr
 800ece2:	270b      	movs	r7, #11
 800ece4:	e7f7      	b.n	800ecd6 <rcl_node_resolve_name+0x82>
 800ece6:	2701      	movs	r7, #1
 800ece8:	e7f5      	b.n	800ecd6 <rcl_node_resolve_name+0x82>
 800ecea:	9009      	str	r0, [sp, #36]	@ 0x24
 800ecec:	9007      	str	r0, [sp, #28]
 800ecee:	a808      	add	r0, sp, #32
 800ecf0:	f005 ff06 	bl	8014b00 <rcl_get_default_topic_name_substitutions>
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	b1a8      	cbz	r0, 800ed24 <rcl_node_resolve_name+0xd0>
 800ecf8:	280a      	cmp	r0, #10
 800ecfa:	9c07      	ldr	r4, [sp, #28]
 800ecfc:	d000      	beq.n	800ed00 <rcl_node_resolve_name+0xac>
 800ecfe:	2701      	movs	r7, #1
 800ed00:	a808      	add	r0, sp, #32
 800ed02:	f002 fafb 	bl	80112fc <rcutils_string_map_fini>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d13d      	bne.n	800ed86 <rcl_node_resolve_name+0x132>
 800ed0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed0c:	4659      	mov	r1, fp
 800ed0e:	47d0      	blx	sl
 800ed10:	4659      	mov	r1, fp
 800ed12:	4620      	mov	r0, r4
 800ed14:	47d0      	blx	sl
 800ed16:	f1b8 0f00 	cmp.w	r8, #0
 800ed1a:	d0dc      	beq.n	800ecd6 <rcl_node_resolve_name+0x82>
 800ed1c:	2f67      	cmp	r7, #103	@ 0x67
 800ed1e:	bf08      	it	eq
 800ed20:	2768      	moveq	r7, #104	@ 0x68
 800ed22:	e7d8      	b.n	800ecd6 <rcl_node_resolve_name+0x82>
 800ed24:	ab09      	add	r3, sp, #36	@ 0x24
 800ed26:	9305      	str	r3, [sp, #20]
 800ed28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed2a:	46ec      	mov	ip, sp
 800ed2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed30:	682b      	ldr	r3, [r5, #0]
 800ed32:	f8cc 3000 	str.w	r3, [ip]
 800ed36:	464a      	mov	r2, r9
 800ed38:	4631      	mov	r1, r6
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	ab08      	add	r3, sp, #32
 800ed3e:	f005 fd81 	bl	8014844 <rcl_expand_topic_name>
 800ed42:	4607      	mov	r7, r0
 800ed44:	b9b8      	cbnz	r0, 800ed76 <rcl_node_resolve_name+0x122>
 800ed46:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ed48:	9009      	str	r0, [sp, #36]	@ 0x24
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	a90a      	add	r1, sp, #40	@ 0x28
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f002 fc1c 	bl	801158c <rmw_validate_full_topic_name>
 800ed54:	b988      	cbnz	r0, 800ed7a <rcl_node_resolve_name+0x126>
 800ed56:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ed58:	b9d5      	cbnz	r5, 800ed90 <rcl_node_resolve_name+0x13c>
 800ed5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ed5c:	a808      	add	r0, sp, #32
 800ed5e:	601c      	str	r4, [r3, #0]
 800ed60:	f002 facc 	bl	80112fc <rcutils_string_map_fini>
 800ed64:	4607      	mov	r7, r0
 800ed66:	b1a8      	cbz	r0, 800ed94 <rcl_node_resolve_name+0x140>
 800ed68:	f7fb fbac 	bl	800a4c4 <rcutils_get_error_string>
 800ed6c:	462c      	mov	r4, r5
 800ed6e:	f7fb fbbf 	bl	800a4f0 <rcutils_reset_error>
 800ed72:	2701      	movs	r7, #1
 800ed74:	e7c9      	b.n	800ed0a <rcl_node_resolve_name+0xb6>
 800ed76:	9c07      	ldr	r4, [sp, #28]
 800ed78:	e7c2      	b.n	800ed00 <rcl_node_resolve_name+0xac>
 800ed7a:	f7fb fba3 	bl	800a4c4 <rcutils_get_error_string>
 800ed7e:	2701      	movs	r7, #1
 800ed80:	f7fb fbb6 	bl	800a4f0 <rcutils_reset_error>
 800ed84:	e7bc      	b.n	800ed00 <rcl_node_resolve_name+0xac>
 800ed86:	f7fb fb9d 	bl	800a4c4 <rcutils_get_error_string>
 800ed8a:	f7fb fbb1 	bl	800a4f0 <rcutils_reset_error>
 800ed8e:	e7bc      	b.n	800ed0a <rcl_node_resolve_name+0xb6>
 800ed90:	2767      	movs	r7, #103	@ 0x67
 800ed92:	e7b5      	b.n	800ed00 <rcl_node_resolve_name+0xac>
 800ed94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed96:	4659      	mov	r1, fp
 800ed98:	47d0      	blx	sl
 800ed9a:	4659      	mov	r1, fp
 800ed9c:	4638      	mov	r0, r7
 800ed9e:	47d0      	blx	sl
 800eda0:	e799      	b.n	800ecd6 <rcl_node_resolve_name+0x82>
 800eda2:	bf00      	nop

0800eda4 <exact_match_lookup>:
 800eda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eda6:	f102 0708 	add.w	r7, r2, #8
 800edaa:	460b      	mov	r3, r1
 800edac:	4614      	mov	r4, r2
 800edae:	4606      	mov	r6, r0
 800edb0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800edb4:	b085      	sub	sp, #20
 800edb6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800edba:	4618      	mov	r0, r3
 800edbc:	4919      	ldr	r1, [pc, #100]	@ (800ee24 <exact_match_lookup+0x80>)
 800edbe:	e894 000c 	ldmia.w	r4, {r2, r3}
 800edc2:	f002 f89b 	bl	8010efc <rcutils_join_path>
 800edc6:	7833      	ldrb	r3, [r6, #0]
 800edc8:	2b2f      	cmp	r3, #47	@ 0x2f
 800edca:	4605      	mov	r5, r0
 800edcc:	d023      	beq.n	800ee16 <exact_match_lookup+0x72>
 800edce:	f104 030c 	add.w	r3, r4, #12
 800edd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800edd6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800edda:	1c70      	adds	r0, r6, #1
 800eddc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ede0:	f002 f892 	bl	8010f08 <rcutils_to_native_path>
 800ede4:	4606      	mov	r6, r0
 800ede6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800edea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800edee:	4631      	mov	r1, r6
 800edf0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800edf4:	4628      	mov	r0, r5
 800edf6:	f002 f881 	bl	8010efc <rcutils_join_path>
 800edfa:	6862      	ldr	r2, [r4, #4]
 800edfc:	6921      	ldr	r1, [r4, #16]
 800edfe:	4603      	mov	r3, r0
 800ee00:	4630      	mov	r0, r6
 800ee02:	461e      	mov	r6, r3
 800ee04:	4790      	blx	r2
 800ee06:	4628      	mov	r0, r5
 800ee08:	6863      	ldr	r3, [r4, #4]
 800ee0a:	6921      	ldr	r1, [r4, #16]
 800ee0c:	4798      	blx	r3
 800ee0e:	4635      	mov	r5, r6
 800ee10:	4628      	mov	r0, r5
 800ee12:	b005      	add	sp, #20
 800ee14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee16:	7873      	ldrb	r3, [r6, #1]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1d8      	bne.n	800edce <exact_match_lookup+0x2a>
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	b005      	add	sp, #20
 800ee20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee22:	bf00      	nop
 800ee24:	08016fc4 	.word	0x08016fc4

0800ee28 <rcl_get_secure_root>:
 800ee28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee2c:	b085      	sub	sp, #20
 800ee2e:	b168      	cbz	r0, 800ee4c <rcl_get_secure_root+0x24>
 800ee30:	4607      	mov	r7, r0
 800ee32:	4608      	mov	r0, r1
 800ee34:	460c      	mov	r4, r1
 800ee36:	f7fb fa93 	bl	800a360 <rcutils_allocator_is_valid>
 800ee3a:	b138      	cbz	r0, 800ee4c <rcl_get_secure_root+0x24>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	482d      	ldr	r0, [pc, #180]	@ (800eef4 <rcl_get_secure_root+0xcc>)
 800ee40:	9303      	str	r3, [sp, #12]
 800ee42:	a903      	add	r1, sp, #12
 800ee44:	f002 f840 	bl	8010ec8 <rcutils_get_env>
 800ee48:	4605      	mov	r5, r0
 800ee4a:	b120      	cbz	r0, 800ee56 <rcl_get_secure_root+0x2e>
 800ee4c:	2500      	movs	r5, #0
 800ee4e:	4628      	mov	r0, r5
 800ee50:	b005      	add	sp, #20
 800ee52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee56:	9b03      	ldr	r3, [sp, #12]
 800ee58:	781a      	ldrb	r2, [r3, #0]
 800ee5a:	2a00      	cmp	r2, #0
 800ee5c:	d0f6      	beq.n	800ee4c <rcl_get_secure_root+0x24>
 800ee5e:	f104 090c 	add.w	r9, r4, #12
 800ee62:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ee66:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ee70:	f002 f96c 	bl	801114c <rcutils_strdup>
 800ee74:	4680      	mov	r8, r0
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d0e8      	beq.n	800ee4c <rcl_get_secure_root+0x24>
 800ee7a:	481f      	ldr	r0, [pc, #124]	@ (800eef8 <rcl_get_secure_root+0xd0>)
 800ee7c:	9503      	str	r5, [sp, #12]
 800ee7e:	a903      	add	r1, sp, #12
 800ee80:	f002 f822 	bl	8010ec8 <rcutils_get_env>
 800ee84:	b160      	cbz	r0, 800eea0 <rcl_get_secure_root+0x78>
 800ee86:	2600      	movs	r6, #0
 800ee88:	6863      	ldr	r3, [r4, #4]
 800ee8a:	6921      	ldr	r1, [r4, #16]
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	4798      	blx	r3
 800ee90:	4640      	mov	r0, r8
 800ee92:	6863      	ldr	r3, [r4, #4]
 800ee94:	6921      	ldr	r1, [r4, #16]
 800ee96:	4798      	blx	r3
 800ee98:	4628      	mov	r0, r5
 800ee9a:	b005      	add	sp, #20
 800ee9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eea0:	9b03      	ldr	r3, [sp, #12]
 800eea2:	781e      	ldrb	r6, [r3, #0]
 800eea4:	b1f6      	cbz	r6, 800eee4 <rcl_get_secure_root+0xbc>
 800eea6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800eeaa:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eeb4:	f002 f94a 	bl	801114c <rcutils_strdup>
 800eeb8:	4606      	mov	r6, r0
 800eeba:	2800      	cmp	r0, #0
 800eebc:	d0e3      	beq.n	800ee86 <rcl_get_secure_root+0x5e>
 800eebe:	4622      	mov	r2, r4
 800eec0:	4641      	mov	r1, r8
 800eec2:	f7ff ff6f 	bl	800eda4 <exact_match_lookup>
 800eec6:	4605      	mov	r5, r0
 800eec8:	2d00      	cmp	r5, #0
 800eeca:	d0dd      	beq.n	800ee88 <rcl_get_secure_root+0x60>
 800eecc:	4628      	mov	r0, r5
 800eece:	f002 f813 	bl	8010ef8 <rcutils_is_directory>
 800eed2:	4603      	mov	r3, r0
 800eed4:	2800      	cmp	r0, #0
 800eed6:	d1d7      	bne.n	800ee88 <rcl_get_secure_root+0x60>
 800eed8:	4628      	mov	r0, r5
 800eeda:	6921      	ldr	r1, [r4, #16]
 800eedc:	461d      	mov	r5, r3
 800eede:	6863      	ldr	r3, [r4, #4]
 800eee0:	4798      	blx	r3
 800eee2:	e7d1      	b.n	800ee88 <rcl_get_secure_root+0x60>
 800eee4:	4622      	mov	r2, r4
 800eee6:	4638      	mov	r0, r7
 800eee8:	4641      	mov	r1, r8
 800eeea:	f7ff ff5b 	bl	800eda4 <exact_match_lookup>
 800eeee:	4605      	mov	r5, r0
 800eef0:	e7ea      	b.n	800eec8 <rcl_get_secure_root+0xa0>
 800eef2:	bf00      	nop
 800eef4:	08016fd0 	.word	0x08016fd0
 800eef8:	08016fe8 	.word	0x08016fe8

0800eefc <rcl_get_security_options_from_environment>:
 800eefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef00:	b082      	sub	sp, #8
 800ef02:	2300      	movs	r3, #0
 800ef04:	4606      	mov	r6, r0
 800ef06:	460f      	mov	r7, r1
 800ef08:	4820      	ldr	r0, [pc, #128]	@ (800ef8c <rcl_get_security_options_from_environment+0x90>)
 800ef0a:	9301      	str	r3, [sp, #4]
 800ef0c:	a901      	add	r1, sp, #4
 800ef0e:	4690      	mov	r8, r2
 800ef10:	f001 ffda 	bl	8010ec8 <rcutils_get_env>
 800ef14:	b120      	cbz	r0, 800ef20 <rcl_get_security_options_from_environment+0x24>
 800ef16:	2501      	movs	r5, #1
 800ef18:	4628      	mov	r0, r5
 800ef1a:	b002      	add	sp, #8
 800ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef20:	491b      	ldr	r1, [pc, #108]	@ (800ef90 <rcl_get_security_options_from_environment+0x94>)
 800ef22:	4604      	mov	r4, r0
 800ef24:	9801      	ldr	r0, [sp, #4]
 800ef26:	f7f1 f95b 	bl	80001e0 <strcmp>
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	b9e8      	cbnz	r0, 800ef6a <rcl_get_security_options_from_environment+0x6e>
 800ef2e:	9001      	str	r0, [sp, #4]
 800ef30:	f1b8 0f00 	cmp.w	r8, #0
 800ef34:	d020      	beq.n	800ef78 <rcl_get_security_options_from_environment+0x7c>
 800ef36:	4817      	ldr	r0, [pc, #92]	@ (800ef94 <rcl_get_security_options_from_environment+0x98>)
 800ef38:	a901      	add	r1, sp, #4
 800ef3a:	f001 ffc5 	bl	8010ec8 <rcutils_get_env>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d1e9      	bne.n	800ef16 <rcl_get_security_options_from_environment+0x1a>
 800ef42:	4915      	ldr	r1, [pc, #84]	@ (800ef98 <rcl_get_security_options_from_environment+0x9c>)
 800ef44:	9801      	ldr	r0, [sp, #4]
 800ef46:	f7f1 f94b 	bl	80001e0 <strcmp>
 800ef4a:	fab0 f080 	clz	r0, r0
 800ef4e:	0940      	lsrs	r0, r0, #5
 800ef50:	f888 0000 	strb.w	r0, [r8]
 800ef54:	4639      	mov	r1, r7
 800ef56:	4630      	mov	r0, r6
 800ef58:	f7ff ff66 	bl	800ee28 <rcl_get_secure_root>
 800ef5c:	b170      	cbz	r0, 800ef7c <rcl_get_security_options_from_environment+0x80>
 800ef5e:	f8c8 0004 	str.w	r0, [r8, #4]
 800ef62:	4628      	mov	r0, r5
 800ef64:	b002      	add	sp, #8
 800ef66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef6a:	4625      	mov	r5, r4
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f888 4000 	strb.w	r4, [r8]
 800ef72:	b002      	add	sp, #8
 800ef74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef78:	250b      	movs	r5, #11
 800ef7a:	e7cd      	b.n	800ef18 <rcl_get_security_options_from_environment+0x1c>
 800ef7c:	f898 5000 	ldrb.w	r5, [r8]
 800ef80:	f1a5 0501 	sub.w	r5, r5, #1
 800ef84:	fab5 f585 	clz	r5, r5
 800ef88:	096d      	lsrs	r5, r5, #5
 800ef8a:	e7c5      	b.n	800ef18 <rcl_get_security_options_from_environment+0x1c>
 800ef8c:	08016f88 	.word	0x08016f88
 800ef90:	08016f9c 	.word	0x08016f9c
 800ef94:	08016fa4 	.word	0x08016fa4
 800ef98:	08016fbc 	.word	0x08016fbc

0800ef9c <rcl_service_get_rmw_handle>:
 800ef9c:	b118      	cbz	r0, 800efa6 <rcl_service_get_rmw_handle+0xa>
 800ef9e:	6800      	ldr	r0, [r0, #0]
 800efa0:	b108      	cbz	r0, 800efa6 <rcl_service_get_rmw_handle+0xa>
 800efa2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800efa6:	4770      	bx	lr

0800efa8 <rcl_take_request>:
 800efa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efaa:	468e      	mov	lr, r1
 800efac:	460c      	mov	r4, r1
 800efae:	4617      	mov	r7, r2
 800efb0:	4605      	mov	r5, r0
 800efb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800efb6:	b091      	sub	sp, #68	@ 0x44
 800efb8:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 800efbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efc0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800efc4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800efc8:	b30d      	cbz	r5, 800f00e <rcl_take_request+0x66>
 800efca:	682b      	ldr	r3, [r5, #0]
 800efcc:	b1fb      	cbz	r3, 800f00e <rcl_take_request+0x66>
 800efce:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800efd2:	b1e0      	cbz	r0, 800f00e <rcl_take_request+0x66>
 800efd4:	b397      	cbz	r7, 800f03c <rcl_take_request+0x94>
 800efd6:	2300      	movs	r3, #0
 800efd8:	f88d 3017 	strb.w	r3, [sp, #23]
 800efdc:	463a      	mov	r2, r7
 800efde:	f10d 0317 	add.w	r3, sp, #23
 800efe2:	a906      	add	r1, sp, #24
 800efe4:	f003 f8d4 	bl	8012190 <rmw_take_request>
 800efe8:	4606      	mov	r6, r0
 800efea:	b198      	cbz	r0, 800f014 <rcl_take_request+0x6c>
 800efec:	280a      	cmp	r0, #10
 800efee:	bf18      	it	ne
 800eff0:	2601      	movne	r6, #1
 800eff2:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 800eff6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800effa:	46a6      	mov	lr, r4
 800effc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f000:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f004:	e88e 0003 	stmia.w	lr, {r0, r1}
 800f008:	4630      	mov	r0, r6
 800f00a:	b011      	add	sp, #68	@ 0x44
 800f00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f00e:	f44f 7616 	mov.w	r6, #600	@ 0x258
 800f012:	e7ee      	b.n	800eff2 <rcl_take_request+0x4a>
 800f014:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800f018:	b193      	cbz	r3, 800f040 <rcl_take_request+0x98>
 800f01a:	682b      	ldr	r3, [r5, #0]
 800f01c:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 800f020:	2800      	cmp	r0, #0
 800f022:	d0e6      	beq.n	800eff2 <rcl_take_request+0x4a>
 800f024:	463a      	mov	r2, r7
 800f026:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 800f02a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f02c:	e9cd 6700 	strd	r6, r7, [sp]
 800f030:	9302      	str	r3, [sp, #8]
 800f032:	2101      	movs	r1, #1
 800f034:	f000 f844 	bl	800f0c0 <rcl_send_service_event_message>
 800f038:	4606      	mov	r6, r0
 800f03a:	e7da      	b.n	800eff2 <rcl_take_request+0x4a>
 800f03c:	260b      	movs	r6, #11
 800f03e:	e7d8      	b.n	800eff2 <rcl_take_request+0x4a>
 800f040:	f240 2659 	movw	r6, #601	@ 0x259
 800f044:	e7d5      	b.n	800eff2 <rcl_take_request+0x4a>
 800f046:	bf00      	nop

0800f048 <rcl_send_response>:
 800f048:	b350      	cbz	r0, 800f0a0 <rcl_send_response+0x58>
 800f04a:	b570      	push	{r4, r5, r6, lr}
 800f04c:	6803      	ldr	r3, [r0, #0]
 800f04e:	b084      	sub	sp, #16
 800f050:	4604      	mov	r4, r0
 800f052:	b1cb      	cbz	r3, 800f088 <rcl_send_response+0x40>
 800f054:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f058:	b1b0      	cbz	r0, 800f088 <rcl_send_response+0x40>
 800f05a:	460e      	mov	r6, r1
 800f05c:	b1e9      	cbz	r1, 800f09a <rcl_send_response+0x52>
 800f05e:	4615      	mov	r5, r2
 800f060:	b1da      	cbz	r2, 800f09a <rcl_send_response+0x52>
 800f062:	f003 f8f3 	bl	801224c <rmw_send_response>
 800f066:	b998      	cbnz	r0, 800f090 <rcl_send_response+0x48>
 800f068:	6823      	ldr	r3, [r4, #0]
 800f06a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800f06e:	b16b      	cbz	r3, 800f08c <rcl_send_response+0x44>
 800f070:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 800f074:	462a      	mov	r2, r5
 800f076:	e9cd 0100 	strd	r0, r1, [sp]
 800f07a:	9602      	str	r6, [sp, #8]
 800f07c:	2102      	movs	r1, #2
 800f07e:	4618      	mov	r0, r3
 800f080:	f000 f81e 	bl	800f0c0 <rcl_send_service_event_message>
 800f084:	b004      	add	sp, #16
 800f086:	bd70      	pop	{r4, r5, r6, pc}
 800f088:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800f08c:	b004      	add	sp, #16
 800f08e:	bd70      	pop	{r4, r5, r6, pc}
 800f090:	2802      	cmp	r0, #2
 800f092:	bf18      	it	ne
 800f094:	2001      	movne	r0, #1
 800f096:	b004      	add	sp, #16
 800f098:	bd70      	pop	{r4, r5, r6, pc}
 800f09a:	200b      	movs	r0, #11
 800f09c:	b004      	add	sp, #16
 800f09e:	bd70      	pop	{r4, r5, r6, pc}
 800f0a0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop

0800f0a8 <rcl_service_is_valid>:
 800f0a8:	b130      	cbz	r0, 800f0b8 <rcl_service_is_valid+0x10>
 800f0aa:	6800      	ldr	r0, [r0, #0]
 800f0ac:	b120      	cbz	r0, 800f0b8 <rcl_service_is_valid+0x10>
 800f0ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f0b2:	3800      	subs	r0, #0
 800f0b4:	bf18      	it	ne
 800f0b6:	2001      	movne	r0, #1
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	0000      	movs	r0, r0
	...

0800f0c0 <rcl_send_service_event_message>:
 800f0c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0c4:	b093      	sub	sp, #76	@ 0x4c
 800f0c6:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f0c8:	b192      	cbz	r2, 800f0f0 <rcl_send_service_event_message+0x30>
 800f0ca:	b18e      	cbz	r6, 800f0f0 <rcl_send_service_event_message+0x30>
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	b150      	cbz	r0, 800f0e6 <rcl_send_service_event_message+0x26>
 800f0d0:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800f0d4:	b13b      	cbz	r3, 800f0e6 <rcl_send_service_event_message+0x26>
 800f0d6:	68c0      	ldr	r0, [r0, #12]
 800f0d8:	460f      	mov	r7, r1
 800f0da:	4615      	mov	r5, r2
 800f0dc:	f000 f9e8 	bl	800f4b0 <rcl_clock_valid>
 800f0e0:	b108      	cbz	r0, 800f0e6 <rcl_send_service_event_message+0x26>
 800f0e2:	7a23      	ldrb	r3, [r4, #8]
 800f0e4:	b94b      	cbnz	r3, 800f0fa <rcl_send_service_event_message+0x3a>
 800f0e6:	2401      	movs	r4, #1
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	b013      	add	sp, #76	@ 0x4c
 800f0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0f0:	240b      	movs	r4, #11
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	b013      	add	sp, #76	@ 0x4c
 800f0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0fa:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 800f0fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f102:	f10d 0c0c 	add.w	ip, sp, #12
 800f106:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f10a:	f8de 3000 	ldr.w	r3, [lr]
 800f10e:	f8cc 3000 	str.w	r3, [ip]
 800f112:	a803      	add	r0, sp, #12
 800f114:	f7fb f924 	bl	800a360 <rcutils_allocator_is_valid>
 800f118:	2800      	cmp	r0, #0
 800f11a:	d0e9      	beq.n	800f0f0 <rcl_send_service_event_message+0x30>
 800f11c:	6820      	ldr	r0, [r4, #0]
 800f11e:	f7f9 fef1 	bl	8008f04 <rcl_publisher_is_valid>
 800f122:	2800      	cmp	r0, #0
 800f124:	d05b      	beq.n	800f1de <rcl_send_service_event_message+0x11e>
 800f126:	4669      	mov	r1, sp
 800f128:	68e0      	ldr	r0, [r4, #12]
 800f12a:	f000 fa43 	bl	800f5b4 <rcl_clock_get_now>
 800f12e:	4601      	mov	r1, r0
 800f130:	2800      	cmp	r0, #0
 800f132:	d144      	bne.n	800f1be <rcl_send_service_event_message+0xfe>
 800f134:	2220      	movs	r2, #32
 800f136:	eb0d 0002 	add.w	r0, sp, r2
 800f13a:	f006 fbc5 	bl	80158c8 <memset>
 800f13e:	e9dd 8900 	ldrd	r8, r9, [sp]
 800f142:	a329      	add	r3, pc, #164	@ (adr r3, 800f1e8 <rcl_send_service_event_message+0x128>)
 800f144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f148:	4640      	mov	r0, r8
 800f14a:	4649      	mov	r1, r9
 800f14c:	f88d 7020 	strb.w	r7, [sp, #32]
 800f150:	f7f1 f8ae 	bl	80002b0 <__aeabi_ldivmod>
 800f154:	a324      	add	r3, pc, #144	@ (adr r3, 800f1e8 <rcl_send_service_event_message+0x128>)
 800f156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15a:	9009      	str	r0, [sp, #36]	@ 0x24
 800f15c:	4649      	mov	r1, r9
 800f15e:	4640      	mov	r0, r8
 800f160:	f7f1 f8a6 	bl	80002b0 <__aeabi_ldivmod>
 800f164:	920a      	str	r2, [sp, #40]	@ 0x28
 800f166:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	@ 0x68
 800f16a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f16e:	7a23      	ldrb	r3, [r4, #8]
 800f170:	6830      	ldr	r0, [r6, #0]
 800f172:	6871      	ldr	r1, [r6, #4]
 800f174:	68b2      	ldr	r2, [r6, #8]
 800f176:	2b01      	cmp	r3, #1
 800f178:	68f3      	ldr	r3, [r6, #12]
 800f17a:	bf08      	it	eq
 800f17c:	2500      	moveq	r5, #0
 800f17e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800f180:	2f01      	cmp	r7, #1
 800f182:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f184:	d81e      	bhi.n	800f1c4 <rcl_send_service_event_message+0x104>
 800f186:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f18a:	462a      	mov	r2, r5
 800f18c:	a808      	add	r0, sp, #32
 800f18e:	699d      	ldr	r5, [r3, #24]
 800f190:	a903      	add	r1, sp, #12
 800f192:	2300      	movs	r3, #0
 800f194:	47a8      	blx	r5
 800f196:	4605      	mov	r5, r0
 800f198:	2d00      	cmp	r5, #0
 800f19a:	d0a4      	beq.n	800f0e6 <rcl_send_service_event_message+0x26>
 800f19c:	6820      	ldr	r0, [r4, #0]
 800f19e:	4629      	mov	r1, r5
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f7f9 fe8b 	bl	8008ebc <rcl_publish>
 800f1a6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f1aa:	a903      	add	r1, sp, #12
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	69db      	ldr	r3, [r3, #28]
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	4798      	blx	r3
 800f1b4:	2c00      	cmp	r4, #0
 800f1b6:	d097      	beq.n	800f0e8 <rcl_send_service_event_message+0x28>
 800f1b8:	f7fb f99a 	bl	800a4f0 <rcutils_reset_error>
 800f1bc:	e794      	b.n	800f0e8 <rcl_send_service_event_message+0x28>
 800f1be:	f7fb f997 	bl	800a4f0 <rcutils_reset_error>
 800f1c2:	e790      	b.n	800f0e6 <rcl_send_service_event_message+0x26>
 800f1c4:	1eb9      	subs	r1, r7, #2
 800f1c6:	2901      	cmp	r1, #1
 800f1c8:	d8f9      	bhi.n	800f1be <rcl_send_service_event_message+0xfe>
 800f1ca:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f1ce:	462b      	mov	r3, r5
 800f1d0:	a808      	add	r0, sp, #32
 800f1d2:	6995      	ldr	r5, [r2, #24]
 800f1d4:	a903      	add	r1, sp, #12
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	47a8      	blx	r5
 800f1da:	4605      	mov	r5, r0
 800f1dc:	e7dc      	b.n	800f198 <rcl_send_service_event_message+0xd8>
 800f1de:	f44f 7496 	mov.w	r4, #300	@ 0x12c
 800f1e2:	e781      	b.n	800f0e8 <rcl_send_service_event_message+0x28>
 800f1e4:	f3af 8000 	nop.w
 800f1e8:	3b9aca00 	.word	0x3b9aca00
 800f1ec:	00000000 	.word	0x00000000

0800f1f0 <rcl_get_zero_initialized_subscription>:
 800f1f0:	4b01      	ldr	r3, [pc, #4]	@ (800f1f8 <rcl_get_zero_initialized_subscription+0x8>)
 800f1f2:	6818      	ldr	r0, [r3, #0]
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	08017008 	.word	0x08017008

0800f1fc <rcl_subscription_init>:
 800f1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f200:	b089      	sub	sp, #36	@ 0x24
 800f202:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800f204:	b1d6      	cbz	r6, 800f23c <rcl_subscription_init+0x40>
 800f206:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800f20a:	4604      	mov	r4, r0
 800f20c:	4648      	mov	r0, r9
 800f20e:	460d      	mov	r5, r1
 800f210:	4690      	mov	r8, r2
 800f212:	461f      	mov	r7, r3
 800f214:	f7fb f8a4 	bl	800a360 <rcutils_allocator_is_valid>
 800f218:	b180      	cbz	r0, 800f23c <rcl_subscription_init+0x40>
 800f21a:	b17c      	cbz	r4, 800f23c <rcl_subscription_init+0x40>
 800f21c:	4628      	mov	r0, r5
 800f21e:	f7ff fca5 	bl	800eb6c <rcl_node_is_valid>
 800f222:	2800      	cmp	r0, #0
 800f224:	d054      	beq.n	800f2d0 <rcl_subscription_init+0xd4>
 800f226:	f1b8 0f00 	cmp.w	r8, #0
 800f22a:	d007      	beq.n	800f23c <rcl_subscription_init+0x40>
 800f22c:	b137      	cbz	r7, 800f23c <rcl_subscription_init+0x40>
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	b14b      	cbz	r3, 800f246 <rcl_subscription_init+0x4a>
 800f232:	2764      	movs	r7, #100	@ 0x64
 800f234:	4638      	mov	r0, r7
 800f236:	b009      	add	sp, #36	@ 0x24
 800f238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f23c:	270b      	movs	r7, #11
 800f23e:	4638      	mov	r0, r7
 800f240:	b009      	add	sp, #36	@ 0x24
 800f242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f246:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800f24a:	aa07      	add	r2, sp, #28
 800f24c:	9205      	str	r2, [sp, #20]
 800f24e:	9307      	str	r3, [sp, #28]
 800f250:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800f254:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f258:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f25c:	4639      	mov	r1, r7
 800f25e:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f262:	4628      	mov	r0, r5
 800f264:	f7ff fcf6 	bl	800ec54 <rcl_node_resolve_name>
 800f268:	4607      	mov	r7, r0
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d15f      	bne.n	800f32e <rcl_subscription_init+0x132>
 800f26e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800f272:	21d0      	movs	r1, #208	@ 0xd0
 800f274:	2001      	movs	r0, #1
 800f276:	4798      	blx	r3
 800f278:	6020      	str	r0, [r4, #0]
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d05d      	beq.n	800f33a <rcl_subscription_init+0x13e>
 800f27e:	4628      	mov	r0, r5
 800f280:	f7ff fc96 	bl	800ebb0 <rcl_node_get_rmw_handle>
 800f284:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800f288:	9300      	str	r3, [sp, #0]
 800f28a:	9a07      	ldr	r2, [sp, #28]
 800f28c:	6827      	ldr	r7, [r4, #0]
 800f28e:	4641      	mov	r1, r8
 800f290:	4633      	mov	r3, r6
 800f292:	f003 f8c5 	bl	8012420 <rmw_create_subscription>
 800f296:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 800f29a:	6827      	ldr	r7, [r4, #0]
 800f29c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800f2a0:	b348      	cbz	r0, 800f2f6 <rcl_subscription_init+0xfa>
 800f2a2:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800f2a6:	f003 f99d 	bl	80125e4 <rmw_subscription_get_actual_qos>
 800f2aa:	4607      	mov	r7, r0
 800f2ac:	b9a8      	cbnz	r0, 800f2da <rcl_subscription_init+0xde>
 800f2ae:	6820      	ldr	r0, [r4, #0]
 800f2b0:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f2b4:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 800f2b8:	2278      	movs	r2, #120	@ 0x78
 800f2ba:	4631      	mov	r1, r6
 800f2bc:	f006 fbdf 	bl	8015a7e <memcpy>
 800f2c0:	9807      	ldr	r0, [sp, #28]
 800f2c2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f2c4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f2c6:	4798      	blx	r3
 800f2c8:	4638      	mov	r0, r7
 800f2ca:	b009      	add	sp, #36	@ 0x24
 800f2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2d0:	27c8      	movs	r7, #200	@ 0xc8
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	b009      	add	sp, #36	@ 0x24
 800f2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2da:	6827      	ldr	r7, [r4, #0]
 800f2dc:	b32f      	cbz	r7, 800f32a <rcl_subscription_init+0x12e>
 800f2de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f2e2:	b14b      	cbz	r3, 800f2f8 <rcl_subscription_init+0xfc>
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f7ff fc63 	bl	800ebb0 <rcl_node_get_rmw_handle>
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800f2f0:	f003 f988 	bl	8012604 <rmw_destroy_subscription>
 800f2f4:	6827      	ldr	r7, [r4, #0]
 800f2f6:	b197      	cbz	r7, 800f31e <rcl_subscription_init+0x122>
 800f2f8:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	f7fb f82f 	bl	800a360 <rcutils_allocator_is_valid>
 800f302:	b158      	cbz	r0, 800f31c <rcl_subscription_init+0x120>
 800f304:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f306:	b148      	cbz	r0, 800f31c <rcl_subscription_init+0x120>
 800f308:	4629      	mov	r1, r5
 800f30a:	f002 f893 	bl	8011434 <rmw_subscription_content_filter_options_fini>
 800f30e:	4605      	mov	r5, r0
 800f310:	b9b8      	cbnz	r0, 800f342 <rcl_subscription_init+0x146>
 800f312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f314:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f316:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f318:	4798      	blx	r3
 800f31a:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800f31c:	6827      	ldr	r7, [r4, #0]
 800f31e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f320:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f322:	4638      	mov	r0, r7
 800f324:	4798      	blx	r3
 800f326:	2300      	movs	r3, #0
 800f328:	6023      	str	r3, [r4, #0]
 800f32a:	2701      	movs	r7, #1
 800f32c:	e7c8      	b.n	800f2c0 <rcl_subscription_init+0xc4>
 800f32e:	2867      	cmp	r0, #103	@ 0x67
 800f330:	d0c6      	beq.n	800f2c0 <rcl_subscription_init+0xc4>
 800f332:	2869      	cmp	r0, #105	@ 0x69
 800f334:	d003      	beq.n	800f33e <rcl_subscription_init+0x142>
 800f336:	280a      	cmp	r0, #10
 800f338:	d1f7      	bne.n	800f32a <rcl_subscription_init+0x12e>
 800f33a:	270a      	movs	r7, #10
 800f33c:	e7c0      	b.n	800f2c0 <rcl_subscription_init+0xc4>
 800f33e:	2767      	movs	r7, #103	@ 0x67
 800f340:	e7be      	b.n	800f2c0 <rcl_subscription_init+0xc4>
 800f342:	f7fe fef3 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800f346:	6827      	ldr	r7, [r4, #0]
 800f348:	e7e9      	b.n	800f31e <rcl_subscription_init+0x122>
 800f34a:	bf00      	nop

0800f34c <rcl_subscription_get_default_options>:
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	4c16      	ldr	r4, [pc, #88]	@ (800f3a8 <rcl_subscription_get_default_options+0x5c>)
 800f350:	4916      	ldr	r1, [pc, #88]	@ (800f3ac <rcl_subscription_get_default_options+0x60>)
 800f352:	b08a      	sub	sp, #40	@ 0x28
 800f354:	4605      	mov	r5, r0
 800f356:	2250      	movs	r2, #80	@ 0x50
 800f358:	4620      	mov	r0, r4
 800f35a:	f006 fb90 	bl	8015a7e <memcpy>
 800f35e:	a804      	add	r0, sp, #16
 800f360:	f7fa fff0 	bl	800a344 <rcutils_get_default_allocator>
 800f364:	f10d 0c10 	add.w	ip, sp, #16
 800f368:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f36c:	f104 0e50 	add.w	lr, r4, #80	@ 0x50
 800f370:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f374:	466e      	mov	r6, sp
 800f376:	f8dc 3000 	ldr.w	r3, [ip]
 800f37a:	f8ce 3000 	str.w	r3, [lr]
 800f37e:	4630      	mov	r0, r6
 800f380:	f002 f872 	bl	8011468 <rmw_get_default_subscription_options>
 800f384:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f388:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 800f38c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f390:	2301      	movs	r3, #1
 800f392:	2278      	movs	r2, #120	@ 0x78
 800f394:	4621      	mov	r1, r4
 800f396:	4628      	mov	r0, r5
 800f398:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
 800f39c:	f006 fb6f 	bl	8015a7e <memcpy>
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	b00a      	add	sp, #40	@ 0x28
 800f3a4:	bd70      	pop	{r4, r5, r6, pc}
 800f3a6:	bf00      	nop
 800f3a8:	20011120 	.word	0x20011120
 800f3ac:	08017010 	.word	0x08017010

0800f3b0 <rcl_take>:
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d04b      	beq.n	800f44c <rcl_take+0x9c>
 800f3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b8:	4615      	mov	r5, r2
 800f3ba:	6802      	ldr	r2, [r0, #0]
 800f3bc:	b0a0      	sub	sp, #128	@ 0x80
 800f3be:	4604      	mov	r4, r0
 800f3c0:	2a00      	cmp	r2, #0
 800f3c2:	d03b      	beq.n	800f43c <rcl_take+0x8c>
 800f3c4:	461f      	mov	r7, r3
 800f3c6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d036      	beq.n	800f43c <rcl_take+0x8c>
 800f3ce:	460e      	mov	r6, r1
 800f3d0:	2900      	cmp	r1, #0
 800f3d2:	d039      	beq.n	800f448 <rcl_take+0x98>
 800f3d4:	2d00      	cmp	r5, #0
 800f3d6:	d03d      	beq.n	800f454 <rcl_take+0xa4>
 800f3d8:	a802      	add	r0, sp, #8
 800f3da:	f002 f8cf 	bl	801157c <rmw_get_zero_initialized_message_info>
 800f3de:	6823      	ldr	r3, [r4, #0]
 800f3e0:	f10d 0c08 	add.w	ip, sp, #8
 800f3e4:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 800f3e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f3ec:	46ae      	mov	lr, r5
 800f3ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f3f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f3f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f3fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f3fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f402:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f406:	462b      	mov	r3, r5
 800f408:	e88e 0003 	stmia.w	lr, {r0, r1}
 800f40c:	f04f 0800 	mov.w	r8, #0
 800f410:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 800f414:	4631      	mov	r1, r6
 800f416:	4620      	mov	r0, r4
 800f418:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 800f41c:	9700      	str	r7, [sp, #0]
 800f41e:	f003 f951 	bl	80126c4 <rmw_take_with_info>
 800f422:	4603      	mov	r3, r0
 800f424:	b9c0      	cbnz	r0, 800f458 <rcl_take+0xa8>
 800f426:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 800f42a:	f240 1291 	movw	r2, #401	@ 0x191
 800f42e:	2900      	cmp	r1, #0
 800f430:	bf08      	it	eq
 800f432:	4613      	moveq	r3, r2
 800f434:	4618      	mov	r0, r3
 800f436:	b020      	add	sp, #128	@ 0x80
 800f438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f43c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f440:	4618      	mov	r0, r3
 800f442:	b020      	add	sp, #128	@ 0x80
 800f444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f448:	230b      	movs	r3, #11
 800f44a:	e7f3      	b.n	800f434 <rcl_take+0x84>
 800f44c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f450:	4618      	mov	r0, r3
 800f452:	4770      	bx	lr
 800f454:	ad12      	add	r5, sp, #72	@ 0x48
 800f456:	e7bf      	b.n	800f3d8 <rcl_take+0x28>
 800f458:	f7fe fe68 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800f45c:	4603      	mov	r3, r0
 800f45e:	e7e9      	b.n	800f434 <rcl_take+0x84>

0800f460 <rcl_subscription_get_rmw_handle>:
 800f460:	b118      	cbz	r0, 800f46a <rcl_subscription_get_rmw_handle+0xa>
 800f462:	6800      	ldr	r0, [r0, #0]
 800f464:	b108      	cbz	r0, 800f46a <rcl_subscription_get_rmw_handle+0xa>
 800f466:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800f46a:	4770      	bx	lr

0800f46c <rcl_subscription_is_valid>:
 800f46c:	b130      	cbz	r0, 800f47c <rcl_subscription_is_valid+0x10>
 800f46e:	6800      	ldr	r0, [r0, #0]
 800f470:	b120      	cbz	r0, 800f47c <rcl_subscription_is_valid+0x10>
 800f472:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800f476:	3800      	subs	r0, #0
 800f478:	bf18      	it	ne
 800f47a:	2001      	movne	r0, #1
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop

0800f480 <rcl_get_system_time>:
 800f480:	4608      	mov	r0, r1
 800f482:	f7fb b851 	b.w	800a528 <rcutils_system_time_now>
 800f486:	bf00      	nop

0800f488 <rcl_get_steady_time>:
 800f488:	4608      	mov	r0, r1
 800f48a:	f7fb b877 	b.w	800a57c <rcutils_steady_time_now>
 800f48e:	bf00      	nop

0800f490 <rcl_get_ros_time>:
 800f490:	7a03      	ldrb	r3, [r0, #8]
 800f492:	b510      	push	{r4, lr}
 800f494:	460c      	mov	r4, r1
 800f496:	b133      	cbz	r3, 800f4a6 <rcl_get_ros_time+0x16>
 800f498:	2105      	movs	r1, #5
 800f49a:	f7fa ff6f 	bl	800a37c <__atomic_load_8>
 800f49e:	e9c4 0100 	strd	r0, r1, [r4]
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	bd10      	pop	{r4, pc}
 800f4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4aa:	4608      	mov	r0, r1
 800f4ac:	f7fb b83c 	b.w	800a528 <rcutils_system_time_now>

0800f4b0 <rcl_clock_valid>:
 800f4b0:	b138      	cbz	r0, 800f4c2 <rcl_clock_valid+0x12>
 800f4b2:	7803      	ldrb	r3, [r0, #0]
 800f4b4:	b123      	cbz	r3, 800f4c0 <rcl_clock_valid+0x10>
 800f4b6:	68c0      	ldr	r0, [r0, #12]
 800f4b8:	3800      	subs	r0, #0
 800f4ba:	bf18      	it	ne
 800f4bc:	2001      	movne	r0, #1
 800f4be:	4770      	bx	lr
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	4770      	bx	lr

0800f4c4 <rcl_clock_init>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	4610      	mov	r0, r2
 800f4ca:	4614      	mov	r4, r2
 800f4cc:	460e      	mov	r6, r1
 800f4ce:	f7fa ff47 	bl	800a360 <rcutils_allocator_is_valid>
 800f4d2:	b128      	cbz	r0, 800f4e0 <rcl_clock_init+0x1c>
 800f4d4:	2d03      	cmp	r5, #3
 800f4d6:	d803      	bhi.n	800f4e0 <rcl_clock_init+0x1c>
 800f4d8:	e8df f005 	tbb	[pc, r5]
 800f4dc:	06532e1d 	.word	0x06532e1d
 800f4e0:	f04f 0c0b 	mov.w	ip, #11
 800f4e4:	4660      	mov	r0, ip
 800f4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4e8:	2e00      	cmp	r6, #0
 800f4ea:	d0f9      	beq.n	800f4e0 <rcl_clock_init+0x1c>
 800f4ec:	2c00      	cmp	r4, #0
 800f4ee:	d0f7      	beq.n	800f4e0 <rcl_clock_init+0x1c>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f4f6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800f5ac <rcl_clock_init+0xe8>
 800f4fa:	6133      	str	r3, [r6, #16]
 800f4fc:	f106 0514 	add.w	r5, r6, #20
 800f500:	469c      	mov	ip, r3
 800f502:	2703      	movs	r7, #3
 800f504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f508:	6823      	ldr	r3, [r4, #0]
 800f50a:	602b      	str	r3, [r5, #0]
 800f50c:	7037      	strb	r7, [r6, #0]
 800f50e:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f512:	4660      	mov	r0, ip
 800f514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f516:	2e00      	cmp	r6, #0
 800f518:	d0e2      	beq.n	800f4e0 <rcl_clock_init+0x1c>
 800f51a:	2300      	movs	r3, #0
 800f51c:	7033      	strb	r3, [r6, #0]
 800f51e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f522:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800f526:	469c      	mov	ip, r3
 800f528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f52a:	f106 0514 	add.w	r5, r6, #20
 800f52e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f530:	6823      	ldr	r3, [r4, #0]
 800f532:	602b      	str	r3, [r5, #0]
 800f534:	4660      	mov	r0, ip
 800f536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f538:	2e00      	cmp	r6, #0
 800f53a:	d0d1      	beq.n	800f4e0 <rcl_clock_init+0x1c>
 800f53c:	2c00      	cmp	r4, #0
 800f53e:	d0cf      	beq.n	800f4e0 <rcl_clock_init+0x1c>
 800f540:	2700      	movs	r7, #0
 800f542:	7037      	strb	r7, [r6, #0]
 800f544:	46a4      	mov	ip, r4
 800f546:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f54a:	f106 0514 	add.w	r5, r6, #20
 800f54e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800f552:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800f556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f558:	f8dc 3000 	ldr.w	r3, [ip]
 800f55c:	602b      	str	r3, [r5, #0]
 800f55e:	6921      	ldr	r1, [r4, #16]
 800f560:	6823      	ldr	r3, [r4, #0]
 800f562:	2010      	movs	r0, #16
 800f564:	4798      	blx	r3
 800f566:	6130      	str	r0, [r6, #16]
 800f568:	b1d0      	cbz	r0, 800f5a0 <rcl_clock_init+0xdc>
 800f56a:	2200      	movs	r2, #0
 800f56c:	2300      	movs	r3, #0
 800f56e:	e9c0 2300 	strd	r2, r3, [r0]
 800f572:	2301      	movs	r3, #1
 800f574:	7207      	strb	r7, [r0, #8]
 800f576:	4a0c      	ldr	r2, [pc, #48]	@ (800f5a8 <rcl_clock_init+0xe4>)
 800f578:	7033      	strb	r3, [r6, #0]
 800f57a:	46bc      	mov	ip, r7
 800f57c:	60f2      	str	r2, [r6, #12]
 800f57e:	4660      	mov	r0, ip
 800f580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f582:	2e00      	cmp	r6, #0
 800f584:	d0ac      	beq.n	800f4e0 <rcl_clock_init+0x1c>
 800f586:	2c00      	cmp	r4, #0
 800f588:	d0aa      	beq.n	800f4e0 <rcl_clock_init+0x1c>
 800f58a:	2300      	movs	r3, #0
 800f58c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f590:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800f5b0 <rcl_clock_init+0xec>
 800f594:	6133      	str	r3, [r6, #16]
 800f596:	f106 0514 	add.w	r5, r6, #20
 800f59a:	469c      	mov	ip, r3
 800f59c:	2702      	movs	r7, #2
 800f59e:	e7b1      	b.n	800f504 <rcl_clock_init+0x40>
 800f5a0:	f04f 0c0a 	mov.w	ip, #10
 800f5a4:	e79e      	b.n	800f4e4 <rcl_clock_init+0x20>
 800f5a6:	bf00      	nop
 800f5a8:	0800f491 	.word	0x0800f491
 800f5ac:	0800f489 	.word	0x0800f489
 800f5b0:	0800f481 	.word	0x0800f481

0800f5b4 <rcl_clock_get_now>:
 800f5b4:	b140      	cbz	r0, 800f5c8 <rcl_clock_get_now+0x14>
 800f5b6:	b139      	cbz	r1, 800f5c8 <rcl_clock_get_now+0x14>
 800f5b8:	7803      	ldrb	r3, [r0, #0]
 800f5ba:	b11b      	cbz	r3, 800f5c4 <rcl_clock_get_now+0x10>
 800f5bc:	68c3      	ldr	r3, [r0, #12]
 800f5be:	b10b      	cbz	r3, 800f5c4 <rcl_clock_get_now+0x10>
 800f5c0:	6900      	ldr	r0, [r0, #16]
 800f5c2:	4718      	bx	r3
 800f5c4:	2001      	movs	r0, #1
 800f5c6:	4770      	bx	lr
 800f5c8:	200b      	movs	r0, #11
 800f5ca:	4770      	bx	lr

0800f5cc <rcl_clock_add_jump_callback>:
 800f5cc:	b082      	sub	sp, #8
 800f5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d2:	a906      	add	r1, sp, #24
 800f5d4:	e881 000c 	stmia.w	r1, {r2, r3}
 800f5d8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 800f5dc:	b320      	cbz	r0, 800f628 <rcl_clock_add_jump_callback+0x5c>
 800f5de:	4604      	mov	r4, r0
 800f5e0:	3014      	adds	r0, #20
 800f5e2:	f7fa febd 	bl	800a360 <rcutils_allocator_is_valid>
 800f5e6:	b1f8      	cbz	r0, 800f628 <rcl_clock_add_jump_callback+0x5c>
 800f5e8:	b1f6      	cbz	r6, 800f628 <rcl_clock_add_jump_callback+0x5c>
 800f5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	db1b      	blt.n	800f628 <rcl_clock_add_jump_callback+0x5c>
 800f5f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800f5f4:	2a01      	cmp	r2, #1
 800f5f6:	f173 0300 	sbcs.w	r3, r3, #0
 800f5fa:	da15      	bge.n	800f628 <rcl_clock_add_jump_callback+0x5c>
 800f5fc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 800f600:	2f00      	cmp	r7, #0
 800f602:	d042      	beq.n	800f68a <rcl_clock_add_jump_callback+0xbe>
 800f604:	2300      	movs	r3, #0
 800f606:	4602      	mov	r2, r0
 800f608:	e003      	b.n	800f612 <rcl_clock_add_jump_callback+0x46>
 800f60a:	42bb      	cmp	r3, r7
 800f60c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800f610:	d011      	beq.n	800f636 <rcl_clock_add_jump_callback+0x6a>
 800f612:	6811      	ldr	r1, [r2, #0]
 800f614:	42b1      	cmp	r1, r6
 800f616:	f103 0301 	add.w	r3, r3, #1
 800f61a:	d1f6      	bne.n	800f60a <rcl_clock_add_jump_callback+0x3e>
 800f61c:	6a11      	ldr	r1, [r2, #32]
 800f61e:	42a9      	cmp	r1, r5
 800f620:	d1f3      	bne.n	800f60a <rcl_clock_add_jump_callback+0x3e>
 800f622:	f04f 0e01 	mov.w	lr, #1
 800f626:	e001      	b.n	800f62c <rcl_clock_add_jump_callback+0x60>
 800f628:	f04f 0e0b 	mov.w	lr, #11
 800f62c:	4670      	mov	r0, lr
 800f62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f632:	b002      	add	sp, #8
 800f634:	4770      	bx	lr
 800f636:	3301      	adds	r3, #1
 800f638:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f63c:	00d9      	lsls	r1, r3, #3
 800f63e:	69e3      	ldr	r3, [r4, #28]
 800f640:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800f642:	4798      	blx	r3
 800f644:	b1f0      	cbz	r0, 800f684 <rcl_clock_add_jump_callback+0xb8>
 800f646:	68a3      	ldr	r3, [r4, #8]
 800f648:	6060      	str	r0, [r4, #4]
 800f64a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800f64e:	f10d 0c18 	add.w	ip, sp, #24
 800f652:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 800f656:	f103 0801 	add.w	r8, r3, #1
 800f65a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800f65e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f662:	f106 0708 	add.w	r7, r6, #8
 800f666:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f668:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f66c:	f04f 0e00 	mov.w	lr, #0
 800f670:	e887 0003 	stmia.w	r7, {r0, r1}
 800f674:	6235      	str	r5, [r6, #32]
 800f676:	4670      	mov	r0, lr
 800f678:	f8c4 8008 	str.w	r8, [r4, #8]
 800f67c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f680:	b002      	add	sp, #8
 800f682:	4770      	bx	lr
 800f684:	f04f 0e0a 	mov.w	lr, #10
 800f688:	e7d0      	b.n	800f62c <rcl_clock_add_jump_callback+0x60>
 800f68a:	2128      	movs	r1, #40	@ 0x28
 800f68c:	e7d7      	b.n	800f63e <rcl_clock_add_jump_callback+0x72>
 800f68e:	bf00      	nop

0800f690 <rcl_clock_remove_jump_callback>:
 800f690:	2800      	cmp	r0, #0
 800f692:	d057      	beq.n	800f744 <rcl_clock_remove_jump_callback+0xb4>
 800f694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f698:	4605      	mov	r5, r0
 800f69a:	3014      	adds	r0, #20
 800f69c:	4688      	mov	r8, r1
 800f69e:	4692      	mov	sl, r2
 800f6a0:	f7fa fe5e 	bl	800a360 <rcutils_allocator_is_valid>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	d03b      	beq.n	800f720 <rcl_clock_remove_jump_callback+0x90>
 800f6a8:	f1b8 0f00 	cmp.w	r8, #0
 800f6ac:	d038      	beq.n	800f720 <rcl_clock_remove_jump_callback+0x90>
 800f6ae:	68ae      	ldr	r6, [r5, #8]
 800f6b0:	b166      	cbz	r6, 800f6cc <rcl_clock_remove_jump_callback+0x3c>
 800f6b2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f6b6:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800f6ba:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 800f6be:	464c      	mov	r4, r9
 800f6c0:	6823      	ldr	r3, [r4, #0]
 800f6c2:	4543      	cmp	r3, r8
 800f6c4:	d005      	beq.n	800f6d2 <rcl_clock_remove_jump_callback+0x42>
 800f6c6:	3428      	adds	r4, #40	@ 0x28
 800f6c8:	42a7      	cmp	r7, r4
 800f6ca:	d1f9      	bne.n	800f6c0 <rcl_clock_remove_jump_callback+0x30>
 800f6cc:	2001      	movs	r0, #1
 800f6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d2:	6a23      	ldr	r3, [r4, #32]
 800f6d4:	3428      	adds	r4, #40	@ 0x28
 800f6d6:	42bc      	cmp	r4, r7
 800f6d8:	d02d      	beq.n	800f736 <rcl_clock_remove_jump_callback+0xa6>
 800f6da:	4553      	cmp	r3, sl
 800f6dc:	d1f0      	bne.n	800f6c0 <rcl_clock_remove_jump_callback+0x30>
 800f6de:	46a6      	mov	lr, r4
 800f6e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f6e4:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 800f6e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f6f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f6f8:	3428      	adds	r4, #40	@ 0x28
 800f6fa:	42a7      	cmp	r7, r4
 800f6fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f700:	d1ed      	bne.n	800f6de <rcl_clock_remove_jump_callback+0x4e>
 800f702:	3e01      	subs	r6, #1
 800f704:	60ae      	str	r6, [r5, #8]
 800f706:	b176      	cbz	r6, 800f726 <rcl_clock_remove_jump_callback+0x96>
 800f708:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800f70c:	69eb      	ldr	r3, [r5, #28]
 800f70e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800f710:	00f1      	lsls	r1, r6, #3
 800f712:	4648      	mov	r0, r9
 800f714:	4798      	blx	r3
 800f716:	b1b8      	cbz	r0, 800f748 <rcl_clock_remove_jump_callback+0xb8>
 800f718:	6068      	str	r0, [r5, #4]
 800f71a:	2000      	movs	r0, #0
 800f71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f720:	200b      	movs	r0, #11
 800f722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f726:	4648      	mov	r0, r9
 800f728:	69ab      	ldr	r3, [r5, #24]
 800f72a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800f72c:	4798      	blx	r3
 800f72e:	606e      	str	r6, [r5, #4]
 800f730:	4630      	mov	r0, r6
 800f732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f736:	4553      	cmp	r3, sl
 800f738:	d1c8      	bne.n	800f6cc <rcl_clock_remove_jump_callback+0x3c>
 800f73a:	3e01      	subs	r6, #1
 800f73c:	60ae      	str	r6, [r5, #8]
 800f73e:	2e00      	cmp	r6, #0
 800f740:	d1e2      	bne.n	800f708 <rcl_clock_remove_jump_callback+0x78>
 800f742:	e7f0      	b.n	800f726 <rcl_clock_remove_jump_callback+0x96>
 800f744:	200b      	movs	r0, #11
 800f746:	4770      	bx	lr
 800f748:	200a      	movs	r0, #10
 800f74a:	e7ea      	b.n	800f722 <rcl_clock_remove_jump_callback+0x92>

0800f74c <rcl_validate_enclave_name_with_size>:
 800f74c:	b378      	cbz	r0, 800f7ae <rcl_validate_enclave_name_with_size+0x62>
 800f74e:	b570      	push	{r4, r5, r6, lr}
 800f750:	4615      	mov	r5, r2
 800f752:	b0c2      	sub	sp, #264	@ 0x108
 800f754:	b302      	cbz	r2, 800f798 <rcl_validate_enclave_name_with_size+0x4c>
 800f756:	461e      	mov	r6, r3
 800f758:	466a      	mov	r2, sp
 800f75a:	ab01      	add	r3, sp, #4
 800f75c:	460c      	mov	r4, r1
 800f75e:	f001 ff8b 	bl	8011678 <rmw_validate_namespace_with_size>
 800f762:	4684      	mov	ip, r0
 800f764:	b9e8      	cbnz	r0, 800f7a2 <rcl_validate_enclave_name_with_size+0x56>
 800f766:	9b00      	ldr	r3, [sp, #0]
 800f768:	b923      	cbnz	r3, 800f774 <rcl_validate_enclave_name_with_size+0x28>
 800f76a:	2300      	movs	r3, #0
 800f76c:	602b      	str	r3, [r5, #0]
 800f76e:	4660      	mov	r0, ip
 800f770:	b042      	add	sp, #264	@ 0x108
 800f772:	bd70      	pop	{r4, r5, r6, pc}
 800f774:	2b07      	cmp	r3, #7
 800f776:	d007      	beq.n	800f788 <rcl_validate_enclave_name_with_size+0x3c>
 800f778:	1e5a      	subs	r2, r3, #1
 800f77a:	2a05      	cmp	r2, #5
 800f77c:	d833      	bhi.n	800f7e6 <rcl_validate_enclave_name_with_size+0x9a>
 800f77e:	e8df f002 	tbb	[pc, r2]
 800f782:	2c2f      	.short	0x2c2f
 800f784:	1a232629 	.word	0x1a232629
 800f788:	2cff      	cmp	r4, #255	@ 0xff
 800f78a:	d9ee      	bls.n	800f76a <rcl_validate_enclave_name_with_size+0x1e>
 800f78c:	602b      	str	r3, [r5, #0]
 800f78e:	2e00      	cmp	r6, #0
 800f790:	d0ed      	beq.n	800f76e <rcl_validate_enclave_name_with_size+0x22>
 800f792:	23fe      	movs	r3, #254	@ 0xfe
 800f794:	6033      	str	r3, [r6, #0]
 800f796:	e7ea      	b.n	800f76e <rcl_validate_enclave_name_with_size+0x22>
 800f798:	f04f 0c0b 	mov.w	ip, #11
 800f79c:	4660      	mov	r0, ip
 800f79e:	b042      	add	sp, #264	@ 0x108
 800f7a0:	bd70      	pop	{r4, r5, r6, pc}
 800f7a2:	f7fe fcc3 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 800f7a6:	4684      	mov	ip, r0
 800f7a8:	4660      	mov	r0, ip
 800f7aa:	b042      	add	sp, #264	@ 0x108
 800f7ac:	bd70      	pop	{r4, r5, r6, pc}
 800f7ae:	f04f 0c0b 	mov.w	ip, #11
 800f7b2:	4660      	mov	r0, ip
 800f7b4:	4770      	bx	lr
 800f7b6:	2306      	movs	r3, #6
 800f7b8:	602b      	str	r3, [r5, #0]
 800f7ba:	2e00      	cmp	r6, #0
 800f7bc:	d0d7      	beq.n	800f76e <rcl_validate_enclave_name_with_size+0x22>
 800f7be:	9b01      	ldr	r3, [sp, #4]
 800f7c0:	6033      	str	r3, [r6, #0]
 800f7c2:	4660      	mov	r0, ip
 800f7c4:	b042      	add	sp, #264	@ 0x108
 800f7c6:	bd70      	pop	{r4, r5, r6, pc}
 800f7c8:	2305      	movs	r3, #5
 800f7ca:	602b      	str	r3, [r5, #0]
 800f7cc:	e7f5      	b.n	800f7ba <rcl_validate_enclave_name_with_size+0x6e>
 800f7ce:	2304      	movs	r3, #4
 800f7d0:	602b      	str	r3, [r5, #0]
 800f7d2:	e7f2      	b.n	800f7ba <rcl_validate_enclave_name_with_size+0x6e>
 800f7d4:	2303      	movs	r3, #3
 800f7d6:	602b      	str	r3, [r5, #0]
 800f7d8:	e7ef      	b.n	800f7ba <rcl_validate_enclave_name_with_size+0x6e>
 800f7da:	2302      	movs	r3, #2
 800f7dc:	602b      	str	r3, [r5, #0]
 800f7de:	e7ec      	b.n	800f7ba <rcl_validate_enclave_name_with_size+0x6e>
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	602b      	str	r3, [r5, #0]
 800f7e4:	e7e9      	b.n	800f7ba <rcl_validate_enclave_name_with_size+0x6e>
 800f7e6:	4a04      	ldr	r2, [pc, #16]	@ (800f7f8 <rcl_validate_enclave_name_with_size+0xac>)
 800f7e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f7ec:	a802      	add	r0, sp, #8
 800f7ee:	f001 fc81 	bl	80110f4 <rcutils_snprintf>
 800f7f2:	f04f 0c01 	mov.w	ip, #1
 800f7f6:	e7ba      	b.n	800f76e <rcl_validate_enclave_name_with_size+0x22>
 800f7f8:	08017060 	.word	0x08017060

0800f7fc <rcl_validate_enclave_name>:
 800f7fc:	b168      	cbz	r0, 800f81a <rcl_validate_enclave_name+0x1e>
 800f7fe:	b570      	push	{r4, r5, r6, lr}
 800f800:	460d      	mov	r5, r1
 800f802:	4616      	mov	r6, r2
 800f804:	4604      	mov	r4, r0
 800f806:	f7f0 fd4b 	bl	80002a0 <strlen>
 800f80a:	4633      	mov	r3, r6
 800f80c:	4601      	mov	r1, r0
 800f80e:	462a      	mov	r2, r5
 800f810:	4620      	mov	r0, r4
 800f812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f816:	f7ff bf99 	b.w	800f74c <rcl_validate_enclave_name_with_size>
 800f81a:	200b      	movs	r0, #11
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop

0800f820 <rcl_get_zero_initialized_wait_set>:
 800f820:	b510      	push	{r4, lr}
 800f822:	4c08      	ldr	r4, [pc, #32]	@ (800f844 <rcl_get_zero_initialized_wait_set+0x24>)
 800f824:	4686      	mov	lr, r0
 800f826:	4684      	mov	ip, r0
 800f828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f82a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f82e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f836:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f83a:	6823      	ldr	r3, [r4, #0]
 800f83c:	f8cc 3000 	str.w	r3, [ip]
 800f840:	4670      	mov	r0, lr
 800f842:	bd10      	pop	{r4, pc}
 800f844:	080170c0 	.word	0x080170c0

0800f848 <rcl_wait_set_is_valid>:
 800f848:	b118      	cbz	r0, 800f852 <rcl_wait_set_is_valid+0xa>
 800f84a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800f84c:	3800      	subs	r0, #0
 800f84e:	bf18      	it	ne
 800f850:	2001      	movne	r0, #1
 800f852:	4770      	bx	lr

0800f854 <rcl_wait_set_fini>:
 800f854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f858:	b082      	sub	sp, #8
 800f85a:	2800      	cmp	r0, #0
 800f85c:	f000 8095 	beq.w	800f98a <rcl_wait_set_fini+0x136>
 800f860:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800f862:	4604      	mov	r4, r0
 800f864:	2e00      	cmp	r6, #0
 800f866:	f000 808c 	beq.w	800f982 <rcl_wait_set_fini+0x12e>
 800f86a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800f86c:	f003 f928 	bl	8012ac0 <rmw_destroy_wait_set>
 800f870:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f872:	1e06      	subs	r6, r0, #0
 800f874:	bf18      	it	ne
 800f876:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800f87a:	2d00      	cmp	r5, #0
 800f87c:	f000 8081 	beq.w	800f982 <rcl_wait_set_fini+0x12e>
 800f880:	6820      	ldr	r0, [r4, #0]
 800f882:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f886:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f888:	2700      	movs	r7, #0
 800f88a:	6067      	str	r7, [r4, #4]
 800f88c:	602f      	str	r7, [r5, #0]
 800f88e:	b120      	cbz	r0, 800f89a <rcl_wait_set_fini+0x46>
 800f890:	9101      	str	r1, [sp, #4]
 800f892:	47c0      	blx	r8
 800f894:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f896:	9901      	ldr	r1, [sp, #4]
 800f898:	6027      	str	r7, [r4, #0]
 800f89a:	68a8      	ldr	r0, [r5, #8]
 800f89c:	b120      	cbz	r0, 800f8a8 <rcl_wait_set_fini+0x54>
 800f89e:	47c0      	blx	r8
 800f8a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800f8a8:	68a0      	ldr	r0, [r4, #8]
 800f8aa:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f8ac:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f8ae:	f04f 0800 	mov.w	r8, #0
 800f8b2:	f8c4 800c 	str.w	r8, [r4, #12]
 800f8b6:	f8c5 800c 	str.w	r8, [r5, #12]
 800f8ba:	b128      	cbz	r0, 800f8c8 <rcl_wait_set_fini+0x74>
 800f8bc:	47b8      	blx	r7
 800f8be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f8c0:	f8c4 8008 	str.w	r8, [r4, #8]
 800f8c4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f8c6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f8c8:	6968      	ldr	r0, [r5, #20]
 800f8ca:	f04f 0800 	mov.w	r8, #0
 800f8ce:	f8c5 8010 	str.w	r8, [r5, #16]
 800f8d2:	b128      	cbz	r0, 800f8e0 <rcl_wait_set_fini+0x8c>
 800f8d4:	47b8      	blx	r7
 800f8d6:	f8c5 8014 	str.w	r8, [r5, #20]
 800f8da:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f8dc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f8de:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f8e0:	6920      	ldr	r0, [r4, #16]
 800f8e2:	f04f 0800 	mov.w	r8, #0
 800f8e6:	f8c4 8014 	str.w	r8, [r4, #20]
 800f8ea:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800f8ee:	b128      	cbz	r0, 800f8fc <rcl_wait_set_fini+0xa8>
 800f8f0:	47b8      	blx	r7
 800f8f2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f8f4:	f8c4 8010 	str.w	r8, [r4, #16]
 800f8f8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f8fa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f8fc:	69a0      	ldr	r0, [r4, #24]
 800f8fe:	f04f 0800 	mov.w	r8, #0
 800f902:	f8c4 801c 	str.w	r8, [r4, #28]
 800f906:	f8c5 8018 	str.w	r8, [r5, #24]
 800f90a:	b128      	cbz	r0, 800f918 <rcl_wait_set_fini+0xc4>
 800f90c:	9101      	str	r1, [sp, #4]
 800f90e:	47b8      	blx	r7
 800f910:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f912:	9901      	ldr	r1, [sp, #4]
 800f914:	f8c4 8018 	str.w	r8, [r4, #24]
 800f918:	6a28      	ldr	r0, [r5, #32]
 800f91a:	b120      	cbz	r0, 800f926 <rcl_wait_set_fini+0xd2>
 800f91c:	47b8      	blx	r7
 800f91e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f920:	2300      	movs	r3, #0
 800f922:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800f926:	6a20      	ldr	r0, [r4, #32]
 800f928:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f92c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f92e:	2700      	movs	r7, #0
 800f930:	6267      	str	r7, [r4, #36]	@ 0x24
 800f932:	626f      	str	r7, [r5, #36]	@ 0x24
 800f934:	b120      	cbz	r0, 800f940 <rcl_wait_set_fini+0xec>
 800f936:	9101      	str	r1, [sp, #4]
 800f938:	47c0      	blx	r8
 800f93a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f93c:	9901      	ldr	r1, [sp, #4]
 800f93e:	6227      	str	r7, [r4, #32]
 800f940:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800f942:	b120      	cbz	r0, 800f94e <rcl_wait_set_fini+0xfa>
 800f944:	47c0      	blx	r8
 800f946:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f948:	2300      	movs	r3, #0
 800f94a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800f94e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f950:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f954:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f956:	2700      	movs	r7, #0
 800f958:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800f95a:	632f      	str	r7, [r5, #48]	@ 0x30
 800f95c:	b120      	cbz	r0, 800f968 <rcl_wait_set_fini+0x114>
 800f95e:	9101      	str	r1, [sp, #4]
 800f960:	47c0      	blx	r8
 800f962:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f964:	9901      	ldr	r1, [sp, #4]
 800f966:	62a7      	str	r7, [r4, #40]	@ 0x28
 800f968:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800f96a:	b120      	cbz	r0, 800f976 <rcl_wait_set_fini+0x122>
 800f96c:	47c0      	blx	r8
 800f96e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f970:	2300      	movs	r3, #0
 800f972:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800f976:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f978:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f97a:	4628      	mov	r0, r5
 800f97c:	4798      	blx	r3
 800f97e:	2300      	movs	r3, #0
 800f980:	6323      	str	r3, [r4, #48]	@ 0x30
 800f982:	4630      	mov	r0, r6
 800f984:	b002      	add	sp, #8
 800f986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f98a:	260b      	movs	r6, #11
 800f98c:	4630      	mov	r0, r6
 800f98e:	b002      	add	sp, #8
 800f990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f994 <rcl_wait_set_add_subscription>:
 800f994:	b318      	cbz	r0, 800f9de <rcl_wait_set_add_subscription+0x4a>
 800f996:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	4604      	mov	r4, r0
 800f99c:	b30b      	cbz	r3, 800f9e2 <rcl_wait_set_add_subscription+0x4e>
 800f99e:	b319      	cbz	r1, 800f9e8 <rcl_wait_set_add_subscription+0x54>
 800f9a0:	681d      	ldr	r5, [r3, #0]
 800f9a2:	6840      	ldr	r0, [r0, #4]
 800f9a4:	4285      	cmp	r5, r0
 800f9a6:	d217      	bcs.n	800f9d8 <rcl_wait_set_add_subscription+0x44>
 800f9a8:	6820      	ldr	r0, [r4, #0]
 800f9aa:	1c6e      	adds	r6, r5, #1
 800f9ac:	601e      	str	r6, [r3, #0]
 800f9ae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f9b2:	b102      	cbz	r2, 800f9b6 <rcl_wait_set_add_subscription+0x22>
 800f9b4:	6015      	str	r5, [r2, #0]
 800f9b6:	4608      	mov	r0, r1
 800f9b8:	f7ff fd52 	bl	800f460 <rcl_subscription_get_rmw_handle>
 800f9bc:	b150      	cbz	r0, 800f9d4 <rcl_wait_set_add_subscription+0x40>
 800f9be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f9c0:	6842      	ldr	r2, [r0, #4]
 800f9c2:	689b      	ldr	r3, [r3, #8]
 800f9c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f9c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f9ca:	6853      	ldr	r3, [r2, #4]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	2000      	movs	r0, #0
 800f9d0:	6053      	str	r3, [r2, #4]
 800f9d2:	bd70      	pop	{r4, r5, r6, pc}
 800f9d4:	2001      	movs	r0, #1
 800f9d6:	bd70      	pop	{r4, r5, r6, pc}
 800f9d8:	f240 3086 	movw	r0, #902	@ 0x386
 800f9dc:	bd70      	pop	{r4, r5, r6, pc}
 800f9de:	200b      	movs	r0, #11
 800f9e0:	4770      	bx	lr
 800f9e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f9e6:	bd70      	pop	{r4, r5, r6, pc}
 800f9e8:	200b      	movs	r0, #11
 800f9ea:	bd70      	pop	{r4, r5, r6, pc}

0800f9ec <rcl_wait_set_clear>:
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	d073      	beq.n	800fad8 <rcl_wait_set_clear+0xec>
 800f9f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f9f2:	b510      	push	{r4, lr}
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d070      	beq.n	800fadc <rcl_wait_set_clear+0xf0>
 800f9fa:	6800      	ldr	r0, [r0, #0]
 800f9fc:	b138      	cbz	r0, 800fa0e <rcl_wait_set_clear+0x22>
 800f9fe:	6862      	ldr	r2, [r4, #4]
 800fa00:	2100      	movs	r1, #0
 800fa02:	0092      	lsls	r2, r2, #2
 800fa04:	f005 ff60 	bl	80158c8 <memset>
 800fa08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	601a      	str	r2, [r3, #0]
 800fa0e:	68a0      	ldr	r0, [r4, #8]
 800fa10:	b138      	cbz	r0, 800fa22 <rcl_wait_set_clear+0x36>
 800fa12:	68e2      	ldr	r2, [r4, #12]
 800fa14:	2100      	movs	r1, #0
 800fa16:	0092      	lsls	r2, r2, #2
 800fa18:	f005 ff56 	bl	80158c8 <memset>
 800fa1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa1e:	2200      	movs	r2, #0
 800fa20:	60da      	str	r2, [r3, #12]
 800fa22:	69a0      	ldr	r0, [r4, #24]
 800fa24:	b138      	cbz	r0, 800fa36 <rcl_wait_set_clear+0x4a>
 800fa26:	69e2      	ldr	r2, [r4, #28]
 800fa28:	2100      	movs	r1, #0
 800fa2a:	0092      	lsls	r2, r2, #2
 800fa2c:	f005 ff4c 	bl	80158c8 <memset>
 800fa30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa32:	2200      	movs	r2, #0
 800fa34:	619a      	str	r2, [r3, #24]
 800fa36:	6a20      	ldr	r0, [r4, #32]
 800fa38:	b138      	cbz	r0, 800fa4a <rcl_wait_set_clear+0x5e>
 800fa3a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	0092      	lsls	r2, r2, #2
 800fa40:	f005 ff42 	bl	80158c8 <memset>
 800fa44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa46:	2200      	movs	r2, #0
 800fa48:	625a      	str	r2, [r3, #36]	@ 0x24
 800fa4a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800fa4c:	b138      	cbz	r0, 800fa5e <rcl_wait_set_clear+0x72>
 800fa4e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fa50:	2100      	movs	r1, #0
 800fa52:	0092      	lsls	r2, r2, #2
 800fa54:	f005 ff38 	bl	80158c8 <memset>
 800fa58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	631a      	str	r2, [r3, #48]	@ 0x30
 800fa5e:	6920      	ldr	r0, [r4, #16]
 800fa60:	b138      	cbz	r0, 800fa72 <rcl_wait_set_clear+0x86>
 800fa62:	6962      	ldr	r2, [r4, #20]
 800fa64:	2100      	movs	r1, #0
 800fa66:	0092      	lsls	r2, r2, #2
 800fa68:	f005 ff2e 	bl	80158c8 <memset>
 800fa6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa6e:	2200      	movs	r2, #0
 800fa70:	641a      	str	r2, [r3, #64]	@ 0x40
 800fa72:	6898      	ldr	r0, [r3, #8]
 800fa74:	b138      	cbz	r0, 800fa86 <rcl_wait_set_clear+0x9a>
 800fa76:	685a      	ldr	r2, [r3, #4]
 800fa78:	2100      	movs	r1, #0
 800fa7a:	0092      	lsls	r2, r2, #2
 800fa7c:	f005 ff24 	bl	80158c8 <memset>
 800fa80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa82:	2200      	movs	r2, #0
 800fa84:	605a      	str	r2, [r3, #4]
 800fa86:	6958      	ldr	r0, [r3, #20]
 800fa88:	b138      	cbz	r0, 800fa9a <rcl_wait_set_clear+0xae>
 800fa8a:	691a      	ldr	r2, [r3, #16]
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	0092      	lsls	r2, r2, #2
 800fa90:	f005 ff1a 	bl	80158c8 <memset>
 800fa94:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa96:	2200      	movs	r2, #0
 800fa98:	611a      	str	r2, [r3, #16]
 800fa9a:	6a18      	ldr	r0, [r3, #32]
 800fa9c:	b138      	cbz	r0, 800faae <rcl_wait_set_clear+0xc2>
 800fa9e:	69da      	ldr	r2, [r3, #28]
 800faa0:	2100      	movs	r1, #0
 800faa2:	0092      	lsls	r2, r2, #2
 800faa4:	f005 ff10 	bl	80158c8 <memset>
 800faa8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800faaa:	2200      	movs	r2, #0
 800faac:	61da      	str	r2, [r3, #28]
 800faae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800fab0:	b138      	cbz	r0, 800fac2 <rcl_wait_set_clear+0xd6>
 800fab2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fab4:	2100      	movs	r1, #0
 800fab6:	0092      	lsls	r2, r2, #2
 800fab8:	f005 ff06 	bl	80158c8 <memset>
 800fabc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fabe:	2200      	movs	r2, #0
 800fac0:	629a      	str	r2, [r3, #40]	@ 0x28
 800fac2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800fac4:	b138      	cbz	r0, 800fad6 <rcl_wait_set_clear+0xea>
 800fac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fac8:	2100      	movs	r1, #0
 800faca:	0092      	lsls	r2, r2, #2
 800facc:	f005 fefc 	bl	80158c8 <memset>
 800fad0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fad2:	2000      	movs	r0, #0
 800fad4:	6358      	str	r0, [r3, #52]	@ 0x34
 800fad6:	bd10      	pop	{r4, pc}
 800fad8:	200b      	movs	r0, #11
 800fada:	4770      	bx	lr
 800fadc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fae0:	bd10      	pop	{r4, pc}
 800fae2:	bf00      	nop

0800fae4 <rcl_wait_set_resize>:
 800fae4:	2800      	cmp	r0, #0
 800fae6:	f000 8185 	beq.w	800fdf4 <rcl_wait_set_resize+0x310>
 800faea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faee:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800faf0:	b083      	sub	sp, #12
 800faf2:	4605      	mov	r5, r0
 800faf4:	2c00      	cmp	r4, #0
 800faf6:	f000 817f 	beq.w	800fdf8 <rcl_wait_set_resize+0x314>
 800fafa:	f04f 0900 	mov.w	r9, #0
 800fafe:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800fb02:	461f      	mov	r7, r3
 800fb04:	4688      	mov	r8, r1
 800fb06:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800fb0a:	4616      	mov	r6, r2
 800fb0c:	f8c0 9004 	str.w	r9, [r0, #4]
 800fb10:	f8c4 9000 	str.w	r9, [r4]
 800fb14:	2900      	cmp	r1, #0
 800fb16:	f000 80bd 	beq.w	800fc94 <rcl_wait_set_resize+0x1b0>
 800fb1a:	008c      	lsls	r4, r1, #2
 800fb1c:	6800      	ldr	r0, [r0, #0]
 800fb1e:	9301      	str	r3, [sp, #4]
 800fb20:	4652      	mov	r2, sl
 800fb22:	4621      	mov	r1, r4
 800fb24:	4798      	blx	r3
 800fb26:	9b01      	ldr	r3, [sp, #4]
 800fb28:	6028      	str	r0, [r5, #0]
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	f000 80cb 	beq.w	800fcc6 <rcl_wait_set_resize+0x1e2>
 800fb30:	4622      	mov	r2, r4
 800fb32:	4649      	mov	r1, r9
 800fb34:	9301      	str	r3, [sp, #4]
 800fb36:	f005 fec7 	bl	80158c8 <memset>
 800fb3a:	f8c5 8004 	str.w	r8, [r5, #4]
 800fb3e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800fb42:	9b01      	ldr	r3, [sp, #4]
 800fb44:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800fb48:	f8c8 9004 	str.w	r9, [r8, #4]
 800fb4c:	4652      	mov	r2, sl
 800fb4e:	4621      	mov	r1, r4
 800fb50:	4798      	blx	r3
 800fb52:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fb54:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 80ac 	beq.w	800fcb8 <rcl_wait_set_resize+0x1d4>
 800fb60:	4622      	mov	r2, r4
 800fb62:	4649      	mov	r1, r9
 800fb64:	4618      	mov	r0, r3
 800fb66:	f005 feaf 	bl	80158c8 <memset>
 800fb6a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fb6c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fb70:	f04f 0800 	mov.w	r8, #0
 800fb74:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800fb78:	f8c5 800c 	str.w	r8, [r5, #12]
 800fb7c:	f8c4 800c 	str.w	r8, [r4, #12]
 800fb80:	2e00      	cmp	r6, #0
 800fb82:	f040 80a4 	bne.w	800fcce <rcl_wait_set_resize+0x1ea>
 800fb86:	68a8      	ldr	r0, [r5, #8]
 800fb88:	b128      	cbz	r0, 800fb96 <rcl_wait_set_resize+0xb2>
 800fb8a:	4649      	mov	r1, r9
 800fb8c:	4790      	blx	r2
 800fb8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fb90:	60ae      	str	r6, [r5, #8]
 800fb92:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fb96:	f04f 0800 	mov.w	r8, #0
 800fb9a:	19f6      	adds	r6, r6, r7
 800fb9c:	f8c4 8010 	str.w	r8, [r4, #16]
 800fba0:	f040 80ac 	bne.w	800fcfc <rcl_wait_set_resize+0x218>
 800fba4:	6960      	ldr	r0, [r4, #20]
 800fba6:	b130      	cbz	r0, 800fbb6 <rcl_wait_set_resize+0xd2>
 800fba8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800fbaa:	4649      	mov	r1, r9
 800fbac:	4798      	blx	r3
 800fbae:	6166      	str	r6, [r4, #20]
 800fbb0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fbb2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fbb6:	2600      	movs	r6, #0
 800fbb8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800fbbc:	616e      	str	r6, [r5, #20]
 800fbbe:	6426      	str	r6, [r4, #64]	@ 0x40
 800fbc0:	2f00      	cmp	r7, #0
 800fbc2:	f040 80ad 	bne.w	800fd20 <rcl_wait_set_resize+0x23c>
 800fbc6:	6928      	ldr	r0, [r5, #16]
 800fbc8:	b138      	cbz	r0, 800fbda <rcl_wait_set_resize+0xf6>
 800fbca:	4649      	mov	r1, r9
 800fbcc:	47d0      	blx	sl
 800fbce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fbd0:	612f      	str	r7, [r5, #16]
 800fbd2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800fbd6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fbda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbdc:	2600      	movs	r6, #0
 800fbde:	61ee      	str	r6, [r5, #28]
 800fbe0:	61a6      	str	r6, [r4, #24]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f040 80af 	bne.w	800fd46 <rcl_wait_set_resize+0x262>
 800fbe8:	69a8      	ldr	r0, [r5, #24]
 800fbea:	b120      	cbz	r0, 800fbf6 <rcl_wait_set_resize+0x112>
 800fbec:	4649      	mov	r1, r9
 800fbee:	47d0      	blx	sl
 800fbf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbf2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fbf4:	61ab      	str	r3, [r5, #24]
 800fbf6:	6a20      	ldr	r0, [r4, #32]
 800fbf8:	b128      	cbz	r0, 800fc06 <rcl_wait_set_resize+0x122>
 800fbfa:	4649      	mov	r1, r9
 800fbfc:	47d0      	blx	sl
 800fbfe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc00:	2300      	movs	r3, #0
 800fc02:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fc06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc08:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800fc0a:	2600      	movs	r6, #0
 800fc0c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800fc10:	626e      	str	r6, [r5, #36]	@ 0x24
 800fc12:	6266      	str	r6, [r4, #36]	@ 0x24
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	f000 80b6 	beq.w	800fd86 <rcl_wait_set_resize+0x2a2>
 800fc1a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800fc1e:	6a28      	ldr	r0, [r5, #32]
 800fc20:	463a      	mov	r2, r7
 800fc22:	4651      	mov	r1, sl
 800fc24:	47c8      	blx	r9
 800fc26:	6228      	str	r0, [r5, #32]
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	d04c      	beq.n	800fcc6 <rcl_wait_set_resize+0x1e2>
 800fc2c:	4652      	mov	r2, sl
 800fc2e:	4631      	mov	r1, r6
 800fc30:	f005 fe4a 	bl	80158c8 <memset>
 800fc34:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc38:	626b      	str	r3, [r5, #36]	@ 0x24
 800fc3a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fc3c:	62a6      	str	r6, [r4, #40]	@ 0x28
 800fc3e:	463a      	mov	r2, r7
 800fc40:	4651      	mov	r1, sl
 800fc42:	47c8      	blx	r9
 800fc44:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fc46:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800fc48:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800fc4a:	2c00      	cmp	r4, #0
 800fc4c:	f000 80f0 	beq.w	800fe30 <rcl_wait_set_resize+0x34c>
 800fc50:	4620      	mov	r0, r4
 800fc52:	4652      	mov	r2, sl
 800fc54:	4631      	mov	r1, r6
 800fc56:	f005 fe37 	bl	80158c8 <memset>
 800fc5a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc5e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800fc60:	2600      	movs	r6, #0
 800fc62:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800fc66:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800fc68:	6326      	str	r6, [r4, #48]	@ 0x30
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f040 809d 	bne.w	800fdaa <rcl_wait_set_resize+0x2c6>
 800fc70:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fc72:	b120      	cbz	r0, 800fc7e <rcl_wait_set_resize+0x19a>
 800fc74:	4639      	mov	r1, r7
 800fc76:	47c0      	blx	r8
 800fc78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc7c:	62ab      	str	r3, [r5, #40]	@ 0x28
 800fc7e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800fc80:	b310      	cbz	r0, 800fcc8 <rcl_wait_set_resize+0x1e4>
 800fc82:	4639      	mov	r1, r7
 800fc84:	47c0      	blx	r8
 800fc86:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fc88:	2000      	movs	r0, #0
 800fc8a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800fc8e:	b003      	add	sp, #12
 800fc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc94:	6800      	ldr	r0, [r0, #0]
 800fc96:	b120      	cbz	r0, 800fca2 <rcl_wait_set_resize+0x1be>
 800fc98:	4651      	mov	r1, sl
 800fc9a:	47d8      	blx	fp
 800fc9c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc9e:	f8c5 8000 	str.w	r8, [r5]
 800fca2:	68a0      	ldr	r0, [r4, #8]
 800fca4:	2800      	cmp	r0, #0
 800fca6:	f43f af61 	beq.w	800fb6c <rcl_wait_set_resize+0x88>
 800fcaa:	4651      	mov	r1, sl
 800fcac:	47d8      	blx	fp
 800fcae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800fcb6:	e759      	b.n	800fb6c <rcl_wait_set_resize+0x88>
 800fcb8:	6828      	ldr	r0, [r5, #0]
 800fcba:	9301      	str	r3, [sp, #4]
 800fcbc:	4651      	mov	r1, sl
 800fcbe:	47d8      	blx	fp
 800fcc0:	9b01      	ldr	r3, [sp, #4]
 800fcc2:	e9c5 3300 	strd	r3, r3, [r5]
 800fcc6:	200a      	movs	r0, #10
 800fcc8:	b003      	add	sp, #12
 800fcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcce:	00b4      	lsls	r4, r6, #2
 800fcd0:	68a8      	ldr	r0, [r5, #8]
 800fcd2:	464a      	mov	r2, r9
 800fcd4:	4621      	mov	r1, r4
 800fcd6:	4798      	blx	r3
 800fcd8:	60a8      	str	r0, [r5, #8]
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d0f3      	beq.n	800fcc6 <rcl_wait_set_resize+0x1e2>
 800fcde:	4622      	mov	r2, r4
 800fce0:	4641      	mov	r1, r8
 800fce2:	f005 fdf1 	bl	80158c8 <memset>
 800fce6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fce8:	60ee      	str	r6, [r5, #12]
 800fcea:	f04f 0800 	mov.w	r8, #0
 800fcee:	19f6      	adds	r6, r6, r7
 800fcf0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fcf4:	f8c4 8010 	str.w	r8, [r4, #16]
 800fcf8:	f43f af54 	beq.w	800fba4 <rcl_wait_set_resize+0xc0>
 800fcfc:	00b6      	lsls	r6, r6, #2
 800fcfe:	464a      	mov	r2, r9
 800fd00:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800fd02:	6960      	ldr	r0, [r4, #20]
 800fd04:	4631      	mov	r1, r6
 800fd06:	4798      	blx	r3
 800fd08:	4681      	mov	r9, r0
 800fd0a:	6160      	str	r0, [r4, #20]
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d076      	beq.n	800fdfe <rcl_wait_set_resize+0x31a>
 800fd10:	4632      	mov	r2, r6
 800fd12:	4641      	mov	r1, r8
 800fd14:	f005 fdd8 	bl	80158c8 <memset>
 800fd18:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd1a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fd1e:	e74a      	b.n	800fbb6 <rcl_wait_set_resize+0xd2>
 800fd20:	00bc      	lsls	r4, r7, #2
 800fd22:	6928      	ldr	r0, [r5, #16]
 800fd24:	464a      	mov	r2, r9
 800fd26:	4621      	mov	r1, r4
 800fd28:	47c0      	blx	r8
 800fd2a:	6128      	str	r0, [r5, #16]
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d0ca      	beq.n	800fcc6 <rcl_wait_set_resize+0x1e2>
 800fd30:	4622      	mov	r2, r4
 800fd32:	4631      	mov	r1, r6
 800fd34:	f005 fdc8 	bl	80158c8 <memset>
 800fd38:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd3a:	616f      	str	r7, [r5, #20]
 800fd3c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800fd40:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fd44:	e749      	b.n	800fbda <rcl_wait_set_resize+0xf6>
 800fd46:	009c      	lsls	r4, r3, #2
 800fd48:	69a8      	ldr	r0, [r5, #24]
 800fd4a:	464a      	mov	r2, r9
 800fd4c:	4621      	mov	r1, r4
 800fd4e:	47c0      	blx	r8
 800fd50:	61a8      	str	r0, [r5, #24]
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d0b7      	beq.n	800fcc6 <rcl_wait_set_resize+0x1e2>
 800fd56:	4622      	mov	r2, r4
 800fd58:	4631      	mov	r1, r6
 800fd5a:	f005 fdb5 	bl	80158c8 <memset>
 800fd5e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800fd60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd62:	61eb      	str	r3, [r5, #28]
 800fd64:	6a38      	ldr	r0, [r7, #32]
 800fd66:	61fe      	str	r6, [r7, #28]
 800fd68:	464a      	mov	r2, r9
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	47c0      	blx	r8
 800fd6e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fd70:	6238      	str	r0, [r7, #32]
 800fd72:	6a1f      	ldr	r7, [r3, #32]
 800fd74:	2f00      	cmp	r7, #0
 800fd76:	d054      	beq.n	800fe22 <rcl_wait_set_resize+0x33e>
 800fd78:	4622      	mov	r2, r4
 800fd7a:	4631      	mov	r1, r6
 800fd7c:	4638      	mov	r0, r7
 800fd7e:	f005 fda3 	bl	80158c8 <memset>
 800fd82:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd84:	e73f      	b.n	800fc06 <rcl_wait_set_resize+0x122>
 800fd86:	6a28      	ldr	r0, [r5, #32]
 800fd88:	b120      	cbz	r0, 800fd94 <rcl_wait_set_resize+0x2b0>
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	47c0      	blx	r8
 800fd8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd90:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd92:	622b      	str	r3, [r5, #32]
 800fd94:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fd96:	2800      	cmp	r0, #0
 800fd98:	f43f af60 	beq.w	800fc5c <rcl_wait_set_resize+0x178>
 800fd9c:	4639      	mov	r1, r7
 800fd9e:	47c0      	blx	r8
 800fda0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fda2:	2300      	movs	r3, #0
 800fda4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800fda8:	e758      	b.n	800fc5c <rcl_wait_set_resize+0x178>
 800fdaa:	009c      	lsls	r4, r3, #2
 800fdac:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fdae:	463a      	mov	r2, r7
 800fdb0:	4621      	mov	r1, r4
 800fdb2:	47c8      	blx	r9
 800fdb4:	62a8      	str	r0, [r5, #40]	@ 0x28
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d085      	beq.n	800fcc6 <rcl_wait_set_resize+0x1e2>
 800fdba:	4622      	mov	r2, r4
 800fdbc:	4631      	mov	r1, r6
 800fdbe:	f005 fd83 	bl	80158c8 <memset>
 800fdc2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800fdc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdc8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800fdca:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800fdce:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800fdd2:	463a      	mov	r2, r7
 800fdd4:	4621      	mov	r1, r4
 800fdd6:	47c8      	blx	r9
 800fdd8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fdda:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800fdde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fde0:	b36b      	cbz	r3, 800fe3e <rcl_wait_set_resize+0x35a>
 800fde2:	4622      	mov	r2, r4
 800fde4:	4631      	mov	r1, r6
 800fde6:	4618      	mov	r0, r3
 800fde8:	f005 fd6e 	bl	80158c8 <memset>
 800fdec:	4630      	mov	r0, r6
 800fdee:	b003      	add	sp, #12
 800fdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf4:	200b      	movs	r0, #11
 800fdf6:	4770      	bx	lr
 800fdf8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fdfc:	e764      	b.n	800fcc8 <rcl_wait_set_resize+0x1e4>
 800fdfe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fe00:	68a8      	ldr	r0, [r5, #8]
 800fe02:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800fe04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe06:	4798      	blx	r3
 800fe08:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fe0a:	6928      	ldr	r0, [r5, #16]
 800fe0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe0e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800fe10:	f8c5 900c 	str.w	r9, [r5, #12]
 800fe14:	f8c5 9008 	str.w	r9, [r5, #8]
 800fe18:	4790      	blx	r2
 800fe1a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800fe1e:	200a      	movs	r0, #10
 800fe20:	e752      	b.n	800fcc8 <rcl_wait_set_resize+0x1e4>
 800fe22:	69a8      	ldr	r0, [r5, #24]
 800fe24:	4649      	mov	r1, r9
 800fe26:	47d0      	blx	sl
 800fe28:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800fe2c:	200a      	movs	r0, #10
 800fe2e:	e74b      	b.n	800fcc8 <rcl_wait_set_resize+0x1e4>
 800fe30:	6a28      	ldr	r0, [r5, #32]
 800fe32:	4639      	mov	r1, r7
 800fe34:	47c0      	blx	r8
 800fe36:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800fe3a:	200a      	movs	r0, #10
 800fe3c:	e744      	b.n	800fcc8 <rcl_wait_set_resize+0x1e4>
 800fe3e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fe40:	9301      	str	r3, [sp, #4]
 800fe42:	4639      	mov	r1, r7
 800fe44:	47c0      	blx	r8
 800fe46:	9b01      	ldr	r3, [sp, #4]
 800fe48:	200a      	movs	r0, #10
 800fe4a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800fe4e:	e73b      	b.n	800fcc8 <rcl_wait_set_resize+0x1e4>

0800fe50 <rcl_wait_set_init>:
 800fe50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe54:	b084      	sub	sp, #16
 800fe56:	4604      	mov	r4, r0
 800fe58:	a810      	add	r0, sp, #64	@ 0x40
 800fe5a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800fe5e:	460f      	mov	r7, r1
 800fe60:	4690      	mov	r8, r2
 800fe62:	4699      	mov	r9, r3
 800fe64:	f7fa fa7c 	bl	800a360 <rcutils_allocator_is_valid>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d06b      	beq.n	800ff44 <rcl_wait_set_init+0xf4>
 800fe6c:	2c00      	cmp	r4, #0
 800fe6e:	d069      	beq.n	800ff44 <rcl_wait_set_init+0xf4>
 800fe70:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800fe72:	b125      	cbz	r5, 800fe7e <rcl_wait_set_init+0x2e>
 800fe74:	2564      	movs	r5, #100	@ 0x64
 800fe76:	4628      	mov	r0, r5
 800fe78:	b004      	add	sp, #16
 800fe7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe7e:	f1ba 0f00 	cmp.w	sl, #0
 800fe82:	d05f      	beq.n	800ff44 <rcl_wait_set_init+0xf4>
 800fe84:	4650      	mov	r0, sl
 800fe86:	f7fe f96f 	bl	800e168 <rcl_context_is_valid>
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	d067      	beq.n	800ff5e <rcl_wait_set_init+0x10e>
 800fe8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fe90:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800fe92:	205c      	movs	r0, #92	@ 0x5c
 800fe94:	4798      	blx	r3
 800fe96:	6320      	str	r0, [r4, #48]	@ 0x30
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d062      	beq.n	800ff62 <rcl_wait_set_init+0x112>
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	225c      	movs	r2, #92	@ 0x5c
 800fea0:	f005 fd12 	bl	80158c8 <memset>
 800fea4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800fea8:	eb03 0e02 	add.w	lr, r3, r2
 800feac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800feae:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800feb0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800feb4:	449e      	add	lr, r3
 800feb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800feba:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800febe:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800fec2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800fec6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800feca:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800fece:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800fed2:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800fed6:	f8da a000 	ldr.w	sl, [sl]
 800feda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fedc:	44c6      	add	lr, r8
 800fede:	f8dc 3000 	ldr.w	r3, [ip]
 800fee2:	602b      	str	r3, [r5, #0]
 800fee4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800fee8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800feec:	f002 fdde 	bl	8012aac <rmw_create_wait_set>
 800fef0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fef2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800fef4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fef6:	b350      	cbz	r0, 800ff4e <rcl_wait_set_init+0xfe>
 800fef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fefa:	9302      	str	r3, [sp, #8]
 800fefc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fefe:	9301      	str	r3, [sp, #4]
 800ff00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	4642      	mov	r2, r8
 800ff06:	464b      	mov	r3, r9
 800ff08:	4639      	mov	r1, r7
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	f7ff fdea 	bl	800fae4 <rcl_wait_set_resize>
 800ff10:	4605      	mov	r5, r0
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d0af      	beq.n	800fe76 <rcl_wait_set_init+0x26>
 800ff16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ff18:	bb2b      	cbnz	r3, 800ff66 <rcl_wait_set_init+0x116>
 800ff1a:	2600      	movs	r6, #0
 800ff1c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800ff20:	9600      	str	r6, [sp, #0]
 800ff22:	4633      	mov	r3, r6
 800ff24:	4632      	mov	r2, r6
 800ff26:	4631      	mov	r1, r6
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f7ff fddb 	bl	800fae4 <rcl_wait_set_resize>
 800ff2e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ff30:	2800      	cmp	r0, #0
 800ff32:	d0a0      	beq.n	800fe76 <rcl_wait_set_init+0x26>
 800ff34:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800ff36:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800ff38:	4798      	blx	r3
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	6326      	str	r6, [r4, #48]	@ 0x30
 800ff3e:	b004      	add	sp, #16
 800ff40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff44:	250b      	movs	r5, #11
 800ff46:	4628      	mov	r0, r5
 800ff48:	b004      	add	sp, #16
 800ff4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4e:	2501      	movs	r5, #1
 800ff50:	f002 fdb6 	bl	8012ac0 <rmw_destroy_wait_set>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	bf18      	it	ne
 800ff58:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800ff5c:	e7dd      	b.n	800ff1a <rcl_wait_set_init+0xca>
 800ff5e:	2565      	movs	r5, #101	@ 0x65
 800ff60:	e789      	b.n	800fe76 <rcl_wait_set_init+0x26>
 800ff62:	250a      	movs	r5, #10
 800ff64:	e787      	b.n	800fe76 <rcl_wait_set_init+0x26>
 800ff66:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ff68:	e7f2      	b.n	800ff50 <rcl_wait_set_init+0x100>
 800ff6a:	bf00      	nop

0800ff6c <rcl_wait_set_add_guard_condition>:
 800ff6c:	b318      	cbz	r0, 800ffb6 <rcl_wait_set_add_guard_condition+0x4a>
 800ff6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ff70:	b570      	push	{r4, r5, r6, lr}
 800ff72:	4604      	mov	r4, r0
 800ff74:	b30b      	cbz	r3, 800ffba <rcl_wait_set_add_guard_condition+0x4e>
 800ff76:	b319      	cbz	r1, 800ffc0 <rcl_wait_set_add_guard_condition+0x54>
 800ff78:	68dd      	ldr	r5, [r3, #12]
 800ff7a:	68c0      	ldr	r0, [r0, #12]
 800ff7c:	4285      	cmp	r5, r0
 800ff7e:	d217      	bcs.n	800ffb0 <rcl_wait_set_add_guard_condition+0x44>
 800ff80:	68a0      	ldr	r0, [r4, #8]
 800ff82:	1c6e      	adds	r6, r5, #1
 800ff84:	60de      	str	r6, [r3, #12]
 800ff86:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ff8a:	b102      	cbz	r2, 800ff8e <rcl_wait_set_add_guard_condition+0x22>
 800ff8c:	6015      	str	r5, [r2, #0]
 800ff8e:	4608      	mov	r0, r1
 800ff90:	f7fe fa58 	bl	800e444 <rcl_guard_condition_get_rmw_handle>
 800ff94:	b150      	cbz	r0, 800ffac <rcl_wait_set_add_guard_condition+0x40>
 800ff96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ff98:	6842      	ldr	r2, [r0, #4]
 800ff9a:	695b      	ldr	r3, [r3, #20]
 800ff9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffa0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ffa2:	6913      	ldr	r3, [r2, #16]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	6113      	str	r3, [r2, #16]
 800ffaa:	bd70      	pop	{r4, r5, r6, pc}
 800ffac:	2001      	movs	r0, #1
 800ffae:	bd70      	pop	{r4, r5, r6, pc}
 800ffb0:	f240 3086 	movw	r0, #902	@ 0x386
 800ffb4:	bd70      	pop	{r4, r5, r6, pc}
 800ffb6:	200b      	movs	r0, #11
 800ffb8:	4770      	bx	lr
 800ffba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ffbe:	bd70      	pop	{r4, r5, r6, pc}
 800ffc0:	200b      	movs	r0, #11
 800ffc2:	bd70      	pop	{r4, r5, r6, pc}

0800ffc4 <rcl_wait_set_add_timer>:
 800ffc4:	b328      	cbz	r0, 8010012 <rcl_wait_set_add_timer+0x4e>
 800ffc6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ffc8:	b570      	push	{r4, r5, r6, lr}
 800ffca:	4604      	mov	r4, r0
 800ffcc:	b31b      	cbz	r3, 8010016 <rcl_wait_set_add_timer+0x52>
 800ffce:	b329      	cbz	r1, 801001c <rcl_wait_set_add_timer+0x58>
 800ffd0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800ffd2:	6965      	ldr	r5, [r4, #20]
 800ffd4:	42a8      	cmp	r0, r5
 800ffd6:	d219      	bcs.n	801000c <rcl_wait_set_add_timer+0x48>
 800ffd8:	6925      	ldr	r5, [r4, #16]
 800ffda:	1c46      	adds	r6, r0, #1
 800ffdc:	641e      	str	r6, [r3, #64]	@ 0x40
 800ffde:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800ffe2:	b102      	cbz	r2, 800ffe6 <rcl_wait_set_add_timer+0x22>
 800ffe4:	6010      	str	r0, [r2, #0]
 800ffe6:	4608      	mov	r0, r1
 800ffe8:	f7f9 f9fa 	bl	80093e0 <rcl_timer_get_guard_condition>
 800ffec:	b168      	cbz	r0, 801000a <rcl_wait_set_add_timer+0x46>
 800ffee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800fff0:	68e3      	ldr	r3, [r4, #12]
 800fff2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800fff4:	3b01      	subs	r3, #1
 800fff6:	441d      	add	r5, r3
 800fff8:	f7fe fa24 	bl	800e444 <rcl_guard_condition_get_rmw_handle>
 800fffc:	b180      	cbz	r0, 8010020 <rcl_wait_set_add_timer+0x5c>
 800fffe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010000:	6842      	ldr	r2, [r0, #4]
 8010002:	695b      	ldr	r3, [r3, #20]
 8010004:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010008:	2000      	movs	r0, #0
 801000a:	bd70      	pop	{r4, r5, r6, pc}
 801000c:	f240 3086 	movw	r0, #902	@ 0x386
 8010010:	bd70      	pop	{r4, r5, r6, pc}
 8010012:	200b      	movs	r0, #11
 8010014:	4770      	bx	lr
 8010016:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801001a:	bd70      	pop	{r4, r5, r6, pc}
 801001c:	200b      	movs	r0, #11
 801001e:	bd70      	pop	{r4, r5, r6, pc}
 8010020:	2001      	movs	r0, #1
 8010022:	bd70      	pop	{r4, r5, r6, pc}

08010024 <rcl_wait_set_add_client>:
 8010024:	b318      	cbz	r0, 801006e <rcl_wait_set_add_client+0x4a>
 8010026:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010028:	b570      	push	{r4, r5, r6, lr}
 801002a:	4604      	mov	r4, r0
 801002c:	b30b      	cbz	r3, 8010072 <rcl_wait_set_add_client+0x4e>
 801002e:	b319      	cbz	r1, 8010078 <rcl_wait_set_add_client+0x54>
 8010030:	699d      	ldr	r5, [r3, #24]
 8010032:	69c0      	ldr	r0, [r0, #28]
 8010034:	4285      	cmp	r5, r0
 8010036:	d217      	bcs.n	8010068 <rcl_wait_set_add_client+0x44>
 8010038:	69a0      	ldr	r0, [r4, #24]
 801003a:	1c6e      	adds	r6, r5, #1
 801003c:	619e      	str	r6, [r3, #24]
 801003e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010042:	b102      	cbz	r2, 8010046 <rcl_wait_set_add_client+0x22>
 8010044:	6015      	str	r5, [r2, #0]
 8010046:	4608      	mov	r0, r1
 8010048:	f7fd ffa6 	bl	800df98 <rcl_client_get_rmw_handle>
 801004c:	b150      	cbz	r0, 8010064 <rcl_wait_set_add_client+0x40>
 801004e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010050:	6842      	ldr	r2, [r0, #4]
 8010052:	6a1b      	ldr	r3, [r3, #32]
 8010054:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010058:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801005a:	69d3      	ldr	r3, [r2, #28]
 801005c:	3301      	adds	r3, #1
 801005e:	2000      	movs	r0, #0
 8010060:	61d3      	str	r3, [r2, #28]
 8010062:	bd70      	pop	{r4, r5, r6, pc}
 8010064:	2001      	movs	r0, #1
 8010066:	bd70      	pop	{r4, r5, r6, pc}
 8010068:	f240 3086 	movw	r0, #902	@ 0x386
 801006c:	bd70      	pop	{r4, r5, r6, pc}
 801006e:	200b      	movs	r0, #11
 8010070:	4770      	bx	lr
 8010072:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010076:	bd70      	pop	{r4, r5, r6, pc}
 8010078:	200b      	movs	r0, #11
 801007a:	bd70      	pop	{r4, r5, r6, pc}

0801007c <rcl_wait_set_add_service>:
 801007c:	b318      	cbz	r0, 80100c6 <rcl_wait_set_add_service+0x4a>
 801007e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010080:	b570      	push	{r4, r5, r6, lr}
 8010082:	4604      	mov	r4, r0
 8010084:	b30b      	cbz	r3, 80100ca <rcl_wait_set_add_service+0x4e>
 8010086:	b319      	cbz	r1, 80100d0 <rcl_wait_set_add_service+0x54>
 8010088:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801008a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801008c:	4285      	cmp	r5, r0
 801008e:	d217      	bcs.n	80100c0 <rcl_wait_set_add_service+0x44>
 8010090:	6a20      	ldr	r0, [r4, #32]
 8010092:	1c6e      	adds	r6, r5, #1
 8010094:	625e      	str	r6, [r3, #36]	@ 0x24
 8010096:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801009a:	b102      	cbz	r2, 801009e <rcl_wait_set_add_service+0x22>
 801009c:	6015      	str	r5, [r2, #0]
 801009e:	4608      	mov	r0, r1
 80100a0:	f7fe ff7c 	bl	800ef9c <rcl_service_get_rmw_handle>
 80100a4:	b150      	cbz	r0, 80100bc <rcl_wait_set_add_service+0x40>
 80100a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80100a8:	6842      	ldr	r2, [r0, #4]
 80100aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80100b0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80100b2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80100b4:	3301      	adds	r3, #1
 80100b6:	2000      	movs	r0, #0
 80100b8:	6293      	str	r3, [r2, #40]	@ 0x28
 80100ba:	bd70      	pop	{r4, r5, r6, pc}
 80100bc:	2001      	movs	r0, #1
 80100be:	bd70      	pop	{r4, r5, r6, pc}
 80100c0:	f240 3086 	movw	r0, #902	@ 0x386
 80100c4:	bd70      	pop	{r4, r5, r6, pc}
 80100c6:	200b      	movs	r0, #11
 80100c8:	4770      	bx	lr
 80100ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80100ce:	bd70      	pop	{r4, r5, r6, pc}
 80100d0:	200b      	movs	r0, #11
 80100d2:	bd70      	pop	{r4, r5, r6, pc}
 80100d4:	0000      	movs	r0, r0
	...

080100d8 <rcl_wait>:
 80100d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100dc:	ed2d 8b02 	vpush	{d8}
 80100e0:	b08d      	sub	sp, #52	@ 0x34
 80100e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80100e6:	2800      	cmp	r0, #0
 80100e8:	f000 8143 	beq.w	8010372 <rcl_wait+0x29a>
 80100ec:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80100ee:	4605      	mov	r5, r0
 80100f0:	2e00      	cmp	r6, #0
 80100f2:	f000 8112 	beq.w	801031a <rcl_wait+0x242>
 80100f6:	6843      	ldr	r3, [r0, #4]
 80100f8:	b983      	cbnz	r3, 801011c <rcl_wait+0x44>
 80100fa:	68eb      	ldr	r3, [r5, #12]
 80100fc:	b973      	cbnz	r3, 801011c <rcl_wait+0x44>
 80100fe:	696b      	ldr	r3, [r5, #20]
 8010100:	b963      	cbnz	r3, 801011c <rcl_wait+0x44>
 8010102:	69eb      	ldr	r3, [r5, #28]
 8010104:	b953      	cbnz	r3, 801011c <rcl_wait+0x44>
 8010106:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010108:	b943      	cbnz	r3, 801011c <rcl_wait+0x44>
 801010a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801010c:	b933      	cbnz	r3, 801011c <rcl_wait+0x44>
 801010e:	f240 3085 	movw	r0, #901	@ 0x385
 8010112:	b00d      	add	sp, #52	@ 0x34
 8010114:	ecbd 8b02 	vpop	{d8}
 8010118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801011c:	9b04      	ldr	r3, [sp, #16]
 801011e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8010120:	2b01      	cmp	r3, #1
 8010122:	9b05      	ldr	r3, [sp, #20]
 8010124:	f173 0300 	sbcs.w	r3, r3, #0
 8010128:	f2c0 80f0 	blt.w	801030c <rcl_wait+0x234>
 801012c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010130:	4643      	mov	r3, r8
 8010132:	2a00      	cmp	r2, #0
 8010134:	f000 8133 	beq.w	801039e <rcl_wait+0x2c6>
 8010138:	2400      	movs	r4, #0
 801013a:	4613      	mov	r3, r2
 801013c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80103b0 <rcl_wait+0x2d8>
 8010140:	46a2      	mov	sl, r4
 8010142:	46a3      	mov	fp, r4
 8010144:	f240 3921 	movw	r9, #801	@ 0x321
 8010148:	4632      	mov	r2, r6
 801014a:	e014      	b.n	8010176 <rcl_wait+0x9e>
 801014c:	2800      	cmp	r0, #0
 801014e:	d1e0      	bne.n	8010112 <rcl_wait+0x3a>
 8010150:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010154:	4542      	cmp	r2, r8
 8010156:	eb73 0107 	sbcs.w	r1, r3, r7
 801015a:	da03      	bge.n	8010164 <rcl_wait+0x8c>
 801015c:	4690      	mov	r8, r2
 801015e:	461f      	mov	r7, r3
 8010160:	f04f 0b01 	mov.w	fp, #1
 8010164:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8010166:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010168:	3401      	adds	r4, #1
 801016a:	f14a 0a00 	adc.w	sl, sl, #0
 801016e:	429c      	cmp	r4, r3
 8010170:	f17a 0100 	sbcs.w	r1, sl, #0
 8010174:	d228      	bcs.n	80101c8 <rcl_wait+0xf0>
 8010176:	6928      	ldr	r0, [r5, #16]
 8010178:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801017c:	a908      	add	r1, sp, #32
 801017e:	00a6      	lsls	r6, r4, #2
 8010180:	2800      	cmp	r0, #0
 8010182:	d0f1      	beq.n	8010168 <rcl_wait+0x90>
 8010184:	68eb      	ldr	r3, [r5, #12]
 8010186:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801018a:	4423      	add	r3, r4
 801018c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010190:	f1be 0f00 	cmp.w	lr, #0
 8010194:	d006      	beq.n	80101a4 <rcl_wait+0xcc>
 8010196:	6913      	ldr	r3, [r2, #16]
 8010198:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801019c:	3301      	adds	r3, #1
 801019e:	6113      	str	r3, [r2, #16]
 80101a0:	692b      	ldr	r3, [r5, #16]
 80101a2:	5998      	ldr	r0, [r3, r6]
 80101a4:	ed8d 8b08 	vstr	d8, [sp, #32]
 80101a8:	f7f9 f8e8 	bl	800937c <rcl_timer_get_time_until_next_call>
 80101ac:	4548      	cmp	r0, r9
 80101ae:	d1cd      	bne.n	801014c <rcl_wait+0x74>
 80101b0:	692b      	ldr	r3, [r5, #16]
 80101b2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80101b4:	2100      	movs	r1, #0
 80101b6:	5199      	str	r1, [r3, r6]
 80101b8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80101ba:	3401      	adds	r4, #1
 80101bc:	f14a 0a00 	adc.w	sl, sl, #0
 80101c0:	429c      	cmp	r4, r3
 80101c2:	f17a 0100 	sbcs.w	r1, sl, #0
 80101c6:	d3d6      	bcc.n	8010176 <rcl_wait+0x9e>
 80101c8:	4616      	mov	r6, r2
 80101ca:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80101ce:	4313      	orrs	r3, r2
 80101d0:	46d9      	mov	r9, fp
 80101d2:	f040 80a9 	bne.w	8010328 <rcl_wait+0x250>
 80101d6:	2300      	movs	r3, #0
 80101d8:	2200      	movs	r2, #0
 80101da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80101de:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80101e2:	ab08      	add	r3, sp, #32
 80101e4:	9302      	str	r3, [sp, #8]
 80101e6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80101e8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80101ec:	e9cd 3200 	strd	r3, r2, [sp]
 80101f0:	f106 0110 	add.w	r1, r6, #16
 80101f4:	f106 031c 	add.w	r3, r6, #28
 80101f8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80101fc:	1d30      	adds	r0, r6, #4
 80101fe:	f002 fadd 	bl	80127bc <rmw_wait>
 8010202:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010206:	4680      	mov	r8, r0
 8010208:	b1ca      	cbz	r2, 801023e <rcl_wait+0x166>
 801020a:	2400      	movs	r4, #0
 801020c:	4627      	mov	r7, r4
 801020e:	692a      	ldr	r2, [r5, #16]
 8010210:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8010214:	f10d 011f 	add.w	r1, sp, #31
 8010218:	00a6      	lsls	r6, r4, #2
 801021a:	b160      	cbz	r0, 8010236 <rcl_wait+0x15e>
 801021c:	f88d 701f 	strb.w	r7, [sp, #31]
 8010220:	f7f9 f872 	bl	8009308 <rcl_timer_is_ready>
 8010224:	2800      	cmp	r0, #0
 8010226:	f47f af74 	bne.w	8010112 <rcl_wait+0x3a>
 801022a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801022e:	b90b      	cbnz	r3, 8010234 <rcl_wait+0x15c>
 8010230:	692a      	ldr	r2, [r5, #16]
 8010232:	5193      	str	r3, [r2, r6]
 8010234:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010238:	3401      	adds	r4, #1
 801023a:	42a2      	cmp	r2, r4
 801023c:	d8e7      	bhi.n	801020e <rcl_wait+0x136>
 801023e:	f038 0002 	bics.w	r0, r8, #2
 8010242:	f040 8090 	bne.w	8010366 <rcl_wait+0x28e>
 8010246:	686e      	ldr	r6, [r5, #4]
 8010248:	4602      	mov	r2, r0
 801024a:	b91e      	cbnz	r6, 8010254 <rcl_wait+0x17c>
 801024c:	e00d      	b.n	801026a <rcl_wait+0x192>
 801024e:	3201      	adds	r2, #1
 8010250:	42b2      	cmp	r2, r6
 8010252:	d00a      	beq.n	801026a <rcl_wait+0x192>
 8010254:	6899      	ldr	r1, [r3, #8]
 8010256:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801025a:	2900      	cmp	r1, #0
 801025c:	d1f7      	bne.n	801024e <rcl_wait+0x176>
 801025e:	682c      	ldr	r4, [r5, #0]
 8010260:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010264:	3201      	adds	r2, #1
 8010266:	42b2      	cmp	r2, r6
 8010268:	d1f4      	bne.n	8010254 <rcl_wait+0x17c>
 801026a:	68ee      	ldr	r6, [r5, #12]
 801026c:	2200      	movs	r2, #0
 801026e:	b91e      	cbnz	r6, 8010278 <rcl_wait+0x1a0>
 8010270:	e00d      	b.n	801028e <rcl_wait+0x1b6>
 8010272:	3201      	adds	r2, #1
 8010274:	42b2      	cmp	r2, r6
 8010276:	d00a      	beq.n	801028e <rcl_wait+0x1b6>
 8010278:	6959      	ldr	r1, [r3, #20]
 801027a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801027e:	2900      	cmp	r1, #0
 8010280:	d1f7      	bne.n	8010272 <rcl_wait+0x19a>
 8010282:	68ac      	ldr	r4, [r5, #8]
 8010284:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010288:	3201      	adds	r2, #1
 801028a:	42b2      	cmp	r2, r6
 801028c:	d1f4      	bne.n	8010278 <rcl_wait+0x1a0>
 801028e:	69ee      	ldr	r6, [r5, #28]
 8010290:	2200      	movs	r2, #0
 8010292:	b91e      	cbnz	r6, 801029c <rcl_wait+0x1c4>
 8010294:	e00d      	b.n	80102b2 <rcl_wait+0x1da>
 8010296:	3201      	adds	r2, #1
 8010298:	42b2      	cmp	r2, r6
 801029a:	d00a      	beq.n	80102b2 <rcl_wait+0x1da>
 801029c:	6a19      	ldr	r1, [r3, #32]
 801029e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80102a2:	2900      	cmp	r1, #0
 80102a4:	d1f7      	bne.n	8010296 <rcl_wait+0x1be>
 80102a6:	69ac      	ldr	r4, [r5, #24]
 80102a8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80102ac:	3201      	adds	r2, #1
 80102ae:	42b2      	cmp	r2, r6
 80102b0:	d1f4      	bne.n	801029c <rcl_wait+0x1c4>
 80102b2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80102b4:	2200      	movs	r2, #0
 80102b6:	b91e      	cbnz	r6, 80102c0 <rcl_wait+0x1e8>
 80102b8:	e00d      	b.n	80102d6 <rcl_wait+0x1fe>
 80102ba:	3201      	adds	r2, #1
 80102bc:	4296      	cmp	r6, r2
 80102be:	d00a      	beq.n	80102d6 <rcl_wait+0x1fe>
 80102c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80102c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80102c6:	2900      	cmp	r1, #0
 80102c8:	d1f7      	bne.n	80102ba <rcl_wait+0x1e2>
 80102ca:	6a2c      	ldr	r4, [r5, #32]
 80102cc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80102d0:	3201      	adds	r2, #1
 80102d2:	4296      	cmp	r6, r2
 80102d4:	d1f4      	bne.n	80102c0 <rcl_wait+0x1e8>
 80102d6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80102d8:	2200      	movs	r2, #0
 80102da:	b91e      	cbnz	r6, 80102e4 <rcl_wait+0x20c>
 80102dc:	e00d      	b.n	80102fa <rcl_wait+0x222>
 80102de:	3201      	adds	r2, #1
 80102e0:	42b2      	cmp	r2, r6
 80102e2:	d00a      	beq.n	80102fa <rcl_wait+0x222>
 80102e4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80102e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80102ea:	2900      	cmp	r1, #0
 80102ec:	d1f7      	bne.n	80102de <rcl_wait+0x206>
 80102ee:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80102f0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80102f4:	3201      	adds	r2, #1
 80102f6:	42b2      	cmp	r2, r6
 80102f8:	d1f4      	bne.n	80102e4 <rcl_wait+0x20c>
 80102fa:	f1b8 0f02 	cmp.w	r8, #2
 80102fe:	f47f af08 	bne.w	8010112 <rcl_wait+0x3a>
 8010302:	464b      	mov	r3, r9
 8010304:	2b00      	cmp	r3, #0
 8010306:	bf08      	it	eq
 8010308:	2002      	moveq	r0, #2
 801030a:	e702      	b.n	8010112 <rcl_wait+0x3a>
 801030c:	2a00      	cmp	r2, #0
 801030e:	d03a      	beq.n	8010386 <rcl_wait+0x2ae>
 8010310:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010314:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8010318:	e70e      	b.n	8010138 <rcl_wait+0x60>
 801031a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801031e:	b00d      	add	sp, #52	@ 0x34
 8010320:	ecbd 8b02 	vpop	{d8}
 8010324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010328:	9b04      	ldr	r3, [sp, #16]
 801032a:	2b01      	cmp	r3, #1
 801032c:	9b05      	ldr	r3, [sp, #20]
 801032e:	f173 0300 	sbcs.w	r3, r3, #0
 8010332:	db24      	blt.n	801037e <rcl_wait+0x2a6>
 8010334:	2f00      	cmp	r7, #0
 8010336:	bfbc      	itt	lt
 8010338:	f04f 0800 	movlt.w	r8, #0
 801033c:	4647      	movlt	r7, r8
 801033e:	a31e      	add	r3, pc, #120	@ (adr r3, 80103b8 <rcl_wait+0x2e0>)
 8010340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010344:	4640      	mov	r0, r8
 8010346:	4639      	mov	r1, r7
 8010348:	f7ef ffb2 	bl	80002b0 <__aeabi_ldivmod>
 801034c:	a31a      	add	r3, pc, #104	@ (adr r3, 80103b8 <rcl_wait+0x2e0>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010356:	4640      	mov	r0, r8
 8010358:	4639      	mov	r1, r7
 801035a:	f7ef ffa9 	bl	80002b0 <__aeabi_ldivmod>
 801035e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8010362:	ab08      	add	r3, sp, #32
 8010364:	e73e      	b.n	80101e4 <rcl_wait+0x10c>
 8010366:	2001      	movs	r0, #1
 8010368:	b00d      	add	sp, #52	@ 0x34
 801036a:	ecbd 8b02 	vpop	{d8}
 801036e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010372:	200b      	movs	r0, #11
 8010374:	b00d      	add	sp, #52	@ 0x34
 8010376:	ecbd 8b02 	vpop	{d8}
 801037a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801037e:	465b      	mov	r3, fp
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1d7      	bne.n	8010334 <rcl_wait+0x25c>
 8010384:	e72e      	b.n	80101e4 <rcl_wait+0x10c>
 8010386:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801038a:	430b      	orrs	r3, r1
 801038c:	bf08      	it	eq
 801038e:	4691      	moveq	r9, r2
 8010390:	f43f af21 	beq.w	80101d6 <rcl_wait+0xfe>
 8010394:	9b04      	ldr	r3, [sp, #16]
 8010396:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801039a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801039e:	2b01      	cmp	r3, #1
 80103a0:	9b05      	ldr	r3, [sp, #20]
 80103a2:	f173 0300 	sbcs.w	r3, r3, #0
 80103a6:	f04f 0300 	mov.w	r3, #0
 80103aa:	4699      	mov	r9, r3
 80103ac:	dac2      	bge.n	8010334 <rcl_wait+0x25c>
 80103ae:	e719      	b.n	80101e4 <rcl_wait+0x10c>
 80103b0:	ffffffff 	.word	0xffffffff
 80103b4:	7fffffff 	.word	0x7fffffff
 80103b8:	3b9aca00 	.word	0x3b9aca00
 80103bc:	00000000 	.word	0x00000000

080103c0 <rcl_action_take_goal_response>:
 80103c0:	2800      	cmp	r0, #0
 80103c2:	d039      	beq.n	8010438 <rcl_action_take_goal_response+0x78>
 80103c4:	b570      	push	{r4, r5, r6, lr}
 80103c6:	4604      	mov	r4, r0
 80103c8:	6800      	ldr	r0, [r0, #0]
 80103ca:	b380      	cbz	r0, 801042e <rcl_action_take_goal_response+0x6e>
 80103cc:	460d      	mov	r5, r1
 80103ce:	4616      	mov	r6, r2
 80103d0:	f7fd fea2 	bl	800e118 <rcl_client_is_valid>
 80103d4:	b330      	cbz	r0, 8010424 <rcl_action_take_goal_response+0x64>
 80103d6:	6820      	ldr	r0, [r4, #0]
 80103d8:	3004      	adds	r0, #4
 80103da:	f7fd fe9d 	bl	800e118 <rcl_client_is_valid>
 80103de:	b308      	cbz	r0, 8010424 <rcl_action_take_goal_response+0x64>
 80103e0:	6820      	ldr	r0, [r4, #0]
 80103e2:	3008      	adds	r0, #8
 80103e4:	f7fd fe98 	bl	800e118 <rcl_client_is_valid>
 80103e8:	b1e0      	cbz	r0, 8010424 <rcl_action_take_goal_response+0x64>
 80103ea:	6820      	ldr	r0, [r4, #0]
 80103ec:	300c      	adds	r0, #12
 80103ee:	f7ff f83d 	bl	800f46c <rcl_subscription_is_valid>
 80103f2:	b1b8      	cbz	r0, 8010424 <rcl_action_take_goal_response+0x64>
 80103f4:	6820      	ldr	r0, [r4, #0]
 80103f6:	3010      	adds	r0, #16
 80103f8:	f7ff f838 	bl	800f46c <rcl_subscription_is_valid>
 80103fc:	b190      	cbz	r0, 8010424 <rcl_action_take_goal_response+0x64>
 80103fe:	b1cd      	cbz	r5, 8010434 <rcl_action_take_goal_response+0x74>
 8010400:	b1c6      	cbz	r6, 8010434 <rcl_action_take_goal_response+0x74>
 8010402:	6820      	ldr	r0, [r4, #0]
 8010404:	4632      	mov	r2, r6
 8010406:	4629      	mov	r1, r5
 8010408:	f7fd fe1e 	bl	800e048 <rcl_take_response>
 801040c:	b148      	cbz	r0, 8010422 <rcl_action_take_goal_response+0x62>
 801040e:	280a      	cmp	r0, #10
 8010410:	d007      	beq.n	8010422 <rcl_action_take_goal_response+0x62>
 8010412:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8010416:	f640 0337 	movw	r3, #2103	@ 0x837
 801041a:	4290      	cmp	r0, r2
 801041c:	bf0c      	ite	eq
 801041e:	4618      	moveq	r0, r3
 8010420:	2001      	movne	r0, #1
 8010422:	bd70      	pop	{r4, r5, r6, pc}
 8010424:	f7fa f864 	bl	800a4f0 <rcutils_reset_error>
 8010428:	f640 0036 	movw	r0, #2102	@ 0x836
 801042c:	bd70      	pop	{r4, r5, r6, pc}
 801042e:	f640 0036 	movw	r0, #2102	@ 0x836
 8010432:	bd70      	pop	{r4, r5, r6, pc}
 8010434:	200b      	movs	r0, #11
 8010436:	bd70      	pop	{r4, r5, r6, pc}
 8010438:	f640 0036 	movw	r0, #2102	@ 0x836
 801043c:	4770      	bx	lr
 801043e:	bf00      	nop

08010440 <rcl_action_send_result_request>:
 8010440:	b390      	cbz	r0, 80104a8 <rcl_action_send_result_request+0x68>
 8010442:	b570      	push	{r4, r5, r6, lr}
 8010444:	4604      	mov	r4, r0
 8010446:	6800      	ldr	r0, [r0, #0]
 8010448:	b348      	cbz	r0, 801049e <rcl_action_send_result_request+0x5e>
 801044a:	460d      	mov	r5, r1
 801044c:	4616      	mov	r6, r2
 801044e:	f7fd fe63 	bl	800e118 <rcl_client_is_valid>
 8010452:	b1f8      	cbz	r0, 8010494 <rcl_action_send_result_request+0x54>
 8010454:	6820      	ldr	r0, [r4, #0]
 8010456:	3004      	adds	r0, #4
 8010458:	f7fd fe5e 	bl	800e118 <rcl_client_is_valid>
 801045c:	b1d0      	cbz	r0, 8010494 <rcl_action_send_result_request+0x54>
 801045e:	6820      	ldr	r0, [r4, #0]
 8010460:	3008      	adds	r0, #8
 8010462:	f7fd fe59 	bl	800e118 <rcl_client_is_valid>
 8010466:	b1a8      	cbz	r0, 8010494 <rcl_action_send_result_request+0x54>
 8010468:	6820      	ldr	r0, [r4, #0]
 801046a:	300c      	adds	r0, #12
 801046c:	f7fe fffe 	bl	800f46c <rcl_subscription_is_valid>
 8010470:	b180      	cbz	r0, 8010494 <rcl_action_send_result_request+0x54>
 8010472:	6820      	ldr	r0, [r4, #0]
 8010474:	3010      	adds	r0, #16
 8010476:	f7fe fff9 	bl	800f46c <rcl_subscription_is_valid>
 801047a:	b158      	cbz	r0, 8010494 <rcl_action_send_result_request+0x54>
 801047c:	b195      	cbz	r5, 80104a4 <rcl_action_send_result_request+0x64>
 801047e:	b18e      	cbz	r6, 80104a4 <rcl_action_send_result_request+0x64>
 8010480:	6820      	ldr	r0, [r4, #0]
 8010482:	4632      	mov	r2, r6
 8010484:	4629      	mov	r1, r5
 8010486:	3008      	adds	r0, #8
 8010488:	f7fd fd8c 	bl	800dfa4 <rcl_send_request>
 801048c:	3800      	subs	r0, #0
 801048e:	bf18      	it	ne
 8010490:	2001      	movne	r0, #1
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	f7fa f82c 	bl	800a4f0 <rcutils_reset_error>
 8010498:	f640 0036 	movw	r0, #2102	@ 0x836
 801049c:	bd70      	pop	{r4, r5, r6, pc}
 801049e:	f640 0036 	movw	r0, #2102	@ 0x836
 80104a2:	bd70      	pop	{r4, r5, r6, pc}
 80104a4:	200b      	movs	r0, #11
 80104a6:	bd70      	pop	{r4, r5, r6, pc}
 80104a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop

080104b0 <rcl_action_take_result_response>:
 80104b0:	2800      	cmp	r0, #0
 80104b2:	d03a      	beq.n	801052a <rcl_action_take_result_response+0x7a>
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	4604      	mov	r4, r0
 80104b8:	6800      	ldr	r0, [r0, #0]
 80104ba:	b388      	cbz	r0, 8010520 <rcl_action_take_result_response+0x70>
 80104bc:	460d      	mov	r5, r1
 80104be:	4616      	mov	r6, r2
 80104c0:	f7fd fe2a 	bl	800e118 <rcl_client_is_valid>
 80104c4:	b338      	cbz	r0, 8010516 <rcl_action_take_result_response+0x66>
 80104c6:	6820      	ldr	r0, [r4, #0]
 80104c8:	3004      	adds	r0, #4
 80104ca:	f7fd fe25 	bl	800e118 <rcl_client_is_valid>
 80104ce:	b310      	cbz	r0, 8010516 <rcl_action_take_result_response+0x66>
 80104d0:	6820      	ldr	r0, [r4, #0]
 80104d2:	3008      	adds	r0, #8
 80104d4:	f7fd fe20 	bl	800e118 <rcl_client_is_valid>
 80104d8:	b1e8      	cbz	r0, 8010516 <rcl_action_take_result_response+0x66>
 80104da:	6820      	ldr	r0, [r4, #0]
 80104dc:	300c      	adds	r0, #12
 80104de:	f7fe ffc5 	bl	800f46c <rcl_subscription_is_valid>
 80104e2:	b1c0      	cbz	r0, 8010516 <rcl_action_take_result_response+0x66>
 80104e4:	6820      	ldr	r0, [r4, #0]
 80104e6:	3010      	adds	r0, #16
 80104e8:	f7fe ffc0 	bl	800f46c <rcl_subscription_is_valid>
 80104ec:	b198      	cbz	r0, 8010516 <rcl_action_take_result_response+0x66>
 80104ee:	b1d5      	cbz	r5, 8010526 <rcl_action_take_result_response+0x76>
 80104f0:	b1ce      	cbz	r6, 8010526 <rcl_action_take_result_response+0x76>
 80104f2:	6820      	ldr	r0, [r4, #0]
 80104f4:	4632      	mov	r2, r6
 80104f6:	4629      	mov	r1, r5
 80104f8:	3008      	adds	r0, #8
 80104fa:	f7fd fda5 	bl	800e048 <rcl_take_response>
 80104fe:	b148      	cbz	r0, 8010514 <rcl_action_take_result_response+0x64>
 8010500:	280a      	cmp	r0, #10
 8010502:	d007      	beq.n	8010514 <rcl_action_take_result_response+0x64>
 8010504:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8010508:	f640 0337 	movw	r3, #2103	@ 0x837
 801050c:	4290      	cmp	r0, r2
 801050e:	bf0c      	ite	eq
 8010510:	4618      	moveq	r0, r3
 8010512:	2001      	movne	r0, #1
 8010514:	bd70      	pop	{r4, r5, r6, pc}
 8010516:	f7f9 ffeb 	bl	800a4f0 <rcutils_reset_error>
 801051a:	f640 0036 	movw	r0, #2102	@ 0x836
 801051e:	bd70      	pop	{r4, r5, r6, pc}
 8010520:	f640 0036 	movw	r0, #2102	@ 0x836
 8010524:	bd70      	pop	{r4, r5, r6, pc}
 8010526:	200b      	movs	r0, #11
 8010528:	bd70      	pop	{r4, r5, r6, pc}
 801052a:	f640 0036 	movw	r0, #2102	@ 0x836
 801052e:	4770      	bx	lr

08010530 <rcl_action_take_cancel_response>:
 8010530:	2800      	cmp	r0, #0
 8010532:	d03a      	beq.n	80105aa <rcl_action_take_cancel_response+0x7a>
 8010534:	b570      	push	{r4, r5, r6, lr}
 8010536:	4604      	mov	r4, r0
 8010538:	6800      	ldr	r0, [r0, #0]
 801053a:	b388      	cbz	r0, 80105a0 <rcl_action_take_cancel_response+0x70>
 801053c:	460d      	mov	r5, r1
 801053e:	4616      	mov	r6, r2
 8010540:	f7fd fdea 	bl	800e118 <rcl_client_is_valid>
 8010544:	b338      	cbz	r0, 8010596 <rcl_action_take_cancel_response+0x66>
 8010546:	6820      	ldr	r0, [r4, #0]
 8010548:	3004      	adds	r0, #4
 801054a:	f7fd fde5 	bl	800e118 <rcl_client_is_valid>
 801054e:	b310      	cbz	r0, 8010596 <rcl_action_take_cancel_response+0x66>
 8010550:	6820      	ldr	r0, [r4, #0]
 8010552:	3008      	adds	r0, #8
 8010554:	f7fd fde0 	bl	800e118 <rcl_client_is_valid>
 8010558:	b1e8      	cbz	r0, 8010596 <rcl_action_take_cancel_response+0x66>
 801055a:	6820      	ldr	r0, [r4, #0]
 801055c:	300c      	adds	r0, #12
 801055e:	f7fe ff85 	bl	800f46c <rcl_subscription_is_valid>
 8010562:	b1c0      	cbz	r0, 8010596 <rcl_action_take_cancel_response+0x66>
 8010564:	6820      	ldr	r0, [r4, #0]
 8010566:	3010      	adds	r0, #16
 8010568:	f7fe ff80 	bl	800f46c <rcl_subscription_is_valid>
 801056c:	b198      	cbz	r0, 8010596 <rcl_action_take_cancel_response+0x66>
 801056e:	b1d5      	cbz	r5, 80105a6 <rcl_action_take_cancel_response+0x76>
 8010570:	b1ce      	cbz	r6, 80105a6 <rcl_action_take_cancel_response+0x76>
 8010572:	6820      	ldr	r0, [r4, #0]
 8010574:	4632      	mov	r2, r6
 8010576:	4629      	mov	r1, r5
 8010578:	3004      	adds	r0, #4
 801057a:	f7fd fd65 	bl	800e048 <rcl_take_response>
 801057e:	b148      	cbz	r0, 8010594 <rcl_action_take_cancel_response+0x64>
 8010580:	280a      	cmp	r0, #10
 8010582:	d007      	beq.n	8010594 <rcl_action_take_cancel_response+0x64>
 8010584:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8010588:	f640 0337 	movw	r3, #2103	@ 0x837
 801058c:	4290      	cmp	r0, r2
 801058e:	bf0c      	ite	eq
 8010590:	4618      	moveq	r0, r3
 8010592:	2001      	movne	r0, #1
 8010594:	bd70      	pop	{r4, r5, r6, pc}
 8010596:	f7f9 ffab 	bl	800a4f0 <rcutils_reset_error>
 801059a:	f640 0036 	movw	r0, #2102	@ 0x836
 801059e:	bd70      	pop	{r4, r5, r6, pc}
 80105a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80105a4:	bd70      	pop	{r4, r5, r6, pc}
 80105a6:	200b      	movs	r0, #11
 80105a8:	bd70      	pop	{r4, r5, r6, pc}
 80105aa:	f640 0036 	movw	r0, #2102	@ 0x836
 80105ae:	4770      	bx	lr

080105b0 <rcl_action_take_feedback>:
 80105b0:	2800      	cmp	r0, #0
 80105b2:	d038      	beq.n	8010626 <rcl_action_take_feedback+0x76>
 80105b4:	b530      	push	{r4, r5, lr}
 80105b6:	4604      	mov	r4, r0
 80105b8:	6800      	ldr	r0, [r0, #0]
 80105ba:	b08f      	sub	sp, #60	@ 0x3c
 80105bc:	b378      	cbz	r0, 801061e <rcl_action_take_feedback+0x6e>
 80105be:	460d      	mov	r5, r1
 80105c0:	f7fd fdaa 	bl	800e118 <rcl_client_is_valid>
 80105c4:	b328      	cbz	r0, 8010612 <rcl_action_take_feedback+0x62>
 80105c6:	6820      	ldr	r0, [r4, #0]
 80105c8:	3004      	adds	r0, #4
 80105ca:	f7fd fda5 	bl	800e118 <rcl_client_is_valid>
 80105ce:	b300      	cbz	r0, 8010612 <rcl_action_take_feedback+0x62>
 80105d0:	6820      	ldr	r0, [r4, #0]
 80105d2:	3008      	adds	r0, #8
 80105d4:	f7fd fda0 	bl	800e118 <rcl_client_is_valid>
 80105d8:	b1d8      	cbz	r0, 8010612 <rcl_action_take_feedback+0x62>
 80105da:	6820      	ldr	r0, [r4, #0]
 80105dc:	300c      	adds	r0, #12
 80105de:	f7fe ff45 	bl	800f46c <rcl_subscription_is_valid>
 80105e2:	b1b0      	cbz	r0, 8010612 <rcl_action_take_feedback+0x62>
 80105e4:	6820      	ldr	r0, [r4, #0]
 80105e6:	3010      	adds	r0, #16
 80105e8:	f7fe ff40 	bl	800f46c <rcl_subscription_is_valid>
 80105ec:	b188      	cbz	r0, 8010612 <rcl_action_take_feedback+0x62>
 80105ee:	b1ed      	cbz	r5, 801062c <rcl_action_take_feedback+0x7c>
 80105f0:	6820      	ldr	r0, [r4, #0]
 80105f2:	2300      	movs	r3, #0
 80105f4:	466a      	mov	r2, sp
 80105f6:	4629      	mov	r1, r5
 80105f8:	300c      	adds	r0, #12
 80105fa:	f7fe fed9 	bl	800f3b0 <rcl_take>
 80105fe:	b160      	cbz	r0, 801061a <rcl_action_take_feedback+0x6a>
 8010600:	f240 1391 	movw	r3, #401	@ 0x191
 8010604:	4298      	cmp	r0, r3
 8010606:	d014      	beq.n	8010632 <rcl_action_take_feedback+0x82>
 8010608:	280a      	cmp	r0, #10
 801060a:	bf18      	it	ne
 801060c:	2001      	movne	r0, #1
 801060e:	b00f      	add	sp, #60	@ 0x3c
 8010610:	bd30      	pop	{r4, r5, pc}
 8010612:	f7f9 ff6d 	bl	800a4f0 <rcutils_reset_error>
 8010616:	f640 0036 	movw	r0, #2102	@ 0x836
 801061a:	b00f      	add	sp, #60	@ 0x3c
 801061c:	bd30      	pop	{r4, r5, pc}
 801061e:	f640 0036 	movw	r0, #2102	@ 0x836
 8010622:	b00f      	add	sp, #60	@ 0x3c
 8010624:	bd30      	pop	{r4, r5, pc}
 8010626:	f640 0036 	movw	r0, #2102	@ 0x836
 801062a:	4770      	bx	lr
 801062c:	200b      	movs	r0, #11
 801062e:	b00f      	add	sp, #60	@ 0x3c
 8010630:	bd30      	pop	{r4, r5, pc}
 8010632:	f640 0037 	movw	r0, #2103	@ 0x837
 8010636:	e7f0      	b.n	801061a <rcl_action_take_feedback+0x6a>

08010638 <rcl_action_wait_set_add_action_client>:
 8010638:	2800      	cmp	r0, #0
 801063a:	d048      	beq.n	80106ce <rcl_action_wait_set_add_action_client+0x96>
 801063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801063e:	460c      	mov	r4, r1
 8010640:	2900      	cmp	r1, #0
 8010642:	d03c      	beq.n	80106be <rcl_action_wait_set_add_action_client+0x86>
 8010644:	4605      	mov	r5, r0
 8010646:	6808      	ldr	r0, [r1, #0]
 8010648:	2800      	cmp	r0, #0
 801064a:	d038      	beq.n	80106be <rcl_action_wait_set_add_action_client+0x86>
 801064c:	4617      	mov	r7, r2
 801064e:	461e      	mov	r6, r3
 8010650:	f7fd fd62 	bl	800e118 <rcl_client_is_valid>
 8010654:	b3b0      	cbz	r0, 80106c4 <rcl_action_wait_set_add_action_client+0x8c>
 8010656:	6820      	ldr	r0, [r4, #0]
 8010658:	3004      	adds	r0, #4
 801065a:	f7fd fd5d 	bl	800e118 <rcl_client_is_valid>
 801065e:	b388      	cbz	r0, 80106c4 <rcl_action_wait_set_add_action_client+0x8c>
 8010660:	6820      	ldr	r0, [r4, #0]
 8010662:	3008      	adds	r0, #8
 8010664:	f7fd fd58 	bl	800e118 <rcl_client_is_valid>
 8010668:	b360      	cbz	r0, 80106c4 <rcl_action_wait_set_add_action_client+0x8c>
 801066a:	6820      	ldr	r0, [r4, #0]
 801066c:	300c      	adds	r0, #12
 801066e:	f7fe fefd 	bl	800f46c <rcl_subscription_is_valid>
 8010672:	b338      	cbz	r0, 80106c4 <rcl_action_wait_set_add_action_client+0x8c>
 8010674:	6820      	ldr	r0, [r4, #0]
 8010676:	3010      	adds	r0, #16
 8010678:	f7fe fef8 	bl	800f46c <rcl_subscription_is_valid>
 801067c:	b310      	cbz	r0, 80106c4 <rcl_action_wait_set_add_action_client+0x8c>
 801067e:	6821      	ldr	r1, [r4, #0]
 8010680:	4628      	mov	r0, r5
 8010682:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8010686:	f7ff fccd 	bl	8010024 <rcl_wait_set_add_client>
 801068a:	b9b8      	cbnz	r0, 80106bc <rcl_action_wait_set_add_action_client+0x84>
 801068c:	6821      	ldr	r1, [r4, #0]
 801068e:	4628      	mov	r0, r5
 8010690:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8010694:	3104      	adds	r1, #4
 8010696:	f7ff fcc5 	bl	8010024 <rcl_wait_set_add_client>
 801069a:	b978      	cbnz	r0, 80106bc <rcl_action_wait_set_add_action_client+0x84>
 801069c:	6821      	ldr	r1, [r4, #0]
 801069e:	4628      	mov	r0, r5
 80106a0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80106a4:	3108      	adds	r1, #8
 80106a6:	f7ff fcbd 	bl	8010024 <rcl_wait_set_add_client>
 80106aa:	b938      	cbnz	r0, 80106bc <rcl_action_wait_set_add_action_client+0x84>
 80106ac:	6821      	ldr	r1, [r4, #0]
 80106ae:	4628      	mov	r0, r5
 80106b0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80106b4:	310c      	adds	r1, #12
 80106b6:	f7ff f96d 	bl	800f994 <rcl_wait_set_add_subscription>
 80106ba:	b158      	cbz	r0, 80106d4 <rcl_action_wait_set_add_action_client+0x9c>
 80106bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106be:	f640 0036 	movw	r0, #2102	@ 0x836
 80106c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106c4:	f7f9 ff14 	bl	800a4f0 <rcutils_reset_error>
 80106c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80106cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106ce:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80106d2:	4770      	bx	lr
 80106d4:	6821      	ldr	r1, [r4, #0]
 80106d6:	4628      	mov	r0, r5
 80106d8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80106dc:	3110      	adds	r1, #16
 80106de:	f7ff f959 	bl	800f994 <rcl_wait_set_add_subscription>
 80106e2:	2800      	cmp	r0, #0
 80106e4:	d1ea      	bne.n	80106bc <rcl_action_wait_set_add_action_client+0x84>
 80106e6:	b11f      	cbz	r7, 80106f0 <rcl_action_wait_set_add_action_client+0xb8>
 80106e8:	6823      	ldr	r3, [r4, #0]
 80106ea:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80106ee:	603b      	str	r3, [r7, #0]
 80106f0:	2e00      	cmp	r6, #0
 80106f2:	d0e3      	beq.n	80106bc <rcl_action_wait_set_add_action_client+0x84>
 80106f4:	6823      	ldr	r3, [r4, #0]
 80106f6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80106fa:	6033      	str	r3, [r6, #0]
 80106fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106fe:	bf00      	nop

08010700 <rcl_action_client_wait_set_get_entities_ready>:
 8010700:	2800      	cmp	r0, #0
 8010702:	f000 808d 	beq.w	8010820 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8010706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801070a:	460c      	mov	r4, r1
 801070c:	2900      	cmp	r1, #0
 801070e:	d077      	beq.n	8010800 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010710:	4605      	mov	r5, r0
 8010712:	6808      	ldr	r0, [r1, #0]
 8010714:	2800      	cmp	r0, #0
 8010716:	d073      	beq.n	8010800 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010718:	4616      	mov	r6, r2
 801071a:	461f      	mov	r7, r3
 801071c:	f7fd fcfc 	bl	800e118 <rcl_client_is_valid>
 8010720:	2800      	cmp	r0, #0
 8010722:	d071      	beq.n	8010808 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010724:	6820      	ldr	r0, [r4, #0]
 8010726:	3004      	adds	r0, #4
 8010728:	f7fd fcf6 	bl	800e118 <rcl_client_is_valid>
 801072c:	2800      	cmp	r0, #0
 801072e:	d06b      	beq.n	8010808 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010730:	6820      	ldr	r0, [r4, #0]
 8010732:	3008      	adds	r0, #8
 8010734:	f7fd fcf0 	bl	800e118 <rcl_client_is_valid>
 8010738:	2800      	cmp	r0, #0
 801073a:	d065      	beq.n	8010808 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801073c:	6820      	ldr	r0, [r4, #0]
 801073e:	300c      	adds	r0, #12
 8010740:	f7fe fe94 	bl	800f46c <rcl_subscription_is_valid>
 8010744:	2800      	cmp	r0, #0
 8010746:	d05f      	beq.n	8010808 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010748:	6820      	ldr	r0, [r4, #0]
 801074a:	3010      	adds	r0, #16
 801074c:	f7fe fe8e 	bl	800f46c <rcl_subscription_is_valid>
 8010750:	2800      	cmp	r0, #0
 8010752:	d059      	beq.n	8010808 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010754:	2e00      	cmp	r6, #0
 8010756:	d060      	beq.n	801081a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010758:	2f00      	cmp	r7, #0
 801075a:	d05e      	beq.n	801081a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801075c:	9b06      	ldr	r3, [sp, #24]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d05b      	beq.n	801081a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010762:	9b07      	ldr	r3, [sp, #28]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d058      	beq.n	801081a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010768:	9b08      	ldr	r3, [sp, #32]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d055      	beq.n	801081a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801076e:	6823      	ldr	r3, [r4, #0]
 8010770:	686a      	ldr	r2, [r5, #4]
 8010772:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8010776:	428a      	cmp	r2, r1
 8010778:	d94c      	bls.n	8010814 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801077a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801077e:	4282      	cmp	r2, r0
 8010780:	d948      	bls.n	8010814 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010782:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8010786:	69ea      	ldr	r2, [r5, #28]
 8010788:	42a2      	cmp	r2, r4
 801078a:	d943      	bls.n	8010814 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801078c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8010790:	4562      	cmp	r2, ip
 8010792:	d93f      	bls.n	8010814 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010794:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8010798:	4572      	cmp	r2, lr
 801079a:	d93b      	bls.n	8010814 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801079c:	69aa      	ldr	r2, [r5, #24]
 801079e:	682d      	ldr	r5, [r5, #0]
 80107a0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80107a4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80107a8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80107ac:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80107b0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80107b4:	f103 0c0c 	add.w	ip, r3, #12
 80107b8:	eba5 050c 	sub.w	r5, r5, ip
 80107bc:	fab5 f585 	clz	r5, r5
 80107c0:	096d      	lsrs	r5, r5, #5
 80107c2:	7035      	strb	r5, [r6, #0]
 80107c4:	f103 0510 	add.w	r5, r3, #16
 80107c8:	1b64      	subs	r4, r4, r5
 80107ca:	fab4 f484 	clz	r4, r4
 80107ce:	0964      	lsrs	r4, r4, #5
 80107d0:	703c      	strb	r4, [r7, #0]
 80107d2:	eba3 0008 	sub.w	r0, r3, r8
 80107d6:	1d1c      	adds	r4, r3, #4
 80107d8:	3308      	adds	r3, #8
 80107da:	1ad3      	subs	r3, r2, r3
 80107dc:	fab0 f080 	clz	r0, r0
 80107e0:	9a06      	ldr	r2, [sp, #24]
 80107e2:	0940      	lsrs	r0, r0, #5
 80107e4:	1b09      	subs	r1, r1, r4
 80107e6:	7010      	strb	r0, [r2, #0]
 80107e8:	fab1 f181 	clz	r1, r1
 80107ec:	9a07      	ldr	r2, [sp, #28]
 80107ee:	0949      	lsrs	r1, r1, #5
 80107f0:	7011      	strb	r1, [r2, #0]
 80107f2:	fab3 f383 	clz	r3, r3
 80107f6:	9a08      	ldr	r2, [sp, #32]
 80107f8:	095b      	lsrs	r3, r3, #5
 80107fa:	2000      	movs	r0, #0
 80107fc:	7013      	strb	r3, [r2, #0]
 80107fe:	e001      	b.n	8010804 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8010800:	f640 0036 	movw	r0, #2102	@ 0x836
 8010804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010808:	f7f9 fe72 	bl	800a4f0 <rcutils_reset_error>
 801080c:	f640 0036 	movw	r0, #2102	@ 0x836
 8010810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010814:	2001      	movs	r0, #1
 8010816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081a:	200b      	movs	r0, #11
 801081c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010820:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop

08010828 <rcl_action_take_goal_request>:
 8010828:	2800      	cmp	r0, #0
 801082a:	d039      	beq.n	80108a0 <rcl_action_take_goal_request+0x78>
 801082c:	b570      	push	{r4, r5, r6, lr}
 801082e:	4604      	mov	r4, r0
 8010830:	6800      	ldr	r0, [r0, #0]
 8010832:	b380      	cbz	r0, 8010896 <rcl_action_take_goal_request+0x6e>
 8010834:	460d      	mov	r5, r1
 8010836:	4616      	mov	r6, r2
 8010838:	f7fe fc36 	bl	800f0a8 <rcl_service_is_valid>
 801083c:	b330      	cbz	r0, 801088c <rcl_action_take_goal_request+0x64>
 801083e:	6820      	ldr	r0, [r4, #0]
 8010840:	3004      	adds	r0, #4
 8010842:	f7fe fc31 	bl	800f0a8 <rcl_service_is_valid>
 8010846:	b308      	cbz	r0, 801088c <rcl_action_take_goal_request+0x64>
 8010848:	6820      	ldr	r0, [r4, #0]
 801084a:	3008      	adds	r0, #8
 801084c:	f7fe fc2c 	bl	800f0a8 <rcl_service_is_valid>
 8010850:	b1e0      	cbz	r0, 801088c <rcl_action_take_goal_request+0x64>
 8010852:	6820      	ldr	r0, [r4, #0]
 8010854:	300c      	adds	r0, #12
 8010856:	f7f8 fb55 	bl	8008f04 <rcl_publisher_is_valid>
 801085a:	b1b8      	cbz	r0, 801088c <rcl_action_take_goal_request+0x64>
 801085c:	6820      	ldr	r0, [r4, #0]
 801085e:	3010      	adds	r0, #16
 8010860:	f7f8 fb50 	bl	8008f04 <rcl_publisher_is_valid>
 8010864:	b190      	cbz	r0, 801088c <rcl_action_take_goal_request+0x64>
 8010866:	b1cd      	cbz	r5, 801089c <rcl_action_take_goal_request+0x74>
 8010868:	b1c6      	cbz	r6, 801089c <rcl_action_take_goal_request+0x74>
 801086a:	6820      	ldr	r0, [r4, #0]
 801086c:	4632      	mov	r2, r6
 801086e:	4629      	mov	r1, r5
 8010870:	f7fe fb9a 	bl	800efa8 <rcl_take_request>
 8010874:	b148      	cbz	r0, 801088a <rcl_action_take_goal_request+0x62>
 8010876:	280a      	cmp	r0, #10
 8010878:	d007      	beq.n	801088a <rcl_action_take_goal_request+0x62>
 801087a:	f240 2259 	movw	r2, #601	@ 0x259
 801087e:	f640 0399 	movw	r3, #2201	@ 0x899
 8010882:	4290      	cmp	r0, r2
 8010884:	bf0c      	ite	eq
 8010886:	4618      	moveq	r0, r3
 8010888:	2001      	movne	r0, #1
 801088a:	bd70      	pop	{r4, r5, r6, pc}
 801088c:	f7f9 fe30 	bl	800a4f0 <rcutils_reset_error>
 8010890:	f640 0098 	movw	r0, #2200	@ 0x898
 8010894:	bd70      	pop	{r4, r5, r6, pc}
 8010896:	f640 0098 	movw	r0, #2200	@ 0x898
 801089a:	bd70      	pop	{r4, r5, r6, pc}
 801089c:	200b      	movs	r0, #11
 801089e:	bd70      	pop	{r4, r5, r6, pc}
 80108a0:	f640 0098 	movw	r0, #2200	@ 0x898
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop

080108a8 <rcl_action_send_goal_response>:
 80108a8:	b390      	cbz	r0, 8010910 <rcl_action_send_goal_response+0x68>
 80108aa:	b570      	push	{r4, r5, r6, lr}
 80108ac:	4604      	mov	r4, r0
 80108ae:	6800      	ldr	r0, [r0, #0]
 80108b0:	b348      	cbz	r0, 8010906 <rcl_action_send_goal_response+0x5e>
 80108b2:	460d      	mov	r5, r1
 80108b4:	4616      	mov	r6, r2
 80108b6:	f7fe fbf7 	bl	800f0a8 <rcl_service_is_valid>
 80108ba:	b1f8      	cbz	r0, 80108fc <rcl_action_send_goal_response+0x54>
 80108bc:	6820      	ldr	r0, [r4, #0]
 80108be:	3004      	adds	r0, #4
 80108c0:	f7fe fbf2 	bl	800f0a8 <rcl_service_is_valid>
 80108c4:	b1d0      	cbz	r0, 80108fc <rcl_action_send_goal_response+0x54>
 80108c6:	6820      	ldr	r0, [r4, #0]
 80108c8:	3008      	adds	r0, #8
 80108ca:	f7fe fbed 	bl	800f0a8 <rcl_service_is_valid>
 80108ce:	b1a8      	cbz	r0, 80108fc <rcl_action_send_goal_response+0x54>
 80108d0:	6820      	ldr	r0, [r4, #0]
 80108d2:	300c      	adds	r0, #12
 80108d4:	f7f8 fb16 	bl	8008f04 <rcl_publisher_is_valid>
 80108d8:	b180      	cbz	r0, 80108fc <rcl_action_send_goal_response+0x54>
 80108da:	6820      	ldr	r0, [r4, #0]
 80108dc:	3010      	adds	r0, #16
 80108de:	f7f8 fb11 	bl	8008f04 <rcl_publisher_is_valid>
 80108e2:	b158      	cbz	r0, 80108fc <rcl_action_send_goal_response+0x54>
 80108e4:	b195      	cbz	r5, 801090c <rcl_action_send_goal_response+0x64>
 80108e6:	b18e      	cbz	r6, 801090c <rcl_action_send_goal_response+0x64>
 80108e8:	6820      	ldr	r0, [r4, #0]
 80108ea:	4632      	mov	r2, r6
 80108ec:	4629      	mov	r1, r5
 80108ee:	f7fe fbab 	bl	800f048 <rcl_send_response>
 80108f2:	b110      	cbz	r0, 80108fa <rcl_action_send_goal_response+0x52>
 80108f4:	2802      	cmp	r0, #2
 80108f6:	bf18      	it	ne
 80108f8:	2001      	movne	r0, #1
 80108fa:	bd70      	pop	{r4, r5, r6, pc}
 80108fc:	f7f9 fdf8 	bl	800a4f0 <rcutils_reset_error>
 8010900:	f640 0098 	movw	r0, #2200	@ 0x898
 8010904:	bd70      	pop	{r4, r5, r6, pc}
 8010906:	f640 0098 	movw	r0, #2200	@ 0x898
 801090a:	bd70      	pop	{r4, r5, r6, pc}
 801090c:	200b      	movs	r0, #11
 801090e:	bd70      	pop	{r4, r5, r6, pc}
 8010910:	f640 0098 	movw	r0, #2200	@ 0x898
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop

08010918 <rcl_action_take_result_request>:
 8010918:	2800      	cmp	r0, #0
 801091a:	d03a      	beq.n	8010992 <rcl_action_take_result_request+0x7a>
 801091c:	b570      	push	{r4, r5, r6, lr}
 801091e:	4604      	mov	r4, r0
 8010920:	6800      	ldr	r0, [r0, #0]
 8010922:	b388      	cbz	r0, 8010988 <rcl_action_take_result_request+0x70>
 8010924:	460d      	mov	r5, r1
 8010926:	4616      	mov	r6, r2
 8010928:	f7fe fbbe 	bl	800f0a8 <rcl_service_is_valid>
 801092c:	b338      	cbz	r0, 801097e <rcl_action_take_result_request+0x66>
 801092e:	6820      	ldr	r0, [r4, #0]
 8010930:	3004      	adds	r0, #4
 8010932:	f7fe fbb9 	bl	800f0a8 <rcl_service_is_valid>
 8010936:	b310      	cbz	r0, 801097e <rcl_action_take_result_request+0x66>
 8010938:	6820      	ldr	r0, [r4, #0]
 801093a:	3008      	adds	r0, #8
 801093c:	f7fe fbb4 	bl	800f0a8 <rcl_service_is_valid>
 8010940:	b1e8      	cbz	r0, 801097e <rcl_action_take_result_request+0x66>
 8010942:	6820      	ldr	r0, [r4, #0]
 8010944:	300c      	adds	r0, #12
 8010946:	f7f8 fadd 	bl	8008f04 <rcl_publisher_is_valid>
 801094a:	b1c0      	cbz	r0, 801097e <rcl_action_take_result_request+0x66>
 801094c:	6820      	ldr	r0, [r4, #0]
 801094e:	3010      	adds	r0, #16
 8010950:	f7f8 fad8 	bl	8008f04 <rcl_publisher_is_valid>
 8010954:	b198      	cbz	r0, 801097e <rcl_action_take_result_request+0x66>
 8010956:	b1d5      	cbz	r5, 801098e <rcl_action_take_result_request+0x76>
 8010958:	b1ce      	cbz	r6, 801098e <rcl_action_take_result_request+0x76>
 801095a:	6820      	ldr	r0, [r4, #0]
 801095c:	4632      	mov	r2, r6
 801095e:	4629      	mov	r1, r5
 8010960:	3008      	adds	r0, #8
 8010962:	f7fe fb21 	bl	800efa8 <rcl_take_request>
 8010966:	b148      	cbz	r0, 801097c <rcl_action_take_result_request+0x64>
 8010968:	280a      	cmp	r0, #10
 801096a:	d007      	beq.n	801097c <rcl_action_take_result_request+0x64>
 801096c:	f240 2259 	movw	r2, #601	@ 0x259
 8010970:	f640 0399 	movw	r3, #2201	@ 0x899
 8010974:	4290      	cmp	r0, r2
 8010976:	bf0c      	ite	eq
 8010978:	4618      	moveq	r0, r3
 801097a:	2001      	movne	r0, #1
 801097c:	bd70      	pop	{r4, r5, r6, pc}
 801097e:	f7f9 fdb7 	bl	800a4f0 <rcutils_reset_error>
 8010982:	f640 0098 	movw	r0, #2200	@ 0x898
 8010986:	bd70      	pop	{r4, r5, r6, pc}
 8010988:	f640 0098 	movw	r0, #2200	@ 0x898
 801098c:	bd70      	pop	{r4, r5, r6, pc}
 801098e:	200b      	movs	r0, #11
 8010990:	bd70      	pop	{r4, r5, r6, pc}
 8010992:	f640 0098 	movw	r0, #2200	@ 0x898
 8010996:	4770      	bx	lr

08010998 <rcl_action_take_cancel_request>:
 8010998:	2800      	cmp	r0, #0
 801099a:	d03a      	beq.n	8010a12 <rcl_action_take_cancel_request+0x7a>
 801099c:	b570      	push	{r4, r5, r6, lr}
 801099e:	4604      	mov	r4, r0
 80109a0:	6800      	ldr	r0, [r0, #0]
 80109a2:	b388      	cbz	r0, 8010a08 <rcl_action_take_cancel_request+0x70>
 80109a4:	460d      	mov	r5, r1
 80109a6:	4616      	mov	r6, r2
 80109a8:	f7fe fb7e 	bl	800f0a8 <rcl_service_is_valid>
 80109ac:	b338      	cbz	r0, 80109fe <rcl_action_take_cancel_request+0x66>
 80109ae:	6820      	ldr	r0, [r4, #0]
 80109b0:	3004      	adds	r0, #4
 80109b2:	f7fe fb79 	bl	800f0a8 <rcl_service_is_valid>
 80109b6:	b310      	cbz	r0, 80109fe <rcl_action_take_cancel_request+0x66>
 80109b8:	6820      	ldr	r0, [r4, #0]
 80109ba:	3008      	adds	r0, #8
 80109bc:	f7fe fb74 	bl	800f0a8 <rcl_service_is_valid>
 80109c0:	b1e8      	cbz	r0, 80109fe <rcl_action_take_cancel_request+0x66>
 80109c2:	6820      	ldr	r0, [r4, #0]
 80109c4:	300c      	adds	r0, #12
 80109c6:	f7f8 fa9d 	bl	8008f04 <rcl_publisher_is_valid>
 80109ca:	b1c0      	cbz	r0, 80109fe <rcl_action_take_cancel_request+0x66>
 80109cc:	6820      	ldr	r0, [r4, #0]
 80109ce:	3010      	adds	r0, #16
 80109d0:	f7f8 fa98 	bl	8008f04 <rcl_publisher_is_valid>
 80109d4:	b198      	cbz	r0, 80109fe <rcl_action_take_cancel_request+0x66>
 80109d6:	b1d5      	cbz	r5, 8010a0e <rcl_action_take_cancel_request+0x76>
 80109d8:	b1ce      	cbz	r6, 8010a0e <rcl_action_take_cancel_request+0x76>
 80109da:	6820      	ldr	r0, [r4, #0]
 80109dc:	4632      	mov	r2, r6
 80109de:	4629      	mov	r1, r5
 80109e0:	3004      	adds	r0, #4
 80109e2:	f7fe fae1 	bl	800efa8 <rcl_take_request>
 80109e6:	b148      	cbz	r0, 80109fc <rcl_action_take_cancel_request+0x64>
 80109e8:	280a      	cmp	r0, #10
 80109ea:	d007      	beq.n	80109fc <rcl_action_take_cancel_request+0x64>
 80109ec:	f240 2259 	movw	r2, #601	@ 0x259
 80109f0:	f640 0399 	movw	r3, #2201	@ 0x899
 80109f4:	4290      	cmp	r0, r2
 80109f6:	bf0c      	ite	eq
 80109f8:	4618      	moveq	r0, r3
 80109fa:	2001      	movne	r0, #1
 80109fc:	bd70      	pop	{r4, r5, r6, pc}
 80109fe:	f7f9 fd77 	bl	800a4f0 <rcutils_reset_error>
 8010a02:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a06:	bd70      	pop	{r4, r5, r6, pc}
 8010a08:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a0c:	bd70      	pop	{r4, r5, r6, pc}
 8010a0e:	200b      	movs	r0, #11
 8010a10:	bd70      	pop	{r4, r5, r6, pc}
 8010a12:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a16:	4770      	bx	lr

08010a18 <rcl_action_send_cancel_response>:
 8010a18:	b398      	cbz	r0, 8010a82 <rcl_action_send_cancel_response+0x6a>
 8010a1a:	b570      	push	{r4, r5, r6, lr}
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	6800      	ldr	r0, [r0, #0]
 8010a20:	b350      	cbz	r0, 8010a78 <rcl_action_send_cancel_response+0x60>
 8010a22:	460d      	mov	r5, r1
 8010a24:	4616      	mov	r6, r2
 8010a26:	f7fe fb3f 	bl	800f0a8 <rcl_service_is_valid>
 8010a2a:	b300      	cbz	r0, 8010a6e <rcl_action_send_cancel_response+0x56>
 8010a2c:	6820      	ldr	r0, [r4, #0]
 8010a2e:	3004      	adds	r0, #4
 8010a30:	f7fe fb3a 	bl	800f0a8 <rcl_service_is_valid>
 8010a34:	b1d8      	cbz	r0, 8010a6e <rcl_action_send_cancel_response+0x56>
 8010a36:	6820      	ldr	r0, [r4, #0]
 8010a38:	3008      	adds	r0, #8
 8010a3a:	f7fe fb35 	bl	800f0a8 <rcl_service_is_valid>
 8010a3e:	b1b0      	cbz	r0, 8010a6e <rcl_action_send_cancel_response+0x56>
 8010a40:	6820      	ldr	r0, [r4, #0]
 8010a42:	300c      	adds	r0, #12
 8010a44:	f7f8 fa5e 	bl	8008f04 <rcl_publisher_is_valid>
 8010a48:	b188      	cbz	r0, 8010a6e <rcl_action_send_cancel_response+0x56>
 8010a4a:	6820      	ldr	r0, [r4, #0]
 8010a4c:	3010      	adds	r0, #16
 8010a4e:	f7f8 fa59 	bl	8008f04 <rcl_publisher_is_valid>
 8010a52:	b160      	cbz	r0, 8010a6e <rcl_action_send_cancel_response+0x56>
 8010a54:	b19d      	cbz	r5, 8010a7e <rcl_action_send_cancel_response+0x66>
 8010a56:	b196      	cbz	r6, 8010a7e <rcl_action_send_cancel_response+0x66>
 8010a58:	6820      	ldr	r0, [r4, #0]
 8010a5a:	4632      	mov	r2, r6
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	3004      	adds	r0, #4
 8010a60:	f7fe faf2 	bl	800f048 <rcl_send_response>
 8010a64:	b110      	cbz	r0, 8010a6c <rcl_action_send_cancel_response+0x54>
 8010a66:	2802      	cmp	r0, #2
 8010a68:	bf18      	it	ne
 8010a6a:	2001      	movne	r0, #1
 8010a6c:	bd70      	pop	{r4, r5, r6, pc}
 8010a6e:	f7f9 fd3f 	bl	800a4f0 <rcutils_reset_error>
 8010a72:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a7c:	bd70      	pop	{r4, r5, r6, pc}
 8010a7e:	200b      	movs	r0, #11
 8010a80:	bd70      	pop	{r4, r5, r6, pc}
 8010a82:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a86:	4770      	bx	lr

08010a88 <rcl_action_wait_set_add_action_server>:
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	d04d      	beq.n	8010b28 <rcl_action_wait_set_add_action_server+0xa0>
 8010a8c:	b570      	push	{r4, r5, r6, lr}
 8010a8e:	460c      	mov	r4, r1
 8010a90:	b159      	cbz	r1, 8010aaa <rcl_action_wait_set_add_action_server+0x22>
 8010a92:	4605      	mov	r5, r0
 8010a94:	6808      	ldr	r0, [r1, #0]
 8010a96:	b140      	cbz	r0, 8010aaa <rcl_action_wait_set_add_action_server+0x22>
 8010a98:	4616      	mov	r6, r2
 8010a9a:	f7fe fb05 	bl	800f0a8 <rcl_service_is_valid>
 8010a9e:	b120      	cbz	r0, 8010aaa <rcl_action_wait_set_add_action_server+0x22>
 8010aa0:	6820      	ldr	r0, [r4, #0]
 8010aa2:	3004      	adds	r0, #4
 8010aa4:	f7fe fb00 	bl	800f0a8 <rcl_service_is_valid>
 8010aa8:	b910      	cbnz	r0, 8010ab0 <rcl_action_wait_set_add_action_server+0x28>
 8010aaa:	f640 0098 	movw	r0, #2200	@ 0x898
 8010aae:	bd70      	pop	{r4, r5, r6, pc}
 8010ab0:	6820      	ldr	r0, [r4, #0]
 8010ab2:	3008      	adds	r0, #8
 8010ab4:	f7fe faf8 	bl	800f0a8 <rcl_service_is_valid>
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d0f6      	beq.n	8010aaa <rcl_action_wait_set_add_action_server+0x22>
 8010abc:	6820      	ldr	r0, [r4, #0]
 8010abe:	300c      	adds	r0, #12
 8010ac0:	f7f8 fa38 	bl	8008f34 <rcl_publisher_is_valid_except_context>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d0f0      	beq.n	8010aaa <rcl_action_wait_set_add_action_server+0x22>
 8010ac8:	6820      	ldr	r0, [r4, #0]
 8010aca:	3010      	adds	r0, #16
 8010acc:	f7f8 fa32 	bl	8008f34 <rcl_publisher_is_valid_except_context>
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	d0ea      	beq.n	8010aaa <rcl_action_wait_set_add_action_server+0x22>
 8010ad4:	6821      	ldr	r1, [r4, #0]
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8010adc:	f7ff face 	bl	801007c <rcl_wait_set_add_service>
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	d1e4      	bne.n	8010aae <rcl_action_wait_set_add_action_server+0x26>
 8010ae4:	6821      	ldr	r1, [r4, #0]
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8010aec:	3104      	adds	r1, #4
 8010aee:	f7ff fac5 	bl	801007c <rcl_wait_set_add_service>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	d1db      	bne.n	8010aae <rcl_action_wait_set_add_action_server+0x26>
 8010af6:	6821      	ldr	r1, [r4, #0]
 8010af8:	4628      	mov	r0, r5
 8010afa:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8010afe:	3108      	adds	r1, #8
 8010b00:	f7ff fabc 	bl	801007c <rcl_wait_set_add_service>
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d1d2      	bne.n	8010aae <rcl_action_wait_set_add_action_server+0x26>
 8010b08:	6821      	ldr	r1, [r4, #0]
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8010b10:	3114      	adds	r1, #20
 8010b12:	f7ff fa57 	bl	800ffc4 <rcl_wait_set_add_timer>
 8010b16:	2800      	cmp	r0, #0
 8010b18:	d1c9      	bne.n	8010aae <rcl_action_wait_set_add_action_server+0x26>
 8010b1a:	2e00      	cmp	r6, #0
 8010b1c:	d0c7      	beq.n	8010aae <rcl_action_wait_set_add_action_server+0x26>
 8010b1e:	6823      	ldr	r3, [r4, #0]
 8010b20:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8010b24:	6033      	str	r3, [r6, #0]
 8010b26:	bd70      	pop	{r4, r5, r6, pc}
 8010b28:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop

08010b30 <rcl_action_server_wait_set_get_entities_ready>:
 8010b30:	2800      	cmp	r0, #0
 8010b32:	d05a      	beq.n	8010bea <rcl_action_server_wait_set_get_entities_ready+0xba>
 8010b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b36:	460c      	mov	r4, r1
 8010b38:	b161      	cbz	r1, 8010b54 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	6808      	ldr	r0, [r1, #0]
 8010b3e:	b148      	cbz	r0, 8010b54 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010b40:	4616      	mov	r6, r2
 8010b42:	461f      	mov	r7, r3
 8010b44:	f7fe fab0 	bl	800f0a8 <rcl_service_is_valid>
 8010b48:	b120      	cbz	r0, 8010b54 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010b4a:	6820      	ldr	r0, [r4, #0]
 8010b4c:	3004      	adds	r0, #4
 8010b4e:	f7fe faab 	bl	800f0a8 <rcl_service_is_valid>
 8010b52:	b910      	cbnz	r0, 8010b5a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8010b54:	f640 0098 	movw	r0, #2200	@ 0x898
 8010b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b5a:	6820      	ldr	r0, [r4, #0]
 8010b5c:	3008      	adds	r0, #8
 8010b5e:	f7fe faa3 	bl	800f0a8 <rcl_service_is_valid>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d0f6      	beq.n	8010b54 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010b66:	6820      	ldr	r0, [r4, #0]
 8010b68:	300c      	adds	r0, #12
 8010b6a:	f7f8 f9e3 	bl	8008f34 <rcl_publisher_is_valid_except_context>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d0f0      	beq.n	8010b54 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010b72:	6820      	ldr	r0, [r4, #0]
 8010b74:	3010      	adds	r0, #16
 8010b76:	f7f8 f9dd 	bl	8008f34 <rcl_publisher_is_valid_except_context>
 8010b7a:	2800      	cmp	r0, #0
 8010b7c:	d0ea      	beq.n	8010b54 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010b7e:	b3be      	cbz	r6, 8010bf0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010b80:	b3b7      	cbz	r7, 8010bf0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010b82:	9b06      	ldr	r3, [sp, #24]
 8010b84:	b3a3      	cbz	r3, 8010bf0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010b86:	9b07      	ldr	r3, [sp, #28]
 8010b88:	b393      	cbz	r3, 8010bf0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010b8a:	6821      	ldr	r1, [r4, #0]
 8010b8c:	692a      	ldr	r2, [r5, #16]
 8010b8e:	6a2c      	ldr	r4, [r5, #32]
 8010b90:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8010b94:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8010b98:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8010b9c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8010ba0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8010ba4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8010ba8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010bac:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8010bb0:	1a64      	subs	r4, r4, r1
 8010bb2:	fab4 f484 	clz	r4, r4
 8010bb6:	0964      	lsrs	r4, r4, #5
 8010bb8:	7034      	strb	r4, [r6, #0]
 8010bba:	1d0c      	adds	r4, r1, #4
 8010bbc:	1b1b      	subs	r3, r3, r4
 8010bbe:	fab3 f383 	clz	r3, r3
 8010bc2:	095b      	lsrs	r3, r3, #5
 8010bc4:	f101 0408 	add.w	r4, r1, #8
 8010bc8:	703b      	strb	r3, [r7, #0]
 8010bca:	f101 0314 	add.w	r3, r1, #20
 8010bce:	1b01      	subs	r1, r0, r4
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	fab1 f181 	clz	r1, r1
 8010bd6:	9a06      	ldr	r2, [sp, #24]
 8010bd8:	0949      	lsrs	r1, r1, #5
 8010bda:	7011      	strb	r1, [r2, #0]
 8010bdc:	fab3 f383 	clz	r3, r3
 8010be0:	9a07      	ldr	r2, [sp, #28]
 8010be2:	095b      	lsrs	r3, r3, #5
 8010be4:	2000      	movs	r0, #0
 8010be6:	7013      	strb	r3, [r2, #0]
 8010be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010bee:	4770      	bx	lr
 8010bf0:	200b      	movs	r0, #11
 8010bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010bf4 <_execute_event_handler>:
 8010bf4:	2002      	movs	r0, #2
 8010bf6:	4770      	bx	lr

08010bf8 <_cancel_goal_event_handler>:
 8010bf8:	2003      	movs	r0, #3
 8010bfa:	4770      	bx	lr

08010bfc <_succeed_event_handler>:
 8010bfc:	2004      	movs	r0, #4
 8010bfe:	4770      	bx	lr

08010c00 <_abort_event_handler>:
 8010c00:	2006      	movs	r0, #6
 8010c02:	4770      	bx	lr

08010c04 <_canceled_event_handler>:
 8010c04:	2005      	movs	r0, #5
 8010c06:	4770      	bx	lr

08010c08 <rcl_action_transition_goal_state>:
 8010c08:	b2c2      	uxtb	r2, r0
 8010c0a:	2a06      	cmp	r2, #6
 8010c0c:	d80c      	bhi.n	8010c28 <rcl_action_transition_goal_state+0x20>
 8010c0e:	2904      	cmp	r1, #4
 8010c10:	d80a      	bhi.n	8010c28 <rcl_action_transition_goal_state+0x20>
 8010c12:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010c16:	b410      	push	{r4}
 8010c18:	1853      	adds	r3, r2, r1
 8010c1a:	4c06      	ldr	r4, [pc, #24]	@ (8010c34 <rcl_action_transition_goal_state+0x2c>)
 8010c1c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010c20:	b123      	cbz	r3, 8010c2c <rcl_action_transition_goal_state+0x24>
 8010c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c26:	4718      	bx	r3
 8010c28:	2000      	movs	r0, #0
 8010c2a:	4770      	bx	lr
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c32:	4770      	bx	lr
 8010c34:	080170f4 	.word	0x080170f4

08010c38 <rcl_action_get_zero_initialized_cancel_response>:
 8010c38:	b510      	push	{r4, lr}
 8010c3a:	4c07      	ldr	r4, [pc, #28]	@ (8010c58 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8010c3c:	4686      	mov	lr, r0
 8010c3e:	4684      	mov	ip, r0
 8010c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c4c:	6823      	ldr	r3, [r4, #0]
 8010c4e:	f8cc 3000 	str.w	r3, [ip]
 8010c52:	4670      	mov	r0, lr
 8010c54:	bd10      	pop	{r4, pc}
 8010c56:	bf00      	nop
 8010c58:	08017180 	.word	0x08017180

08010c5c <rclc_action_send_result_request>:
 8010c5c:	b1d0      	cbz	r0, 8010c94 <rclc_action_send_result_request+0x38>
 8010c5e:	b500      	push	{lr}
 8010c60:	4684      	mov	ip, r0
 8010c62:	b087      	sub	sp, #28
 8010c64:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8010c68:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8010c6c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8010c70:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8010c74:	f10d 0e08 	add.w	lr, sp, #8
 8010c78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010c7c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8010c80:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8010c84:	a902      	add	r1, sp, #8
 8010c86:	3010      	adds	r0, #16
 8010c88:	f7ff fbda 	bl	8010440 <rcl_action_send_result_request>
 8010c8c:	b920      	cbnz	r0, 8010c98 <rclc_action_send_result_request+0x3c>
 8010c8e:	b007      	add	sp, #28
 8010c90:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c94:	200b      	movs	r0, #11
 8010c96:	4770      	bx	lr
 8010c98:	9001      	str	r0, [sp, #4]
 8010c9a:	f7f9 fc29 	bl	800a4f0 <rcutils_reset_error>
 8010c9e:	9801      	ldr	r0, [sp, #4]
 8010ca0:	b007      	add	sp, #28
 8010ca2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ca6:	bf00      	nop

08010ca8 <rclc_action_take_goal_handle>:
 8010ca8:	b160      	cbz	r0, 8010cc4 <rclc_action_take_goal_handle+0x1c>
 8010caa:	6883      	ldr	r3, [r0, #8]
 8010cac:	b143      	cbz	r3, 8010cc0 <rclc_action_take_goal_handle+0x18>
 8010cae:	6819      	ldr	r1, [r3, #0]
 8010cb0:	6081      	str	r1, [r0, #8]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	721a      	strb	r2, [r3, #8]
 8010cb6:	68c1      	ldr	r1, [r0, #12]
 8010cb8:	6019      	str	r1, [r3, #0]
 8010cba:	621a      	str	r2, [r3, #32]
 8010cbc:	849a      	strh	r2, [r3, #36]	@ 0x24
 8010cbe:	60c3      	str	r3, [r0, #12]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	4770      	bx	lr
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	e7fb      	b.n	8010cc0 <rclc_action_take_goal_handle+0x18>

08010cc8 <rclc_action_remove_used_goal_handle>:
 8010cc8:	b180      	cbz	r0, 8010cec <rclc_action_remove_used_goal_handle+0x24>
 8010cca:	b179      	cbz	r1, 8010cec <rclc_action_remove_used_goal_handle+0x24>
 8010ccc:	68c3      	ldr	r3, [r0, #12]
 8010cce:	4299      	cmp	r1, r3
 8010cd0:	d00d      	beq.n	8010cee <rclc_action_remove_used_goal_handle+0x26>
 8010cd2:	b12b      	cbz	r3, 8010ce0 <rclc_action_remove_used_goal_handle+0x18>
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	4291      	cmp	r1, r2
 8010cd8:	d003      	beq.n	8010ce2 <rclc_action_remove_used_goal_handle+0x1a>
 8010cda:	4613      	mov	r3, r2
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d1f9      	bne.n	8010cd4 <rclc_action_remove_used_goal_handle+0xc>
 8010ce0:	4770      	bx	lr
 8010ce2:	680a      	ldr	r2, [r1, #0]
 8010ce4:	601a      	str	r2, [r3, #0]
 8010ce6:	6883      	ldr	r3, [r0, #8]
 8010ce8:	600b      	str	r3, [r1, #0]
 8010cea:	6081      	str	r1, [r0, #8]
 8010cec:	4770      	bx	lr
 8010cee:	680b      	ldr	r3, [r1, #0]
 8010cf0:	60c3      	str	r3, [r0, #12]
 8010cf2:	e7f8      	b.n	8010ce6 <rclc_action_remove_used_goal_handle+0x1e>

08010cf4 <rclc_action_find_goal_handle_by_uuid>:
 8010cf4:	b538      	push	{r3, r4, r5, lr}
 8010cf6:	b180      	cbz	r0, 8010d1a <rclc_action_find_goal_handle_by_uuid+0x26>
 8010cf8:	460d      	mov	r5, r1
 8010cfa:	b181      	cbz	r1, 8010d1e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8010cfc:	68c4      	ldr	r4, [r0, #12]
 8010cfe:	b914      	cbnz	r4, 8010d06 <rclc_action_find_goal_handle_by_uuid+0x12>
 8010d00:	e009      	b.n	8010d16 <rclc_action_find_goal_handle_by_uuid+0x22>
 8010d02:	6824      	ldr	r4, [r4, #0]
 8010d04:	b13c      	cbz	r4, 8010d16 <rclc_action_find_goal_handle_by_uuid+0x22>
 8010d06:	f104 0009 	add.w	r0, r4, #9
 8010d0a:	2210      	movs	r2, #16
 8010d0c:	4629      	mov	r1, r5
 8010d0e:	f004 fdb1 	bl	8015874 <memcmp>
 8010d12:	2800      	cmp	r0, #0
 8010d14:	d1f5      	bne.n	8010d02 <rclc_action_find_goal_handle_by_uuid+0xe>
 8010d16:	4620      	mov	r0, r4
 8010d18:	bd38      	pop	{r3, r4, r5, pc}
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	e7fb      	b.n	8010d16 <rclc_action_find_goal_handle_by_uuid+0x22>
 8010d1e:	460c      	mov	r4, r1
 8010d20:	e7f9      	b.n	8010d16 <rclc_action_find_goal_handle_by_uuid+0x22>
 8010d22:	bf00      	nop

08010d24 <rclc_action_find_first_handle_by_status>:
 8010d24:	b140      	cbz	r0, 8010d38 <rclc_action_find_first_handle_by_status+0x14>
 8010d26:	68c0      	ldr	r0, [r0, #12]
 8010d28:	b910      	cbnz	r0, 8010d30 <rclc_action_find_first_handle_by_status+0xc>
 8010d2a:	e005      	b.n	8010d38 <rclc_action_find_first_handle_by_status+0x14>
 8010d2c:	6800      	ldr	r0, [r0, #0]
 8010d2e:	b118      	cbz	r0, 8010d38 <rclc_action_find_first_handle_by_status+0x14>
 8010d30:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010d34:	428b      	cmp	r3, r1
 8010d36:	d1f9      	bne.n	8010d2c <rclc_action_find_first_handle_by_status+0x8>
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop

08010d3c <rclc_action_find_first_terminated_handle>:
 8010d3c:	b140      	cbz	r0, 8010d50 <rclc_action_find_first_terminated_handle+0x14>
 8010d3e:	68c0      	ldr	r0, [r0, #12]
 8010d40:	b910      	cbnz	r0, 8010d48 <rclc_action_find_first_terminated_handle+0xc>
 8010d42:	e005      	b.n	8010d50 <rclc_action_find_first_terminated_handle+0x14>
 8010d44:	6800      	ldr	r0, [r0, #0]
 8010d46:	b118      	cbz	r0, 8010d50 <rclc_action_find_first_terminated_handle+0x14>
 8010d48:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010d4c:	2b03      	cmp	r3, #3
 8010d4e:	ddf9      	ble.n	8010d44 <rclc_action_find_first_terminated_handle+0x8>
 8010d50:	4770      	bx	lr
 8010d52:	bf00      	nop

08010d54 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8010d54:	b170      	cbz	r0, 8010d74 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010d56:	68c0      	ldr	r0, [r0, #12]
 8010d58:	b160      	cbz	r0, 8010d74 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010d5a:	b410      	push	{r4}
 8010d5c:	e001      	b.n	8010d62 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8010d5e:	6800      	ldr	r0, [r0, #0]
 8010d60:	b128      	cbz	r0, 8010d6e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8010d62:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8010d66:	4299      	cmp	r1, r3
 8010d68:	bf08      	it	eq
 8010d6a:	4294      	cmpeq	r4, r2
 8010d6c:	d1f7      	bne.n	8010d5e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8010d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d72:	4770      	bx	lr
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop

08010d78 <rclc_action_find_handle_by_result_request_sequence_number>:
 8010d78:	b170      	cbz	r0, 8010d98 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010d7a:	68c0      	ldr	r0, [r0, #12]
 8010d7c:	b160      	cbz	r0, 8010d98 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010d7e:	b410      	push	{r4}
 8010d80:	e001      	b.n	8010d86 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8010d82:	6800      	ldr	r0, [r0, #0]
 8010d84:	b128      	cbz	r0, 8010d92 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8010d86:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8010d8a:	4299      	cmp	r1, r3
 8010d8c:	bf08      	it	eq
 8010d8e:	4294      	cmpeq	r4, r2
 8010d90:	d1f7      	bne.n	8010d82 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8010d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d96:	4770      	bx	lr
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop

08010d9c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8010d9c:	b170      	cbz	r0, 8010dbc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010d9e:	68c0      	ldr	r0, [r0, #12]
 8010da0:	b160      	cbz	r0, 8010dbc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010da2:	b410      	push	{r4}
 8010da4:	e001      	b.n	8010daa <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8010da6:	6800      	ldr	r0, [r0, #0]
 8010da8:	b128      	cbz	r0, 8010db6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8010daa:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8010dae:	4299      	cmp	r1, r3
 8010db0:	bf08      	it	eq
 8010db2:	4294      	cmpeq	r4, r2
 8010db4:	d1f7      	bne.n	8010da6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8010db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop

08010dc0 <rclc_action_find_first_handle_with_goal_response>:
 8010dc0:	b140      	cbz	r0, 8010dd4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8010dc2:	68c0      	ldr	r0, [r0, #12]
 8010dc4:	b910      	cbnz	r0, 8010dcc <rclc_action_find_first_handle_with_goal_response+0xc>
 8010dc6:	e005      	b.n	8010dd4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8010dc8:	6800      	ldr	r0, [r0, #0]
 8010dca:	b118      	cbz	r0, 8010dd4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8010dcc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d0f9      	beq.n	8010dc8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop

08010dd8 <rclc_action_find_first_handle_with_result_response>:
 8010dd8:	b140      	cbz	r0, 8010dec <rclc_action_find_first_handle_with_result_response+0x14>
 8010dda:	68c0      	ldr	r0, [r0, #12]
 8010ddc:	b910      	cbnz	r0, 8010de4 <rclc_action_find_first_handle_with_result_response+0xc>
 8010dde:	e005      	b.n	8010dec <rclc_action_find_first_handle_with_result_response+0x14>
 8010de0:	6800      	ldr	r0, [r0, #0]
 8010de2:	b118      	cbz	r0, 8010dec <rclc_action_find_first_handle_with_result_response+0x14>
 8010de4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d0f9      	beq.n	8010de0 <rclc_action_find_first_handle_with_result_response+0x8>
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop

08010df0 <rclc_action_server_response_goal_request>:
 8010df0:	b198      	cbz	r0, 8010e1a <rclc_action_server_response_goal_request+0x2a>
 8010df2:	b510      	push	{r4, lr}
 8010df4:	6844      	ldr	r4, [r0, #4]
 8010df6:	b086      	sub	sp, #24
 8010df8:	2200      	movs	r2, #0
 8010dfa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8010dfe:	460b      	mov	r3, r1
 8010e00:	9205      	str	r2, [sp, #20]
 8010e02:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8010e06:	aa03      	add	r2, sp, #12
 8010e08:	f104 0010 	add.w	r0, r4, #16
 8010e0c:	f88d 300c 	strb.w	r3, [sp, #12]
 8010e10:	f7ff fd4a 	bl	80108a8 <rcl_action_send_goal_response>
 8010e14:	b918      	cbnz	r0, 8010e1e <rclc_action_server_response_goal_request+0x2e>
 8010e16:	b006      	add	sp, #24
 8010e18:	bd10      	pop	{r4, pc}
 8010e1a:	200b      	movs	r0, #11
 8010e1c:	4770      	bx	lr
 8010e1e:	9001      	str	r0, [sp, #4]
 8010e20:	f7f9 fb66 	bl	800a4f0 <rcutils_reset_error>
 8010e24:	9801      	ldr	r0, [sp, #4]
 8010e26:	b006      	add	sp, #24
 8010e28:	bd10      	pop	{r4, pc}
 8010e2a:	bf00      	nop
 8010e2c:	0000      	movs	r0, r0
	...

08010e30 <rclc_action_server_goal_cancel_accept>:
 8010e30:	b310      	cbz	r0, 8010e78 <rclc_action_server_goal_cancel_accept+0x48>
 8010e32:	b510      	push	{r4, lr}
 8010e34:	b090      	sub	sp, #64	@ 0x40
 8010e36:	4604      	mov	r4, r0
 8010e38:	a806      	add	r0, sp, #24
 8010e3a:	f7ff fefd 	bl	8010c38 <rcl_action_get_zero_initialized_cancel_response>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8010e44:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8010e48:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8010e4c:	f88d 3018 	strb.w	r3, [sp, #24]
 8010e50:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8010e54:	f8cd d01c 	str.w	sp, [sp, #28]
 8010e58:	46ec      	mov	ip, sp
 8010e5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e5e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8010e80 <rclc_action_server_goal_cancel_accept+0x50>
 8010e62:	6860      	ldr	r0, [r4, #4]
 8010e64:	aa06      	add	r2, sp, #24
 8010e66:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8010e6a:	3010      	adds	r0, #16
 8010e6c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010e70:	f7ff fdd2 	bl	8010a18 <rcl_action_send_cancel_response>
 8010e74:	b010      	add	sp, #64	@ 0x40
 8010e76:	bd10      	pop	{r4, pc}
 8010e78:	200b      	movs	r0, #11
 8010e7a:	4770      	bx	lr
 8010e7c:	f3af 8000 	nop.w
 8010e80:	00000001 	.word	0x00000001
 8010e84:	00000001 	.word	0x00000001

08010e88 <rclc_action_server_goal_cancel_reject>:
 8010e88:	b082      	sub	sp, #8
 8010e8a:	b530      	push	{r4, r5, lr}
 8010e8c:	b08b      	sub	sp, #44	@ 0x2c
 8010e8e:	ac0e      	add	r4, sp, #56	@ 0x38
 8010e90:	e884 000c 	stmia.w	r4, {r2, r3}
 8010e94:	b188      	cbz	r0, 8010eba <rclc_action_server_goal_cancel_reject+0x32>
 8010e96:	4604      	mov	r4, r0
 8010e98:	a801      	add	r0, sp, #4
 8010e9a:	460d      	mov	r5, r1
 8010e9c:	f7ff fecc 	bl	8010c38 <rcl_action_get_zero_initialized_cancel_response>
 8010ea0:	aa01      	add	r2, sp, #4
 8010ea2:	a90e      	add	r1, sp, #56	@ 0x38
 8010ea4:	f104 0010 	add.w	r0, r4, #16
 8010ea8:	f88d 5004 	strb.w	r5, [sp, #4]
 8010eac:	f7ff fdb4 	bl	8010a18 <rcl_action_send_cancel_response>
 8010eb0:	b00b      	add	sp, #44	@ 0x2c
 8010eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010eb6:	b002      	add	sp, #8
 8010eb8:	4770      	bx	lr
 8010eba:	200b      	movs	r0, #11
 8010ebc:	b00b      	add	sp, #44	@ 0x2c
 8010ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ec2:	b002      	add	sp, #8
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop

08010ec8 <rcutils_get_env>:
 8010ec8:	b168      	cbz	r0, 8010ee6 <rcutils_get_env+0x1e>
 8010eca:	b510      	push	{r4, lr}
 8010ecc:	460c      	mov	r4, r1
 8010ece:	b129      	cbz	r1, 8010edc <rcutils_get_env+0x14>
 8010ed0:	f004 f92c 	bl	801512c <getenv>
 8010ed4:	b120      	cbz	r0, 8010ee0 <rcutils_get_env+0x18>
 8010ed6:	6020      	str	r0, [r4, #0]
 8010ed8:	2000      	movs	r0, #0
 8010eda:	bd10      	pop	{r4, pc}
 8010edc:	4803      	ldr	r0, [pc, #12]	@ (8010eec <rcutils_get_env+0x24>)
 8010ede:	bd10      	pop	{r4, pc}
 8010ee0:	4b03      	ldr	r3, [pc, #12]	@ (8010ef0 <rcutils_get_env+0x28>)
 8010ee2:	6023      	str	r3, [r4, #0]
 8010ee4:	bd10      	pop	{r4, pc}
 8010ee6:	4803      	ldr	r0, [pc, #12]	@ (8010ef4 <rcutils_get_env+0x2c>)
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop
 8010eec:	080171c0 	.word	0x080171c0
 8010ef0:	080172e4 	.word	0x080172e4
 8010ef4:	080171a4 	.word	0x080171a4

08010ef8 <rcutils_is_directory>:
 8010ef8:	2000      	movs	r0, #0
 8010efa:	4770      	bx	lr

08010efc <rcutils_join_path>:
 8010efc:	b082      	sub	sp, #8
 8010efe:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010f02:	2000      	movs	r0, #0
 8010f04:	b002      	add	sp, #8
 8010f06:	4770      	bx	lr

08010f08 <rcutils_to_native_path>:
 8010f08:	b084      	sub	sp, #16
 8010f0a:	a801      	add	r0, sp, #4
 8010f0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010f10:	b004      	add	sp, #16
 8010f12:	2000      	movs	r0, #0
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop

08010f18 <rcutils_format_string_limit>:
 8010f18:	b40f      	push	{r0, r1, r2, r3}
 8010f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f1c:	b083      	sub	sp, #12
 8010f1e:	ac08      	add	r4, sp, #32
 8010f20:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8010f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010f26:	b34e      	cbz	r6, 8010f7c <rcutils_format_string_limit+0x64>
 8010f28:	a808      	add	r0, sp, #32
 8010f2a:	f7f9 fa19 	bl	800a360 <rcutils_allocator_is_valid>
 8010f2e:	b328      	cbz	r0, 8010f7c <rcutils_format_string_limit+0x64>
 8010f30:	2100      	movs	r1, #0
 8010f32:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010f34:	4632      	mov	r2, r6
 8010f36:	4608      	mov	r0, r1
 8010f38:	e9cd 3300 	strd	r3, r3, [sp]
 8010f3c:	f000 f8f4 	bl	8011128 <rcutils_vsnprintf>
 8010f40:	1c43      	adds	r3, r0, #1
 8010f42:	4605      	mov	r5, r0
 8010f44:	d01a      	beq.n	8010f7c <rcutils_format_string_limit+0x64>
 8010f46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010f4a:	1c47      	adds	r7, r0, #1
 8010f4c:	429f      	cmp	r7, r3
 8010f4e:	bf84      	itt	hi
 8010f50:	461f      	movhi	r7, r3
 8010f52:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8010f56:	4638      	mov	r0, r7
 8010f58:	9b08      	ldr	r3, [sp, #32]
 8010f5a:	4798      	blx	r3
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	b168      	cbz	r0, 8010f7c <rcutils_format_string_limit+0x64>
 8010f60:	9b01      	ldr	r3, [sp, #4]
 8010f62:	4632      	mov	r2, r6
 8010f64:	4639      	mov	r1, r7
 8010f66:	f000 f8df 	bl	8011128 <rcutils_vsnprintf>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	db02      	blt.n	8010f74 <rcutils_format_string_limit+0x5c>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	5563      	strb	r3, [r4, r5]
 8010f72:	e004      	b.n	8010f7e <rcutils_format_string_limit+0x66>
 8010f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f76:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010f78:	4620      	mov	r0, r4
 8010f7a:	4798      	blx	r3
 8010f7c:	2400      	movs	r4, #0
 8010f7e:	4620      	mov	r0, r4
 8010f80:	b003      	add	sp, #12
 8010f82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f86:	b004      	add	sp, #16
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop

08010f8c <rcutils_repl_str>:
 8010f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f90:	ed2d 8b02 	vpush	{d8}
 8010f94:	b087      	sub	sp, #28
 8010f96:	4680      	mov	r8, r0
 8010f98:	4608      	mov	r0, r1
 8010f9a:	f8cd 8004 	str.w	r8, [sp, #4]
 8010f9e:	ee08 2a10 	vmov	s16, r2
 8010fa2:	468a      	mov	sl, r1
 8010fa4:	4699      	mov	r9, r3
 8010fa6:	f7ef f97b 	bl	80002a0 <strlen>
 8010faa:	2600      	movs	r6, #0
 8010fac:	4647      	mov	r7, r8
 8010fae:	9002      	str	r0, [sp, #8]
 8010fb0:	46b3      	mov	fp, r6
 8010fb2:	2510      	movs	r5, #16
 8010fb4:	46b0      	mov	r8, r6
 8010fb6:	e01d      	b.n	8010ff4 <rcutils_repl_str+0x68>
 8010fb8:	f10b 0b01 	add.w	fp, fp, #1
 8010fbc:	455e      	cmp	r6, fp
 8010fbe:	d211      	bcs.n	8010fe4 <rcutils_repl_str+0x58>
 8010fc0:	442e      	add	r6, r5
 8010fc2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010fc6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010fca:	00b1      	lsls	r1, r6, #2
 8010fcc:	4798      	blx	r3
 8010fce:	2800      	cmp	r0, #0
 8010fd0:	f000 8088 	beq.w	80110e4 <rcutils_repl_str+0x158>
 8010fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fd8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8010fdc:	4680      	mov	r8, r0
 8010fde:	bf28      	it	cs
 8010fe0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8010fe4:	9a01      	ldr	r2, [sp, #4]
 8010fe6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8010fea:	1aa2      	subs	r2, r4, r2
 8010fec:	f843 2c04 	str.w	r2, [r3, #-4]
 8010ff0:	9b02      	ldr	r3, [sp, #8]
 8010ff2:	18e7      	adds	r7, r4, r3
 8010ff4:	4651      	mov	r1, sl
 8010ff6:	4638      	mov	r0, r7
 8010ff8:	f004 fca0 	bl	801593c <strstr>
 8010ffc:	4604      	mov	r4, r0
 8010ffe:	4640      	mov	r0, r8
 8011000:	2c00      	cmp	r4, #0
 8011002:	d1d9      	bne.n	8010fb8 <rcutils_repl_str+0x2c>
 8011004:	46b8      	mov	r8, r7
 8011006:	4607      	mov	r7, r0
 8011008:	4640      	mov	r0, r8
 801100a:	f7ef f949 	bl	80002a0 <strlen>
 801100e:	9b01      	ldr	r3, [sp, #4]
 8011010:	eba8 0303 	sub.w	r3, r8, r3
 8011014:	181c      	adds	r4, r3, r0
 8011016:	9404      	str	r4, [sp, #16]
 8011018:	f1bb 0f00 	cmp.w	fp, #0
 801101c:	d04a      	beq.n	80110b4 <rcutils_repl_str+0x128>
 801101e:	ee18 0a10 	vmov	r0, s16
 8011022:	f7ef f93d 	bl	80002a0 <strlen>
 8011026:	9b02      	ldr	r3, [sp, #8]
 8011028:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801102c:	1ac3      	subs	r3, r0, r3
 801102e:	fb0b 4303 	mla	r3, fp, r3, r4
 8011032:	461a      	mov	r2, r3
 8011034:	9305      	str	r3, [sp, #20]
 8011036:	4606      	mov	r6, r0
 8011038:	f8d9 3000 	ldr.w	r3, [r9]
 801103c:	1c50      	adds	r0, r2, #1
 801103e:	4798      	blx	r3
 8011040:	9003      	str	r0, [sp, #12]
 8011042:	2800      	cmp	r0, #0
 8011044:	d04f      	beq.n	80110e6 <rcutils_repl_str+0x15a>
 8011046:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801104a:	683a      	ldr	r2, [r7, #0]
 801104c:	4641      	mov	r1, r8
 801104e:	f004 fd16 	bl	8015a7e <memcpy>
 8011052:	683d      	ldr	r5, [r7, #0]
 8011054:	9b03      	ldr	r3, [sp, #12]
 8011056:	9701      	str	r7, [sp, #4]
 8011058:	46ba      	mov	sl, r7
 801105a:	441d      	add	r5, r3
 801105c:	9f02      	ldr	r7, [sp, #8]
 801105e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011062:	2401      	movs	r4, #1
 8011064:	46d1      	mov	r9, sl
 8011066:	ee18 aa10 	vmov	sl, s16
 801106a:	e00a      	b.n	8011082 <rcutils_repl_str+0xf6>
 801106c:	f8d9 5000 	ldr.w	r5, [r9]
 8011070:	1aaa      	subs	r2, r5, r2
 8011072:	1885      	adds	r5, r0, r2
 8011074:	f004 fd03 	bl	8015a7e <memcpy>
 8011078:	45a3      	cmp	fp, r4
 801107a:	f104 0201 	add.w	r2, r4, #1
 801107e:	d935      	bls.n	80110ec <rcutils_repl_str+0x160>
 8011080:	4614      	mov	r4, r2
 8011082:	4632      	mov	r2, r6
 8011084:	4651      	mov	r1, sl
 8011086:	4628      	mov	r0, r5
 8011088:	f004 fcf9 	bl	8015a7e <memcpy>
 801108c:	f859 2b04 	ldr.w	r2, [r9], #4
 8011090:	45a3      	cmp	fp, r4
 8011092:	443a      	add	r2, r7
 8011094:	eb05 0006 	add.w	r0, r5, r6
 8011098:	eb08 0102 	add.w	r1, r8, r2
 801109c:	d1e6      	bne.n	801106c <rcutils_repl_str+0xe0>
 801109e:	9b04      	ldr	r3, [sp, #16]
 80110a0:	1a9a      	subs	r2, r3, r2
 80110a2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80110a6:	f004 fcea 	bl	8015a7e <memcpy>
 80110aa:	9a03      	ldr	r2, [sp, #12]
 80110ac:	9905      	ldr	r1, [sp, #20]
 80110ae:	2300      	movs	r3, #0
 80110b0:	5453      	strb	r3, [r2, r1]
 80110b2:	e00b      	b.n	80110cc <rcutils_repl_str+0x140>
 80110b4:	4620      	mov	r0, r4
 80110b6:	f8d9 3000 	ldr.w	r3, [r9]
 80110ba:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80110be:	3001      	adds	r0, #1
 80110c0:	4798      	blx	r3
 80110c2:	9003      	str	r0, [sp, #12]
 80110c4:	b110      	cbz	r0, 80110cc <rcutils_repl_str+0x140>
 80110c6:	9901      	ldr	r1, [sp, #4]
 80110c8:	f004 fcd1 	bl	8015a6e <strcpy>
 80110cc:	4638      	mov	r0, r7
 80110ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80110d2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80110d6:	4798      	blx	r3
 80110d8:	9803      	ldr	r0, [sp, #12]
 80110da:	b007      	add	sp, #28
 80110dc:	ecbd 8b02 	vpop	{d8}
 80110e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e4:	4647      	mov	r7, r8
 80110e6:	2300      	movs	r3, #0
 80110e8:	9303      	str	r3, [sp, #12]
 80110ea:	e7ef      	b.n	80110cc <rcutils_repl_str+0x140>
 80110ec:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80110f0:	e7db      	b.n	80110aa <rcutils_repl_str+0x11e>
 80110f2:	bf00      	nop

080110f4 <rcutils_snprintf>:
 80110f4:	b40c      	push	{r2, r3}
 80110f6:	b530      	push	{r4, r5, lr}
 80110f8:	b083      	sub	sp, #12
 80110fa:	ab06      	add	r3, sp, #24
 80110fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011100:	9301      	str	r3, [sp, #4]
 8011102:	b152      	cbz	r2, 801111a <rcutils_snprintf+0x26>
 8011104:	b138      	cbz	r0, 8011116 <rcutils_snprintf+0x22>
 8011106:	b141      	cbz	r1, 801111a <rcutils_snprintf+0x26>
 8011108:	f004 fba6 	bl	8015858 <vsniprintf>
 801110c:	b003      	add	sp, #12
 801110e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011112:	b002      	add	sp, #8
 8011114:	4770      	bx	lr
 8011116:	2900      	cmp	r1, #0
 8011118:	d0f6      	beq.n	8011108 <rcutils_snprintf+0x14>
 801111a:	f004 fc7b 	bl	8015a14 <__errno>
 801111e:	2316      	movs	r3, #22
 8011120:	6003      	str	r3, [r0, #0]
 8011122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011126:	e7f1      	b.n	801110c <rcutils_snprintf+0x18>

08011128 <rcutils_vsnprintf>:
 8011128:	b570      	push	{r4, r5, r6, lr}
 801112a:	b13a      	cbz	r2, 801113c <rcutils_vsnprintf+0x14>
 801112c:	b120      	cbz	r0, 8011138 <rcutils_vsnprintf+0x10>
 801112e:	b129      	cbz	r1, 801113c <rcutils_vsnprintf+0x14>
 8011130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011134:	f004 bb90 	b.w	8015858 <vsniprintf>
 8011138:	2900      	cmp	r1, #0
 801113a:	d0f9      	beq.n	8011130 <rcutils_vsnprintf+0x8>
 801113c:	f004 fc6a 	bl	8015a14 <__errno>
 8011140:	2316      	movs	r3, #22
 8011142:	6003      	str	r3, [r0, #0]
 8011144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011148:	bd70      	pop	{r4, r5, r6, pc}
 801114a:	bf00      	nop

0801114c <rcutils_strdup>:
 801114c:	b084      	sub	sp, #16
 801114e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011150:	ac07      	add	r4, sp, #28
 8011152:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8011156:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011158:	4605      	mov	r5, r0
 801115a:	b1d0      	cbz	r0, 8011192 <rcutils_strdup+0x46>
 801115c:	460c      	mov	r4, r1
 801115e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011162:	2100      	movs	r1, #0
 8011164:	f7ef f84c 	bl	8000200 <memchr>
 8011168:	b180      	cbz	r0, 801118c <rcutils_strdup+0x40>
 801116a:	1b46      	subs	r6, r0, r5
 801116c:	1c70      	adds	r0, r6, #1
 801116e:	4639      	mov	r1, r7
 8011170:	47a0      	blx	r4
 8011172:	4604      	mov	r4, r0
 8011174:	b128      	cbz	r0, 8011182 <rcutils_strdup+0x36>
 8011176:	4632      	mov	r2, r6
 8011178:	4629      	mov	r1, r5
 801117a:	f004 fc80 	bl	8015a7e <memcpy>
 801117e:	2300      	movs	r3, #0
 8011180:	55a3      	strb	r3, [r4, r6]
 8011182:	4620      	mov	r0, r4
 8011184:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011188:	b004      	add	sp, #16
 801118a:	4770      	bx	lr
 801118c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8011190:	e7ed      	b.n	801116e <rcutils_strdup+0x22>
 8011192:	4604      	mov	r4, r0
 8011194:	e7f5      	b.n	8011182 <rcutils_strdup+0x36>
 8011196:	bf00      	nop

08011198 <rcutils_strndup>:
 8011198:	b082      	sub	sp, #8
 801119a:	b570      	push	{r4, r5, r6, lr}
 801119c:	ac04      	add	r4, sp, #16
 801119e:	e884 000c 	stmia.w	r4, {r2, r3}
 80111a2:	4606      	mov	r6, r0
 80111a4:	b1b8      	cbz	r0, 80111d6 <rcutils_strndup+0x3e>
 80111a6:	460c      	mov	r4, r1
 80111a8:	460a      	mov	r2, r1
 80111aa:	2100      	movs	r1, #0
 80111ac:	f7ef f828 	bl	8000200 <memchr>
 80111b0:	b100      	cbz	r0, 80111b4 <rcutils_strndup+0x1c>
 80111b2:	1b84      	subs	r4, r0, r6
 80111b4:	9b04      	ldr	r3, [sp, #16]
 80111b6:	9908      	ldr	r1, [sp, #32]
 80111b8:	1c60      	adds	r0, r4, #1
 80111ba:	4798      	blx	r3
 80111bc:	4605      	mov	r5, r0
 80111be:	b128      	cbz	r0, 80111cc <rcutils_strndup+0x34>
 80111c0:	4622      	mov	r2, r4
 80111c2:	4631      	mov	r1, r6
 80111c4:	f004 fc5b 	bl	8015a7e <memcpy>
 80111c8:	2300      	movs	r3, #0
 80111ca:	552b      	strb	r3, [r5, r4]
 80111cc:	4628      	mov	r0, r5
 80111ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111d2:	b002      	add	sp, #8
 80111d4:	4770      	bx	lr
 80111d6:	4605      	mov	r5, r0
 80111d8:	e7f8      	b.n	80111cc <rcutils_strndup+0x34>
 80111da:	bf00      	nop

080111dc <rcutils_get_zero_initialized_string_map>:
 80111dc:	4b01      	ldr	r3, [pc, #4]	@ (80111e4 <rcutils_get_zero_initialized_string_map+0x8>)
 80111de:	2000      	movs	r0, #0
 80111e0:	6018      	str	r0, [r3, #0]
 80111e2:	4770      	bx	lr
 80111e4:	20011198 	.word	0x20011198

080111e8 <rcutils_string_map_reserve>:
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d03e      	beq.n	801126a <rcutils_string_map_reserve+0x82>
 80111ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ee:	6805      	ldr	r5, [r0, #0]
 80111f0:	460c      	mov	r4, r1
 80111f2:	4606      	mov	r6, r0
 80111f4:	b12d      	cbz	r5, 8011202 <rcutils_string_map_reserve+0x1a>
 80111f6:	68ab      	ldr	r3, [r5, #8]
 80111f8:	42a3      	cmp	r3, r4
 80111fa:	d904      	bls.n	8011206 <rcutils_string_map_reserve+0x1e>
 80111fc:	461c      	mov	r4, r3
 80111fe:	2d00      	cmp	r5, #0
 8011200:	d1f9      	bne.n	80111f6 <rcutils_string_map_reserve+0xe>
 8011202:	201f      	movs	r0, #31
 8011204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011206:	686b      	ldr	r3, [r5, #4]
 8011208:	42a3      	cmp	r3, r4
 801120a:	d02a      	beq.n	8011262 <rcutils_string_map_reserve+0x7a>
 801120c:	69e9      	ldr	r1, [r5, #28]
 801120e:	b304      	cbz	r4, 8011252 <rcutils_string_map_reserve+0x6a>
 8011210:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8011214:	d227      	bcs.n	8011266 <rcutils_string_map_reserve+0x7e>
 8011216:	00e7      	lsls	r7, r4, #3
 8011218:	460a      	mov	r2, r1
 801121a:	696b      	ldr	r3, [r5, #20]
 801121c:	6828      	ldr	r0, [r5, #0]
 801121e:	4639      	mov	r1, r7
 8011220:	4798      	blx	r3
 8011222:	b300      	cbz	r0, 8011266 <rcutils_string_map_reserve+0x7e>
 8011224:	6835      	ldr	r5, [r6, #0]
 8011226:	686a      	ldr	r2, [r5, #4]
 8011228:	6028      	str	r0, [r5, #0]
 801122a:	42a2      	cmp	r2, r4
 801122c:	d216      	bcs.n	801125c <rcutils_string_map_reserve+0x74>
 801122e:	43d1      	mvns	r1, r2
 8011230:	4421      	add	r1, r4
 8011232:	2909      	cmp	r1, #9
 8011234:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8011238:	d919      	bls.n	801126e <rcutils_string_map_reserve+0x86>
 801123a:	0759      	lsls	r1, r3, #29
 801123c:	d117      	bne.n	801126e <rcutils_string_map_reserve+0x86>
 801123e:	1aa1      	subs	r1, r4, r2
 8011240:	2600      	movs	r6, #0
 8011242:	2200      	movs	r2, #0
 8011244:	2700      	movs	r7, #0
 8011246:	3201      	adds	r2, #1
 8011248:	4291      	cmp	r1, r2
 801124a:	e8e3 6702 	strd	r6, r7, [r3], #8
 801124e:	d8fa      	bhi.n	8011246 <rcutils_string_map_reserve+0x5e>
 8011250:	e004      	b.n	801125c <rcutils_string_map_reserve+0x74>
 8011252:	692b      	ldr	r3, [r5, #16]
 8011254:	6828      	ldr	r0, [r5, #0]
 8011256:	4798      	blx	r3
 8011258:	6835      	ldr	r5, [r6, #0]
 801125a:	602c      	str	r4, [r5, #0]
 801125c:	606c      	str	r4, [r5, #4]
 801125e:	2000      	movs	r0, #0
 8011260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011262:	2000      	movs	r0, #0
 8011264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011266:	200a      	movs	r0, #10
 8011268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801126a:	200b      	movs	r0, #11
 801126c:	4770      	bx	lr
 801126e:	4438      	add	r0, r7
 8011270:	2200      	movs	r2, #0
 8011272:	e9c3 2200 	strd	r2, r2, [r3]
 8011276:	3308      	adds	r3, #8
 8011278:	4283      	cmp	r3, r0
 801127a:	d1fa      	bne.n	8011272 <rcutils_string_map_reserve+0x8a>
 801127c:	e7ee      	b.n	801125c <rcutils_string_map_reserve+0x74>
 801127e:	bf00      	nop

08011280 <rcutils_string_map_init>:
 8011280:	b082      	sub	sp, #8
 8011282:	b570      	push	{r4, r5, r6, lr}
 8011284:	ac04      	add	r4, sp, #16
 8011286:	e884 000c 	stmia.w	r4, {r2, r3}
 801128a:	b378      	cbz	r0, 80112ec <rcutils_string_map_init+0x6c>
 801128c:	6806      	ldr	r6, [r0, #0]
 801128e:	4604      	mov	r4, r0
 8011290:	b12e      	cbz	r6, 801129e <rcutils_string_map_init+0x1e>
 8011292:	251e      	movs	r5, #30
 8011294:	4628      	mov	r0, r5
 8011296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801129a:	b002      	add	sp, #8
 801129c:	4770      	bx	lr
 801129e:	a804      	add	r0, sp, #16
 80112a0:	460d      	mov	r5, r1
 80112a2:	f7f9 f85d 	bl	800a360 <rcutils_allocator_is_valid>
 80112a6:	b308      	cbz	r0, 80112ec <rcutils_string_map_init+0x6c>
 80112a8:	9b04      	ldr	r3, [sp, #16]
 80112aa:	9908      	ldr	r1, [sp, #32]
 80112ac:	2020      	movs	r0, #32
 80112ae:	4798      	blx	r3
 80112b0:	6020      	str	r0, [r4, #0]
 80112b2:	b308      	cbz	r0, 80112f8 <rcutils_string_map_init+0x78>
 80112b4:	f10d 0e10 	add.w	lr, sp, #16
 80112b8:	e9c0 6600 	strd	r6, r6, [r0]
 80112bc:	6086      	str	r6, [r0, #8]
 80112be:	f100 0c0c 	add.w	ip, r0, #12
 80112c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80112c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112ca:	f8de 3000 	ldr.w	r3, [lr]
 80112ce:	f8cc 3000 	str.w	r3, [ip]
 80112d2:	4629      	mov	r1, r5
 80112d4:	4620      	mov	r0, r4
 80112d6:	f7ff ff87 	bl	80111e8 <rcutils_string_map_reserve>
 80112da:	4605      	mov	r5, r0
 80112dc:	2800      	cmp	r0, #0
 80112de:	d0d9      	beq.n	8011294 <rcutils_string_map_init+0x14>
 80112e0:	9b05      	ldr	r3, [sp, #20]
 80112e2:	9908      	ldr	r1, [sp, #32]
 80112e4:	6820      	ldr	r0, [r4, #0]
 80112e6:	4798      	blx	r3
 80112e8:	6026      	str	r6, [r4, #0]
 80112ea:	e7d3      	b.n	8011294 <rcutils_string_map_init+0x14>
 80112ec:	250b      	movs	r5, #11
 80112ee:	4628      	mov	r0, r5
 80112f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112f4:	b002      	add	sp, #8
 80112f6:	4770      	bx	lr
 80112f8:	250a      	movs	r5, #10
 80112fa:	e7cb      	b.n	8011294 <rcutils_string_map_init+0x14>

080112fc <rcutils_string_map_fini>:
 80112fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011300:	b083      	sub	sp, #12
 8011302:	2800      	cmp	r0, #0
 8011304:	d03e      	beq.n	8011384 <rcutils_string_map_fini+0x88>
 8011306:	6804      	ldr	r4, [r0, #0]
 8011308:	4606      	mov	r6, r0
 801130a:	2c00      	cmp	r4, #0
 801130c:	d036      	beq.n	801137c <rcutils_string_map_fini+0x80>
 801130e:	6863      	ldr	r3, [r4, #4]
 8011310:	b34b      	cbz	r3, 8011366 <rcutils_string_map_fini+0x6a>
 8011312:	2500      	movs	r5, #0
 8011314:	6822      	ldr	r2, [r4, #0]
 8011316:	462f      	mov	r7, r5
 8011318:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 801131c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8011320:	b1f0      	cbz	r0, 8011360 <rcutils_string_map_fini+0x64>
 8011322:	69e1      	ldr	r1, [r4, #28]
 8011324:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011328:	9101      	str	r1, [sp, #4]
 801132a:	47c8      	blx	r9
 801132c:	6823      	ldr	r3, [r4, #0]
 801132e:	9901      	ldr	r1, [sp, #4]
 8011330:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8011334:	eb03 0208 	add.w	r2, r3, r8
 8011338:	3501      	adds	r5, #1
 801133a:	6850      	ldr	r0, [r2, #4]
 801133c:	47c8      	blx	r9
 801133e:	6822      	ldr	r2, [r4, #0]
 8011340:	68a3      	ldr	r3, [r4, #8]
 8011342:	4442      	add	r2, r8
 8011344:	3b01      	subs	r3, #1
 8011346:	6057      	str	r7, [r2, #4]
 8011348:	60a3      	str	r3, [r4, #8]
 801134a:	6834      	ldr	r4, [r6, #0]
 801134c:	6863      	ldr	r3, [r4, #4]
 801134e:	429d      	cmp	r5, r3
 8011350:	d209      	bcs.n	8011366 <rcutils_string_map_fini+0x6a>
 8011352:	6822      	ldr	r2, [r4, #0]
 8011354:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8011358:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 801135c:	2800      	cmp	r0, #0
 801135e:	d1e0      	bne.n	8011322 <rcutils_string_map_fini+0x26>
 8011360:	3501      	adds	r5, #1
 8011362:	429d      	cmp	r5, r3
 8011364:	d3d8      	bcc.n	8011318 <rcutils_string_map_fini+0x1c>
 8011366:	2100      	movs	r1, #0
 8011368:	4630      	mov	r0, r6
 801136a:	f7ff ff3d 	bl	80111e8 <rcutils_string_map_reserve>
 801136e:	4604      	mov	r4, r0
 8011370:	b920      	cbnz	r0, 801137c <rcutils_string_map_fini+0x80>
 8011372:	6830      	ldr	r0, [r6, #0]
 8011374:	6903      	ldr	r3, [r0, #16]
 8011376:	69c1      	ldr	r1, [r0, #28]
 8011378:	4798      	blx	r3
 801137a:	6034      	str	r4, [r6, #0]
 801137c:	4620      	mov	r0, r4
 801137e:	b003      	add	sp, #12
 8011380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011384:	240b      	movs	r4, #11
 8011386:	4620      	mov	r0, r4
 8011388:	b003      	add	sp, #12
 801138a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801138e:	bf00      	nop

08011390 <rcutils_string_map_getn>:
 8011390:	b338      	cbz	r0, 80113e2 <rcutils_string_map_getn+0x52>
 8011392:	6800      	ldr	r0, [r0, #0]
 8011394:	b328      	cbz	r0, 80113e2 <rcutils_string_map_getn+0x52>
 8011396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801139a:	460f      	mov	r7, r1
 801139c:	b1d1      	cbz	r1, 80113d4 <rcutils_string_map_getn+0x44>
 801139e:	e9d0 6900 	ldrd	r6, r9, [r0]
 80113a2:	f1b9 0f00 	cmp.w	r9, #0
 80113a6:	d015      	beq.n	80113d4 <rcutils_string_map_getn+0x44>
 80113a8:	4690      	mov	r8, r2
 80113aa:	2400      	movs	r4, #0
 80113ac:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
 80113b0:	eb06 0ac4 	add.w	sl, r6, r4, lsl #3
 80113b4:	4628      	mov	r0, r5
 80113b6:	3401      	adds	r4, #1
 80113b8:	b155      	cbz	r5, 80113d0 <rcutils_string_map_getn+0x40>
 80113ba:	f7ee ff71 	bl	80002a0 <strlen>
 80113be:	4540      	cmp	r0, r8
 80113c0:	4602      	mov	r2, r0
 80113c2:	4629      	mov	r1, r5
 80113c4:	bf38      	it	cc
 80113c6:	4642      	movcc	r2, r8
 80113c8:	4638      	mov	r0, r7
 80113ca:	f004 fa92 	bl	80158f2 <strncmp>
 80113ce:	b120      	cbz	r0, 80113da <rcutils_string_map_getn+0x4a>
 80113d0:	45a1      	cmp	r9, r4
 80113d2:	d1eb      	bne.n	80113ac <rcutils_string_map_getn+0x1c>
 80113d4:	2000      	movs	r0, #0
 80113d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113da:	f8da 0004 	ldr.w	r0, [sl, #4]
 80113de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113e2:	4770      	bx	lr

080113e4 <rmw_get_zero_initialized_context>:
 80113e4:	b510      	push	{r4, lr}
 80113e6:	4604      	mov	r4, r0
 80113e8:	3010      	adds	r0, #16
 80113ea:	f000 f80b 	bl	8011404 <rmw_get_zero_initialized_init_options>
 80113ee:	2300      	movs	r3, #0
 80113f0:	2000      	movs	r0, #0
 80113f2:	2100      	movs	r1, #0
 80113f4:	e9c4 0100 	strd	r0, r1, [r4]
 80113f8:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
 80113fc:	60a3      	str	r3, [r4, #8]
 80113fe:	4620      	mov	r0, r4
 8011400:	bd10      	pop	{r4, pc}
 8011402:	bf00      	nop

08011404 <rmw_get_zero_initialized_init_options>:
 8011404:	b510      	push	{r4, lr}
 8011406:	2258      	movs	r2, #88	@ 0x58
 8011408:	4604      	mov	r4, r0
 801140a:	2100      	movs	r1, #0
 801140c:	f004 fa5c 	bl	80158c8 <memset>
 8011410:	f104 0010 	add.w	r0, r4, #16
 8011414:	f000 f80a 	bl	801142c <rmw_get_default_security_options>
 8011418:	f104 001c 	add.w	r0, r4, #28
 801141c:	f003 fd4c 	bl	8014eb8 <rmw_get_zero_initialized_discovery_options>
 8011420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011424:	60e3      	str	r3, [r4, #12]
 8011426:	4620      	mov	r0, r4
 8011428:	bd10      	pop	{r4, pc}
 801142a:	bf00      	nop

0801142c <rmw_get_default_security_options>:
 801142c:	2200      	movs	r2, #0
 801142e:	7002      	strb	r2, [r0, #0]
 8011430:	6042      	str	r2, [r0, #4]
 8011432:	4770      	bx	lr

08011434 <rmw_subscription_content_filter_options_fini>:
 8011434:	b1b0      	cbz	r0, 8011464 <rmw_subscription_content_filter_options_fini+0x30>
 8011436:	b538      	push	{r3, r4, r5, lr}
 8011438:	4604      	mov	r4, r0
 801143a:	4608      	mov	r0, r1
 801143c:	460d      	mov	r5, r1
 801143e:	f7f8 ff8f 	bl	800a360 <rcutils_allocator_is_valid>
 8011442:	b168      	cbz	r0, 8011460 <rmw_subscription_content_filter_options_fini+0x2c>
 8011444:	6820      	ldr	r0, [r4, #0]
 8011446:	b120      	cbz	r0, 8011452 <rmw_subscription_content_filter_options_fini+0x1e>
 8011448:	686b      	ldr	r3, [r5, #4]
 801144a:	6929      	ldr	r1, [r5, #16]
 801144c:	4798      	blx	r3
 801144e:	2300      	movs	r3, #0
 8011450:	6023      	str	r3, [r4, #0]
 8011452:	1d20      	adds	r0, r4, #4
 8011454:	f003 fd08 	bl	8014e68 <rcutils_string_array_fini>
 8011458:	3800      	subs	r0, #0
 801145a:	bf18      	it	ne
 801145c:	2001      	movne	r0, #1
 801145e:	bd38      	pop	{r3, r4, r5, pc}
 8011460:	200b      	movs	r0, #11
 8011462:	bd38      	pop	{r3, r4, r5, pc}
 8011464:	200b      	movs	r0, #11
 8011466:	4770      	bx	lr

08011468 <rmw_get_default_subscription_options>:
 8011468:	2200      	movs	r2, #0
 801146a:	e9c0 2200 	strd	r2, r2, [r0]
 801146e:	6082      	str	r2, [r0, #8]
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop

08011474 <rmw_time_equal>:
 8011474:	b4f0      	push	{r4, r5, r6, r7}
 8011476:	b084      	sub	sp, #16
 8011478:	ac04      	add	r4, sp, #16
 801147a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801147e:	4603      	mov	r3, r0
 8011480:	4924      	ldr	r1, [pc, #144]	@ (8011514 <rmw_time_equal+0xa0>)
 8011482:	9e03      	ldr	r6, [sp, #12]
 8011484:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011488:	2202      	movs	r2, #2
 801148a:	4299      	cmp	r1, r3
 801148c:	41aa      	sbcs	r2, r5
 801148e:	d330      	bcc.n	80114f2 <rmw_time_equal+0x7e>
 8011490:	4c21      	ldr	r4, [pc, #132]	@ (8011518 <rmw_time_equal+0xa4>)
 8011492:	fba3 3204 	umull	r3, r2, r3, r4
 8011496:	fb04 2205 	mla	r2, r4, r5, r2
 801149a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801149e:	43dd      	mvns	r5, r3
 80114a0:	1a8c      	subs	r4, r1, r2
 80114a2:	4285      	cmp	r5, r0
 80114a4:	41b4      	sbcs	r4, r6
 80114a6:	d332      	bcc.n	801150e <rmw_time_equal+0x9a>
 80114a8:	eb10 0c03 	adds.w	ip, r0, r3
 80114ac:	eb42 0106 	adc.w	r1, r2, r6
 80114b0:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80114b4:	4817      	ldr	r0, [pc, #92]	@ (8011514 <rmw_time_equal+0xa0>)
 80114b6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80114b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80114ba:	2202      	movs	r2, #2
 80114bc:	4298      	cmp	r0, r3
 80114be:	41b2      	sbcs	r2, r6
 80114c0:	d31c      	bcc.n	80114fc <rmw_time_equal+0x88>
 80114c2:	4c15      	ldr	r4, [pc, #84]	@ (8011518 <rmw_time_equal+0xa4>)
 80114c4:	fba3 3204 	umull	r3, r2, r3, r4
 80114c8:	fb04 2206 	mla	r2, r4, r6, r2
 80114cc:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80114d0:	43de      	mvns	r6, r3
 80114d2:	1a84      	subs	r4, r0, r2
 80114d4:	42ae      	cmp	r6, r5
 80114d6:	41bc      	sbcs	r4, r7
 80114d8:	d315      	bcc.n	8011506 <rmw_time_equal+0x92>
 80114da:	195b      	adds	r3, r3, r5
 80114dc:	eb42 0207 	adc.w	r2, r2, r7
 80114e0:	428a      	cmp	r2, r1
 80114e2:	bf08      	it	eq
 80114e4:	4563      	cmpeq	r3, ip
 80114e6:	bf0c      	ite	eq
 80114e8:	2001      	moveq	r0, #1
 80114ea:	2000      	movne	r0, #0
 80114ec:	b004      	add	sp, #16
 80114ee:	bcf0      	pop	{r4, r5, r6, r7}
 80114f0:	4770      	bx	lr
 80114f2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80114f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80114fa:	e7d9      	b.n	80114b0 <rmw_time_equal+0x3c>
 80114fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011500:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8011504:	e7ec      	b.n	80114e0 <rmw_time_equal+0x6c>
 8011506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801150a:	4602      	mov	r2, r0
 801150c:	e7e8      	b.n	80114e0 <rmw_time_equal+0x6c>
 801150e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011512:	e7cd      	b.n	80114b0 <rmw_time_equal+0x3c>
 8011514:	25c17d04 	.word	0x25c17d04
 8011518:	3b9aca00 	.word	0x3b9aca00

0801151c <rmw_time_total_nsec>:
 801151c:	b470      	push	{r4, r5, r6}
 801151e:	b085      	sub	sp, #20
 8011520:	ac04      	add	r4, sp, #16
 8011522:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011526:	4603      	mov	r3, r0
 8011528:	4912      	ldr	r1, [pc, #72]	@ (8011574 <rmw_time_total_nsec+0x58>)
 801152a:	9e03      	ldr	r6, [sp, #12]
 801152c:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011530:	2202      	movs	r2, #2
 8011532:	4299      	cmp	r1, r3
 8011534:	41aa      	sbcs	r2, r5
 8011536:	d311      	bcc.n	801155c <rmw_time_total_nsec+0x40>
 8011538:	4c0f      	ldr	r4, [pc, #60]	@ (8011578 <rmw_time_total_nsec+0x5c>)
 801153a:	fba3 3204 	umull	r3, r2, r3, r4
 801153e:	fb04 2205 	mla	r2, r4, r5, r2
 8011542:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011546:	43dd      	mvns	r5, r3
 8011548:	1a8c      	subs	r4, r1, r2
 801154a:	4285      	cmp	r5, r0
 801154c:	41b4      	sbcs	r4, r6
 801154e:	d30c      	bcc.n	801156a <rmw_time_total_nsec+0x4e>
 8011550:	1818      	adds	r0, r3, r0
 8011552:	eb42 0106 	adc.w	r1, r2, r6
 8011556:	b005      	add	sp, #20
 8011558:	bc70      	pop	{r4, r5, r6}
 801155a:	4770      	bx	lr
 801155c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011560:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011564:	b005      	add	sp, #20
 8011566:	bc70      	pop	{r4, r5, r6}
 8011568:	4770      	bx	lr
 801156a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801156e:	b005      	add	sp, #20
 8011570:	bc70      	pop	{r4, r5, r6}
 8011572:	4770      	bx	lr
 8011574:	25c17d04 	.word	0x25c17d04
 8011578:	3b9aca00 	.word	0x3b9aca00

0801157c <rmw_get_zero_initialized_message_info>:
 801157c:	b510      	push	{r4, lr}
 801157e:	2238      	movs	r2, #56	@ 0x38
 8011580:	4604      	mov	r4, r0
 8011582:	2100      	movs	r1, #0
 8011584:	f004 f9a0 	bl	80158c8 <memset>
 8011588:	4620      	mov	r0, r4
 801158a:	bd10      	pop	{r4, pc}

0801158c <rmw_validate_full_topic_name>:
 801158c:	2800      	cmp	r0, #0
 801158e:	d057      	beq.n	8011640 <rmw_validate_full_topic_name+0xb4>
 8011590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011594:	460d      	mov	r5, r1
 8011596:	2900      	cmp	r1, #0
 8011598:	d054      	beq.n	8011644 <rmw_validate_full_topic_name+0xb8>
 801159a:	4616      	mov	r6, r2
 801159c:	4604      	mov	r4, r0
 801159e:	f7ee fe7f 	bl	80002a0 <strlen>
 80115a2:	b148      	cbz	r0, 80115b8 <rmw_validate_full_topic_name+0x2c>
 80115a4:	7823      	ldrb	r3, [r4, #0]
 80115a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80115a8:	d00d      	beq.n	80115c6 <rmw_validate_full_topic_name+0x3a>
 80115aa:	2302      	movs	r3, #2
 80115ac:	602b      	str	r3, [r5, #0]
 80115ae:	b13e      	cbz	r6, 80115c0 <rmw_validate_full_topic_name+0x34>
 80115b0:	2000      	movs	r0, #0
 80115b2:	6030      	str	r0, [r6, #0]
 80115b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b8:	2301      	movs	r3, #1
 80115ba:	602b      	str	r3, [r5, #0]
 80115bc:	2e00      	cmp	r6, #0
 80115be:	d1f7      	bne.n	80115b0 <rmw_validate_full_topic_name+0x24>
 80115c0:	2000      	movs	r0, #0
 80115c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c6:	1e43      	subs	r3, r0, #1
 80115c8:	5ce2      	ldrb	r2, [r4, r3]
 80115ca:	2a2f      	cmp	r2, #47	@ 0x2f
 80115cc:	d03c      	beq.n	8011648 <rmw_validate_full_topic_name+0xbc>
 80115ce:	1e63      	subs	r3, r4, #1
 80115d0:	eb03 0800 	add.w	r8, r3, r0
 80115d4:	f1c4 0e01 	rsb	lr, r4, #1
 80115d8:	eb0e 0703 	add.w	r7, lr, r3
 80115dc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80115e0:	f021 0220 	bic.w	r2, r1, #32
 80115e4:	3a41      	subs	r2, #65	@ 0x41
 80115e6:	2a19      	cmp	r2, #25
 80115e8:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80115ec:	d90b      	bls.n	8011606 <rmw_validate_full_topic_name+0x7a>
 80115ee:	295f      	cmp	r1, #95	@ 0x5f
 80115f0:	d009      	beq.n	8011606 <rmw_validate_full_topic_name+0x7a>
 80115f2:	f1bc 0f0a 	cmp.w	ip, #10
 80115f6:	d906      	bls.n	8011606 <rmw_validate_full_topic_name+0x7a>
 80115f8:	2304      	movs	r3, #4
 80115fa:	602b      	str	r3, [r5, #0]
 80115fc:	2e00      	cmp	r6, #0
 80115fe:	d0df      	beq.n	80115c0 <rmw_validate_full_topic_name+0x34>
 8011600:	6037      	str	r7, [r6, #0]
 8011602:	2000      	movs	r0, #0
 8011604:	e7d6      	b.n	80115b4 <rmw_validate_full_topic_name+0x28>
 8011606:	4543      	cmp	r3, r8
 8011608:	d1e6      	bne.n	80115d8 <rmw_validate_full_topic_name+0x4c>
 801160a:	4f1a      	ldr	r7, [pc, #104]	@ (8011674 <rmw_validate_full_topic_name+0xe8>)
 801160c:	2301      	movs	r3, #1
 801160e:	e004      	b.n	801161a <rmw_validate_full_topic_name+0x8e>
 8011610:	4298      	cmp	r0, r3
 8011612:	f104 0401 	add.w	r4, r4, #1
 8011616:	d91c      	bls.n	8011652 <rmw_validate_full_topic_name+0xc6>
 8011618:	4613      	mov	r3, r2
 801161a:	4298      	cmp	r0, r3
 801161c:	f103 0201 	add.w	r2, r3, #1
 8011620:	d0f6      	beq.n	8011610 <rmw_validate_full_topic_name+0x84>
 8011622:	7821      	ldrb	r1, [r4, #0]
 8011624:	292f      	cmp	r1, #47	@ 0x2f
 8011626:	d1f3      	bne.n	8011610 <rmw_validate_full_topic_name+0x84>
 8011628:	7861      	ldrb	r1, [r4, #1]
 801162a:	292f      	cmp	r1, #47	@ 0x2f
 801162c:	d01c      	beq.n	8011668 <rmw_validate_full_topic_name+0xdc>
 801162e:	5dc9      	ldrb	r1, [r1, r7]
 8011630:	0749      	lsls	r1, r1, #29
 8011632:	d5ed      	bpl.n	8011610 <rmw_validate_full_topic_name+0x84>
 8011634:	2206      	movs	r2, #6
 8011636:	602a      	str	r2, [r5, #0]
 8011638:	2e00      	cmp	r6, #0
 801163a:	d0c1      	beq.n	80115c0 <rmw_validate_full_topic_name+0x34>
 801163c:	6033      	str	r3, [r6, #0]
 801163e:	e7bf      	b.n	80115c0 <rmw_validate_full_topic_name+0x34>
 8011640:	200b      	movs	r0, #11
 8011642:	4770      	bx	lr
 8011644:	200b      	movs	r0, #11
 8011646:	e7b5      	b.n	80115b4 <rmw_validate_full_topic_name+0x28>
 8011648:	2203      	movs	r2, #3
 801164a:	602a      	str	r2, [r5, #0]
 801164c:	2e00      	cmp	r6, #0
 801164e:	d1f5      	bne.n	801163c <rmw_validate_full_topic_name+0xb0>
 8011650:	e7b6      	b.n	80115c0 <rmw_validate_full_topic_name+0x34>
 8011652:	28f7      	cmp	r0, #247	@ 0xf7
 8011654:	d802      	bhi.n	801165c <rmw_validate_full_topic_name+0xd0>
 8011656:	2000      	movs	r0, #0
 8011658:	6028      	str	r0, [r5, #0]
 801165a:	e7ab      	b.n	80115b4 <rmw_validate_full_topic_name+0x28>
 801165c:	2307      	movs	r3, #7
 801165e:	602b      	str	r3, [r5, #0]
 8011660:	2e00      	cmp	r6, #0
 8011662:	d0ad      	beq.n	80115c0 <rmw_validate_full_topic_name+0x34>
 8011664:	23f6      	movs	r3, #246	@ 0xf6
 8011666:	e7e9      	b.n	801163c <rmw_validate_full_topic_name+0xb0>
 8011668:	2205      	movs	r2, #5
 801166a:	602a      	str	r2, [r5, #0]
 801166c:	2e00      	cmp	r6, #0
 801166e:	d1e5      	bne.n	801163c <rmw_validate_full_topic_name+0xb0>
 8011670:	e7a6      	b.n	80115c0 <rmw_validate_full_topic_name+0x34>
 8011672:	bf00      	nop
 8011674:	08017944 	.word	0x08017944

08011678 <rmw_validate_namespace_with_size>:
 8011678:	b340      	cbz	r0, 80116cc <rmw_validate_namespace_with_size+0x54>
 801167a:	b570      	push	{r4, r5, r6, lr}
 801167c:	4614      	mov	r4, r2
 801167e:	b0c2      	sub	sp, #264	@ 0x108
 8011680:	b332      	cbz	r2, 80116d0 <rmw_validate_namespace_with_size+0x58>
 8011682:	2901      	cmp	r1, #1
 8011684:	460d      	mov	r5, r1
 8011686:	461e      	mov	r6, r3
 8011688:	d102      	bne.n	8011690 <rmw_validate_namespace_with_size+0x18>
 801168a:	7803      	ldrb	r3, [r0, #0]
 801168c:	2b2f      	cmp	r3, #47	@ 0x2f
 801168e:	d012      	beq.n	80116b6 <rmw_validate_namespace_with_size+0x3e>
 8011690:	aa01      	add	r2, sp, #4
 8011692:	4669      	mov	r1, sp
 8011694:	f7ff ff7a 	bl	801158c <rmw_validate_full_topic_name>
 8011698:	b978      	cbnz	r0, 80116ba <rmw_validate_namespace_with_size+0x42>
 801169a:	9b00      	ldr	r3, [sp, #0]
 801169c:	b14b      	cbz	r3, 80116b2 <rmw_validate_namespace_with_size+0x3a>
 801169e:	2b07      	cmp	r3, #7
 80116a0:	d007      	beq.n	80116b2 <rmw_validate_namespace_with_size+0x3a>
 80116a2:	1e5a      	subs	r2, r3, #1
 80116a4:	2a05      	cmp	r2, #5
 80116a6:	d82b      	bhi.n	8011700 <rmw_validate_namespace_with_size+0x88>
 80116a8:	e8df f002 	tbb	[pc, r2]
 80116ac:	1e212427 	.word	0x1e212427
 80116b0:	141b      	.short	0x141b
 80116b2:	2df5      	cmp	r5, #245	@ 0xf5
 80116b4:	d803      	bhi.n	80116be <rmw_validate_namespace_with_size+0x46>
 80116b6:	2000      	movs	r0, #0
 80116b8:	6020      	str	r0, [r4, #0]
 80116ba:	b042      	add	sp, #264	@ 0x108
 80116bc:	bd70      	pop	{r4, r5, r6, pc}
 80116be:	2307      	movs	r3, #7
 80116c0:	6023      	str	r3, [r4, #0]
 80116c2:	2e00      	cmp	r6, #0
 80116c4:	d0f9      	beq.n	80116ba <rmw_validate_namespace_with_size+0x42>
 80116c6:	23f4      	movs	r3, #244	@ 0xf4
 80116c8:	6033      	str	r3, [r6, #0]
 80116ca:	e7f6      	b.n	80116ba <rmw_validate_namespace_with_size+0x42>
 80116cc:	200b      	movs	r0, #11
 80116ce:	4770      	bx	lr
 80116d0:	200b      	movs	r0, #11
 80116d2:	e7f2      	b.n	80116ba <rmw_validate_namespace_with_size+0x42>
 80116d4:	2306      	movs	r3, #6
 80116d6:	6023      	str	r3, [r4, #0]
 80116d8:	2e00      	cmp	r6, #0
 80116da:	d0ee      	beq.n	80116ba <rmw_validate_namespace_with_size+0x42>
 80116dc:	9b01      	ldr	r3, [sp, #4]
 80116de:	6033      	str	r3, [r6, #0]
 80116e0:	e7eb      	b.n	80116ba <rmw_validate_namespace_with_size+0x42>
 80116e2:	2305      	movs	r3, #5
 80116e4:	6023      	str	r3, [r4, #0]
 80116e6:	e7f7      	b.n	80116d8 <rmw_validate_namespace_with_size+0x60>
 80116e8:	2304      	movs	r3, #4
 80116ea:	6023      	str	r3, [r4, #0]
 80116ec:	e7f4      	b.n	80116d8 <rmw_validate_namespace_with_size+0x60>
 80116ee:	2303      	movs	r3, #3
 80116f0:	6023      	str	r3, [r4, #0]
 80116f2:	e7f1      	b.n	80116d8 <rmw_validate_namespace_with_size+0x60>
 80116f4:	2302      	movs	r3, #2
 80116f6:	6023      	str	r3, [r4, #0]
 80116f8:	e7ee      	b.n	80116d8 <rmw_validate_namespace_with_size+0x60>
 80116fa:	2301      	movs	r3, #1
 80116fc:	6023      	str	r3, [r4, #0]
 80116fe:	e7eb      	b.n	80116d8 <rmw_validate_namespace_with_size+0x60>
 8011700:	4a03      	ldr	r2, [pc, #12]	@ (8011710 <rmw_validate_namespace_with_size+0x98>)
 8011702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011706:	a802      	add	r0, sp, #8
 8011708:	f7ff fcf4 	bl	80110f4 <rcutils_snprintf>
 801170c:	2001      	movs	r0, #1
 801170e:	e7d4      	b.n	80116ba <rmw_validate_namespace_with_size+0x42>
 8011710:	080171dc 	.word	0x080171dc

08011714 <rmw_validate_namespace>:
 8011714:	b168      	cbz	r0, 8011732 <rmw_validate_namespace+0x1e>
 8011716:	b570      	push	{r4, r5, r6, lr}
 8011718:	460d      	mov	r5, r1
 801171a:	4616      	mov	r6, r2
 801171c:	4604      	mov	r4, r0
 801171e:	f7ee fdbf 	bl	80002a0 <strlen>
 8011722:	4633      	mov	r3, r6
 8011724:	4601      	mov	r1, r0
 8011726:	462a      	mov	r2, r5
 8011728:	4620      	mov	r0, r4
 801172a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801172e:	f7ff bfa3 	b.w	8011678 <rmw_validate_namespace_with_size>
 8011732:	200b      	movs	r0, #11
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop

08011738 <rmw_namespace_validation_result_string>:
 8011738:	2807      	cmp	r0, #7
 801173a:	bf9a      	itte	ls
 801173c:	4b02      	ldrls	r3, [pc, #8]	@ (8011748 <rmw_namespace_validation_result_string+0x10>)
 801173e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011742:	4802      	ldrhi	r0, [pc, #8]	@ (801174c <rmw_namespace_validation_result_string+0x14>)
 8011744:	4770      	bx	lr
 8011746:	bf00      	nop
 8011748:	080173d4 	.word	0x080173d4
 801174c:	0801722c 	.word	0x0801722c

08011750 <rmw_validate_node_name>:
 8011750:	2800      	cmp	r0, #0
 8011752:	d03b      	beq.n	80117cc <rmw_validate_node_name+0x7c>
 8011754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011758:	460d      	mov	r5, r1
 801175a:	2900      	cmp	r1, #0
 801175c:	d038      	beq.n	80117d0 <rmw_validate_node_name+0x80>
 801175e:	4616      	mov	r6, r2
 8011760:	4604      	mov	r4, r0
 8011762:	f7ee fd9d 	bl	80002a0 <strlen>
 8011766:	b1e0      	cbz	r0, 80117a2 <rmw_validate_node_name+0x52>
 8011768:	1e63      	subs	r3, r4, #1
 801176a:	eb03 0800 	add.w	r8, r3, r0
 801176e:	f1c4 0101 	rsb	r1, r4, #1
 8011772:	18cf      	adds	r7, r1, r3
 8011774:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8011778:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801177c:	f02e 0c20 	bic.w	ip, lr, #32
 8011780:	2a09      	cmp	r2, #9
 8011782:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8011786:	d914      	bls.n	80117b2 <rmw_validate_node_name+0x62>
 8011788:	f1bc 0f19 	cmp.w	ip, #25
 801178c:	d911      	bls.n	80117b2 <rmw_validate_node_name+0x62>
 801178e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8011792:	d00e      	beq.n	80117b2 <rmw_validate_node_name+0x62>
 8011794:	2302      	movs	r3, #2
 8011796:	602b      	str	r3, [r5, #0]
 8011798:	b106      	cbz	r6, 801179c <rmw_validate_node_name+0x4c>
 801179a:	6037      	str	r7, [r6, #0]
 801179c:	2000      	movs	r0, #0
 801179e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117a2:	2301      	movs	r3, #1
 80117a4:	602b      	str	r3, [r5, #0]
 80117a6:	2e00      	cmp	r6, #0
 80117a8:	d0f8      	beq.n	801179c <rmw_validate_node_name+0x4c>
 80117aa:	2000      	movs	r0, #0
 80117ac:	6030      	str	r0, [r6, #0]
 80117ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b2:	4543      	cmp	r3, r8
 80117b4:	d1dd      	bne.n	8011772 <rmw_validate_node_name+0x22>
 80117b6:	7822      	ldrb	r2, [r4, #0]
 80117b8:	4b0d      	ldr	r3, [pc, #52]	@ (80117f0 <rmw_validate_node_name+0xa0>)
 80117ba:	5cd3      	ldrb	r3, [r2, r3]
 80117bc:	f013 0304 	ands.w	r3, r3, #4
 80117c0:	d110      	bne.n	80117e4 <rmw_validate_node_name+0x94>
 80117c2:	28ff      	cmp	r0, #255	@ 0xff
 80117c4:	d806      	bhi.n	80117d4 <rmw_validate_node_name+0x84>
 80117c6:	602b      	str	r3, [r5, #0]
 80117c8:	4618      	mov	r0, r3
 80117ca:	e7e8      	b.n	801179e <rmw_validate_node_name+0x4e>
 80117cc:	200b      	movs	r0, #11
 80117ce:	4770      	bx	lr
 80117d0:	200b      	movs	r0, #11
 80117d2:	e7e4      	b.n	801179e <rmw_validate_node_name+0x4e>
 80117d4:	2204      	movs	r2, #4
 80117d6:	602a      	str	r2, [r5, #0]
 80117d8:	2e00      	cmp	r6, #0
 80117da:	d0df      	beq.n	801179c <rmw_validate_node_name+0x4c>
 80117dc:	22fe      	movs	r2, #254	@ 0xfe
 80117de:	6032      	str	r2, [r6, #0]
 80117e0:	4618      	mov	r0, r3
 80117e2:	e7dc      	b.n	801179e <rmw_validate_node_name+0x4e>
 80117e4:	2303      	movs	r3, #3
 80117e6:	602b      	str	r3, [r5, #0]
 80117e8:	2e00      	cmp	r6, #0
 80117ea:	d1de      	bne.n	80117aa <rmw_validate_node_name+0x5a>
 80117ec:	e7d6      	b.n	801179c <rmw_validate_node_name+0x4c>
 80117ee:	bf00      	nop
 80117f0:	08017944 	.word	0x08017944

080117f4 <rmw_node_name_validation_result_string>:
 80117f4:	2804      	cmp	r0, #4
 80117f6:	bf9a      	itte	ls
 80117f8:	4b02      	ldrls	r3, [pc, #8]	@ (8011804 <rmw_node_name_validation_result_string+0x10>)
 80117fa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80117fe:	4802      	ldrhi	r0, [pc, #8]	@ (8011808 <rmw_node_name_validation_result_string+0x14>)
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop
 8011804:	080174e0 	.word	0x080174e0
 8011808:	080173f4 	.word	0x080173f4

0801180c <get_memory>:
 801180c:	4603      	mov	r3, r0
 801180e:	6840      	ldr	r0, [r0, #4]
 8011810:	b158      	cbz	r0, 801182a <get_memory+0x1e>
 8011812:	6842      	ldr	r2, [r0, #4]
 8011814:	605a      	str	r2, [r3, #4]
 8011816:	b10a      	cbz	r2, 801181c <get_memory+0x10>
 8011818:	2100      	movs	r1, #0
 801181a:	6011      	str	r1, [r2, #0]
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	6042      	str	r2, [r0, #4]
 8011820:	b102      	cbz	r2, 8011824 <get_memory+0x18>
 8011822:	6010      	str	r0, [r2, #0]
 8011824:	2200      	movs	r2, #0
 8011826:	6002      	str	r2, [r0, #0]
 8011828:	6018      	str	r0, [r3, #0]
 801182a:	4770      	bx	lr

0801182c <put_memory>:
 801182c:	680b      	ldr	r3, [r1, #0]
 801182e:	b10b      	cbz	r3, 8011834 <put_memory+0x8>
 8011830:	684a      	ldr	r2, [r1, #4]
 8011832:	605a      	str	r2, [r3, #4]
 8011834:	684a      	ldr	r2, [r1, #4]
 8011836:	b102      	cbz	r2, 801183a <put_memory+0xe>
 8011838:	6013      	str	r3, [r2, #0]
 801183a:	6803      	ldr	r3, [r0, #0]
 801183c:	428b      	cmp	r3, r1
 801183e:	6843      	ldr	r3, [r0, #4]
 8011840:	bf08      	it	eq
 8011842:	6002      	streq	r2, [r0, #0]
 8011844:	604b      	str	r3, [r1, #4]
 8011846:	b103      	cbz	r3, 801184a <put_memory+0x1e>
 8011848:	6019      	str	r1, [r3, #0]
 801184a:	2300      	movs	r3, #0
 801184c:	600b      	str	r3, [r1, #0]
 801184e:	6041      	str	r1, [r0, #4]
 8011850:	4770      	bx	lr
 8011852:	bf00      	nop

08011854 <rmw_destroy_client>:
 8011854:	b570      	push	{r4, r5, r6, lr}
 8011856:	b128      	cbz	r0, 8011864 <rmw_destroy_client+0x10>
 8011858:	4604      	mov	r4, r0
 801185a:	6800      	ldr	r0, [r0, #0]
 801185c:	460d      	mov	r5, r1
 801185e:	f7f9 fbcd 	bl	800affc <is_uxrce_rmw_identifier_valid>
 8011862:	b910      	cbnz	r0, 801186a <rmw_destroy_client+0x16>
 8011864:	2401      	movs	r4, #1
 8011866:	4620      	mov	r0, r4
 8011868:	bd70      	pop	{r4, r5, r6, pc}
 801186a:	6863      	ldr	r3, [r4, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d0f9      	beq.n	8011864 <rmw_destroy_client+0x10>
 8011870:	2d00      	cmp	r5, #0
 8011872:	d0f7      	beq.n	8011864 <rmw_destroy_client+0x10>
 8011874:	6828      	ldr	r0, [r5, #0]
 8011876:	f7f9 fbc1 	bl	800affc <is_uxrce_rmw_identifier_valid>
 801187a:	2800      	cmp	r0, #0
 801187c:	d0f2      	beq.n	8011864 <rmw_destroy_client+0x10>
 801187e:	686e      	ldr	r6, [r5, #4]
 8011880:	2e00      	cmp	r6, #0
 8011882:	d0ef      	beq.n	8011864 <rmw_destroy_client+0x10>
 8011884:	6864      	ldr	r4, [r4, #4]
 8011886:	6932      	ldr	r2, [r6, #16]
 8011888:	6920      	ldr	r0, [r4, #16]
 801188a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801188e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011892:	6819      	ldr	r1, [r3, #0]
 8011894:	f002 f948 	bl	8013b28 <uxr_buffer_cancel_data>
 8011898:	4602      	mov	r2, r0
 801189a:	6920      	ldr	r0, [r4, #16]
 801189c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80118a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80118a4:	f7f9 fb2a 	bl	800aefc <run_xrce_session>
 80118a8:	6920      	ldr	r0, [r4, #16]
 80118aa:	6932      	ldr	r2, [r6, #16]
 80118ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80118b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80118b4:	6819      	ldr	r1, [r3, #0]
 80118b6:	f7f9 fceb 	bl	800b290 <uxr_buffer_delete_entity>
 80118ba:	4602      	mov	r2, r0
 80118bc:	6920      	ldr	r0, [r4, #16]
 80118be:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80118c2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80118c6:	f7f9 fb19 	bl	800aefc <run_xrce_session>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	4628      	mov	r0, r5
 80118ce:	bf14      	ite	ne
 80118d0:	2400      	movne	r4, #0
 80118d2:	2402      	moveq	r4, #2
 80118d4:	f7f9 f9fa 	bl	800accc <rmw_uxrce_fini_client_memory>
 80118d8:	e7c5      	b.n	8011866 <rmw_destroy_client+0x12>
 80118da:	bf00      	nop

080118dc <rmw_get_gid_for_client>:
 80118dc:	b1a8      	cbz	r0, 801190a <rmw_get_gid_for_client+0x2e>
 80118de:	b538      	push	{r3, r4, r5, lr}
 80118e0:	460c      	mov	r4, r1
 80118e2:	b1a1      	cbz	r1, 801190e <rmw_get_gid_for_client+0x32>
 80118e4:	4605      	mov	r5, r0
 80118e6:	6800      	ldr	r0, [r0, #0]
 80118e8:	b120      	cbz	r0, 80118f4 <rmw_get_gid_for_client+0x18>
 80118ea:	4b0a      	ldr	r3, [pc, #40]	@ (8011914 <rmw_get_gid_for_client+0x38>)
 80118ec:	6819      	ldr	r1, [r3, #0]
 80118ee:	f7ee fc77 	bl	80001e0 <strcmp>
 80118f2:	b940      	cbnz	r0, 8011906 <rmw_get_gid_for_client+0x2a>
 80118f4:	686b      	ldr	r3, [r5, #4]
 80118f6:	2000      	movs	r0, #0
 80118f8:	6060      	str	r0, [r4, #4]
 80118fa:	60a0      	str	r0, [r4, #8]
 80118fc:	60e0      	str	r0, [r4, #12]
 80118fe:	6120      	str	r0, [r4, #16]
 8011900:	691b      	ldr	r3, [r3, #16]
 8011902:	6063      	str	r3, [r4, #4]
 8011904:	bd38      	pop	{r3, r4, r5, pc}
 8011906:	200c      	movs	r0, #12
 8011908:	bd38      	pop	{r3, r4, r5, pc}
 801190a:	200b      	movs	r0, #11
 801190c:	4770      	bx	lr
 801190e:	200b      	movs	r0, #11
 8011910:	bd38      	pop	{r3, r4, r5, pc}
 8011912:	bf00      	nop
 8011914:	0801750c 	.word	0x0801750c

08011918 <rmw_get_implementation_identifier>:
 8011918:	4b01      	ldr	r3, [pc, #4]	@ (8011920 <rmw_get_implementation_identifier+0x8>)
 801191a:	6818      	ldr	r0, [r3, #0]
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	0801750c 	.word	0x0801750c

08011924 <rmw_create_guard_condition>:
 8011924:	b538      	push	{r3, r4, r5, lr}
 8011926:	4605      	mov	r5, r0
 8011928:	4807      	ldr	r0, [pc, #28]	@ (8011948 <rmw_create_guard_condition+0x24>)
 801192a:	f7ff ff6f 	bl	801180c <get_memory>
 801192e:	b148      	cbz	r0, 8011944 <rmw_create_guard_condition+0x20>
 8011930:	6884      	ldr	r4, [r0, #8]
 8011932:	2300      	movs	r3, #0
 8011934:	7423      	strb	r3, [r4, #16]
 8011936:	61e5      	str	r5, [r4, #28]
 8011938:	f7ff ffee 	bl	8011918 <rmw_get_implementation_identifier>
 801193c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8011940:	f104 0014 	add.w	r0, r4, #20
 8011944:	bd38      	pop	{r3, r4, r5, pc}
 8011946:	bf00      	nop
 8011948:	20010ff4 	.word	0x20010ff4

0801194c <rmw_destroy_guard_condition>:
 801194c:	b508      	push	{r3, lr}
 801194e:	4b08      	ldr	r3, [pc, #32]	@ (8011970 <rmw_destroy_guard_condition+0x24>)
 8011950:	6819      	ldr	r1, [r3, #0]
 8011952:	b911      	cbnz	r1, 801195a <rmw_destroy_guard_condition+0xe>
 8011954:	e00a      	b.n	801196c <rmw_destroy_guard_condition+0x20>
 8011956:	6849      	ldr	r1, [r1, #4]
 8011958:	b141      	cbz	r1, 801196c <rmw_destroy_guard_condition+0x20>
 801195a:	688b      	ldr	r3, [r1, #8]
 801195c:	3314      	adds	r3, #20
 801195e:	4298      	cmp	r0, r3
 8011960:	d1f9      	bne.n	8011956 <rmw_destroy_guard_condition+0xa>
 8011962:	4803      	ldr	r0, [pc, #12]	@ (8011970 <rmw_destroy_guard_condition+0x24>)
 8011964:	f7ff ff62 	bl	801182c <put_memory>
 8011968:	2000      	movs	r0, #0
 801196a:	bd08      	pop	{r3, pc}
 801196c:	2001      	movs	r0, #1
 801196e:	bd08      	pop	{r3, pc}
 8011970:	20010ff4 	.word	0x20010ff4

08011974 <rmw_init_options_init>:
 8011974:	b084      	sub	sp, #16
 8011976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011978:	b083      	sub	sp, #12
 801197a:	ad09      	add	r5, sp, #36	@ 0x24
 801197c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011980:	b130      	cbz	r0, 8011990 <rmw_init_options_init+0x1c>
 8011982:	4604      	mov	r4, r0
 8011984:	4628      	mov	r0, r5
 8011986:	f7f8 fceb 	bl	800a360 <rcutils_allocator_is_valid>
 801198a:	b108      	cbz	r0, 8011990 <rmw_init_options_init+0x1c>
 801198c:	68a6      	ldr	r6, [r4, #8]
 801198e:	b12e      	cbz	r6, 801199c <rmw_init_options_init+0x28>
 8011990:	200b      	movs	r0, #11
 8011992:	b003      	add	sp, #12
 8011994:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011998:	b004      	add	sp, #16
 801199a:	4770      	bx	lr
 801199c:	2200      	movs	r2, #0
 801199e:	2300      	movs	r3, #0
 80119a0:	e9c4 2300 	strd	r2, r3, [r4]
 80119a4:	4b22      	ldr	r3, [pc, #136]	@ (8011a30 <rmw_init_options_init+0xbc>)
 80119a6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8011a40 <rmw_init_options_init+0xcc>
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	60a3      	str	r3, [r4, #8]
 80119ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119b0:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 80119b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119b8:	466f      	mov	r7, sp
 80119ba:	682b      	ldr	r3, [r5, #0]
 80119bc:	f8cc 3000 	str.w	r3, [ip]
 80119c0:	4638      	mov	r0, r7
 80119c2:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 80119c6:	60e6      	str	r6, [r4, #12]
 80119c8:	f7ff fd30 	bl	801142c <rmw_get_default_security_options>
 80119cc:	e897 0003 	ldmia.w	r7, {r0, r1}
 80119d0:	f104 0310 	add.w	r3, r4, #16
 80119d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80119d8:	2203      	movs	r2, #3
 80119da:	4816      	ldr	r0, [pc, #88]	@ (8011a34 <rmw_init_options_init+0xc0>)
 80119dc:	4916      	ldr	r1, [pc, #88]	@ (8011a38 <rmw_init_options_init+0xc4>)
 80119de:	7626      	strb	r6, [r4, #24]
 80119e0:	f7f9 f8b4 	bl	800ab4c <rmw_uxrce_init_init_options_impl_memory>
 80119e4:	4813      	ldr	r0, [pc, #76]	@ (8011a34 <rmw_init_options_init+0xc0>)
 80119e6:	f7ff ff11 	bl	801180c <get_memory>
 80119ea:	b1f0      	cbz	r0, 8011a2a <rmw_init_options_init+0xb6>
 80119ec:	4a13      	ldr	r2, [pc, #76]	@ (8011a3c <rmw_init_options_init+0xc8>)
 80119ee:	6883      	ldr	r3, [r0, #8]
 80119f0:	6851      	ldr	r1, [r2, #4]
 80119f2:	7810      	ldrb	r0, [r2, #0]
 80119f4:	6563      	str	r3, [r4, #84]	@ 0x54
 80119f6:	7418      	strb	r0, [r3, #16]
 80119f8:	6159      	str	r1, [r3, #20]
 80119fa:	68d1      	ldr	r1, [r2, #12]
 80119fc:	61d9      	str	r1, [r3, #28]
 80119fe:	6911      	ldr	r1, [r2, #16]
 8011a00:	6219      	str	r1, [r3, #32]
 8011a02:	6951      	ldr	r1, [r2, #20]
 8011a04:	6892      	ldr	r2, [r2, #8]
 8011a06:	619a      	str	r2, [r3, #24]
 8011a08:	6259      	str	r1, [r3, #36]	@ 0x24
 8011a0a:	f7fb f89d 	bl	800cb48 <uxr_nanos>
 8011a0e:	f003 fc93 	bl	8015338 <srand>
 8011a12:	f003 fcbf 	bl	8015394 <rand>
 8011a16:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011a18:	6298      	str	r0, [r3, #40]	@ 0x28
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	d0f9      	beq.n	8011a12 <rmw_init_options_init+0x9e>
 8011a1e:	2000      	movs	r0, #0
 8011a20:	b003      	add	sp, #12
 8011a22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011a26:	b004      	add	sp, #16
 8011a28:	4770      	bx	lr
 8011a2a:	2001      	movs	r0, #1
 8011a2c:	e7b1      	b.n	8011992 <rmw_init_options_init+0x1e>
 8011a2e:	bf00      	nop
 8011a30:	0801750c 	.word	0x0801750c
 8011a34:	20011004 	.word	0x20011004
 8011a38:	2000c8a0 	.word	0x2000c8a0
 8011a3c:	2000c72c 	.word	0x2000c72c
 8011a40:	08016f54 	.word	0x08016f54

08011a44 <rmw_init_options_copy>:
 8011a44:	b570      	push	{r4, r5, r6, lr}
 8011a46:	b158      	cbz	r0, 8011a60 <rmw_init_options_copy+0x1c>
 8011a48:	460d      	mov	r5, r1
 8011a4a:	b149      	cbz	r1, 8011a60 <rmw_init_options_copy+0x1c>
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	6880      	ldr	r0, [r0, #8]
 8011a50:	b120      	cbz	r0, 8011a5c <rmw_init_options_copy+0x18>
 8011a52:	4b14      	ldr	r3, [pc, #80]	@ (8011aa4 <rmw_init_options_copy+0x60>)
 8011a54:	6819      	ldr	r1, [r3, #0]
 8011a56:	f7ee fbc3 	bl	80001e0 <strcmp>
 8011a5a:	b9e8      	cbnz	r0, 8011a98 <rmw_init_options_copy+0x54>
 8011a5c:	68ae      	ldr	r6, [r5, #8]
 8011a5e:	b116      	cbz	r6, 8011a66 <rmw_init_options_copy+0x22>
 8011a60:	260b      	movs	r6, #11
 8011a62:	4630      	mov	r0, r6
 8011a64:	bd70      	pop	{r4, r5, r6, pc}
 8011a66:	2258      	movs	r2, #88	@ 0x58
 8011a68:	4621      	mov	r1, r4
 8011a6a:	4628      	mov	r0, r5
 8011a6c:	f004 f807 	bl	8015a7e <memcpy>
 8011a70:	480d      	ldr	r0, [pc, #52]	@ (8011aa8 <rmw_init_options_copy+0x64>)
 8011a72:	f7ff fecb 	bl	801180c <get_memory>
 8011a76:	b190      	cbz	r0, 8011a9e <rmw_init_options_copy+0x5a>
 8011a78:	6883      	ldr	r3, [r0, #8]
 8011a7a:	656b      	str	r3, [r5, #84]	@ 0x54
 8011a7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a7e:	f102 0c10 	add.w	ip, r2, #16
 8011a82:	f103 0510 	add.w	r5, r3, #16
 8011a86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011a8c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011a90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011a94:	4630      	mov	r0, r6
 8011a96:	bd70      	pop	{r4, r5, r6, pc}
 8011a98:	260c      	movs	r6, #12
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	bd70      	pop	{r4, r5, r6, pc}
 8011a9e:	2601      	movs	r6, #1
 8011aa0:	e7df      	b.n	8011a62 <rmw_init_options_copy+0x1e>
 8011aa2:	bf00      	nop
 8011aa4:	0801750c 	.word	0x0801750c
 8011aa8:	20011004 	.word	0x20011004

08011aac <rmw_init_options_fini>:
 8011aac:	b368      	cbz	r0, 8011b0a <rmw_init_options_fini+0x5e>
 8011aae:	b510      	push	{r4, lr}
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	b096      	sub	sp, #88	@ 0x58
 8011ab4:	3040      	adds	r0, #64	@ 0x40
 8011ab6:	f7f8 fc53 	bl	800a360 <rcutils_allocator_is_valid>
 8011aba:	b1f0      	cbz	r0, 8011afa <rmw_init_options_fini+0x4e>
 8011abc:	68a0      	ldr	r0, [r4, #8]
 8011abe:	b120      	cbz	r0, 8011aca <rmw_init_options_fini+0x1e>
 8011ac0:	4b13      	ldr	r3, [pc, #76]	@ (8011b10 <rmw_init_options_fini+0x64>)
 8011ac2:	6819      	ldr	r1, [r3, #0]
 8011ac4:	f7ee fb8c 	bl	80001e0 <strcmp>
 8011ac8:	b9e8      	cbnz	r0, 8011b06 <rmw_init_options_fini+0x5a>
 8011aca:	4b12      	ldr	r3, [pc, #72]	@ (8011b14 <rmw_init_options_fini+0x68>)
 8011acc:	6819      	ldr	r1, [r3, #0]
 8011ace:	b1b9      	cbz	r1, 8011b00 <rmw_init_options_fini+0x54>
 8011ad0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011ad2:	e001      	b.n	8011ad8 <rmw_init_options_fini+0x2c>
 8011ad4:	6849      	ldr	r1, [r1, #4]
 8011ad6:	b199      	cbz	r1, 8011b00 <rmw_init_options_fini+0x54>
 8011ad8:	688b      	ldr	r3, [r1, #8]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d1fa      	bne.n	8011ad4 <rmw_init_options_fini+0x28>
 8011ade:	480d      	ldr	r0, [pc, #52]	@ (8011b14 <rmw_init_options_fini+0x68>)
 8011ae0:	f7ff fea4 	bl	801182c <put_memory>
 8011ae4:	4668      	mov	r0, sp
 8011ae6:	f7ff fc8d 	bl	8011404 <rmw_get_zero_initialized_init_options>
 8011aea:	2258      	movs	r2, #88	@ 0x58
 8011aec:	4669      	mov	r1, sp
 8011aee:	4620      	mov	r0, r4
 8011af0:	f003 ffc5 	bl	8015a7e <memcpy>
 8011af4:	2000      	movs	r0, #0
 8011af6:	b016      	add	sp, #88	@ 0x58
 8011af8:	bd10      	pop	{r4, pc}
 8011afa:	200b      	movs	r0, #11
 8011afc:	b016      	add	sp, #88	@ 0x58
 8011afe:	bd10      	pop	{r4, pc}
 8011b00:	2001      	movs	r0, #1
 8011b02:	b016      	add	sp, #88	@ 0x58
 8011b04:	bd10      	pop	{r4, pc}
 8011b06:	200c      	movs	r0, #12
 8011b08:	e7f5      	b.n	8011af6 <rmw_init_options_fini+0x4a>
 8011b0a:	200b      	movs	r0, #11
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop
 8011b10:	0801750c 	.word	0x0801750c
 8011b14:	20011004 	.word	0x20011004

08011b18 <rmw_init>:
 8011b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b1c:	b083      	sub	sp, #12
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	f000 80d3 	beq.w	8011cca <rmw_init+0x1b2>
 8011b24:	460e      	mov	r6, r1
 8011b26:	2900      	cmp	r1, #0
 8011b28:	f000 80cf 	beq.w	8011cca <rmw_init+0x1b2>
 8011b2c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8011b2e:	4605      	mov	r5, r0
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f000 80ca 	beq.w	8011cca <rmw_init+0x1b2>
 8011b36:	4b78      	ldr	r3, [pc, #480]	@ (8011d18 <rmw_init+0x200>)
 8011b38:	6880      	ldr	r0, [r0, #8]
 8011b3a:	681f      	ldr	r7, [r3, #0]
 8011b3c:	b128      	cbz	r0, 8011b4a <rmw_init+0x32>
 8011b3e:	4639      	mov	r1, r7
 8011b40:	f7ee fb4e 	bl	80001e0 <strcmp>
 8011b44:	2800      	cmp	r0, #0
 8011b46:	f040 80ca 	bne.w	8011cde <rmw_init+0x1c6>
 8011b4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b4e:	4c73      	ldr	r4, [pc, #460]	@ (8011d1c <rmw_init+0x204>)
 8011b50:	4973      	ldr	r1, [pc, #460]	@ (8011d20 <rmw_init+0x208>)
 8011b52:	4874      	ldr	r0, [pc, #464]	@ (8011d24 <rmw_init+0x20c>)
 8011b54:	60b7      	str	r7, [r6, #8]
 8011b56:	e9c6 2300 	strd	r2, r3, [r6]
 8011b5a:	68eb      	ldr	r3, [r5, #12]
 8011b5c:	66b3      	str	r3, [r6, #104]	@ 0x68
 8011b5e:	2201      	movs	r2, #1
 8011b60:	f7f8 ff94 	bl	800aa8c <rmw_uxrce_init_session_memory>
 8011b64:	4620      	mov	r0, r4
 8011b66:	4970      	ldr	r1, [pc, #448]	@ (8011d28 <rmw_init+0x210>)
 8011b68:	2204      	movs	r2, #4
 8011b6a:	f7f8 ffcf 	bl	800ab0c <rmw_uxrce_init_static_input_buffer_memory>
 8011b6e:	f04f 0800 	mov.w	r8, #0
 8011b72:	486c      	ldr	r0, [pc, #432]	@ (8011d24 <rmw_init+0x20c>)
 8011b74:	f884 800d 	strb.w	r8, [r4, #13]
 8011b78:	f7ff fe48 	bl	801180c <get_memory>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	f000 80a9 	beq.w	8011cd4 <rmw_init+0x1bc>
 8011b82:	6884      	ldr	r4, [r0, #8]
 8011b84:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8011b86:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8011b88:	f890 c010 	ldrb.w	ip, [r0, #16]
 8011b8c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011b90:	9101      	str	r1, [sp, #4]
 8011b92:	6a00      	ldr	r0, [r0, #32]
 8011b94:	9000      	str	r0, [sp, #0]
 8011b96:	f104 0910 	add.w	r9, r4, #16
 8011b9a:	4661      	mov	r1, ip
 8011b9c:	4648      	mov	r0, r9
 8011b9e:	f001 f9fb 	bl	8012f98 <uxr_set_custom_transport_callbacks>
 8011ba2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8011ba6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011baa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8011bae:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8011bb2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8011bb6:	495d      	ldr	r1, [pc, #372]	@ (8011d2c <rmw_init+0x214>)
 8011bb8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8011bbc:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8011bc0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8011bc4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8011bc8:	4859      	ldr	r0, [pc, #356]	@ (8011d30 <rmw_init+0x218>)
 8011bca:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8011bce:	2201      	movs	r2, #1
 8011bd0:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8011bd2:	f7f8 ff3b 	bl	800aa4c <rmw_uxrce_init_node_memory>
 8011bd6:	4957      	ldr	r1, [pc, #348]	@ (8011d34 <rmw_init+0x21c>)
 8011bd8:	4857      	ldr	r0, [pc, #348]	@ (8011d38 <rmw_init+0x220>)
 8011bda:	2205      	movs	r2, #5
 8011bdc:	f7f8 ff16 	bl	800aa0c <rmw_uxrce_init_subscription_memory>
 8011be0:	4956      	ldr	r1, [pc, #344]	@ (8011d3c <rmw_init+0x224>)
 8011be2:	4857      	ldr	r0, [pc, #348]	@ (8011d40 <rmw_init+0x228>)
 8011be4:	220a      	movs	r2, #10
 8011be6:	f7f8 fef1 	bl	800a9cc <rmw_uxrce_init_publisher_memory>
 8011bea:	4956      	ldr	r1, [pc, #344]	@ (8011d44 <rmw_init+0x22c>)
 8011bec:	4856      	ldr	r0, [pc, #344]	@ (8011d48 <rmw_init+0x230>)
 8011bee:	2201      	movs	r2, #1
 8011bf0:	f7f8 feac 	bl	800a94c <rmw_uxrce_init_service_memory>
 8011bf4:	4955      	ldr	r1, [pc, #340]	@ (8011d4c <rmw_init+0x234>)
 8011bf6:	4856      	ldr	r0, [pc, #344]	@ (8011d50 <rmw_init+0x238>)
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	f7f8 fec7 	bl	800a98c <rmw_uxrce_init_client_memory>
 8011bfe:	4955      	ldr	r1, [pc, #340]	@ (8011d54 <rmw_init+0x23c>)
 8011c00:	4855      	ldr	r0, [pc, #340]	@ (8011d58 <rmw_init+0x240>)
 8011c02:	220f      	movs	r2, #15
 8011c04:	f7f8 ff62 	bl	800aacc <rmw_uxrce_init_topic_memory>
 8011c08:	4954      	ldr	r1, [pc, #336]	@ (8011d5c <rmw_init+0x244>)
 8011c0a:	4855      	ldr	r0, [pc, #340]	@ (8011d60 <rmw_init+0x248>)
 8011c0c:	2203      	movs	r2, #3
 8011c0e:	f7f8 ff9d 	bl	800ab4c <rmw_uxrce_init_init_options_impl_memory>
 8011c12:	4954      	ldr	r1, [pc, #336]	@ (8011d64 <rmw_init+0x24c>)
 8011c14:	4854      	ldr	r0, [pc, #336]	@ (8011d68 <rmw_init+0x250>)
 8011c16:	2204      	movs	r2, #4
 8011c18:	f7f8 ffb8 	bl	800ab8c <rmw_uxrce_init_wait_set_memory>
 8011c1c:	4953      	ldr	r1, [pc, #332]	@ (8011d6c <rmw_init+0x254>)
 8011c1e:	4854      	ldr	r0, [pc, #336]	@ (8011d70 <rmw_init+0x258>)
 8011c20:	2204      	movs	r2, #4
 8011c22:	f7f8 ffd3 	bl	800abcc <rmw_uxrce_init_guard_condition_memory>
 8011c26:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8011c28:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8011c2a:	4642      	mov	r2, r8
 8011c2c:	f000 fdae 	bl	801278c <rmw_uxrce_transport_init>
 8011c30:	4607      	mov	r7, r0
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d158      	bne.n	8011ce8 <rmw_init+0x1d0>
 8011c36:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8011c38:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8011c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c3e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8011c42:	4628      	mov	r0, r5
 8011c44:	f7f9 fde4 	bl	800b810 <uxr_init_session>
 8011c48:	494a      	ldr	r1, [pc, #296]	@ (8011d74 <rmw_init+0x25c>)
 8011c4a:	4622      	mov	r2, r4
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	f7f9 fe03 	bl	800b858 <uxr_set_topic_callback>
 8011c52:	4949      	ldr	r1, [pc, #292]	@ (8011d78 <rmw_init+0x260>)
 8011c54:	463a      	mov	r2, r7
 8011c56:	4628      	mov	r0, r5
 8011c58:	f7f9 fdfa 	bl	800b850 <uxr_set_status_callback>
 8011c5c:	4947      	ldr	r1, [pc, #284]	@ (8011d7c <rmw_init+0x264>)
 8011c5e:	463a      	mov	r2, r7
 8011c60:	4628      	mov	r0, r5
 8011c62:	f7f9 fdfd 	bl	800b860 <uxr_set_request_callback>
 8011c66:	4946      	ldr	r1, [pc, #280]	@ (8011d80 <rmw_init+0x268>)
 8011c68:	463a      	mov	r2, r7
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	f7f9 fdfc 	bl	800b868 <uxr_set_reply_callback>
 8011c70:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011c74:	2304      	movs	r3, #4
 8011c76:	0092      	lsls	r2, r2, #2
 8011c78:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	f7f9 fe31 	bl	800b8e4 <uxr_create_input_reliable_stream>
 8011c82:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011c86:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8011c8a:	0092      	lsls	r2, r2, #2
 8011c8c:	2304      	movs	r3, #4
 8011c8e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8011c92:	4628      	mov	r0, r5
 8011c94:	f7f9 fdfe 	bl	800b894 <uxr_create_output_reliable_stream>
 8011c98:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	f7f9 fe1b 	bl	800b8d8 <uxr_create_input_best_effort_stream>
 8011ca2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8011ca6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8011caa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011cae:	3114      	adds	r1, #20
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	f7f9 fddd 	bl	800b870 <uxr_create_output_best_effort_stream>
 8011cb6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8011cba:	4628      	mov	r0, r5
 8011cbc:	f7fa fb68 	bl	800c390 <uxr_create_session>
 8011cc0:	b1f8      	cbz	r0, 8011d02 <rmw_init+0x1ea>
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	b003      	add	sp, #12
 8011cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cca:	270b      	movs	r7, #11
 8011ccc:	4638      	mov	r0, r7
 8011cce:	b003      	add	sp, #12
 8011cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cd4:	2701      	movs	r7, #1
 8011cd6:	4638      	mov	r0, r7
 8011cd8:	b003      	add	sp, #12
 8011cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cde:	270c      	movs	r7, #12
 8011ce0:	4638      	mov	r0, r7
 8011ce2:	b003      	add	sp, #12
 8011ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ce8:	4648      	mov	r0, r9
 8011cea:	f001 f997 	bl	801301c <uxr_close_custom_transport>
 8011cee:	480d      	ldr	r0, [pc, #52]	@ (8011d24 <rmw_init+0x20c>)
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	f7ff fd9b 	bl	801182c <put_memory>
 8011cf6:	4638      	mov	r0, r7
 8011cf8:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 8011cfc:	b003      	add	sp, #12
 8011cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d02:	4648      	mov	r0, r9
 8011d04:	f001 f98a 	bl	801301c <uxr_close_custom_transport>
 8011d08:	4806      	ldr	r0, [pc, #24]	@ (8011d24 <rmw_init+0x20c>)
 8011d0a:	4621      	mov	r1, r4
 8011d0c:	f7ff fd8e 	bl	801182c <put_memory>
 8011d10:	66f7      	str	r7, [r6, #108]	@ 0x6c
 8011d12:	2701      	movs	r7, #1
 8011d14:	e7d5      	b.n	8011cc2 <rmw_init+0x1aa>
 8011d16:	bf00      	nop
 8011d18:	0801750c 	.word	0x0801750c
 8011d1c:	20011054 	.word	0x20011054
 8011d20:	2000d300 	.word	0x2000d300
 8011d24:	20011044 	.word	0x20011044
 8011d28:	2000e8a8 	.word	0x2000e8a8
 8011d2c:	2000c924 	.word	0x2000c924
 8011d30:	20011014 	.word	0x20011014
 8011d34:	200109a8 	.word	0x200109a8
 8011d38:	20011064 	.word	0x20011064
 8011d3c:	2000c9c8 	.word	0x2000c9c8
 8011d40:	20011024 	.word	0x20011024
 8011d44:	2000d238 	.word	0x2000d238
 8011d48:	20011034 	.word	0x20011034
 8011d4c:	2000c758 	.word	0x2000c758
 8011d50:	2000c748 	.word	0x2000c748
 8011d54:	20010de0 	.word	0x20010de0
 8011d58:	20011074 	.word	0x20011074
 8011d5c:	2000c8a0 	.word	0x2000c8a0
 8011d60:	20011004 	.word	0x20011004
 8011d64:	20010f84 	.word	0x20010f84
 8011d68:	20011084 	.word	0x20011084
 8011d6c:	2000c820 	.word	0x2000c820
 8011d70:	20010ff4 	.word	0x20010ff4
 8011d74:	08014f2d 	.word	0x08014f2d
 8011d78:	08014f25 	.word	0x08014f25
 8011d7c:	08014fc5 	.word	0x08014fc5
 8011d80:	08015061 	.word	0x08015061

08011d84 <rmw_context_fini>:
 8011d84:	4b17      	ldr	r3, [pc, #92]	@ (8011de4 <rmw_context_fini+0x60>)
 8011d86:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8011d88:	b570      	push	{r4, r5, r6, lr}
 8011d8a:	681c      	ldr	r4, [r3, #0]
 8011d8c:	4605      	mov	r5, r0
 8011d8e:	b334      	cbz	r4, 8011dde <rmw_context_fini+0x5a>
 8011d90:	2600      	movs	r6, #0
 8011d92:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011d96:	6902      	ldr	r2, [r0, #16]
 8011d98:	428a      	cmp	r2, r1
 8011d9a:	d018      	beq.n	8011dce <rmw_context_fini+0x4a>
 8011d9c:	2c00      	cmp	r4, #0
 8011d9e:	d1f8      	bne.n	8011d92 <rmw_context_fini+0xe>
 8011da0:	b189      	cbz	r1, 8011dc6 <rmw_context_fini+0x42>
 8011da2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8011da6:	789b      	ldrb	r3, [r3, #2]
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8011dae:	bf14      	ite	ne
 8011db0:	210a      	movne	r1, #10
 8011db2:	2100      	moveq	r1, #0
 8011db4:	f7fa fac4 	bl	800c340 <uxr_delete_session_retries>
 8011db8:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8011dba:	f7f8 ff27 	bl	800ac0c <rmw_uxrce_fini_session_memory>
 8011dbe:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8011dc0:	3010      	adds	r0, #16
 8011dc2:	f001 f92b 	bl	801301c <uxr_close_custom_transport>
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8011dca:	4630      	mov	r0, r6
 8011dcc:	bd70      	pop	{r4, r5, r6, pc}
 8011dce:	3018      	adds	r0, #24
 8011dd0:	f000 f90e 	bl	8011ff0 <rmw_destroy_node>
 8011dd4:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	2c00      	cmp	r4, #0
 8011dda:	d1da      	bne.n	8011d92 <rmw_context_fini+0xe>
 8011ddc:	e7e0      	b.n	8011da0 <rmw_context_fini+0x1c>
 8011dde:	4626      	mov	r6, r4
 8011de0:	e7de      	b.n	8011da0 <rmw_context_fini+0x1c>
 8011de2:	bf00      	nop
 8011de4:	20011014 	.word	0x20011014

08011de8 <create_topic>:
 8011de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dec:	4605      	mov	r5, r0
 8011dee:	b084      	sub	sp, #16
 8011df0:	4822      	ldr	r0, [pc, #136]	@ (8011e7c <create_topic+0x94>)
 8011df2:	460f      	mov	r7, r1
 8011df4:	4616      	mov	r6, r2
 8011df6:	f7ff fd09 	bl	801180c <get_memory>
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	2800      	cmp	r0, #0
 8011dfe:	d039      	beq.n	8011e74 <create_topic+0x8c>
 8011e00:	692b      	ldr	r3, [r5, #16]
 8011e02:	6884      	ldr	r4, [r0, #8]
 8011e04:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8011e84 <create_topic+0x9c>
 8011e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011e0c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8011e10:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8011e14:	1c42      	adds	r2, r0, #1
 8011e16:	2102      	movs	r1, #2
 8011e18:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8011e1c:	f7f9 fc3a 	bl	800b694 <uxr_object_id>
 8011e20:	223c      	movs	r2, #60	@ 0x3c
 8011e22:	6120      	str	r0, [r4, #16]
 8011e24:	4641      	mov	r1, r8
 8011e26:	4638      	mov	r0, r7
 8011e28:	f7f9 f8ce 	bl	800afc8 <generate_topic_name>
 8011e2c:	b1f0      	cbz	r0, 8011e6c <create_topic+0x84>
 8011e2e:	4f14      	ldr	r7, [pc, #80]	@ (8011e80 <create_topic+0x98>)
 8011e30:	4630      	mov	r0, r6
 8011e32:	2264      	movs	r2, #100	@ 0x64
 8011e34:	4639      	mov	r1, r7
 8011e36:	f7f9 f897 	bl	800af68 <generate_type_name>
 8011e3a:	b1b8      	cbz	r0, 8011e6c <create_topic+0x84>
 8011e3c:	6928      	ldr	r0, [r5, #16]
 8011e3e:	2306      	movs	r3, #6
 8011e40:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8011e44:	f8cd 8000 	str.w	r8, [sp]
 8011e48:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8011e4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011e50:	6811      	ldr	r1, [r2, #0]
 8011e52:	696b      	ldr	r3, [r5, #20]
 8011e54:	6922      	ldr	r2, [r4, #16]
 8011e56:	f7f9 fa99 	bl	800b38c <uxr_buffer_create_topic_bin>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	6928      	ldr	r0, [r5, #16]
 8011e5e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011e62:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011e66:	f7f9 f849 	bl	800aefc <run_xrce_session>
 8011e6a:	b918      	cbnz	r0, 8011e74 <create_topic+0x8c>
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f7f8 ff43 	bl	800acf8 <rmw_uxrce_fini_topic_memory>
 8011e72:	2400      	movs	r4, #0
 8011e74:	4620      	mov	r0, r4
 8011e76:	b004      	add	sp, #16
 8011e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e7c:	20011074 	.word	0x20011074
 8011e80:	200111d8 	.word	0x200111d8
 8011e84:	2001119c 	.word	0x2001119c

08011e88 <destroy_topic>:
 8011e88:	b538      	push	{r3, r4, r5, lr}
 8011e8a:	6985      	ldr	r5, [r0, #24]
 8011e8c:	b1d5      	cbz	r5, 8011ec4 <destroy_topic+0x3c>
 8011e8e:	4604      	mov	r4, r0
 8011e90:	6928      	ldr	r0, [r5, #16]
 8011e92:	6922      	ldr	r2, [r4, #16]
 8011e94:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011e98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011e9c:	6819      	ldr	r1, [r3, #0]
 8011e9e:	f7f9 f9f7 	bl	800b290 <uxr_buffer_delete_entity>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	6928      	ldr	r0, [r5, #16]
 8011ea6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011eaa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011eae:	f7f9 f825 	bl	800aefc <run_xrce_session>
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	bf14      	ite	ne
 8011eb8:	2400      	movne	r4, #0
 8011eba:	2402      	moveq	r4, #2
 8011ebc:	f7f8 ff1c 	bl	800acf8 <rmw_uxrce_fini_topic_memory>
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	bd38      	pop	{r3, r4, r5, pc}
 8011ec4:	2401      	movs	r4, #1
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	bd38      	pop	{r3, r4, r5, pc}
 8011eca:	bf00      	nop

08011ecc <create_node>:
 8011ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ed0:	b083      	sub	sp, #12
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d05f      	beq.n	8011f96 <create_node+0xca>
 8011ed6:	4606      	mov	r6, r0
 8011ed8:	4835      	ldr	r0, [pc, #212]	@ (8011fb0 <create_node+0xe4>)
 8011eda:	460f      	mov	r7, r1
 8011edc:	4690      	mov	r8, r2
 8011ede:	461d      	mov	r5, r3
 8011ee0:	f7ff fc94 	bl	801180c <get_memory>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	d056      	beq.n	8011f96 <create_node+0xca>
 8011ee8:	6884      	ldr	r4, [r0, #8]
 8011eea:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8011eec:	6123      	str	r3, [r4, #16]
 8011eee:	f7ff fd13 	bl	8011918 <rmw_get_implementation_identifier>
 8011ef2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8011ef6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8011efa:	f8c4 9020 	str.w	r9, [r4, #32]
 8011efe:	4630      	mov	r0, r6
 8011f00:	f7ee f9ce 	bl	80002a0 <strlen>
 8011f04:	1c42      	adds	r2, r0, #1
 8011f06:	2a3c      	cmp	r2, #60	@ 0x3c
 8011f08:	f104 0518 	add.w	r5, r4, #24
 8011f0c:	d840      	bhi.n	8011f90 <create_node+0xc4>
 8011f0e:	4648      	mov	r0, r9
 8011f10:	4631      	mov	r1, r6
 8011f12:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8011f16:	f003 fdb2 	bl	8015a7e <memcpy>
 8011f1a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8011f1e:	4638      	mov	r0, r7
 8011f20:	f7ee f9be 	bl	80002a0 <strlen>
 8011f24:	1c42      	adds	r2, r0, #1
 8011f26:	2a3c      	cmp	r2, #60	@ 0x3c
 8011f28:	d832      	bhi.n	8011f90 <create_node+0xc4>
 8011f2a:	4639      	mov	r1, r7
 8011f2c:	4648      	mov	r0, r9
 8011f2e:	f003 fda6 	bl	8015a7e <memcpy>
 8011f32:	6923      	ldr	r3, [r4, #16]
 8011f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011f38:	2101      	movs	r1, #1
 8011f3a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8011f3e:	1842      	adds	r2, r0, r1
 8011f40:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8011f44:	f7f9 fba6 	bl	800b694 <uxr_object_id>
 8011f48:	6160      	str	r0, [r4, #20]
 8011f4a:	783b      	ldrb	r3, [r7, #0]
 8011f4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8011f4e:	d127      	bne.n	8011fa0 <create_node+0xd4>
 8011f50:	787b      	ldrb	r3, [r7, #1]
 8011f52:	bb2b      	cbnz	r3, 8011fa0 <create_node+0xd4>
 8011f54:	4a17      	ldr	r2, [pc, #92]	@ (8011fb4 <create_node+0xe8>)
 8011f56:	4818      	ldr	r0, [pc, #96]	@ (8011fb8 <create_node+0xec>)
 8011f58:	4633      	mov	r3, r6
 8011f5a:	213c      	movs	r1, #60	@ 0x3c
 8011f5c:	f003 fbda 	bl	8015714 <sniprintf>
 8011f60:	6920      	ldr	r0, [r4, #16]
 8011f62:	4915      	ldr	r1, [pc, #84]	@ (8011fb8 <create_node+0xec>)
 8011f64:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8011f68:	9100      	str	r1, [sp, #0]
 8011f6a:	2106      	movs	r1, #6
 8011f6c:	9101      	str	r1, [sp, #4]
 8011f6e:	6811      	ldr	r1, [r2, #0]
 8011f70:	6962      	ldr	r2, [r4, #20]
 8011f72:	fa1f f388 	uxth.w	r3, r8
 8011f76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011f7a:	f7f9 f9d5 	bl	800b328 <uxr_buffer_create_participant_bin>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	6920      	ldr	r0, [r4, #16]
 8011f82:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011f86:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011f8a:	f7f8 ffb7 	bl	800aefc <run_xrce_session>
 8011f8e:	b918      	cbnz	r0, 8011f98 <create_node+0xcc>
 8011f90:	4628      	mov	r0, r5
 8011f92:	f7f8 fe41 	bl	800ac18 <rmw_uxrce_fini_node_memory>
 8011f96:	2500      	movs	r5, #0
 8011f98:	4628      	mov	r0, r5
 8011f9a:	b003      	add	sp, #12
 8011f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fa0:	4a06      	ldr	r2, [pc, #24]	@ (8011fbc <create_node+0xf0>)
 8011fa2:	9600      	str	r6, [sp, #0]
 8011fa4:	463b      	mov	r3, r7
 8011fa6:	213c      	movs	r1, #60	@ 0x3c
 8011fa8:	4803      	ldr	r0, [pc, #12]	@ (8011fb8 <create_node+0xec>)
 8011faa:	f003 fbb3 	bl	8015714 <sniprintf>
 8011fae:	e7d7      	b.n	8011f60 <create_node+0x94>
 8011fb0:	20011014 	.word	0x20011014
 8011fb4:	08016d28 	.word	0x08016d28
 8011fb8:	2001123c 	.word	0x2001123c
 8011fbc:	08016f5c 	.word	0x08016f5c

08011fc0 <rmw_create_node>:
 8011fc0:	b199      	cbz	r1, 8011fea <rmw_create_node+0x2a>
 8011fc2:	780b      	ldrb	r3, [r1, #0]
 8011fc4:	468c      	mov	ip, r1
 8011fc6:	b183      	cbz	r3, 8011fea <rmw_create_node+0x2a>
 8011fc8:	b410      	push	{r4}
 8011fca:	4614      	mov	r4, r2
 8011fcc:	b14a      	cbz	r2, 8011fe2 <rmw_create_node+0x22>
 8011fce:	7813      	ldrb	r3, [r2, #0]
 8011fd0:	b13b      	cbz	r3, 8011fe2 <rmw_create_node+0x22>
 8011fd2:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	4660      	mov	r0, ip
 8011fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fde:	f7ff bf75 	b.w	8011ecc <create_node>
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fe8:	4770      	bx	lr
 8011fea:	2000      	movs	r0, #0
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop

08011ff0 <rmw_destroy_node>:
 8011ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff2:	b328      	cbz	r0, 8012040 <rmw_destroy_node+0x50>
 8011ff4:	4607      	mov	r7, r0
 8011ff6:	6800      	ldr	r0, [r0, #0]
 8011ff8:	b120      	cbz	r0, 8012004 <rmw_destroy_node+0x14>
 8011ffa:	4b36      	ldr	r3, [pc, #216]	@ (80120d4 <rmw_destroy_node+0xe4>)
 8011ffc:	6819      	ldr	r1, [r3, #0]
 8011ffe:	f7ee f8ef 	bl	80001e0 <strcmp>
 8012002:	b9e8      	cbnz	r0, 8012040 <rmw_destroy_node+0x50>
 8012004:	687d      	ldr	r5, [r7, #4]
 8012006:	b1dd      	cbz	r5, 8012040 <rmw_destroy_node+0x50>
 8012008:	4b33      	ldr	r3, [pc, #204]	@ (80120d8 <rmw_destroy_node+0xe8>)
 801200a:	681c      	ldr	r4, [r3, #0]
 801200c:	2c00      	cmp	r4, #0
 801200e:	d05f      	beq.n	80120d0 <rmw_destroy_node+0xe0>
 8012010:	2600      	movs	r6, #0
 8012012:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012016:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801201a:	429d      	cmp	r5, r3
 801201c:	d013      	beq.n	8012046 <rmw_destroy_node+0x56>
 801201e:	2c00      	cmp	r4, #0
 8012020:	d1f7      	bne.n	8012012 <rmw_destroy_node+0x22>
 8012022:	4b2e      	ldr	r3, [pc, #184]	@ (80120dc <rmw_destroy_node+0xec>)
 8012024:	681c      	ldr	r4, [r3, #0]
 8012026:	b1c4      	cbz	r4, 801205a <rmw_destroy_node+0x6a>
 8012028:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801202c:	6a0b      	ldr	r3, [r1, #32]
 801202e:	429d      	cmp	r5, r3
 8012030:	d1f9      	bne.n	8012026 <rmw_destroy_node+0x36>
 8012032:	317c      	adds	r1, #124	@ 0x7c
 8012034:	4638      	mov	r0, r7
 8012036:	f000 fae5 	bl	8012604 <rmw_destroy_subscription>
 801203a:	2801      	cmp	r0, #1
 801203c:	4606      	mov	r6, r0
 801203e:	d1f2      	bne.n	8012026 <rmw_destroy_node+0x36>
 8012040:	2601      	movs	r6, #1
 8012042:	4630      	mov	r0, r6
 8012044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012046:	3184      	adds	r1, #132	@ 0x84
 8012048:	4638      	mov	r0, r7
 801204a:	f7f8 fc2d 	bl	800a8a8 <rmw_destroy_publisher>
 801204e:	2801      	cmp	r0, #1
 8012050:	4606      	mov	r6, r0
 8012052:	d0f5      	beq.n	8012040 <rmw_destroy_node+0x50>
 8012054:	2c00      	cmp	r4, #0
 8012056:	d1dc      	bne.n	8012012 <rmw_destroy_node+0x22>
 8012058:	e7e3      	b.n	8012022 <rmw_destroy_node+0x32>
 801205a:	4b21      	ldr	r3, [pc, #132]	@ (80120e0 <rmw_destroy_node+0xf0>)
 801205c:	681c      	ldr	r4, [r3, #0]
 801205e:	b16c      	cbz	r4, 801207c <rmw_destroy_node+0x8c>
 8012060:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012064:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8012066:	429d      	cmp	r5, r3
 8012068:	d1f9      	bne.n	801205e <rmw_destroy_node+0x6e>
 801206a:	317c      	adds	r1, #124	@ 0x7c
 801206c:	4638      	mov	r0, r7
 801206e:	f000 f993 	bl	8012398 <rmw_destroy_service>
 8012072:	2801      	cmp	r0, #1
 8012074:	4606      	mov	r6, r0
 8012076:	d0e3      	beq.n	8012040 <rmw_destroy_node+0x50>
 8012078:	2c00      	cmp	r4, #0
 801207a:	d1f1      	bne.n	8012060 <rmw_destroy_node+0x70>
 801207c:	4b19      	ldr	r3, [pc, #100]	@ (80120e4 <rmw_destroy_node+0xf4>)
 801207e:	681c      	ldr	r4, [r3, #0]
 8012080:	b16c      	cbz	r4, 801209e <rmw_destroy_node+0xae>
 8012082:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012086:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8012088:	429d      	cmp	r5, r3
 801208a:	d1f9      	bne.n	8012080 <rmw_destroy_node+0x90>
 801208c:	317c      	adds	r1, #124	@ 0x7c
 801208e:	4638      	mov	r0, r7
 8012090:	f7ff fbe0 	bl	8011854 <rmw_destroy_client>
 8012094:	2801      	cmp	r0, #1
 8012096:	4606      	mov	r6, r0
 8012098:	d0d2      	beq.n	8012040 <rmw_destroy_node+0x50>
 801209a:	2c00      	cmp	r4, #0
 801209c:	d1f1      	bne.n	8012082 <rmw_destroy_node+0x92>
 801209e:	6928      	ldr	r0, [r5, #16]
 80120a0:	696a      	ldr	r2, [r5, #20]
 80120a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80120a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80120aa:	6819      	ldr	r1, [r3, #0]
 80120ac:	f7f9 f8f0 	bl	800b290 <uxr_buffer_delete_entity>
 80120b0:	4602      	mov	r2, r0
 80120b2:	6928      	ldr	r0, [r5, #16]
 80120b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80120b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80120bc:	f7f8 ff1e 	bl	800aefc <run_xrce_session>
 80120c0:	2800      	cmp	r0, #0
 80120c2:	bf08      	it	eq
 80120c4:	2602      	moveq	r6, #2
 80120c6:	4638      	mov	r0, r7
 80120c8:	f7f8 fda6 	bl	800ac18 <rmw_uxrce_fini_node_memory>
 80120cc:	4630      	mov	r0, r6
 80120ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120d0:	4626      	mov	r6, r4
 80120d2:	e7a6      	b.n	8012022 <rmw_destroy_node+0x32>
 80120d4:	0801750c 	.word	0x0801750c
 80120d8:	20011024 	.word	0x20011024
 80120dc:	20011064 	.word	0x20011064
 80120e0:	20011034 	.word	0x20011034
 80120e4:	2000c748 	.word	0x2000c748

080120e8 <rmw_node_get_graph_guard_condition>:
 80120e8:	6843      	ldr	r3, [r0, #4]
 80120ea:	6918      	ldr	r0, [r3, #16]
 80120ec:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80120f0:	4770      	bx	lr
 80120f2:	bf00      	nop

080120f4 <rmw_send_request>:
 80120f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80120f8:	4604      	mov	r4, r0
 80120fa:	6800      	ldr	r0, [r0, #0]
 80120fc:	b08b      	sub	sp, #44	@ 0x2c
 80120fe:	460e      	mov	r6, r1
 8012100:	4615      	mov	r5, r2
 8012102:	b128      	cbz	r0, 8012110 <rmw_send_request+0x1c>
 8012104:	4b21      	ldr	r3, [pc, #132]	@ (801218c <rmw_send_request+0x98>)
 8012106:	6819      	ldr	r1, [r3, #0]
 8012108:	f7ee f86a 	bl	80001e0 <strcmp>
 801210c:	2800      	cmp	r0, #0
 801210e:	d139      	bne.n	8012184 <rmw_send_request+0x90>
 8012110:	6864      	ldr	r4, [r4, #4]
 8012112:	6963      	ldr	r3, [r4, #20]
 8012114:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8012118:	689b      	ldr	r3, [r3, #8]
 801211a:	4798      	blx	r3
 801211c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8012120:	4630      	mov	r0, r6
 8012122:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012126:	4798      	blx	r3
 8012128:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801212c:	9000      	str	r0, [sp, #0]
 801212e:	6922      	ldr	r2, [r4, #16]
 8012130:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8012132:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012136:	ab02      	add	r3, sp, #8
 8012138:	f7fa fda6 	bl	800cc88 <uxr_prepare_output_stream>
 801213c:	2700      	movs	r7, #0
 801213e:	6028      	str	r0, [r5, #0]
 8012140:	606f      	str	r7, [r5, #4]
 8012142:	b198      	cbz	r0, 801216c <rmw_send_request+0x78>
 8012144:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012148:	a902      	add	r1, sp, #8
 801214a:	4630      	mov	r0, r6
 801214c:	4798      	blx	r3
 801214e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8012152:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012156:	2b01      	cmp	r3, #1
 8012158:	d00c      	beq.n	8012174 <rmw_send_request+0x80>
 801215a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801215c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012160:	f7f9 ffa6 	bl	800c0b0 <uxr_run_session_until_confirm_delivery>
 8012164:	4638      	mov	r0, r7
 8012166:	b00b      	add	sp, #44	@ 0x2c
 8012168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801216c:	2001      	movs	r0, #1
 801216e:	b00b      	add	sp, #44	@ 0x2c
 8012170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012174:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012178:	f7f9 fbda 	bl	800b930 <uxr_flash_output_streams>
 801217c:	4638      	mov	r0, r7
 801217e:	b00b      	add	sp, #44	@ 0x2c
 8012180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012184:	200c      	movs	r0, #12
 8012186:	b00b      	add	sp, #44	@ 0x2c
 8012188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801218c:	0801750c 	.word	0x0801750c

08012190 <rmw_take_request>:
 8012190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012194:	4605      	mov	r5, r0
 8012196:	6800      	ldr	r0, [r0, #0]
 8012198:	b089      	sub	sp, #36	@ 0x24
 801219a:	460c      	mov	r4, r1
 801219c:	4690      	mov	r8, r2
 801219e:	461e      	mov	r6, r3
 80121a0:	b128      	cbz	r0, 80121ae <rmw_take_request+0x1e>
 80121a2:	4b28      	ldr	r3, [pc, #160]	@ (8012244 <rmw_take_request+0xb4>)
 80121a4:	6819      	ldr	r1, [r3, #0]
 80121a6:	f7ee f81b 	bl	80001e0 <strcmp>
 80121aa:	2800      	cmp	r0, #0
 80121ac:	d146      	bne.n	801223c <rmw_take_request+0xac>
 80121ae:	b10e      	cbz	r6, 80121b4 <rmw_take_request+0x24>
 80121b0:	2300      	movs	r3, #0
 80121b2:	7033      	strb	r3, [r6, #0]
 80121b4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80121b8:	f7f8 fe22 	bl	800ae00 <rmw_uxrce_clean_expired_static_input_buffer>
 80121bc:	4648      	mov	r0, r9
 80121be:	f7f8 fdf7 	bl	800adb0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80121c2:	4607      	mov	r7, r0
 80121c4:	b3b0      	cbz	r0, 8012234 <rmw_take_request+0xa4>
 80121c6:	6885      	ldr	r5, [r0, #8]
 80121c8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80121cc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80121d0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80121d4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80121d8:	7423      	strb	r3, [r4, #16]
 80121da:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80121de:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80121e2:	74e2      	strb	r2, [r4, #19]
 80121e4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80121e8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80121ec:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80121f0:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80121f4:	61e1      	str	r1, [r4, #28]
 80121f6:	6162      	str	r2, [r4, #20]
 80121f8:	61a3      	str	r3, [r4, #24]
 80121fa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80121fe:	689b      	ldr	r3, [r3, #8]
 8012200:	4798      	blx	r3
 8012202:	6844      	ldr	r4, [r0, #4]
 8012204:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8012208:	f105 0110 	add.w	r1, r5, #16
 801220c:	4668      	mov	r0, sp
 801220e:	f7f6 fd07 	bl	8008c20 <ucdr_init_buffer>
 8012212:	68e3      	ldr	r3, [r4, #12]
 8012214:	4641      	mov	r1, r8
 8012216:	4668      	mov	r0, sp
 8012218:	4798      	blx	r3
 801221a:	4639      	mov	r1, r7
 801221c:	4604      	mov	r4, r0
 801221e:	480a      	ldr	r0, [pc, #40]	@ (8012248 <rmw_take_request+0xb8>)
 8012220:	f7ff fb04 	bl	801182c <put_memory>
 8012224:	b106      	cbz	r6, 8012228 <rmw_take_request+0x98>
 8012226:	7034      	strb	r4, [r6, #0]
 8012228:	f084 0001 	eor.w	r0, r4, #1
 801222c:	b2c0      	uxtb	r0, r0
 801222e:	b009      	add	sp, #36	@ 0x24
 8012230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012234:	2001      	movs	r0, #1
 8012236:	b009      	add	sp, #36	@ 0x24
 8012238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801223c:	200c      	movs	r0, #12
 801223e:	b009      	add	sp, #36	@ 0x24
 8012240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012244:	0801750c 	.word	0x0801750c
 8012248:	20011054 	.word	0x20011054

0801224c <rmw_send_response>:
 801224c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801224e:	4605      	mov	r5, r0
 8012250:	6800      	ldr	r0, [r0, #0]
 8012252:	b091      	sub	sp, #68	@ 0x44
 8012254:	460c      	mov	r4, r1
 8012256:	4616      	mov	r6, r2
 8012258:	b128      	cbz	r0, 8012266 <rmw_send_response+0x1a>
 801225a:	4b29      	ldr	r3, [pc, #164]	@ (8012300 <rmw_send_response+0xb4>)
 801225c:	6819      	ldr	r1, [r3, #0]
 801225e:	f7ed ffbf 	bl	80001e0 <strcmp>
 8012262:	2800      	cmp	r0, #0
 8012264:	d141      	bne.n	80122ea <rmw_send_response+0x9e>
 8012266:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801226a:	9306      	str	r3, [sp, #24]
 801226c:	4623      	mov	r3, r4
 801226e:	9207      	str	r2, [sp, #28]
 8012270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012274:	686d      	ldr	r5, [r5, #4]
 8012276:	789b      	ldrb	r3, [r3, #2]
 8012278:	68a1      	ldr	r1, [r4, #8]
 801227a:	f88d 2017 	strb.w	r2, [sp, #23]
 801227e:	f88d 3016 	strb.w	r3, [sp, #22]
 8012282:	68e2      	ldr	r2, [r4, #12]
 8012284:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8012288:	6860      	ldr	r0, [r4, #4]
 801228a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801228e:	ab02      	add	r3, sp, #8
 8012290:	c307      	stmia	r3!, {r0, r1, r2}
 8012292:	696b      	ldr	r3, [r5, #20]
 8012294:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	4798      	blx	r3
 801229a:	6844      	ldr	r4, [r0, #4]
 801229c:	4630      	mov	r0, r6
 801229e:	6923      	ldr	r3, [r4, #16]
 80122a0:	4798      	blx	r3
 80122a2:	f100 0318 	add.w	r3, r0, #24
 80122a6:	6938      	ldr	r0, [r7, #16]
 80122a8:	9300      	str	r3, [sp, #0]
 80122aa:	692a      	ldr	r2, [r5, #16]
 80122ac:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80122ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80122b2:	ab08      	add	r3, sp, #32
 80122b4:	f7fa fce8 	bl	800cc88 <uxr_prepare_output_stream>
 80122b8:	b910      	cbnz	r0, 80122c0 <rmw_send_response+0x74>
 80122ba:	2001      	movs	r0, #1
 80122bc:	b011      	add	sp, #68	@ 0x44
 80122be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122c0:	a902      	add	r1, sp, #8
 80122c2:	a808      	add	r0, sp, #32
 80122c4:	f7fb fe18 	bl	800def8 <uxr_serialize_SampleIdentity>
 80122c8:	68a3      	ldr	r3, [r4, #8]
 80122ca:	a908      	add	r1, sp, #32
 80122cc:	4630      	mov	r0, r6
 80122ce:	4798      	blx	r3
 80122d0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80122d4:	6938      	ldr	r0, [r7, #16]
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d00a      	beq.n	80122f0 <rmw_send_response+0xa4>
 80122da:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80122dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80122e0:	f7f9 fee6 	bl	800c0b0 <uxr_run_session_until_confirm_delivery>
 80122e4:	2000      	movs	r0, #0
 80122e6:	b011      	add	sp, #68	@ 0x44
 80122e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122ea:	200c      	movs	r0, #12
 80122ec:	b011      	add	sp, #68	@ 0x44
 80122ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80122f4:	f7f9 fb1c 	bl	800b930 <uxr_flash_output_streams>
 80122f8:	2000      	movs	r0, #0
 80122fa:	b011      	add	sp, #68	@ 0x44
 80122fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122fe:	bf00      	nop
 8012300:	0801750c 	.word	0x0801750c

08012304 <rmw_take_response>:
 8012304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012308:	4604      	mov	r4, r0
 801230a:	6800      	ldr	r0, [r0, #0]
 801230c:	b088      	sub	sp, #32
 801230e:	4688      	mov	r8, r1
 8012310:	4617      	mov	r7, r2
 8012312:	461d      	mov	r5, r3
 8012314:	b120      	cbz	r0, 8012320 <rmw_take_response+0x1c>
 8012316:	4b1e      	ldr	r3, [pc, #120]	@ (8012390 <rmw_take_response+0x8c>)
 8012318:	6819      	ldr	r1, [r3, #0]
 801231a:	f7ed ff61 	bl	80001e0 <strcmp>
 801231e:	bb78      	cbnz	r0, 8012380 <rmw_take_response+0x7c>
 8012320:	b10d      	cbz	r5, 8012326 <rmw_take_response+0x22>
 8012322:	2300      	movs	r3, #0
 8012324:	702b      	strb	r3, [r5, #0]
 8012326:	6864      	ldr	r4, [r4, #4]
 8012328:	f7f8 fd6a 	bl	800ae00 <rmw_uxrce_clean_expired_static_input_buffer>
 801232c:	4620      	mov	r0, r4
 801232e:	f7f8 fd3f 	bl	800adb0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012332:	4606      	mov	r6, r0
 8012334:	b340      	cbz	r0, 8012388 <rmw_take_response+0x84>
 8012336:	6963      	ldr	r3, [r4, #20]
 8012338:	6884      	ldr	r4, [r0, #8]
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8012340:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8012344:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8012348:	4798      	blx	r3
 801234a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801234e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8012352:	f104 0110 	add.w	r1, r4, #16
 8012356:	4668      	mov	r0, sp
 8012358:	f7f6 fc62 	bl	8008c20 <ucdr_init_buffer>
 801235c:	4639      	mov	r1, r7
 801235e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012362:	4668      	mov	r0, sp
 8012364:	4798      	blx	r3
 8012366:	4631      	mov	r1, r6
 8012368:	4604      	mov	r4, r0
 801236a:	480a      	ldr	r0, [pc, #40]	@ (8012394 <rmw_take_response+0x90>)
 801236c:	f7ff fa5e 	bl	801182c <put_memory>
 8012370:	b105      	cbz	r5, 8012374 <rmw_take_response+0x70>
 8012372:	702c      	strb	r4, [r5, #0]
 8012374:	f084 0001 	eor.w	r0, r4, #1
 8012378:	b2c0      	uxtb	r0, r0
 801237a:	b008      	add	sp, #32
 801237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012380:	200c      	movs	r0, #12
 8012382:	b008      	add	sp, #32
 8012384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012388:	2001      	movs	r0, #1
 801238a:	b008      	add	sp, #32
 801238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012390:	0801750c 	.word	0x0801750c
 8012394:	20011054 	.word	0x20011054

08012398 <rmw_destroy_service>:
 8012398:	b570      	push	{r4, r5, r6, lr}
 801239a:	b128      	cbz	r0, 80123a8 <rmw_destroy_service+0x10>
 801239c:	4604      	mov	r4, r0
 801239e:	6800      	ldr	r0, [r0, #0]
 80123a0:	460d      	mov	r5, r1
 80123a2:	f7f8 fe2b 	bl	800affc <is_uxrce_rmw_identifier_valid>
 80123a6:	b910      	cbnz	r0, 80123ae <rmw_destroy_service+0x16>
 80123a8:	2401      	movs	r4, #1
 80123aa:	4620      	mov	r0, r4
 80123ac:	bd70      	pop	{r4, r5, r6, pc}
 80123ae:	6863      	ldr	r3, [r4, #4]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d0f9      	beq.n	80123a8 <rmw_destroy_service+0x10>
 80123b4:	2d00      	cmp	r5, #0
 80123b6:	d0f7      	beq.n	80123a8 <rmw_destroy_service+0x10>
 80123b8:	6828      	ldr	r0, [r5, #0]
 80123ba:	f7f8 fe1f 	bl	800affc <is_uxrce_rmw_identifier_valid>
 80123be:	2800      	cmp	r0, #0
 80123c0:	d0f2      	beq.n	80123a8 <rmw_destroy_service+0x10>
 80123c2:	686e      	ldr	r6, [r5, #4]
 80123c4:	2e00      	cmp	r6, #0
 80123c6:	d0ef      	beq.n	80123a8 <rmw_destroy_service+0x10>
 80123c8:	6864      	ldr	r4, [r4, #4]
 80123ca:	6932      	ldr	r2, [r6, #16]
 80123cc:	6920      	ldr	r0, [r4, #16]
 80123ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80123d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80123d6:	6819      	ldr	r1, [r3, #0]
 80123d8:	f001 fba6 	bl	8013b28 <uxr_buffer_cancel_data>
 80123dc:	4602      	mov	r2, r0
 80123de:	6920      	ldr	r0, [r4, #16]
 80123e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80123e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80123e8:	f7f8 fd88 	bl	800aefc <run_xrce_session>
 80123ec:	6920      	ldr	r0, [r4, #16]
 80123ee:	6932      	ldr	r2, [r6, #16]
 80123f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80123f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80123f8:	6819      	ldr	r1, [r3, #0]
 80123fa:	f7f8 ff49 	bl	800b290 <uxr_buffer_delete_entity>
 80123fe:	4602      	mov	r2, r0
 8012400:	6920      	ldr	r0, [r4, #16]
 8012402:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012406:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801240a:	f7f8 fd77 	bl	800aefc <run_xrce_session>
 801240e:	2800      	cmp	r0, #0
 8012410:	4628      	mov	r0, r5
 8012412:	bf14      	ite	ne
 8012414:	2400      	movne	r4, #0
 8012416:	2402      	moveq	r4, #2
 8012418:	f7f8 fc42 	bl	800aca0 <rmw_uxrce_fini_service_memory>
 801241c:	e7c5      	b.n	80123aa <rmw_destroy_service+0x12>
 801241e:	bf00      	nop

08012420 <rmw_create_subscription>:
 8012420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012424:	b08d      	sub	sp, #52	@ 0x34
 8012426:	2800      	cmp	r0, #0
 8012428:	f000 80d1 	beq.w	80125ce <rmw_create_subscription+0x1ae>
 801242c:	460e      	mov	r6, r1
 801242e:	2900      	cmp	r1, #0
 8012430:	f000 80cd 	beq.w	80125ce <rmw_create_subscription+0x1ae>
 8012434:	4604      	mov	r4, r0
 8012436:	6800      	ldr	r0, [r0, #0]
 8012438:	4615      	mov	r5, r2
 801243a:	4698      	mov	r8, r3
 801243c:	f7f8 fdde 	bl	800affc <is_uxrce_rmw_identifier_valid>
 8012440:	2800      	cmp	r0, #0
 8012442:	f000 80c4 	beq.w	80125ce <rmw_create_subscription+0x1ae>
 8012446:	2d00      	cmp	r5, #0
 8012448:	f000 80c1 	beq.w	80125ce <rmw_create_subscription+0x1ae>
 801244c:	782b      	ldrb	r3, [r5, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	f000 80bd 	beq.w	80125ce <rmw_create_subscription+0x1ae>
 8012454:	f1b8 0f00 	cmp.w	r8, #0
 8012458:	f000 80b9 	beq.w	80125ce <rmw_create_subscription+0x1ae>
 801245c:	485e      	ldr	r0, [pc, #376]	@ (80125d8 <rmw_create_subscription+0x1b8>)
 801245e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012462:	f7ff f9d3 	bl	801180c <get_memory>
 8012466:	4604      	mov	r4, r0
 8012468:	2800      	cmp	r0, #0
 801246a:	f000 80b1 	beq.w	80125d0 <rmw_create_subscription+0x1b0>
 801246e:	6887      	ldr	r7, [r0, #8]
 8012470:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8012474:	f7ff fa50 	bl	8011918 <rmw_get_implementation_identifier>
 8012478:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 801247c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801247e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8012482:	4628      	mov	r0, r5
 8012484:	f7ed ff0c 	bl	80002a0 <strlen>
 8012488:	3001      	adds	r0, #1
 801248a:	283c      	cmp	r0, #60	@ 0x3c
 801248c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8012490:	f200 8096 	bhi.w	80125c0 <rmw_create_subscription+0x1a0>
 8012494:	4a51      	ldr	r2, [pc, #324]	@ (80125dc <rmw_create_subscription+0x1bc>)
 8012496:	462b      	mov	r3, r5
 8012498:	213c      	movs	r1, #60	@ 0x3c
 801249a:	4650      	mov	r0, sl
 801249c:	f003 f93a 	bl	8015714 <sniprintf>
 80124a0:	4641      	mov	r1, r8
 80124a2:	f8c7 9020 	str.w	r9, [r7, #32]
 80124a6:	2250      	movs	r2, #80	@ 0x50
 80124a8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80124ac:	f003 fae7 	bl	8015a7e <memcpy>
 80124b0:	494b      	ldr	r1, [pc, #300]	@ (80125e0 <rmw_create_subscription+0x1c0>)
 80124b2:	4630      	mov	r0, r6
 80124b4:	f7f8 fdb0 	bl	800b018 <get_message_typesupport_handle>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	f000 8081 	beq.w	80125c0 <rmw_create_subscription+0x1a0>
 80124be:	6842      	ldr	r2, [r0, #4]
 80124c0:	61ba      	str	r2, [r7, #24]
 80124c2:	2a00      	cmp	r2, #0
 80124c4:	d07c      	beq.n	80125c0 <rmw_create_subscription+0x1a0>
 80124c6:	4629      	mov	r1, r5
 80124c8:	4643      	mov	r3, r8
 80124ca:	4648      	mov	r0, r9
 80124cc:	f7ff fc8c 	bl	8011de8 <create_topic>
 80124d0:	61f8      	str	r0, [r7, #28]
 80124d2:	2800      	cmp	r0, #0
 80124d4:	d078      	beq.n	80125c8 <rmw_create_subscription+0x1a8>
 80124d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80124de:	2104      	movs	r1, #4
 80124e0:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80124e4:	1c42      	adds	r2, r0, #1
 80124e6:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80124ea:	f7f9 f8d3 	bl	800b694 <uxr_object_id>
 80124ee:	6138      	str	r0, [r7, #16]
 80124f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80124f4:	2506      	movs	r5, #6
 80124f6:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80124fa:	9500      	str	r5, [sp, #0]
 80124fc:	6819      	ldr	r1, [r3, #0]
 80124fe:	693a      	ldr	r2, [r7, #16]
 8012500:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012504:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012508:	f7f8 ffa6 	bl	800b458 <uxr_buffer_create_subscriber_bin>
 801250c:	4602      	mov	r2, r0
 801250e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012512:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012516:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801251a:	f7f8 fcef 	bl	800aefc <run_xrce_session>
 801251e:	2800      	cmp	r0, #0
 8012520:	d04e      	beq.n	80125c0 <rmw_create_subscription+0x1a0>
 8012522:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801252a:	4629      	mov	r1, r5
 801252c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8012530:	1c42      	adds	r2, r0, #1
 8012532:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8012536:	f7f9 f8ad 	bl	800b694 <uxr_object_id>
 801253a:	ae08      	add	r6, sp, #32
 801253c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	6178      	str	r0, [r7, #20]
 8012544:	4641      	mov	r1, r8
 8012546:	4630      	mov	r0, r6
 8012548:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801254c:	9305      	str	r3, [sp, #20]
 801254e:	f7f8 fcf1 	bl	800af34 <convert_qos_profile>
 8012552:	9503      	str	r5, [sp, #12]
 8012554:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012558:	9b05      	ldr	r3, [sp, #20]
 801255a:	9001      	str	r0, [sp, #4]
 801255c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012560:	691b      	ldr	r3, [r3, #16]
 8012562:	9300      	str	r3, [sp, #0]
 8012564:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8012568:	f8db 1000 	ldr.w	r1, [fp]
 801256c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8012570:	f7f9 f818 	bl	800b5a4 <uxr_buffer_create_datareader_bin>
 8012574:	4602      	mov	r2, r0
 8012576:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801257a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801257e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012582:	f7f8 fcbb 	bl	800aefc <run_xrce_session>
 8012586:	b1d8      	cbz	r0, 80125c0 <rmw_create_subscription+0x1a0>
 8012588:	f898 3008 	ldrb.w	r3, [r8, #8]
 801258c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012590:	2b02      	cmp	r3, #2
 8012592:	bf0c      	ite	eq
 8012594:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8012598:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 801259c:	9307      	str	r3, [sp, #28]
 801259e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80125a2:	2200      	movs	r2, #0
 80125a4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80125a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80125aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80125ae:	9300      	str	r3, [sp, #0]
 80125b0:	697a      	ldr	r2, [r7, #20]
 80125b2:	9b07      	ldr	r3, [sp, #28]
 80125b4:	6809      	ldr	r1, [r1, #0]
 80125b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80125ba:	f001 fa7b 	bl	8013ab4 <uxr_buffer_request_data>
 80125be:	e007      	b.n	80125d0 <rmw_create_subscription+0x1b0>
 80125c0:	69f8      	ldr	r0, [r7, #28]
 80125c2:	b108      	cbz	r0, 80125c8 <rmw_create_subscription+0x1a8>
 80125c4:	f7f8 fb98 	bl	800acf8 <rmw_uxrce_fini_topic_memory>
 80125c8:	4620      	mov	r0, r4
 80125ca:	f7f8 fb53 	bl	800ac74 <rmw_uxrce_fini_subscription_memory>
 80125ce:	2400      	movs	r4, #0
 80125d0:	4620      	mov	r0, r4
 80125d2:	b00d      	add	sp, #52	@ 0x34
 80125d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d8:	20011064 	.word	0x20011064
 80125dc:	08016d28 	.word	0x08016d28
 80125e0:	08016aa8 	.word	0x08016aa8

080125e4 <rmw_subscription_get_actual_qos>:
 80125e4:	b150      	cbz	r0, 80125fc <rmw_subscription_get_actual_qos+0x18>
 80125e6:	b508      	push	{r3, lr}
 80125e8:	460b      	mov	r3, r1
 80125ea:	b149      	cbz	r1, 8012600 <rmw_subscription_get_actual_qos+0x1c>
 80125ec:	6841      	ldr	r1, [r0, #4]
 80125ee:	2250      	movs	r2, #80	@ 0x50
 80125f0:	3128      	adds	r1, #40	@ 0x28
 80125f2:	4618      	mov	r0, r3
 80125f4:	f003 fa43 	bl	8015a7e <memcpy>
 80125f8:	2000      	movs	r0, #0
 80125fa:	bd08      	pop	{r3, pc}
 80125fc:	200b      	movs	r0, #11
 80125fe:	4770      	bx	lr
 8012600:	200b      	movs	r0, #11
 8012602:	bd08      	pop	{r3, pc}

08012604 <rmw_destroy_subscription>:
 8012604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012606:	b128      	cbz	r0, 8012614 <rmw_destroy_subscription+0x10>
 8012608:	4604      	mov	r4, r0
 801260a:	6800      	ldr	r0, [r0, #0]
 801260c:	460d      	mov	r5, r1
 801260e:	f7f8 fcf5 	bl	800affc <is_uxrce_rmw_identifier_valid>
 8012612:	b910      	cbnz	r0, 801261a <rmw_destroy_subscription+0x16>
 8012614:	2401      	movs	r4, #1
 8012616:	4620      	mov	r0, r4
 8012618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801261a:	6863      	ldr	r3, [r4, #4]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d0f9      	beq.n	8012614 <rmw_destroy_subscription+0x10>
 8012620:	2d00      	cmp	r5, #0
 8012622:	d0f7      	beq.n	8012614 <rmw_destroy_subscription+0x10>
 8012624:	6828      	ldr	r0, [r5, #0]
 8012626:	f7f8 fce9 	bl	800affc <is_uxrce_rmw_identifier_valid>
 801262a:	2800      	cmp	r0, #0
 801262c:	d0f2      	beq.n	8012614 <rmw_destroy_subscription+0x10>
 801262e:	686c      	ldr	r4, [r5, #4]
 8012630:	2c00      	cmp	r4, #0
 8012632:	d0ef      	beq.n	8012614 <rmw_destroy_subscription+0x10>
 8012634:	6a26      	ldr	r6, [r4, #32]
 8012636:	6962      	ldr	r2, [r4, #20]
 8012638:	6930      	ldr	r0, [r6, #16]
 801263a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801263e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012642:	6819      	ldr	r1, [r3, #0]
 8012644:	f001 fa70 	bl	8013b28 <uxr_buffer_cancel_data>
 8012648:	4602      	mov	r2, r0
 801264a:	6930      	ldr	r0, [r6, #16]
 801264c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012650:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012654:	f7f8 fc52 	bl	800aefc <run_xrce_session>
 8012658:	69e0      	ldr	r0, [r4, #28]
 801265a:	f7ff fc15 	bl	8011e88 <destroy_topic>
 801265e:	6a23      	ldr	r3, [r4, #32]
 8012660:	6962      	ldr	r2, [r4, #20]
 8012662:	6918      	ldr	r0, [r3, #16]
 8012664:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012668:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801266c:	6819      	ldr	r1, [r3, #0]
 801266e:	f7f8 fe0f 	bl	800b290 <uxr_buffer_delete_entity>
 8012672:	6a23      	ldr	r3, [r4, #32]
 8012674:	6922      	ldr	r2, [r4, #16]
 8012676:	691b      	ldr	r3, [r3, #16]
 8012678:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 801267c:	4604      	mov	r4, r0
 801267e:	6809      	ldr	r1, [r1, #0]
 8012680:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012684:	f7f8 fe04 	bl	800b290 <uxr_buffer_delete_entity>
 8012688:	6937      	ldr	r7, [r6, #16]
 801268a:	4622      	mov	r2, r4
 801268c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8012690:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8012694:	4604      	mov	r4, r0
 8012696:	4638      	mov	r0, r7
 8012698:	f7f8 fc30 	bl	800aefc <run_xrce_session>
 801269c:	6936      	ldr	r6, [r6, #16]
 801269e:	4622      	mov	r2, r4
 80126a0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80126a4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80126a8:	4604      	mov	r4, r0
 80126aa:	4630      	mov	r0, r6
 80126ac:	f7f8 fc26 	bl	800aefc <run_xrce_session>
 80126b0:	b12c      	cbz	r4, 80126be <rmw_destroy_subscription+0xba>
 80126b2:	b120      	cbz	r0, 80126be <rmw_destroy_subscription+0xba>
 80126b4:	2400      	movs	r4, #0
 80126b6:	4628      	mov	r0, r5
 80126b8:	f7f8 fadc 	bl	800ac74 <rmw_uxrce_fini_subscription_memory>
 80126bc:	e7ab      	b.n	8012616 <rmw_destroy_subscription+0x12>
 80126be:	2402      	movs	r4, #2
 80126c0:	e7f9      	b.n	80126b6 <rmw_destroy_subscription+0xb2>
 80126c2:	bf00      	nop

080126c4 <rmw_take_with_info>:
 80126c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126c6:	4604      	mov	r4, r0
 80126c8:	6800      	ldr	r0, [r0, #0]
 80126ca:	b089      	sub	sp, #36	@ 0x24
 80126cc:	460f      	mov	r7, r1
 80126ce:	4615      	mov	r5, r2
 80126d0:	b128      	cbz	r0, 80126de <rmw_take_with_info+0x1a>
 80126d2:	4b24      	ldr	r3, [pc, #144]	@ (8012764 <rmw_take_with_info+0xa0>)
 80126d4:	6819      	ldr	r1, [r3, #0]
 80126d6:	f7ed fd83 	bl	80001e0 <strcmp>
 80126da:	2800      	cmp	r0, #0
 80126dc:	d13e      	bne.n	801275c <rmw_take_with_info+0x98>
 80126de:	b305      	cbz	r5, 8012722 <rmw_take_with_info+0x5e>
 80126e0:	6864      	ldr	r4, [r4, #4]
 80126e2:	2300      	movs	r3, #0
 80126e4:	702b      	strb	r3, [r5, #0]
 80126e6:	f7f8 fb8b 	bl	800ae00 <rmw_uxrce_clean_expired_static_input_buffer>
 80126ea:	4620      	mov	r0, r4
 80126ec:	f7f8 fb60 	bl	800adb0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80126f0:	4606      	mov	r6, r0
 80126f2:	b1f0      	cbz	r0, 8012732 <rmw_take_with_info+0x6e>
 80126f4:	6881      	ldr	r1, [r0, #8]
 80126f6:	4668      	mov	r0, sp
 80126f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80126fc:	3110      	adds	r1, #16
 80126fe:	f7f6 fa8f 	bl	8008c20 <ucdr_init_buffer>
 8012702:	69a3      	ldr	r3, [r4, #24]
 8012704:	4639      	mov	r1, r7
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	4668      	mov	r0, sp
 801270a:	4798      	blx	r3
 801270c:	4631      	mov	r1, r6
 801270e:	4604      	mov	r4, r0
 8012710:	4815      	ldr	r0, [pc, #84]	@ (8012768 <rmw_take_with_info+0xa4>)
 8012712:	f7ff f88b 	bl	801182c <put_memory>
 8012716:	702c      	strb	r4, [r5, #0]
 8012718:	f084 0001 	eor.w	r0, r4, #1
 801271c:	b2c0      	uxtb	r0, r0
 801271e:	b009      	add	sp, #36	@ 0x24
 8012720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012722:	6864      	ldr	r4, [r4, #4]
 8012724:	f7f8 fb6c 	bl	800ae00 <rmw_uxrce_clean_expired_static_input_buffer>
 8012728:	4620      	mov	r0, r4
 801272a:	f7f8 fb41 	bl	800adb0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801272e:	4605      	mov	r5, r0
 8012730:	b910      	cbnz	r0, 8012738 <rmw_take_with_info+0x74>
 8012732:	2001      	movs	r0, #1
 8012734:	b009      	add	sp, #36	@ 0x24
 8012736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012738:	68a9      	ldr	r1, [r5, #8]
 801273a:	4668      	mov	r0, sp
 801273c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8012740:	3110      	adds	r1, #16
 8012742:	f7f6 fa6d 	bl	8008c20 <ucdr_init_buffer>
 8012746:	69a3      	ldr	r3, [r4, #24]
 8012748:	4639      	mov	r1, r7
 801274a:	68db      	ldr	r3, [r3, #12]
 801274c:	4668      	mov	r0, sp
 801274e:	4798      	blx	r3
 8012750:	4629      	mov	r1, r5
 8012752:	4604      	mov	r4, r0
 8012754:	4804      	ldr	r0, [pc, #16]	@ (8012768 <rmw_take_with_info+0xa4>)
 8012756:	f7ff f869 	bl	801182c <put_memory>
 801275a:	e7dd      	b.n	8012718 <rmw_take_with_info+0x54>
 801275c:	200c      	movs	r0, #12
 801275e:	b009      	add	sp, #36	@ 0x24
 8012760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012762:	bf00      	nop
 8012764:	0801750c 	.word	0x0801750c
 8012768:	20011054 	.word	0x20011054

0801276c <rmw_trigger_guard_condition>:
 801276c:	b160      	cbz	r0, 8012788 <rmw_trigger_guard_condition+0x1c>
 801276e:	b510      	push	{r4, lr}
 8012770:	4604      	mov	r4, r0
 8012772:	6800      	ldr	r0, [r0, #0]
 8012774:	f7f8 fc42 	bl	800affc <is_uxrce_rmw_identifier_valid>
 8012778:	b908      	cbnz	r0, 801277e <rmw_trigger_guard_condition+0x12>
 801277a:	2001      	movs	r0, #1
 801277c:	bd10      	pop	{r4, pc}
 801277e:	6863      	ldr	r3, [r4, #4]
 8012780:	2201      	movs	r2, #1
 8012782:	741a      	strb	r2, [r3, #16]
 8012784:	2000      	movs	r0, #0
 8012786:	bd10      	pop	{r4, pc}
 8012788:	2001      	movs	r0, #1
 801278a:	4770      	bx	lr

0801278c <rmw_uxrce_transport_init>:
 801278c:	b508      	push	{r3, lr}
 801278e:	b108      	cbz	r0, 8012794 <rmw_uxrce_transport_init+0x8>
 8012790:	f100 0210 	add.w	r2, r0, #16
 8012794:	b139      	cbz	r1, 80127a6 <rmw_uxrce_transport_init+0x1a>
 8012796:	6949      	ldr	r1, [r1, #20]
 8012798:	4610      	mov	r0, r2
 801279a:	f000 fc0b 	bl	8012fb4 <uxr_init_custom_transport>
 801279e:	f080 0001 	eor.w	r0, r0, #1
 80127a2:	b2c0      	uxtb	r0, r0
 80127a4:	bd08      	pop	{r3, pc}
 80127a6:	4b04      	ldr	r3, [pc, #16]	@ (80127b8 <rmw_uxrce_transport_init+0x2c>)
 80127a8:	4610      	mov	r0, r2
 80127aa:	6859      	ldr	r1, [r3, #4]
 80127ac:	f000 fc02 	bl	8012fb4 <uxr_init_custom_transport>
 80127b0:	f080 0001 	eor.w	r0, r0, #1
 80127b4:	b2c0      	uxtb	r0, r0
 80127b6:	bd08      	pop	{r3, pc}
 80127b8:	2000c72c 	.word	0x2000c72c

080127bc <rmw_wait>:
 80127bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127c0:	b089      	sub	sp, #36	@ 0x24
 80127c2:	4605      	mov	r5, r0
 80127c4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80127c6:	460e      	mov	r6, r1
 80127c8:	4698      	mov	r8, r3
 80127ca:	4691      	mov	r9, r2
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	f000 810a 	beq.w	80129e6 <rmw_wait+0x22a>
 80127d2:	b16c      	cbz	r4, 80127f0 <rmw_wait+0x34>
 80127d4:	4bae      	ldr	r3, [pc, #696]	@ (8012a90 <rmw_wait+0x2d4>)
 80127d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80127d8:	af04      	add	r7, sp, #16
 80127da:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80127de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80127e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80127e6:	f7fe fe45 	bl	8011474 <rmw_time_equal>
 80127ea:	2800      	cmp	r0, #0
 80127ec:	f000 8127 	beq.w	8012a3e <rmw_wait+0x282>
 80127f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80127f4:	f7f8 fb04 	bl	800ae00 <rmw_uxrce_clean_expired_static_input_buffer>
 80127f8:	4ba6      	ldr	r3, [pc, #664]	@ (8012a94 <rmw_wait+0x2d8>)
 80127fa:	681c      	ldr	r4, [r3, #0]
 80127fc:	b14c      	cbz	r4, 8012812 <rmw_wait+0x56>
 80127fe:	4623      	mov	r3, r4
 8012800:	2100      	movs	r1, #0
 8012802:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8012806:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801280a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801280e:	2b00      	cmp	r3, #0
 8012810:	d1f7      	bne.n	8012802 <rmw_wait+0x46>
 8012812:	f1b9 0f00 	cmp.w	r9, #0
 8012816:	d011      	beq.n	801283c <rmw_wait+0x80>
 8012818:	f8d9 1000 	ldr.w	r1, [r9]
 801281c:	b171      	cbz	r1, 801283c <rmw_wait+0x80>
 801281e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8012822:	2300      	movs	r3, #0
 8012824:	2001      	movs	r0, #1
 8012826:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801282a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801282c:	6912      	ldr	r2, [r2, #16]
 801282e:	3301      	adds	r3, #1
 8012830:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012834:	4299      	cmp	r1, r3
 8012836:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801283a:	d1f4      	bne.n	8012826 <rmw_wait+0x6a>
 801283c:	f1b8 0f00 	cmp.w	r8, #0
 8012840:	d011      	beq.n	8012866 <rmw_wait+0xaa>
 8012842:	f8d8 1000 	ldr.w	r1, [r8]
 8012846:	b171      	cbz	r1, 8012866 <rmw_wait+0xaa>
 8012848:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801284c:	2300      	movs	r3, #0
 801284e:	2001      	movs	r0, #1
 8012850:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012854:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8012856:	6912      	ldr	r2, [r2, #16]
 8012858:	3301      	adds	r3, #1
 801285a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801285e:	4299      	cmp	r1, r3
 8012860:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8012864:	d1f4      	bne.n	8012850 <rmw_wait+0x94>
 8012866:	b185      	cbz	r5, 801288a <rmw_wait+0xce>
 8012868:	6829      	ldr	r1, [r5, #0]
 801286a:	b171      	cbz	r1, 801288a <rmw_wait+0xce>
 801286c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8012870:	2300      	movs	r3, #0
 8012872:	2001      	movs	r0, #1
 8012874:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012878:	6a12      	ldr	r2, [r2, #32]
 801287a:	6912      	ldr	r2, [r2, #16]
 801287c:	3301      	adds	r3, #1
 801287e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012882:	4299      	cmp	r1, r3
 8012884:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8012888:	d1f4      	bne.n	8012874 <rmw_wait+0xb8>
 801288a:	b34c      	cbz	r4, 80128e0 <rmw_wait+0x124>
 801288c:	4622      	mov	r2, r4
 801288e:	2300      	movs	r3, #0
 8012890:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8012894:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8012898:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801289c:	440b      	add	r3, r1
 801289e:	b2db      	uxtb	r3, r3
 80128a0:	2a00      	cmp	r2, #0
 80128a2:	d1f5      	bne.n	8012890 <rmw_wait+0xd4>
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	f000 8084 	beq.w	80129b2 <rmw_wait+0x1f6>
 80128aa:	1c7a      	adds	r2, r7, #1
 80128ac:	d00d      	beq.n	80128ca <rmw_wait+0x10e>
 80128ae:	ee07 7a90 	vmov	s15, r7
 80128b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80128b6:	ee07 3a90 	vmov	s15, r3
 80128ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128c2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80128c6:	ee17 7a90 	vmov	r7, s15
 80128ca:	68a0      	ldr	r0, [r4, #8]
 80128cc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80128d0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	f040 8090 	bne.w	80129fa <rmw_wait+0x23e>
 80128da:	6864      	ldr	r4, [r4, #4]
 80128dc:	2c00      	cmp	r4, #0
 80128de:	d1f4      	bne.n	80128ca <rmw_wait+0x10e>
 80128e0:	f1b9 0f00 	cmp.w	r9, #0
 80128e4:	f000 80bc 	beq.w	8012a60 <rmw_wait+0x2a4>
 80128e8:	f8d9 7000 	ldr.w	r7, [r9]
 80128ec:	2f00      	cmp	r7, #0
 80128ee:	f000 808e 	beq.w	8012a0e <rmw_wait+0x252>
 80128f2:	2400      	movs	r4, #0
 80128f4:	4627      	mov	r7, r4
 80128f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80128fa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80128fe:	f7f8 fa57 	bl	800adb0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012902:	2800      	cmp	r0, #0
 8012904:	d05f      	beq.n	80129c6 <rmw_wait+0x20a>
 8012906:	f8d9 3000 	ldr.w	r3, [r9]
 801290a:	3401      	adds	r4, #1
 801290c:	42a3      	cmp	r3, r4
 801290e:	f04f 0701 	mov.w	r7, #1
 8012912:	d8f0      	bhi.n	80128f6 <rmw_wait+0x13a>
 8012914:	f1b8 0f00 	cmp.w	r8, #0
 8012918:	d012      	beq.n	8012940 <rmw_wait+0x184>
 801291a:	f8d8 3000 	ldr.w	r3, [r8]
 801291e:	b17b      	cbz	r3, 8012940 <rmw_wait+0x184>
 8012920:	2400      	movs	r4, #0
 8012922:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012926:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801292a:	f7f8 fa41 	bl	800adb0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801292e:	2800      	cmp	r0, #0
 8012930:	d051      	beq.n	80129d6 <rmw_wait+0x21a>
 8012932:	f8d8 3000 	ldr.w	r3, [r8]
 8012936:	3401      	adds	r4, #1
 8012938:	42a3      	cmp	r3, r4
 801293a:	f04f 0701 	mov.w	r7, #1
 801293e:	d8f0      	bhi.n	8012922 <rmw_wait+0x166>
 8012940:	b1dd      	cbz	r5, 801297a <rmw_wait+0x1be>
 8012942:	682b      	ldr	r3, [r5, #0]
 8012944:	b1cb      	cbz	r3, 801297a <rmw_wait+0x1be>
 8012946:	2400      	movs	r4, #0
 8012948:	686b      	ldr	r3, [r5, #4]
 801294a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801294e:	f7f8 fa2f 	bl	800adb0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012952:	b158      	cbz	r0, 801296c <rmw_wait+0x1b0>
 8012954:	682b      	ldr	r3, [r5, #0]
 8012956:	3401      	adds	r4, #1
 8012958:	42a3      	cmp	r3, r4
 801295a:	d969      	bls.n	8012a30 <rmw_wait+0x274>
 801295c:	686b      	ldr	r3, [r5, #4]
 801295e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012962:	2701      	movs	r7, #1
 8012964:	f7f8 fa24 	bl	800adb0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012968:	2800      	cmp	r0, #0
 801296a:	d1f3      	bne.n	8012954 <rmw_wait+0x198>
 801296c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8012970:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012974:	3401      	adds	r4, #1
 8012976:	42a3      	cmp	r3, r4
 8012978:	d8e6      	bhi.n	8012948 <rmw_wait+0x18c>
 801297a:	b1a6      	cbz	r6, 80129a6 <rmw_wait+0x1ea>
 801297c:	6834      	ldr	r4, [r6, #0]
 801297e:	b194      	cbz	r4, 80129a6 <rmw_wait+0x1ea>
 8012980:	2300      	movs	r3, #0
 8012982:	461d      	mov	r5, r3
 8012984:	e004      	b.n	8012990 <rmw_wait+0x1d4>
 8012986:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801298a:	3301      	adds	r3, #1
 801298c:	42a3      	cmp	r3, r4
 801298e:	d00a      	beq.n	80129a6 <rmw_wait+0x1ea>
 8012990:	6870      	ldr	r0, [r6, #4]
 8012992:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8012996:	7c0a      	ldrb	r2, [r1, #16]
 8012998:	2a00      	cmp	r2, #0
 801299a:	d0f4      	beq.n	8012986 <rmw_wait+0x1ca>
 801299c:	3301      	adds	r3, #1
 801299e:	42a3      	cmp	r3, r4
 80129a0:	740d      	strb	r5, [r1, #16]
 80129a2:	4617      	mov	r7, r2
 80129a4:	d1f4      	bne.n	8012990 <rmw_wait+0x1d4>
 80129a6:	2f00      	cmp	r7, #0
 80129a8:	d03e      	beq.n	8012a28 <rmw_wait+0x26c>
 80129aa:	2000      	movs	r0, #0
 80129ac:	b009      	add	sp, #36	@ 0x24
 80129ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129b2:	68a0      	ldr	r0, [r4, #8]
 80129b4:	2100      	movs	r1, #0
 80129b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80129ba:	f7f9 fb3f 	bl	800c03c <uxr_run_session_timeout>
 80129be:	6864      	ldr	r4, [r4, #4]
 80129c0:	2c00      	cmp	r4, #0
 80129c2:	d1f6      	bne.n	80129b2 <rmw_wait+0x1f6>
 80129c4:	e78c      	b.n	80128e0 <rmw_wait+0x124>
 80129c6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80129ca:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80129ce:	3401      	adds	r4, #1
 80129d0:	42a3      	cmp	r3, r4
 80129d2:	d890      	bhi.n	80128f6 <rmw_wait+0x13a>
 80129d4:	e79e      	b.n	8012914 <rmw_wait+0x158>
 80129d6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80129da:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80129de:	3401      	adds	r4, #1
 80129e0:	429c      	cmp	r4, r3
 80129e2:	d39e      	bcc.n	8012922 <rmw_wait+0x166>
 80129e4:	e7ac      	b.n	8012940 <rmw_wait+0x184>
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f47f aef3 	bne.w	80127d2 <rmw_wait+0x16>
 80129ec:	2800      	cmp	r0, #0
 80129ee:	f47f aef0 	bne.w	80127d2 <rmw_wait+0x16>
 80129f2:	2900      	cmp	r1, #0
 80129f4:	f47f aeed 	bne.w	80127d2 <rmw_wait+0x16>
 80129f8:	e7d7      	b.n	80129aa <rmw_wait+0x1ee>
 80129fa:	4639      	mov	r1, r7
 80129fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012a00:	f7f9 fb36 	bl	800c070 <uxr_run_session_until_data>
 8012a04:	6864      	ldr	r4, [r4, #4]
 8012a06:	2c00      	cmp	r4, #0
 8012a08:	f47f af5f 	bne.w	80128ca <rmw_wait+0x10e>
 8012a0c:	e768      	b.n	80128e0 <rmw_wait+0x124>
 8012a0e:	f1b8 0f00 	cmp.w	r8, #0
 8012a12:	d032      	beq.n	8012a7a <rmw_wait+0x2be>
 8012a14:	f8d8 3000 	ldr.w	r3, [r8]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d181      	bne.n	8012920 <rmw_wait+0x164>
 8012a1c:	461f      	mov	r7, r3
 8012a1e:	2d00      	cmp	r5, #0
 8012a20:	d18f      	bne.n	8012942 <rmw_wait+0x186>
 8012a22:	462f      	mov	r7, r5
 8012a24:	2e00      	cmp	r6, #0
 8012a26:	d1a9      	bne.n	801297c <rmw_wait+0x1c0>
 8012a28:	2002      	movs	r0, #2
 8012a2a:	b009      	add	sp, #36	@ 0x24
 8012a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a30:	2e00      	cmp	r6, #0
 8012a32:	d0ba      	beq.n	80129aa <rmw_wait+0x1ee>
 8012a34:	6834      	ldr	r4, [r6, #0]
 8012a36:	2701      	movs	r7, #1
 8012a38:	2c00      	cmp	r4, #0
 8012a3a:	d1a1      	bne.n	8012980 <rmw_wait+0x1c4>
 8012a3c:	e7b5      	b.n	80129aa <rmw_wait+0x1ee>
 8012a3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012a42:	f7fe fd6b 	bl	801151c <rmw_time_total_nsec>
 8012a46:	2300      	movs	r3, #0
 8012a48:	4a13      	ldr	r2, [pc, #76]	@ (8012a98 <rmw_wait+0x2dc>)
 8012a4a:	f7ed fc81 	bl	8000350 <__aeabi_uldivmod>
 8012a4e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8012a52:	f171 0300 	sbcs.w	r3, r1, #0
 8012a56:	4607      	mov	r7, r0
 8012a58:	bfa8      	it	ge
 8012a5a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8012a5e:	e6c9      	b.n	80127f4 <rmw_wait+0x38>
 8012a60:	f1b8 0f00 	cmp.w	r8, #0
 8012a64:	d009      	beq.n	8012a7a <rmw_wait+0x2be>
 8012a66:	f8d8 3000 	ldr.w	r3, [r8]
 8012a6a:	464f      	mov	r7, r9
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	f47f af57 	bne.w	8012920 <rmw_wait+0x164>
 8012a72:	2d00      	cmp	r5, #0
 8012a74:	f47f af65 	bne.w	8012942 <rmw_wait+0x186>
 8012a78:	e7d3      	b.n	8012a22 <rmw_wait+0x266>
 8012a7a:	b17d      	cbz	r5, 8012a9c <rmw_wait+0x2e0>
 8012a7c:	682b      	ldr	r3, [r5, #0]
 8012a7e:	4647      	mov	r7, r8
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f47f af60 	bne.w	8012946 <rmw_wait+0x18a>
 8012a86:	2e00      	cmp	r6, #0
 8012a88:	f47f af78 	bne.w	801297c <rmw_wait+0x1c0>
 8012a8c:	e7cc      	b.n	8012a28 <rmw_wait+0x26c>
 8012a8e:	bf00      	nop
 8012a90:	08016960 	.word	0x08016960
 8012a94:	20011044 	.word	0x20011044
 8012a98:	000f4240 	.word	0x000f4240
 8012a9c:	2e00      	cmp	r6, #0
 8012a9e:	d0c3      	beq.n	8012a28 <rmw_wait+0x26c>
 8012aa0:	6834      	ldr	r4, [r6, #0]
 8012aa2:	462f      	mov	r7, r5
 8012aa4:	2c00      	cmp	r4, #0
 8012aa6:	f47f af6b 	bne.w	8012980 <rmw_wait+0x1c4>
 8012aaa:	e7bd      	b.n	8012a28 <rmw_wait+0x26c>

08012aac <rmw_create_wait_set>:
 8012aac:	b508      	push	{r3, lr}
 8012aae:	4803      	ldr	r0, [pc, #12]	@ (8012abc <rmw_create_wait_set+0x10>)
 8012ab0:	f7fe feac 	bl	801180c <get_memory>
 8012ab4:	b108      	cbz	r0, 8012aba <rmw_create_wait_set+0xe>
 8012ab6:	6880      	ldr	r0, [r0, #8]
 8012ab8:	3010      	adds	r0, #16
 8012aba:	bd08      	pop	{r3, pc}
 8012abc:	20011084 	.word	0x20011084

08012ac0 <rmw_destroy_wait_set>:
 8012ac0:	b508      	push	{r3, lr}
 8012ac2:	4b08      	ldr	r3, [pc, #32]	@ (8012ae4 <rmw_destroy_wait_set+0x24>)
 8012ac4:	6819      	ldr	r1, [r3, #0]
 8012ac6:	b911      	cbnz	r1, 8012ace <rmw_destroy_wait_set+0xe>
 8012ac8:	e00a      	b.n	8012ae0 <rmw_destroy_wait_set+0x20>
 8012aca:	6849      	ldr	r1, [r1, #4]
 8012acc:	b141      	cbz	r1, 8012ae0 <rmw_destroy_wait_set+0x20>
 8012ace:	688b      	ldr	r3, [r1, #8]
 8012ad0:	3310      	adds	r3, #16
 8012ad2:	4298      	cmp	r0, r3
 8012ad4:	d1f9      	bne.n	8012aca <rmw_destroy_wait_set+0xa>
 8012ad6:	4803      	ldr	r0, [pc, #12]	@ (8012ae4 <rmw_destroy_wait_set+0x24>)
 8012ad8:	f7fe fea8 	bl	801182c <put_memory>
 8012adc:	2000      	movs	r0, #0
 8012ade:	bd08      	pop	{r3, pc}
 8012ae0:	2001      	movs	r0, #1
 8012ae2:	bd08      	pop	{r3, pc}
 8012ae4:	20011084 	.word	0x20011084

08012ae8 <rmw_uros_epoch_nanos>:
 8012ae8:	4b05      	ldr	r3, [pc, #20]	@ (8012b00 <rmw_uros_epoch_nanos+0x18>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	b123      	cbz	r3, 8012af8 <rmw_uros_epoch_nanos+0x10>
 8012aee:	6898      	ldr	r0, [r3, #8]
 8012af0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012af4:	f7f8 bf12 	b.w	800b91c <uxr_epoch_nanos>
 8012af8:	2000      	movs	r0, #0
 8012afa:	2100      	movs	r1, #0
 8012afc:	4770      	bx	lr
 8012afe:	bf00      	nop
 8012b00:	20011044 	.word	0x20011044

08012b04 <std_msgs__msg__Int32__get_type_hash>:
 8012b04:	4800      	ldr	r0, [pc, #0]	@ (8012b08 <std_msgs__msg__Int32__get_type_hash+0x4>)
 8012b06:	4770      	bx	lr
 8012b08:	2000066c 	.word	0x2000066c

08012b0c <std_msgs__msg__Int32__get_type_description>:
 8012b0c:	4b03      	ldr	r3, [pc, #12]	@ (8012b1c <std_msgs__msg__Int32__get_type_description+0x10>)
 8012b0e:	781a      	ldrb	r2, [r3, #0]
 8012b10:	b90a      	cbnz	r2, 8012b16 <std_msgs__msg__Int32__get_type_description+0xa>
 8012b12:	2201      	movs	r2, #1
 8012b14:	701a      	strb	r2, [r3, #0]
 8012b16:	4802      	ldr	r0, [pc, #8]	@ (8012b20 <std_msgs__msg__Int32__get_type_description+0x14>)
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	20011279 	.word	0x20011279
 8012b20:	08017510 	.word	0x08017510

08012b24 <std_msgs__msg__Int32__get_type_description_sources>:
 8012b24:	4b09      	ldr	r3, [pc, #36]	@ (8012b4c <std_msgs__msg__Int32__get_type_description_sources+0x28>)
 8012b26:	781a      	ldrb	r2, [r3, #0]
 8012b28:	b96a      	cbnz	r2, 8012b46 <std_msgs__msg__Int32__get_type_description_sources+0x22>
 8012b2a:	b430      	push	{r4, r5}
 8012b2c:	4d08      	ldr	r5, [pc, #32]	@ (8012b50 <std_msgs__msg__Int32__get_type_description_sources+0x2c>)
 8012b2e:	4c09      	ldr	r4, [pc, #36]	@ (8012b54 <std_msgs__msg__Int32__get_type_description_sources+0x30>)
 8012b30:	2201      	movs	r2, #1
 8012b32:	701a      	strb	r2, [r3, #0]
 8012b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b3c:	682b      	ldr	r3, [r5, #0]
 8012b3e:	4806      	ldr	r0, [pc, #24]	@ (8012b58 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 8012b40:	6023      	str	r3, [r4, #0]
 8012b42:	bc30      	pop	{r4, r5}
 8012b44:	4770      	bx	lr
 8012b46:	4804      	ldr	r0, [pc, #16]	@ (8012b58 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 8012b48:	4770      	bx	lr
 8012b4a:	bf00      	nop
 8012b4c:	20011278 	.word	0x20011278
 8012b50:	08017534 	.word	0x08017534
 8012b54:	2001127c 	.word	0x2001127c
 8012b58:	08017558 	.word	0x08017558

08012b5c <std_msgs__msg__Int32__init>:
 8012b5c:	3800      	subs	r0, #0
 8012b5e:	bf18      	it	ne
 8012b60:	2001      	movne	r0, #1
 8012b62:	4770      	bx	lr

08012b64 <std_msgs__msg__Int32__fini>:
 8012b64:	4770      	bx	lr
 8012b66:	bf00      	nop

08012b68 <ucdr_serialize_endian_array_char>:
 8012b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	461f      	mov	r7, r3
 8012b70:	4605      	mov	r5, r0
 8012b72:	4690      	mov	r8, r2
 8012b74:	f7f6 f800 	bl	8008b78 <ucdr_check_buffer_available_for>
 8012b78:	b9e0      	cbnz	r0, 8012bb4 <ucdr_serialize_endian_array_char+0x4c>
 8012b7a:	463e      	mov	r6, r7
 8012b7c:	e009      	b.n	8012b92 <ucdr_serialize_endian_array_char+0x2a>
 8012b7e:	68a8      	ldr	r0, [r5, #8]
 8012b80:	f002 ff7d 	bl	8015a7e <memcpy>
 8012b84:	68ab      	ldr	r3, [r5, #8]
 8012b86:	6928      	ldr	r0, [r5, #16]
 8012b88:	4423      	add	r3, r4
 8012b8a:	4420      	add	r0, r4
 8012b8c:	1b36      	subs	r6, r6, r4
 8012b8e:	60ab      	str	r3, [r5, #8]
 8012b90:	6128      	str	r0, [r5, #16]
 8012b92:	4631      	mov	r1, r6
 8012b94:	2201      	movs	r2, #1
 8012b96:	4628      	mov	r0, r5
 8012b98:	f7f6 f876 	bl	8008c88 <ucdr_check_final_buffer_behavior_array>
 8012b9c:	1bb9      	subs	r1, r7, r6
 8012b9e:	4441      	add	r1, r8
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	4602      	mov	r2, r0
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d1ea      	bne.n	8012b7e <ucdr_serialize_endian_array_char+0x16>
 8012ba8:	2301      	movs	r3, #1
 8012baa:	7da8      	ldrb	r0, [r5, #22]
 8012bac:	756b      	strb	r3, [r5, #21]
 8012bae:	4058      	eors	r0, r3
 8012bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb4:	463a      	mov	r2, r7
 8012bb6:	68a8      	ldr	r0, [r5, #8]
 8012bb8:	4641      	mov	r1, r8
 8012bba:	f002 ff60 	bl	8015a7e <memcpy>
 8012bbe:	68aa      	ldr	r2, [r5, #8]
 8012bc0:	692b      	ldr	r3, [r5, #16]
 8012bc2:	443a      	add	r2, r7
 8012bc4:	443b      	add	r3, r7
 8012bc6:	60aa      	str	r2, [r5, #8]
 8012bc8:	612b      	str	r3, [r5, #16]
 8012bca:	e7ed      	b.n	8012ba8 <ucdr_serialize_endian_array_char+0x40>

08012bcc <ucdr_deserialize_endian_array_char>:
 8012bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	461f      	mov	r7, r3
 8012bd4:	4605      	mov	r5, r0
 8012bd6:	4690      	mov	r8, r2
 8012bd8:	f7f5 ffce 	bl	8008b78 <ucdr_check_buffer_available_for>
 8012bdc:	b9e0      	cbnz	r0, 8012c18 <ucdr_deserialize_endian_array_char+0x4c>
 8012bde:	463e      	mov	r6, r7
 8012be0:	e009      	b.n	8012bf6 <ucdr_deserialize_endian_array_char+0x2a>
 8012be2:	68a9      	ldr	r1, [r5, #8]
 8012be4:	f002 ff4b 	bl	8015a7e <memcpy>
 8012be8:	68ab      	ldr	r3, [r5, #8]
 8012bea:	6928      	ldr	r0, [r5, #16]
 8012bec:	4423      	add	r3, r4
 8012bee:	4420      	add	r0, r4
 8012bf0:	1b36      	subs	r6, r6, r4
 8012bf2:	60ab      	str	r3, [r5, #8]
 8012bf4:	6128      	str	r0, [r5, #16]
 8012bf6:	2201      	movs	r2, #1
 8012bf8:	4631      	mov	r1, r6
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	f7f6 f844 	bl	8008c88 <ucdr_check_final_buffer_behavior_array>
 8012c00:	4604      	mov	r4, r0
 8012c02:	1bb8      	subs	r0, r7, r6
 8012c04:	4440      	add	r0, r8
 8012c06:	4622      	mov	r2, r4
 8012c08:	2c00      	cmp	r4, #0
 8012c0a:	d1ea      	bne.n	8012be2 <ucdr_deserialize_endian_array_char+0x16>
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	7da8      	ldrb	r0, [r5, #22]
 8012c10:	756b      	strb	r3, [r5, #21]
 8012c12:	4058      	eors	r0, r3
 8012c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c18:	463a      	mov	r2, r7
 8012c1a:	68a9      	ldr	r1, [r5, #8]
 8012c1c:	4640      	mov	r0, r8
 8012c1e:	f002 ff2e 	bl	8015a7e <memcpy>
 8012c22:	68aa      	ldr	r2, [r5, #8]
 8012c24:	692b      	ldr	r3, [r5, #16]
 8012c26:	443a      	add	r2, r7
 8012c28:	443b      	add	r3, r7
 8012c2a:	60aa      	str	r2, [r5, #8]
 8012c2c:	612b      	str	r3, [r5, #16]
 8012c2e:	e7ed      	b.n	8012c0c <ucdr_deserialize_endian_array_char+0x40>

08012c30 <ucdr_serialize_array_uint8_t>:
 8012c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c34:	4688      	mov	r8, r1
 8012c36:	4611      	mov	r1, r2
 8012c38:	4617      	mov	r7, r2
 8012c3a:	4605      	mov	r5, r0
 8012c3c:	f7f5 ff9c 	bl	8008b78 <ucdr_check_buffer_available_for>
 8012c40:	b9e0      	cbnz	r0, 8012c7c <ucdr_serialize_array_uint8_t+0x4c>
 8012c42:	463e      	mov	r6, r7
 8012c44:	e009      	b.n	8012c5a <ucdr_serialize_array_uint8_t+0x2a>
 8012c46:	68a8      	ldr	r0, [r5, #8]
 8012c48:	f002 ff19 	bl	8015a7e <memcpy>
 8012c4c:	68aa      	ldr	r2, [r5, #8]
 8012c4e:	692b      	ldr	r3, [r5, #16]
 8012c50:	4422      	add	r2, r4
 8012c52:	4423      	add	r3, r4
 8012c54:	1b36      	subs	r6, r6, r4
 8012c56:	60aa      	str	r2, [r5, #8]
 8012c58:	612b      	str	r3, [r5, #16]
 8012c5a:	4631      	mov	r1, r6
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f7f6 f812 	bl	8008c88 <ucdr_check_final_buffer_behavior_array>
 8012c64:	1bb9      	subs	r1, r7, r6
 8012c66:	4441      	add	r1, r8
 8012c68:	4604      	mov	r4, r0
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	2800      	cmp	r0, #0
 8012c6e:	d1ea      	bne.n	8012c46 <ucdr_serialize_array_uint8_t+0x16>
 8012c70:	2301      	movs	r3, #1
 8012c72:	7da8      	ldrb	r0, [r5, #22]
 8012c74:	756b      	strb	r3, [r5, #21]
 8012c76:	4058      	eors	r0, r3
 8012c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c7c:	463a      	mov	r2, r7
 8012c7e:	68a8      	ldr	r0, [r5, #8]
 8012c80:	4641      	mov	r1, r8
 8012c82:	f002 fefc 	bl	8015a7e <memcpy>
 8012c86:	68aa      	ldr	r2, [r5, #8]
 8012c88:	692b      	ldr	r3, [r5, #16]
 8012c8a:	443a      	add	r2, r7
 8012c8c:	443b      	add	r3, r7
 8012c8e:	60aa      	str	r2, [r5, #8]
 8012c90:	612b      	str	r3, [r5, #16]
 8012c92:	e7ed      	b.n	8012c70 <ucdr_serialize_array_uint8_t+0x40>

08012c94 <ucdr_serialize_endian_array_uint8_t>:
 8012c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c98:	4619      	mov	r1, r3
 8012c9a:	461f      	mov	r7, r3
 8012c9c:	4605      	mov	r5, r0
 8012c9e:	4690      	mov	r8, r2
 8012ca0:	f7f5 ff6a 	bl	8008b78 <ucdr_check_buffer_available_for>
 8012ca4:	b9e0      	cbnz	r0, 8012ce0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012ca6:	463e      	mov	r6, r7
 8012ca8:	e009      	b.n	8012cbe <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012caa:	68a8      	ldr	r0, [r5, #8]
 8012cac:	f002 fee7 	bl	8015a7e <memcpy>
 8012cb0:	68ab      	ldr	r3, [r5, #8]
 8012cb2:	6928      	ldr	r0, [r5, #16]
 8012cb4:	4423      	add	r3, r4
 8012cb6:	4420      	add	r0, r4
 8012cb8:	1b36      	subs	r6, r6, r4
 8012cba:	60ab      	str	r3, [r5, #8]
 8012cbc:	6128      	str	r0, [r5, #16]
 8012cbe:	4631      	mov	r1, r6
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	f7f5 ffe0 	bl	8008c88 <ucdr_check_final_buffer_behavior_array>
 8012cc8:	1bb9      	subs	r1, r7, r6
 8012cca:	4441      	add	r1, r8
 8012ccc:	4604      	mov	r4, r0
 8012cce:	4602      	mov	r2, r0
 8012cd0:	2800      	cmp	r0, #0
 8012cd2:	d1ea      	bne.n	8012caa <ucdr_serialize_endian_array_uint8_t+0x16>
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	7da8      	ldrb	r0, [r5, #22]
 8012cd8:	756b      	strb	r3, [r5, #21]
 8012cda:	4058      	eors	r0, r3
 8012cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce0:	463a      	mov	r2, r7
 8012ce2:	68a8      	ldr	r0, [r5, #8]
 8012ce4:	4641      	mov	r1, r8
 8012ce6:	f002 feca 	bl	8015a7e <memcpy>
 8012cea:	68aa      	ldr	r2, [r5, #8]
 8012cec:	692b      	ldr	r3, [r5, #16]
 8012cee:	443a      	add	r2, r7
 8012cf0:	443b      	add	r3, r7
 8012cf2:	60aa      	str	r2, [r5, #8]
 8012cf4:	612b      	str	r3, [r5, #16]
 8012cf6:	e7ed      	b.n	8012cd4 <ucdr_serialize_endian_array_uint8_t+0x40>

08012cf8 <ucdr_deserialize_array_uint8_t>:
 8012cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cfc:	4688      	mov	r8, r1
 8012cfe:	4611      	mov	r1, r2
 8012d00:	4617      	mov	r7, r2
 8012d02:	4605      	mov	r5, r0
 8012d04:	f7f5 ff38 	bl	8008b78 <ucdr_check_buffer_available_for>
 8012d08:	b9e0      	cbnz	r0, 8012d44 <ucdr_deserialize_array_uint8_t+0x4c>
 8012d0a:	463e      	mov	r6, r7
 8012d0c:	e009      	b.n	8012d22 <ucdr_deserialize_array_uint8_t+0x2a>
 8012d0e:	68a9      	ldr	r1, [r5, #8]
 8012d10:	f002 feb5 	bl	8015a7e <memcpy>
 8012d14:	68aa      	ldr	r2, [r5, #8]
 8012d16:	692b      	ldr	r3, [r5, #16]
 8012d18:	4422      	add	r2, r4
 8012d1a:	4423      	add	r3, r4
 8012d1c:	1b36      	subs	r6, r6, r4
 8012d1e:	60aa      	str	r2, [r5, #8]
 8012d20:	612b      	str	r3, [r5, #16]
 8012d22:	2201      	movs	r2, #1
 8012d24:	4631      	mov	r1, r6
 8012d26:	4628      	mov	r0, r5
 8012d28:	f7f5 ffae 	bl	8008c88 <ucdr_check_final_buffer_behavior_array>
 8012d2c:	4604      	mov	r4, r0
 8012d2e:	1bb8      	subs	r0, r7, r6
 8012d30:	4440      	add	r0, r8
 8012d32:	4622      	mov	r2, r4
 8012d34:	2c00      	cmp	r4, #0
 8012d36:	d1ea      	bne.n	8012d0e <ucdr_deserialize_array_uint8_t+0x16>
 8012d38:	2301      	movs	r3, #1
 8012d3a:	7da8      	ldrb	r0, [r5, #22]
 8012d3c:	756b      	strb	r3, [r5, #21]
 8012d3e:	4058      	eors	r0, r3
 8012d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d44:	463a      	mov	r2, r7
 8012d46:	68a9      	ldr	r1, [r5, #8]
 8012d48:	4640      	mov	r0, r8
 8012d4a:	f002 fe98 	bl	8015a7e <memcpy>
 8012d4e:	68aa      	ldr	r2, [r5, #8]
 8012d50:	692b      	ldr	r3, [r5, #16]
 8012d52:	443a      	add	r2, r7
 8012d54:	443b      	add	r3, r7
 8012d56:	60aa      	str	r2, [r5, #8]
 8012d58:	612b      	str	r3, [r5, #16]
 8012d5a:	e7ed      	b.n	8012d38 <ucdr_deserialize_array_uint8_t+0x40>

08012d5c <ucdr_deserialize_endian_array_uint8_t>:
 8012d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d60:	4619      	mov	r1, r3
 8012d62:	461f      	mov	r7, r3
 8012d64:	4605      	mov	r5, r0
 8012d66:	4690      	mov	r8, r2
 8012d68:	f7f5 ff06 	bl	8008b78 <ucdr_check_buffer_available_for>
 8012d6c:	b9e0      	cbnz	r0, 8012da8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012d6e:	463e      	mov	r6, r7
 8012d70:	e009      	b.n	8012d86 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012d72:	68a9      	ldr	r1, [r5, #8]
 8012d74:	f002 fe83 	bl	8015a7e <memcpy>
 8012d78:	68ab      	ldr	r3, [r5, #8]
 8012d7a:	6928      	ldr	r0, [r5, #16]
 8012d7c:	4423      	add	r3, r4
 8012d7e:	4420      	add	r0, r4
 8012d80:	1b36      	subs	r6, r6, r4
 8012d82:	60ab      	str	r3, [r5, #8]
 8012d84:	6128      	str	r0, [r5, #16]
 8012d86:	2201      	movs	r2, #1
 8012d88:	4631      	mov	r1, r6
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	f7f5 ff7c 	bl	8008c88 <ucdr_check_final_buffer_behavior_array>
 8012d90:	4604      	mov	r4, r0
 8012d92:	1bb8      	subs	r0, r7, r6
 8012d94:	4440      	add	r0, r8
 8012d96:	4622      	mov	r2, r4
 8012d98:	2c00      	cmp	r4, #0
 8012d9a:	d1ea      	bne.n	8012d72 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	7da8      	ldrb	r0, [r5, #22]
 8012da0:	756b      	strb	r3, [r5, #21]
 8012da2:	4058      	eors	r0, r3
 8012da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012da8:	463a      	mov	r2, r7
 8012daa:	68a9      	ldr	r1, [r5, #8]
 8012dac:	4640      	mov	r0, r8
 8012dae:	f002 fe66 	bl	8015a7e <memcpy>
 8012db2:	68aa      	ldr	r2, [r5, #8]
 8012db4:	692b      	ldr	r3, [r5, #16]
 8012db6:	443a      	add	r2, r7
 8012db8:	443b      	add	r3, r7
 8012dba:	60aa      	str	r2, [r5, #8]
 8012dbc:	612b      	str	r3, [r5, #16]
 8012dbe:	e7ed      	b.n	8012d9c <ucdr_deserialize_endian_array_uint8_t+0x40>

08012dc0 <ucdr_serialize_sequence_char>:
 8012dc0:	b570      	push	{r4, r5, r6, lr}
 8012dc2:	4615      	mov	r5, r2
 8012dc4:	460e      	mov	r6, r1
 8012dc6:	7d01      	ldrb	r1, [r0, #20]
 8012dc8:	4604      	mov	r4, r0
 8012dca:	f7f5 f895 	bl	8007ef8 <ucdr_serialize_endian_uint32_t>
 8012dce:	b90d      	cbnz	r5, 8012dd4 <ucdr_serialize_sequence_char+0x14>
 8012dd0:	2001      	movs	r0, #1
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}
 8012dd4:	7d21      	ldrb	r1, [r4, #20]
 8012dd6:	462b      	mov	r3, r5
 8012dd8:	4632      	mov	r2, r6
 8012dda:	4620      	mov	r0, r4
 8012ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012de0:	f7ff bec2 	b.w	8012b68 <ucdr_serialize_endian_array_char>

08012de4 <ucdr_deserialize_sequence_char>:
 8012de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de8:	461d      	mov	r5, r3
 8012dea:	4616      	mov	r6, r2
 8012dec:	460f      	mov	r7, r1
 8012dee:	461a      	mov	r2, r3
 8012df0:	7d01      	ldrb	r1, [r0, #20]
 8012df2:	4604      	mov	r4, r0
 8012df4:	f7f5 f9a8 	bl	8008148 <ucdr_deserialize_endian_uint32_t>
 8012df8:	682b      	ldr	r3, [r5, #0]
 8012dfa:	429e      	cmp	r6, r3
 8012dfc:	bf3c      	itt	cc
 8012dfe:	2201      	movcc	r2, #1
 8012e00:	75a2      	strbcc	r2, [r4, #22]
 8012e02:	b913      	cbnz	r3, 8012e0a <ucdr_deserialize_sequence_char+0x26>
 8012e04:	2001      	movs	r0, #1
 8012e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e0a:	7d21      	ldrb	r1, [r4, #20]
 8012e0c:	463a      	mov	r2, r7
 8012e0e:	4620      	mov	r0, r4
 8012e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e14:	f7ff beda 	b.w	8012bcc <ucdr_deserialize_endian_array_char>

08012e18 <ucdr_serialize_sequence_uint8_t>:
 8012e18:	b570      	push	{r4, r5, r6, lr}
 8012e1a:	4615      	mov	r5, r2
 8012e1c:	460e      	mov	r6, r1
 8012e1e:	7d01      	ldrb	r1, [r0, #20]
 8012e20:	4604      	mov	r4, r0
 8012e22:	f7f5 f869 	bl	8007ef8 <ucdr_serialize_endian_uint32_t>
 8012e26:	b90d      	cbnz	r5, 8012e2c <ucdr_serialize_sequence_uint8_t+0x14>
 8012e28:	2001      	movs	r0, #1
 8012e2a:	bd70      	pop	{r4, r5, r6, pc}
 8012e2c:	7d21      	ldrb	r1, [r4, #20]
 8012e2e:	462b      	mov	r3, r5
 8012e30:	4632      	mov	r2, r6
 8012e32:	4620      	mov	r0, r4
 8012e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e38:	f7ff bf2c 	b.w	8012c94 <ucdr_serialize_endian_array_uint8_t>

08012e3c <ucdr_deserialize_sequence_uint8_t>:
 8012e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e40:	461d      	mov	r5, r3
 8012e42:	4616      	mov	r6, r2
 8012e44:	460f      	mov	r7, r1
 8012e46:	461a      	mov	r2, r3
 8012e48:	7d01      	ldrb	r1, [r0, #20]
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	f7f5 f97c 	bl	8008148 <ucdr_deserialize_endian_uint32_t>
 8012e50:	682b      	ldr	r3, [r5, #0]
 8012e52:	429e      	cmp	r6, r3
 8012e54:	bf3c      	itt	cc
 8012e56:	2201      	movcc	r2, #1
 8012e58:	75a2      	strbcc	r2, [r4, #22]
 8012e5a:	b913      	cbnz	r3, 8012e62 <ucdr_deserialize_sequence_uint8_t+0x26>
 8012e5c:	2001      	movs	r0, #1
 8012e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e62:	7d21      	ldrb	r1, [r4, #20]
 8012e64:	463a      	mov	r2, r7
 8012e66:	4620      	mov	r0, r4
 8012e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e6c:	f7ff bf76 	b.w	8012d5c <ucdr_deserialize_endian_array_uint8_t>

08012e70 <ucdr_serialize_string>:
 8012e70:	b510      	push	{r4, lr}
 8012e72:	b082      	sub	sp, #8
 8012e74:	4604      	mov	r4, r0
 8012e76:	4608      	mov	r0, r1
 8012e78:	9101      	str	r1, [sp, #4]
 8012e7a:	f7ed fa11 	bl	80002a0 <strlen>
 8012e7e:	9901      	ldr	r1, [sp, #4]
 8012e80:	1c42      	adds	r2, r0, #1
 8012e82:	4620      	mov	r0, r4
 8012e84:	b002      	add	sp, #8
 8012e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e8a:	f7ff bf99 	b.w	8012dc0 <ucdr_serialize_sequence_char>
 8012e8e:	bf00      	nop

08012e90 <ucdr_deserialize_string>:
 8012e90:	b500      	push	{lr}
 8012e92:	b083      	sub	sp, #12
 8012e94:	ab01      	add	r3, sp, #4
 8012e96:	f7ff ffa5 	bl	8012de4 <ucdr_deserialize_sequence_char>
 8012e9a:	b003      	add	sp, #12
 8012e9c:	f85d fb04 	ldr.w	pc, [sp], #4

08012ea0 <get_custom_error>:
 8012ea0:	4b01      	ldr	r3, [pc, #4]	@ (8012ea8 <get_custom_error+0x8>)
 8012ea2:	7818      	ldrb	r0, [r3, #0]
 8012ea4:	4770      	bx	lr
 8012ea6:	bf00      	nop
 8012ea8:	200112a0 	.word	0x200112a0

08012eac <recv_custom_msg>:
 8012eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eb0:	4693      	mov	fp, r2
 8012eb2:	b089      	sub	sp, #36	@ 0x24
 8012eb4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8012eb8:	9305      	str	r3, [sp, #20]
 8012eba:	468a      	mov	sl, r1
 8012ebc:	2100      	movs	r1, #0
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	f88d 101e 	strb.w	r1, [sp, #30]
 8012ec4:	b322      	cbz	r2, 8012f10 <recv_custom_msg+0x64>
 8012ec6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8012eca:	f10d 081f 	add.w	r8, sp, #31
 8012ece:	af05      	add	r7, sp, #20
 8012ed0:	f10d 061e 	add.w	r6, sp, #30
 8012ed4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8012ed8:	e002      	b.n	8012ee0 <recv_custom_msg+0x34>
 8012eda:	9b05      	ldr	r3, [sp, #20]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	dd0f      	ble.n	8012f00 <recv_custom_msg+0x54>
 8012ee0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8012ee4:	4623      	mov	r3, r4
 8012ee6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012eea:	e9cd 5600 	strd	r5, r6, [sp]
 8012eee:	4622      	mov	r2, r4
 8012ef0:	4648      	mov	r0, r9
 8012ef2:	f001 f92d 	bl	8014150 <uxr_read_framed_msg>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d0ef      	beq.n	8012eda <recv_custom_msg+0x2e>
 8012efa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012efe:	b1b3      	cbz	r3, 8012f2e <recv_custom_msg+0x82>
 8012f00:	4b0f      	ldr	r3, [pc, #60]	@ (8012f40 <recv_custom_msg+0x94>)
 8012f02:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012f06:	701a      	strb	r2, [r3, #0]
 8012f08:	2000      	movs	r0, #0
 8012f0a:	b009      	add	sp, #36	@ 0x24
 8012f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f10:	f10d 021f 	add.w	r2, sp, #31
 8012f14:	9200      	str	r2, [sp, #0]
 8012f16:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8012f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f1e:	4601      	mov	r1, r0
 8012f20:	47a8      	blx	r5
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d0ec      	beq.n	8012f00 <recv_custom_msg+0x54>
 8012f26:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d1e8      	bne.n	8012f00 <recv_custom_msg+0x54>
 8012f2e:	f8cb 0000 	str.w	r0, [fp]
 8012f32:	2001      	movs	r0, #1
 8012f34:	f8ca 4000 	str.w	r4, [sl]
 8012f38:	b009      	add	sp, #36	@ 0x24
 8012f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f3e:	bf00      	nop
 8012f40:	200112a0 	.word	0x200112a0

08012f44 <send_custom_msg>:
 8012f44:	b530      	push	{r4, r5, lr}
 8012f46:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8012f4a:	b087      	sub	sp, #28
 8012f4c:	4615      	mov	r5, r2
 8012f4e:	b974      	cbnz	r4, 8012f6e <send_custom_msg+0x2a>
 8012f50:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8012f54:	f10d 0317 	add.w	r3, sp, #23
 8012f58:	47a0      	blx	r4
 8012f5a:	b108      	cbz	r0, 8012f60 <send_custom_msg+0x1c>
 8012f5c:	42a8      	cmp	r0, r5
 8012f5e:	d015      	beq.n	8012f8c <send_custom_msg+0x48>
 8012f60:	4b0c      	ldr	r3, [pc, #48]	@ (8012f94 <send_custom_msg+0x50>)
 8012f62:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012f66:	701a      	strb	r2, [r3, #0]
 8012f68:	2000      	movs	r0, #0
 8012f6a:	b007      	add	sp, #28
 8012f6c:	bd30      	pop	{r4, r5, pc}
 8012f6e:	460b      	mov	r3, r1
 8012f70:	2200      	movs	r2, #0
 8012f72:	f10d 0117 	add.w	r1, sp, #23
 8012f76:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012f7a:	4602      	mov	r2, r0
 8012f7c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8012f80:	9500      	str	r5, [sp, #0]
 8012f82:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8012f86:	f000 feeb 	bl	8013d60 <uxr_write_framed_msg>
 8012f8a:	e7e6      	b.n	8012f5a <send_custom_msg+0x16>
 8012f8c:	2001      	movs	r0, #1
 8012f8e:	b007      	add	sp, #28
 8012f90:	bd30      	pop	{r4, r5, pc}
 8012f92:	bf00      	nop
 8012f94:	200112a0 	.word	0x200112a0

08012f98 <uxr_set_custom_transport_callbacks>:
 8012f98:	b410      	push	{r4}
 8012f9a:	9c01      	ldr	r4, [sp, #4]
 8012f9c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8012fa0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8012fa4:	9b02      	ldr	r3, [sp, #8]
 8012fa6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8012faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fae:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8012fb2:	4770      	bx	lr

08012fb4 <uxr_init_custom_transport>:
 8012fb4:	b538      	push	{r3, r4, r5, lr}
 8012fb6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8012fba:	b303      	cbz	r3, 8012ffe <uxr_init_custom_transport+0x4a>
 8012fbc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8012fc0:	4604      	mov	r4, r0
 8012fc2:	b1e2      	cbz	r2, 8012ffe <uxr_init_custom_transport+0x4a>
 8012fc4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8012fc8:	b1ca      	cbz	r2, 8012ffe <uxr_init_custom_transport+0x4a>
 8012fca:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8012fce:	b1b2      	cbz	r2, 8012ffe <uxr_init_custom_transport+0x4a>
 8012fd0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8012fd4:	4798      	blx	r3
 8012fd6:	4605      	mov	r5, r0
 8012fd8:	b188      	cbz	r0, 8012ffe <uxr_init_custom_transport+0x4a>
 8012fda:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8012fde:	b98b      	cbnz	r3, 8013004 <uxr_init_custom_transport+0x50>
 8012fe0:	490b      	ldr	r1, [pc, #44]	@ (8013010 <uxr_init_custom_transport+0x5c>)
 8012fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8013014 <uxr_init_custom_transport+0x60>)
 8012fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8013018 <uxr_init_custom_transport+0x64>)
 8012fe6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8012fea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012fee:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8012ff2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8012ff6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	bd38      	pop	{r3, r4, r5, pc}
 8012ffe:	2500      	movs	r5, #0
 8013000:	4628      	mov	r0, r5
 8013002:	bd38      	pop	{r3, r4, r5, pc}
 8013004:	2100      	movs	r1, #0
 8013006:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801300a:	f000 fea3 	bl	8013d54 <uxr_init_framing_io>
 801300e:	e7e7      	b.n	8012fe0 <uxr_init_custom_transport+0x2c>
 8013010:	08012f45 	.word	0x08012f45
 8013014:	08012ead 	.word	0x08012ead
 8013018:	08012ea1 	.word	0x08012ea1

0801301c <uxr_close_custom_transport>:
 801301c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013020:	4718      	bx	r3
 8013022:	bf00      	nop

08013024 <uxr_init_input_best_effort_stream>:
 8013024:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013028:	8003      	strh	r3, [r0, #0]
 801302a:	4770      	bx	lr

0801302c <uxr_reset_input_best_effort_stream>:
 801302c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013030:	8003      	strh	r3, [r0, #0]
 8013032:	4770      	bx	lr

08013034 <uxr_receive_best_effort_message>:
 8013034:	b538      	push	{r3, r4, r5, lr}
 8013036:	4604      	mov	r4, r0
 8013038:	8800      	ldrh	r0, [r0, #0]
 801303a:	460d      	mov	r5, r1
 801303c:	f000 fe72 	bl	8013d24 <uxr_seq_num_cmp>
 8013040:	4603      	mov	r3, r0
 8013042:	2b00      	cmp	r3, #0
 8013044:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013048:	bfb8      	it	lt
 801304a:	8025      	strhlt	r5, [r4, #0]
 801304c:	bd38      	pop	{r3, r4, r5, pc}
 801304e:	bf00      	nop

08013050 <on_full_input_buffer>:
 8013050:	b570      	push	{r4, r5, r6, lr}
 8013052:	4605      	mov	r5, r0
 8013054:	460c      	mov	r4, r1
 8013056:	682b      	ldr	r3, [r5, #0]
 8013058:	6809      	ldr	r1, [r1, #0]
 801305a:	8920      	ldrh	r0, [r4, #8]
 801305c:	6862      	ldr	r2, [r4, #4]
 801305e:	fbb2 f2f0 	udiv	r2, r2, r0
 8013062:	eba3 0c01 	sub.w	ip, r3, r1
 8013066:	fbbc fcf2 	udiv	ip, ip, r2
 801306a:	f10c 0c01 	add.w	ip, ip, #1
 801306e:	fa1f f38c 	uxth.w	r3, ip
 8013072:	fbb3 f6f0 	udiv	r6, r3, r0
 8013076:	fb00 3316 	mls	r3, r0, r6, r3
 801307a:	b29b      	uxth	r3, r3
 801307c:	fb02 f303 	mul.w	r3, r2, r3
 8013080:	1d18      	adds	r0, r3, #4
 8013082:	4408      	add	r0, r1
 8013084:	7d26      	ldrb	r6, [r4, #20]
 8013086:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801308a:	b116      	cbz	r6, 8013092 <on_full_input_buffer+0x42>
 801308c:	2600      	movs	r6, #0
 801308e:	f840 6c04 	str.w	r6, [r0, #-4]
 8013092:	2a03      	cmp	r2, #3
 8013094:	d801      	bhi.n	801309a <on_full_input_buffer+0x4a>
 8013096:	2001      	movs	r0, #1
 8013098:	bd70      	pop	{r4, r5, r6, pc}
 801309a:	3308      	adds	r3, #8
 801309c:	4419      	add	r1, r3
 801309e:	4628      	mov	r0, r5
 80130a0:	692b      	ldr	r3, [r5, #16]
 80130a2:	3a04      	subs	r2, #4
 80130a4:	f7f5 fdb4 	bl	8008c10 <ucdr_init_buffer_origin>
 80130a8:	4628      	mov	r0, r5
 80130aa:	4903      	ldr	r1, [pc, #12]	@ (80130b8 <on_full_input_buffer+0x68>)
 80130ac:	4622      	mov	r2, r4
 80130ae:	f7f5 fd8b 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 80130b2:	2000      	movs	r0, #0
 80130b4:	bd70      	pop	{r4, r5, r6, pc}
 80130b6:	bf00      	nop
 80130b8:	08013051 	.word	0x08013051

080130bc <uxr_init_input_reliable_stream>:
 80130bc:	b500      	push	{lr}
 80130be:	e9c0 1200 	strd	r1, r2, [r0]
 80130c2:	f04f 0e00 	mov.w	lr, #0
 80130c6:	9a01      	ldr	r2, [sp, #4]
 80130c8:	8103      	strh	r3, [r0, #8]
 80130ca:	6102      	str	r2, [r0, #16]
 80130cc:	f880 e014 	strb.w	lr, [r0, #20]
 80130d0:	b1d3      	cbz	r3, 8013108 <uxr_init_input_reliable_stream+0x4c>
 80130d2:	f8c1 e000 	str.w	lr, [r1]
 80130d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80130da:	f1bc 0f01 	cmp.w	ip, #1
 80130de:	d913      	bls.n	8013108 <uxr_init_input_reliable_stream+0x4c>
 80130e0:	2301      	movs	r3, #1
 80130e2:	fbb3 f1fc 	udiv	r1, r3, ip
 80130e6:	fb0c 3111 	mls	r1, ip, r1, r3
 80130ea:	b289      	uxth	r1, r1
 80130ec:	6842      	ldr	r2, [r0, #4]
 80130ee:	fbb2 f2fc 	udiv	r2, r2, ip
 80130f2:	fb01 f202 	mul.w	r2, r1, r2
 80130f6:	6801      	ldr	r1, [r0, #0]
 80130f8:	f841 e002 	str.w	lr, [r1, r2]
 80130fc:	3301      	adds	r3, #1
 80130fe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013102:	b29b      	uxth	r3, r3
 8013104:	459c      	cmp	ip, r3
 8013106:	d8ec      	bhi.n	80130e2 <uxr_init_input_reliable_stream+0x26>
 8013108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801310c:	60c3      	str	r3, [r0, #12]
 801310e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013112:	bf00      	nop

08013114 <uxr_reset_input_reliable_stream>:
 8013114:	8901      	ldrh	r1, [r0, #8]
 8013116:	b1e9      	cbz	r1, 8013154 <uxr_reset_input_reliable_stream+0x40>
 8013118:	f04f 0c00 	mov.w	ip, #0
 801311c:	b500      	push	{lr}
 801311e:	4663      	mov	r3, ip
 8013120:	46e6      	mov	lr, ip
 8013122:	fbb3 f2f1 	udiv	r2, r3, r1
 8013126:	fb01 3312 	mls	r3, r1, r2, r3
 801312a:	b29b      	uxth	r3, r3
 801312c:	6842      	ldr	r2, [r0, #4]
 801312e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013132:	fb02 f303 	mul.w	r3, r2, r3
 8013136:	6802      	ldr	r2, [r0, #0]
 8013138:	f842 e003 	str.w	lr, [r2, r3]
 801313c:	f10c 0c01 	add.w	ip, ip, #1
 8013140:	8901      	ldrh	r1, [r0, #8]
 8013142:	fa1f f38c 	uxth.w	r3, ip
 8013146:	4299      	cmp	r1, r3
 8013148:	d8eb      	bhi.n	8013122 <uxr_reset_input_reliable_stream+0xe>
 801314a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801314e:	60c3      	str	r3, [r0, #12]
 8013150:	f85d fb04 	ldr.w	pc, [sp], #4
 8013154:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013158:	60c3      	str	r3, [r0, #12]
 801315a:	4770      	bx	lr

0801315c <uxr_receive_reliable_message>:
 801315c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013160:	4604      	mov	r4, r0
 8013162:	460d      	mov	r5, r1
 8013164:	8901      	ldrh	r1, [r0, #8]
 8013166:	8980      	ldrh	r0, [r0, #12]
 8013168:	4690      	mov	r8, r2
 801316a:	461f      	mov	r7, r3
 801316c:	f000 fdd2 	bl	8013d14 <uxr_seq_num_add>
 8013170:	4629      	mov	r1, r5
 8013172:	4606      	mov	r6, r0
 8013174:	89a0      	ldrh	r0, [r4, #12]
 8013176:	f000 fdd5 	bl	8013d24 <uxr_seq_num_cmp>
 801317a:	2800      	cmp	r0, #0
 801317c:	db0a      	blt.n	8013194 <uxr_receive_reliable_message+0x38>
 801317e:	2600      	movs	r6, #0
 8013180:	89e0      	ldrh	r0, [r4, #14]
 8013182:	4629      	mov	r1, r5
 8013184:	f000 fdce 	bl	8013d24 <uxr_seq_num_cmp>
 8013188:	2800      	cmp	r0, #0
 801318a:	da00      	bge.n	801318e <uxr_receive_reliable_message+0x32>
 801318c:	81e5      	strh	r5, [r4, #14]
 801318e:	4630      	mov	r0, r6
 8013190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013194:	4630      	mov	r0, r6
 8013196:	4629      	mov	r1, r5
 8013198:	f000 fdc4 	bl	8013d24 <uxr_seq_num_cmp>
 801319c:	2800      	cmp	r0, #0
 801319e:	dbee      	blt.n	801317e <uxr_receive_reliable_message+0x22>
 80131a0:	6923      	ldr	r3, [r4, #16]
 80131a2:	4640      	mov	r0, r8
 80131a4:	4798      	blx	r3
 80131a6:	2101      	movs	r1, #1
 80131a8:	4681      	mov	r9, r0
 80131aa:	89a0      	ldrh	r0, [r4, #12]
 80131ac:	f000 fdb2 	bl	8013d14 <uxr_seq_num_add>
 80131b0:	f1b9 0f00 	cmp.w	r9, #0
 80131b4:	d101      	bne.n	80131ba <uxr_receive_reliable_message+0x5e>
 80131b6:	4285      	cmp	r5, r0
 80131b8:	d047      	beq.n	801324a <uxr_receive_reliable_message+0xee>
 80131ba:	8922      	ldrh	r2, [r4, #8]
 80131bc:	fbb5 f0f2 	udiv	r0, r5, r2
 80131c0:	fb02 5010 	mls	r0, r2, r0, r5
 80131c4:	b280      	uxth	r0, r0
 80131c6:	6863      	ldr	r3, [r4, #4]
 80131c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80131cc:	fb00 f303 	mul.w	r3, r0, r3
 80131d0:	6820      	ldr	r0, [r4, #0]
 80131d2:	3304      	adds	r3, #4
 80131d4:	4418      	add	r0, r3
 80131d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d1cf      	bne.n	801317e <uxr_receive_reliable_message+0x22>
 80131de:	4641      	mov	r1, r8
 80131e0:	463a      	mov	r2, r7
 80131e2:	f002 fc4c 	bl	8015a7e <memcpy>
 80131e6:	8921      	ldrh	r1, [r4, #8]
 80131e8:	fbb5 f2f1 	udiv	r2, r5, r1
 80131ec:	fb01 5212 	mls	r2, r1, r2, r5
 80131f0:	b292      	uxth	r2, r2
 80131f2:	6863      	ldr	r3, [r4, #4]
 80131f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80131f8:	fb02 f303 	mul.w	r3, r2, r3
 80131fc:	6822      	ldr	r2, [r4, #0]
 80131fe:	50d7      	str	r7, [r2, r3]
 8013200:	9a08      	ldr	r2, [sp, #32]
 8013202:	2301      	movs	r3, #1
 8013204:	7013      	strb	r3, [r2, #0]
 8013206:	f1b9 0f00 	cmp.w	r9, #0
 801320a:	d0b8      	beq.n	801317e <uxr_receive_reliable_message+0x22>
 801320c:	89a6      	ldrh	r6, [r4, #12]
 801320e:	4630      	mov	r0, r6
 8013210:	2101      	movs	r1, #1
 8013212:	f000 fd7f 	bl	8013d14 <uxr_seq_num_add>
 8013216:	8922      	ldrh	r2, [r4, #8]
 8013218:	6863      	ldr	r3, [r4, #4]
 801321a:	fbb3 f3f2 	udiv	r3, r3, r2
 801321e:	4606      	mov	r6, r0
 8013220:	fbb0 f0f2 	udiv	r0, r0, r2
 8013224:	fb02 6010 	mls	r0, r2, r0, r6
 8013228:	b280      	uxth	r0, r0
 801322a:	fb00 f303 	mul.w	r3, r0, r3
 801322e:	6820      	ldr	r0, [r4, #0]
 8013230:	3304      	adds	r3, #4
 8013232:	4418      	add	r0, r3
 8013234:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d0a0      	beq.n	801317e <uxr_receive_reliable_message+0x22>
 801323c:	6923      	ldr	r3, [r4, #16]
 801323e:	4798      	blx	r3
 8013240:	2802      	cmp	r0, #2
 8013242:	d008      	beq.n	8013256 <uxr_receive_reliable_message+0xfa>
 8013244:	2801      	cmp	r0, #1
 8013246:	d0e2      	beq.n	801320e <uxr_receive_reliable_message+0xb2>
 8013248:	e799      	b.n	801317e <uxr_receive_reliable_message+0x22>
 801324a:	9b08      	ldr	r3, [sp, #32]
 801324c:	81a5      	strh	r5, [r4, #12]
 801324e:	2601      	movs	r6, #1
 8013250:	f883 9000 	strb.w	r9, [r3]
 8013254:	e794      	b.n	8013180 <uxr_receive_reliable_message+0x24>
 8013256:	2601      	movs	r6, #1
 8013258:	e792      	b.n	8013180 <uxr_receive_reliable_message+0x24>
 801325a:	bf00      	nop

0801325c <uxr_next_input_reliable_buffer_available>:
 801325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013260:	4604      	mov	r4, r0
 8013262:	460f      	mov	r7, r1
 8013264:	8980      	ldrh	r0, [r0, #12]
 8013266:	2101      	movs	r1, #1
 8013268:	4690      	mov	r8, r2
 801326a:	f000 fd53 	bl	8013d14 <uxr_seq_num_add>
 801326e:	8922      	ldrh	r2, [r4, #8]
 8013270:	fbb0 f6f2 	udiv	r6, r0, r2
 8013274:	fb02 0616 	mls	r6, r2, r6, r0
 8013278:	b2b6      	uxth	r6, r6
 801327a:	6863      	ldr	r3, [r4, #4]
 801327c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013280:	fb06 f303 	mul.w	r3, r6, r3
 8013284:	6826      	ldr	r6, [r4, #0]
 8013286:	3304      	adds	r3, #4
 8013288:	441e      	add	r6, r3
 801328a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801328e:	f1b9 0f00 	cmp.w	r9, #0
 8013292:	d023      	beq.n	80132dc <uxr_next_input_reliable_buffer_available+0x80>
 8013294:	6923      	ldr	r3, [r4, #16]
 8013296:	4605      	mov	r5, r0
 8013298:	4630      	mov	r0, r6
 801329a:	4798      	blx	r3
 801329c:	4682      	mov	sl, r0
 801329e:	b300      	cbz	r0, 80132e2 <uxr_next_input_reliable_buffer_available+0x86>
 80132a0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80132a4:	2101      	movs	r1, #1
 80132a6:	4650      	mov	r0, sl
 80132a8:	f000 fd34 	bl	8013d14 <uxr_seq_num_add>
 80132ac:	8921      	ldrh	r1, [r4, #8]
 80132ae:	fbb0 f2f1 	udiv	r2, r0, r1
 80132b2:	4682      	mov	sl, r0
 80132b4:	fb01 0212 	mls	r2, r1, r2, r0
 80132b8:	e9d4 0300 	ldrd	r0, r3, [r4]
 80132bc:	b292      	uxth	r2, r2
 80132be:	fbb3 f3f1 	udiv	r3, r3, r1
 80132c2:	fb02 f303 	mul.w	r3, r2, r3
 80132c6:	3304      	adds	r3, #4
 80132c8:	4418      	add	r0, r3
 80132ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80132ce:	b12b      	cbz	r3, 80132dc <uxr_next_input_reliable_buffer_available+0x80>
 80132d0:	6923      	ldr	r3, [r4, #16]
 80132d2:	4798      	blx	r3
 80132d4:	2802      	cmp	r0, #2
 80132d6:	d01b      	beq.n	8013310 <uxr_next_input_reliable_buffer_available+0xb4>
 80132d8:	2801      	cmp	r0, #1
 80132da:	d0e3      	beq.n	80132a4 <uxr_next_input_reliable_buffer_available+0x48>
 80132dc:	2000      	movs	r0, #0
 80132de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132e2:	464a      	mov	r2, r9
 80132e4:	4631      	mov	r1, r6
 80132e6:	4638      	mov	r0, r7
 80132e8:	f7f5 fc9a 	bl	8008c20 <ucdr_init_buffer>
 80132ec:	8921      	ldrh	r1, [r4, #8]
 80132ee:	fbb5 f2f1 	udiv	r2, r5, r1
 80132f2:	fb01 5212 	mls	r2, r1, r2, r5
 80132f6:	b292      	uxth	r2, r2
 80132f8:	6863      	ldr	r3, [r4, #4]
 80132fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80132fe:	fb02 f303 	mul.w	r3, r2, r3
 8013302:	6822      	ldr	r2, [r4, #0]
 8013304:	f842 a003 	str.w	sl, [r2, r3]
 8013308:	2001      	movs	r0, #1
 801330a:	81a5      	strh	r5, [r4, #12]
 801330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013310:	8920      	ldrh	r0, [r4, #8]
 8013312:	fbb5 f3f0 	udiv	r3, r5, r0
 8013316:	fb00 5513 	mls	r5, r0, r3, r5
 801331a:	b2ad      	uxth	r5, r5
 801331c:	6863      	ldr	r3, [r4, #4]
 801331e:	fbb3 f3f0 	udiv	r3, r3, r0
 8013322:	fb03 f505 	mul.w	r5, r3, r5
 8013326:	6823      	ldr	r3, [r4, #0]
 8013328:	2000      	movs	r0, #0
 801332a:	5158      	str	r0, [r3, r5]
 801332c:	eb06 0108 	add.w	r1, r6, r8
 8013330:	eba9 0208 	sub.w	r2, r9, r8
 8013334:	4638      	mov	r0, r7
 8013336:	f7f5 fc73 	bl	8008c20 <ucdr_init_buffer>
 801333a:	4638      	mov	r0, r7
 801333c:	4903      	ldr	r1, [pc, #12]	@ (801334c <uxr_next_input_reliable_buffer_available+0xf0>)
 801333e:	4622      	mov	r2, r4
 8013340:	f7f5 fc42 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 8013344:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013348:	2001      	movs	r0, #1
 801334a:	e7c8      	b.n	80132de <uxr_next_input_reliable_buffer_available+0x82>
 801334c:	08013051 	.word	0x08013051

08013350 <uxr_process_heartbeat>:
 8013350:	b538      	push	{r3, r4, r5, lr}
 8013352:	4611      	mov	r1, r2
 8013354:	4604      	mov	r4, r0
 8013356:	89c0      	ldrh	r0, [r0, #14]
 8013358:	4615      	mov	r5, r2
 801335a:	f000 fce3 	bl	8013d24 <uxr_seq_num_cmp>
 801335e:	2800      	cmp	r0, #0
 8013360:	bfb8      	it	lt
 8013362:	81e5      	strhlt	r5, [r4, #14]
 8013364:	bd38      	pop	{r3, r4, r5, pc}
 8013366:	bf00      	nop

08013368 <uxr_compute_acknack>:
 8013368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801336c:	8903      	ldrh	r3, [r0, #8]
 801336e:	8985      	ldrh	r5, [r0, #12]
 8013370:	4604      	mov	r4, r0
 8013372:	460e      	mov	r6, r1
 8013374:	b1d3      	cbz	r3, 80133ac <uxr_compute_acknack+0x44>
 8013376:	4628      	mov	r0, r5
 8013378:	2701      	movs	r7, #1
 801337a:	e003      	b.n	8013384 <uxr_compute_acknack+0x1c>
 801337c:	4567      	cmp	r7, ip
 801337e:	d215      	bcs.n	80133ac <uxr_compute_acknack+0x44>
 8013380:	89a0      	ldrh	r0, [r4, #12]
 8013382:	3701      	adds	r7, #1
 8013384:	b2b9      	uxth	r1, r7
 8013386:	f000 fcc5 	bl	8013d14 <uxr_seq_num_add>
 801338a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801338e:	fbb0 f3fc 	udiv	r3, r0, ip
 8013392:	fb0c 0313 	mls	r3, ip, r3, r0
 8013396:	b29a      	uxth	r2, r3
 8013398:	e9d4 1300 	ldrd	r1, r3, [r4]
 801339c:	fbb3 f3fc 	udiv	r3, r3, ip
 80133a0:	fb02 f303 	mul.w	r3, r2, r3
 80133a4:	58cb      	ldr	r3, [r1, r3]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d1e8      	bne.n	801337c <uxr_compute_acknack+0x14>
 80133aa:	4605      	mov	r5, r0
 80133ac:	8035      	strh	r5, [r6, #0]
 80133ae:	2101      	movs	r1, #1
 80133b0:	4628      	mov	r0, r5
 80133b2:	89e7      	ldrh	r7, [r4, #14]
 80133b4:	f000 fcb2 	bl	8013d1c <uxr_seq_num_sub>
 80133b8:	4601      	mov	r1, r0
 80133ba:	4638      	mov	r0, r7
 80133bc:	f000 fcae 	bl	8013d1c <uxr_seq_num_sub>
 80133c0:	4605      	mov	r5, r0
 80133c2:	b318      	cbz	r0, 801340c <uxr_compute_acknack+0xa4>
 80133c4:	f04f 0900 	mov.w	r9, #0
 80133c8:	464f      	mov	r7, r9
 80133ca:	f04f 0801 	mov.w	r8, #1
 80133ce:	fa1f f189 	uxth.w	r1, r9
 80133d2:	8830      	ldrh	r0, [r6, #0]
 80133d4:	f000 fc9e 	bl	8013d14 <uxr_seq_num_add>
 80133d8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80133dc:	fbb0 f3fc 	udiv	r3, r0, ip
 80133e0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80133e4:	fb03 001c 	mls	r0, r3, ip, r0
 80133e8:	b283      	uxth	r3, r0
 80133ea:	fbb2 f2fc 	udiv	r2, r2, ip
 80133ee:	fb02 f303 	mul.w	r3, r2, r3
 80133f2:	fa08 f209 	lsl.w	r2, r8, r9
 80133f6:	58cb      	ldr	r3, [r1, r3]
 80133f8:	f109 0901 	add.w	r9, r9, #1
 80133fc:	b90b      	cbnz	r3, 8013402 <uxr_compute_acknack+0x9a>
 80133fe:	4317      	orrs	r7, r2
 8013400:	b2bf      	uxth	r7, r7
 8013402:	454d      	cmp	r5, r9
 8013404:	d1e3      	bne.n	80133ce <uxr_compute_acknack+0x66>
 8013406:	4638      	mov	r0, r7
 8013408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801340c:	4607      	mov	r7, r0
 801340e:	4638      	mov	r0, r7
 8013410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013414 <uxr_init_output_best_effort_stream>:
 8013414:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8013418:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801341c:	6001      	str	r1, [r0, #0]
 801341e:	7303      	strb	r3, [r0, #12]
 8013420:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8013424:	4770      	bx	lr
 8013426:	bf00      	nop

08013428 <uxr_reset_output_best_effort_stream>:
 8013428:	7b02      	ldrb	r2, [r0, #12]
 801342a:	6042      	str	r2, [r0, #4]
 801342c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013430:	81c3      	strh	r3, [r0, #14]
 8013432:	4770      	bx	lr

08013434 <uxr_prepare_best_effort_buffer_to_write>:
 8013434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013436:	4604      	mov	r4, r0
 8013438:	b083      	sub	sp, #12
 801343a:	6840      	ldr	r0, [r0, #4]
 801343c:	460d      	mov	r5, r1
 801343e:	4616      	mov	r6, r2
 8013440:	f7f9 fb62 	bl	800cb08 <uxr_submessage_padding>
 8013444:	6863      	ldr	r3, [r4, #4]
 8013446:	4418      	add	r0, r3
 8013448:	68a3      	ldr	r3, [r4, #8]
 801344a:	1942      	adds	r2, r0, r5
 801344c:	4293      	cmp	r3, r2
 801344e:	bf2c      	ite	cs
 8013450:	2701      	movcs	r7, #1
 8013452:	2700      	movcc	r7, #0
 8013454:	d202      	bcs.n	801345c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8013456:	4638      	mov	r0, r7
 8013458:	b003      	add	sp, #12
 801345a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801345c:	9000      	str	r0, [sp, #0]
 801345e:	6821      	ldr	r1, [r4, #0]
 8013460:	4630      	mov	r0, r6
 8013462:	2300      	movs	r3, #0
 8013464:	f7f5 fbca 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 8013468:	6861      	ldr	r1, [r4, #4]
 801346a:	4638      	mov	r0, r7
 801346c:	4429      	add	r1, r5
 801346e:	6061      	str	r1, [r4, #4]
 8013470:	b003      	add	sp, #12
 8013472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013474 <uxr_prepare_best_effort_buffer_to_send>:
 8013474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013478:	4604      	mov	r4, r0
 801347a:	461d      	mov	r5, r3
 801347c:	6840      	ldr	r0, [r0, #4]
 801347e:	7b23      	ldrb	r3, [r4, #12]
 8013480:	4298      	cmp	r0, r3
 8013482:	bf8c      	ite	hi
 8013484:	2601      	movhi	r6, #1
 8013486:	2600      	movls	r6, #0
 8013488:	d802      	bhi.n	8013490 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801348a:	4630      	mov	r0, r6
 801348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013490:	4688      	mov	r8, r1
 8013492:	89e0      	ldrh	r0, [r4, #14]
 8013494:	2101      	movs	r1, #1
 8013496:	4617      	mov	r7, r2
 8013498:	f000 fc3c 	bl	8013d14 <uxr_seq_num_add>
 801349c:	6823      	ldr	r3, [r4, #0]
 801349e:	81e0      	strh	r0, [r4, #14]
 80134a0:	8028      	strh	r0, [r5, #0]
 80134a2:	f8c8 3000 	str.w	r3, [r8]
 80134a6:	6863      	ldr	r3, [r4, #4]
 80134a8:	603b      	str	r3, [r7, #0]
 80134aa:	7b23      	ldrb	r3, [r4, #12]
 80134ac:	6063      	str	r3, [r4, #4]
 80134ae:	4630      	mov	r0, r6
 80134b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134b4 <on_full_output_buffer>:
 80134b4:	b538      	push	{r3, r4, r5, lr}
 80134b6:	6802      	ldr	r2, [r0, #0]
 80134b8:	460c      	mov	r4, r1
 80134ba:	6809      	ldr	r1, [r1, #0]
 80134bc:	8923      	ldrh	r3, [r4, #8]
 80134be:	eba2 0c01 	sub.w	ip, r2, r1
 80134c2:	6862      	ldr	r2, [r4, #4]
 80134c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80134c8:	fbbc fcf2 	udiv	ip, ip, r2
 80134cc:	f10c 0c01 	add.w	ip, ip, #1
 80134d0:	fa1f fc8c 	uxth.w	ip, ip
 80134d4:	fbbc fef3 	udiv	lr, ip, r3
 80134d8:	fb03 c31e 	mls	r3, r3, lr, ip
 80134dc:	b29b      	uxth	r3, r3
 80134de:	fb02 f303 	mul.w	r3, r2, r3
 80134e2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80134e6:	58ca      	ldr	r2, [r1, r3]
 80134e8:	4463      	add	r3, ip
 80134ea:	eba2 020c 	sub.w	r2, r2, ip
 80134ee:	3308      	adds	r3, #8
 80134f0:	4605      	mov	r5, r0
 80134f2:	4419      	add	r1, r3
 80134f4:	3a04      	subs	r2, #4
 80134f6:	6903      	ldr	r3, [r0, #16]
 80134f8:	f7f5 fb8a 	bl	8008c10 <ucdr_init_buffer_origin>
 80134fc:	4628      	mov	r0, r5
 80134fe:	4903      	ldr	r1, [pc, #12]	@ (801350c <on_full_output_buffer+0x58>)
 8013500:	4622      	mov	r2, r4
 8013502:	f7f5 fb61 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 8013506:	2000      	movs	r0, #0
 8013508:	bd38      	pop	{r3, r4, r5, pc}
 801350a:	bf00      	nop
 801350c:	080134b5 	.word	0x080134b5

08013510 <uxr_init_output_reliable_stream>:
 8013510:	b410      	push	{r4}
 8013512:	f89d c004 	ldrb.w	ip, [sp, #4]
 8013516:	8103      	strh	r3, [r0, #8]
 8013518:	e9c0 1200 	strd	r1, r2, [r0]
 801351c:	f880 c00c 	strb.w	ip, [r0, #12]
 8013520:	b1d3      	cbz	r3, 8013558 <uxr_init_output_reliable_stream+0x48>
 8013522:	f8c1 c000 	str.w	ip, [r1]
 8013526:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801352a:	f1bc 0f01 	cmp.w	ip, #1
 801352e:	d913      	bls.n	8013558 <uxr_init_output_reliable_stream+0x48>
 8013530:	2301      	movs	r3, #1
 8013532:	fbb3 f1fc 	udiv	r1, r3, ip
 8013536:	fb0c 3111 	mls	r1, ip, r1, r3
 801353a:	b289      	uxth	r1, r1
 801353c:	6842      	ldr	r2, [r0, #4]
 801353e:	6804      	ldr	r4, [r0, #0]
 8013540:	fbb2 f2fc 	udiv	r2, r2, ip
 8013544:	fb01 f202 	mul.w	r2, r1, r2
 8013548:	7b01      	ldrb	r1, [r0, #12]
 801354a:	50a1      	str	r1, [r4, r2]
 801354c:	3301      	adds	r3, #1
 801354e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013552:	b29b      	uxth	r3, r3
 8013554:	459c      	cmp	ip, r3
 8013556:	d8ec      	bhi.n	8013532 <uxr_init_output_reliable_stream+0x22>
 8013558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801355c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013560:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013564:	4905      	ldr	r1, [pc, #20]	@ (801357c <uxr_init_output_reliable_stream+0x6c>)
 8013566:	f85d 4b04 	ldr.w	r4, [sp], #4
 801356a:	f8c0 100e 	str.w	r1, [r0, #14]
 801356e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013572:	2300      	movs	r3, #0
 8013574:	8242      	strh	r2, [r0, #18]
 8013576:	8403      	strh	r3, [r0, #32]
 8013578:	4770      	bx	lr
 801357a:	bf00      	nop
 801357c:	ffff0000 	.word	0xffff0000

08013580 <uxr_reset_output_reliable_stream>:
 8013580:	8901      	ldrh	r1, [r0, #8]
 8013582:	b1b1      	cbz	r1, 80135b2 <uxr_reset_output_reliable_stream+0x32>
 8013584:	f04f 0c00 	mov.w	ip, #0
 8013588:	4663      	mov	r3, ip
 801358a:	fbb3 f2f1 	udiv	r2, r3, r1
 801358e:	fb01 3312 	mls	r3, r1, r2, r3
 8013592:	b29b      	uxth	r3, r3
 8013594:	6842      	ldr	r2, [r0, #4]
 8013596:	fbb2 f2f1 	udiv	r2, r2, r1
 801359a:	6801      	ldr	r1, [r0, #0]
 801359c:	fb02 f303 	mul.w	r3, r2, r3
 80135a0:	7b02      	ldrb	r2, [r0, #12]
 80135a2:	50ca      	str	r2, [r1, r3]
 80135a4:	f10c 0c01 	add.w	ip, ip, #1
 80135a8:	8901      	ldrh	r1, [r0, #8]
 80135aa:	fa1f f38c 	uxth.w	r3, ip
 80135ae:	4299      	cmp	r1, r3
 80135b0:	d8eb      	bhi.n	801358a <uxr_reset_output_reliable_stream+0xa>
 80135b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80135b6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80135ba:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80135be:	4904      	ldr	r1, [pc, #16]	@ (80135d0 <uxr_reset_output_reliable_stream+0x50>)
 80135c0:	f8c0 100e 	str.w	r1, [r0, #14]
 80135c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80135c8:	2300      	movs	r3, #0
 80135ca:	8242      	strh	r2, [r0, #18]
 80135cc:	8403      	strh	r3, [r0, #32]
 80135ce:	4770      	bx	lr
 80135d0:	ffff0000 	.word	0xffff0000

080135d4 <uxr_prepare_reliable_buffer_to_write>:
 80135d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d8:	4604      	mov	r4, r0
 80135da:	b091      	sub	sp, #68	@ 0x44
 80135dc:	8900      	ldrh	r0, [r0, #8]
 80135de:	89e6      	ldrh	r6, [r4, #14]
 80135e0:	6823      	ldr	r3, [r4, #0]
 80135e2:	9204      	str	r2, [sp, #16]
 80135e4:	fbb6 f2f0 	udiv	r2, r6, r0
 80135e8:	fb00 6212 	mls	r2, r0, r2, r6
 80135ec:	b292      	uxth	r2, r2
 80135ee:	6865      	ldr	r5, [r4, #4]
 80135f0:	fbb5 f5f0 	udiv	r5, r5, r0
 80135f4:	fb05 3202 	mla	r2, r5, r2, r3
 80135f8:	3204      	adds	r2, #4
 80135fa:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80135fe:	f894 900c 	ldrb.w	r9, [r4, #12]
 8013602:	9203      	str	r2, [sp, #12]
 8013604:	468b      	mov	fp, r1
 8013606:	1f2f      	subs	r7, r5, #4
 8013608:	2800      	cmp	r0, #0
 801360a:	f000 814c 	beq.w	80138a6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801360e:	f04f 0c00 	mov.w	ip, #0
 8013612:	46e2      	mov	sl, ip
 8013614:	4661      	mov	r1, ip
 8013616:	fbb1 f2f0 	udiv	r2, r1, r0
 801361a:	fb00 1212 	mls	r2, r0, r2, r1
 801361e:	b292      	uxth	r2, r2
 8013620:	fb05 f202 	mul.w	r2, r5, r2
 8013624:	f10c 0c01 	add.w	ip, ip, #1
 8013628:	589a      	ldr	r2, [r3, r2]
 801362a:	454a      	cmp	r2, r9
 801362c:	bf08      	it	eq
 801362e:	f10a 0a01 	addeq.w	sl, sl, #1
 8013632:	fa1f f18c 	uxth.w	r1, ip
 8013636:	bf08      	it	eq
 8013638:	fa1f fa8a 	uxtheq.w	sl, sl
 801363c:	4281      	cmp	r1, r0
 801363e:	d3ea      	bcc.n	8013616 <uxr_prepare_reliable_buffer_to_write+0x42>
 8013640:	4640      	mov	r0, r8
 8013642:	2104      	movs	r1, #4
 8013644:	f8cd a014 	str.w	sl, [sp, #20]
 8013648:	f7f5 faee 	bl	8008c28 <ucdr_alignment>
 801364c:	4480      	add	r8, r0
 801364e:	eb08 020b 	add.w	r2, r8, fp
 8013652:	42ba      	cmp	r2, r7
 8013654:	f240 80cd 	bls.w	80137f2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8013658:	7b22      	ldrb	r2, [r4, #12]
 801365a:	445a      	add	r2, fp
 801365c:	42ba      	cmp	r2, r7
 801365e:	f240 80b5 	bls.w	80137cc <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8013662:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8013666:	33fc      	adds	r3, #252	@ 0xfc
 8013668:	b2ba      	uxth	r2, r7
 801366a:	4413      	add	r3, r2
 801366c:	b29b      	uxth	r3, r3
 801366e:	fb0a f903 	mul.w	r9, sl, r3
 8013672:	45d9      	cmp	r9, fp
 8013674:	9305      	str	r3, [sp, #20]
 8013676:	9306      	str	r3, [sp, #24]
 8013678:	f0c0 80b7 	bcc.w	80137ea <uxr_prepare_reliable_buffer_to_write+0x216>
 801367c:	f108 0304 	add.w	r3, r8, #4
 8013680:	42bb      	cmp	r3, r7
 8013682:	f080 80db 	bcs.w	801383c <uxr_prepare_reliable_buffer_to_write+0x268>
 8013686:	f1a2 0904 	sub.w	r9, r2, #4
 801368a:	eba9 0908 	sub.w	r9, r9, r8
 801368e:	9b05      	ldr	r3, [sp, #20]
 8013690:	fa1f f989 	uxth.w	r9, r9
 8013694:	ebab 0b09 	sub.w	fp, fp, r9
 8013698:	fbbb f2f3 	udiv	r2, fp, r3
 801369c:	fb03 b312 	mls	r3, r3, r2, fp
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	f000 80c8 	beq.w	8013836 <uxr_prepare_reliable_buffer_to_write+0x262>
 80136a6:	3201      	adds	r2, #1
 80136a8:	b292      	uxth	r2, r2
 80136aa:	9306      	str	r3, [sp, #24]
 80136ac:	4552      	cmp	r2, sl
 80136ae:	f200 809c 	bhi.w	80137ea <uxr_prepare_reliable_buffer_to_write+0x216>
 80136b2:	f10d 0b20 	add.w	fp, sp, #32
 80136b6:	2a00      	cmp	r2, #0
 80136b8:	d042      	beq.n	8013740 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80136ba:	f8cd 801c 	str.w	r8, [sp, #28]
 80136be:	f04f 0a00 	mov.w	sl, #0
 80136c2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80136c6:	9505      	str	r5, [sp, #20]
 80136c8:	f10d 0b20 	add.w	fp, sp, #32
 80136cc:	4615      	mov	r5, r2
 80136ce:	e000      	b.n	80136d2 <uxr_prepare_reliable_buffer_to_write+0xfe>
 80136d0:	46c1      	mov	r9, r8
 80136d2:	8920      	ldrh	r0, [r4, #8]
 80136d4:	fbb6 f2f0 	udiv	r2, r6, r0
 80136d8:	fb00 6112 	mls	r1, r0, r2, r6
 80136dc:	b28a      	uxth	r2, r1
 80136de:	6863      	ldr	r3, [r4, #4]
 80136e0:	fbb3 f1f0 	udiv	r1, r3, r0
 80136e4:	6823      	ldr	r3, [r4, #0]
 80136e6:	fb02 f101 	mul.w	r1, r2, r1
 80136ea:	3104      	adds	r1, #4
 80136ec:	4419      	add	r1, r3
 80136ee:	4658      	mov	r0, fp
 80136f0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80136f4:	9200      	str	r2, [sp, #0]
 80136f6:	2300      	movs	r3, #0
 80136f8:	463a      	mov	r2, r7
 80136fa:	f7f5 fa7f 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 80136fe:	464a      	mov	r2, r9
 8013700:	2300      	movs	r3, #0
 8013702:	210d      	movs	r1, #13
 8013704:	4658      	mov	r0, fp
 8013706:	f7f9 f9bf 	bl	800ca88 <uxr_buffer_submessage_header>
 801370a:	8921      	ldrh	r1, [r4, #8]
 801370c:	fbb6 f2f1 	udiv	r2, r6, r1
 8013710:	fb01 6212 	mls	r2, r1, r2, r6
 8013714:	b292      	uxth	r2, r2
 8013716:	6863      	ldr	r3, [r4, #4]
 8013718:	fbb3 f3f1 	udiv	r3, r3, r1
 801371c:	fb02 f303 	mul.w	r3, r2, r3
 8013720:	6822      	ldr	r2, [r4, #0]
 8013722:	4630      	mov	r0, r6
 8013724:	50d7      	str	r7, [r2, r3]
 8013726:	2101      	movs	r1, #1
 8013728:	f000 faf4 	bl	8013d14 <uxr_seq_num_add>
 801372c:	f10a 0a01 	add.w	sl, sl, #1
 8013730:	fa1f f38a 	uxth.w	r3, sl
 8013734:	429d      	cmp	r5, r3
 8013736:	4606      	mov	r6, r0
 8013738:	d8ca      	bhi.n	80136d0 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801373a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801373e:	9d05      	ldr	r5, [sp, #20]
 8013740:	8920      	ldrh	r0, [r4, #8]
 8013742:	fbb6 f3f0 	udiv	r3, r6, r0
 8013746:	fb00 6313 	mls	r3, r0, r3, r6
 801374a:	b299      	uxth	r1, r3
 801374c:	6863      	ldr	r3, [r4, #4]
 801374e:	fbb3 f3f0 	udiv	r3, r3, r0
 8013752:	fb01 f303 	mul.w	r3, r1, r3
 8013756:	6821      	ldr	r1, [r4, #0]
 8013758:	3304      	adds	r3, #4
 801375a:	4419      	add	r1, r3
 801375c:	463a      	mov	r2, r7
 801375e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8013762:	9000      	str	r0, [sp, #0]
 8013764:	2300      	movs	r3, #0
 8013766:	4658      	mov	r0, fp
 8013768:	f7f5 fa48 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 801376c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8013770:	4658      	mov	r0, fp
 8013772:	fa1f f289 	uxth.w	r2, r9
 8013776:	2302      	movs	r3, #2
 8013778:	210d      	movs	r1, #13
 801377a:	f7f9 f985 	bl	800ca88 <uxr_buffer_submessage_header>
 801377e:	9b03      	ldr	r3, [sp, #12]
 8013780:	8927      	ldrh	r7, [r4, #8]
 8013782:	7b20      	ldrb	r0, [r4, #12]
 8013784:	f108 0104 	add.w	r1, r8, #4
 8013788:	440b      	add	r3, r1
 801378a:	4619      	mov	r1, r3
 801378c:	fbb6 f3f7 	udiv	r3, r6, r7
 8013790:	fb07 6313 	mls	r3, r7, r3, r6
 8013794:	f1a5 0208 	sub.w	r2, r5, #8
 8013798:	b29d      	uxth	r5, r3
 801379a:	3004      	adds	r0, #4
 801379c:	6863      	ldr	r3, [r4, #4]
 801379e:	fbb3 f3f7 	udiv	r3, r3, r7
 80137a2:	fb05 f303 	mul.w	r3, r5, r3
 80137a6:	6825      	ldr	r5, [r4, #0]
 80137a8:	4448      	add	r0, r9
 80137aa:	50e8      	str	r0, [r5, r3]
 80137ac:	9d04      	ldr	r5, [sp, #16]
 80137ae:	eba2 0208 	sub.w	r2, r2, r8
 80137b2:	4628      	mov	r0, r5
 80137b4:	f7f5 fa34 	bl	8008c20 <ucdr_init_buffer>
 80137b8:	4628      	mov	r0, r5
 80137ba:	493c      	ldr	r1, [pc, #240]	@ (80138ac <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80137bc:	4622      	mov	r2, r4
 80137be:	f7f5 fa03 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 80137c2:	2001      	movs	r0, #1
 80137c4:	81e6      	strh	r6, [r4, #14]
 80137c6:	b011      	add	sp, #68	@ 0x44
 80137c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137cc:	2101      	movs	r1, #1
 80137ce:	89e0      	ldrh	r0, [r4, #14]
 80137d0:	f000 faa0 	bl	8013d14 <uxr_seq_num_add>
 80137d4:	8921      	ldrh	r1, [r4, #8]
 80137d6:	4605      	mov	r5, r0
 80137d8:	8a60      	ldrh	r0, [r4, #18]
 80137da:	f000 fa9b 	bl	8013d14 <uxr_seq_num_add>
 80137de:	4601      	mov	r1, r0
 80137e0:	4628      	mov	r0, r5
 80137e2:	f000 fa9f 	bl	8013d24 <uxr_seq_num_cmp>
 80137e6:	2800      	cmp	r0, #0
 80137e8:	dd42      	ble.n	8013870 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80137ea:	2000      	movs	r0, #0
 80137ec:	b011      	add	sp, #68	@ 0x44
 80137ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f2:	8921      	ldrh	r1, [r4, #8]
 80137f4:	8a60      	ldrh	r0, [r4, #18]
 80137f6:	9205      	str	r2, [sp, #20]
 80137f8:	f000 fa8c 	bl	8013d14 <uxr_seq_num_add>
 80137fc:	4601      	mov	r1, r0
 80137fe:	4630      	mov	r0, r6
 8013800:	f000 fa90 	bl	8013d24 <uxr_seq_num_cmp>
 8013804:	2800      	cmp	r0, #0
 8013806:	9a05      	ldr	r2, [sp, #20]
 8013808:	dcef      	bgt.n	80137ea <uxr_prepare_reliable_buffer_to_write+0x216>
 801380a:	8927      	ldrh	r7, [r4, #8]
 801380c:	fbb6 f3f7 	udiv	r3, r6, r7
 8013810:	fb07 6313 	mls	r3, r7, r3, r6
 8013814:	b29d      	uxth	r5, r3
 8013816:	6863      	ldr	r3, [r4, #4]
 8013818:	6824      	ldr	r4, [r4, #0]
 801381a:	fbb3 f3f7 	udiv	r3, r3, r7
 801381e:	fb05 f303 	mul.w	r3, r5, r3
 8013822:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8013826:	50e2      	str	r2, [r4, r3]
 8013828:	2300      	movs	r3, #0
 801382a:	f8cd 8000 	str.w	r8, [sp]
 801382e:	f7f5 f9e5 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 8013832:	2001      	movs	r0, #1
 8013834:	e7da      	b.n	80137ec <uxr_prepare_reliable_buffer_to_write+0x218>
 8013836:	b293      	uxth	r3, r2
 8013838:	461a      	mov	r2, r3
 801383a:	e737      	b.n	80136ac <uxr_prepare_reliable_buffer_to_write+0xd8>
 801383c:	4630      	mov	r0, r6
 801383e:	2101      	movs	r1, #1
 8013840:	9207      	str	r2, [sp, #28]
 8013842:	f000 fa67 	bl	8013d14 <uxr_seq_num_add>
 8013846:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801384a:	fbb0 f1fc 	udiv	r1, r0, ip
 801384e:	fb0c 0111 	mls	r1, ip, r1, r0
 8013852:	4606      	mov	r6, r0
 8013854:	b288      	uxth	r0, r1
 8013856:	6863      	ldr	r3, [r4, #4]
 8013858:	fbb3 f1fc 	udiv	r1, r3, ip
 801385c:	6823      	ldr	r3, [r4, #0]
 801385e:	9a07      	ldr	r2, [sp, #28]
 8013860:	fb00 f101 	mul.w	r1, r0, r1
 8013864:	3104      	adds	r1, #4
 8013866:	440b      	add	r3, r1
 8013868:	9303      	str	r3, [sp, #12]
 801386a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801386e:	e70a      	b.n	8013686 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8013870:	8921      	ldrh	r1, [r4, #8]
 8013872:	fbb5 f3f1 	udiv	r3, r5, r1
 8013876:	fb01 5313 	mls	r3, r1, r3, r5
 801387a:	b29a      	uxth	r2, r3
 801387c:	6863      	ldr	r3, [r4, #4]
 801387e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013882:	6821      	ldr	r1, [r4, #0]
 8013884:	9804      	ldr	r0, [sp, #16]
 8013886:	fb02 f303 	mul.w	r3, r2, r3
 801388a:	3304      	adds	r3, #4
 801388c:	7b22      	ldrb	r2, [r4, #12]
 801388e:	4419      	add	r1, r3
 8013890:	445a      	add	r2, fp
 8013892:	f841 2c04 	str.w	r2, [r1, #-4]
 8013896:	7b23      	ldrb	r3, [r4, #12]
 8013898:	9300      	str	r3, [sp, #0]
 801389a:	2300      	movs	r3, #0
 801389c:	f7f5 f9ae 	bl	8008bfc <ucdr_init_buffer_origin_offset>
 80138a0:	81e5      	strh	r5, [r4, #14]
 80138a2:	2001      	movs	r0, #1
 80138a4:	e7a2      	b.n	80137ec <uxr_prepare_reliable_buffer_to_write+0x218>
 80138a6:	4682      	mov	sl, r0
 80138a8:	e6ca      	b.n	8013640 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80138aa:	bf00      	nop
 80138ac:	080134b5 	.word	0x080134b5

080138b0 <uxr_prepare_next_reliable_buffer_to_send>:
 80138b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b2:	4604      	mov	r4, r0
 80138b4:	460f      	mov	r7, r1
 80138b6:	8a00      	ldrh	r0, [r0, #16]
 80138b8:	2101      	movs	r1, #1
 80138ba:	4616      	mov	r6, r2
 80138bc:	461d      	mov	r5, r3
 80138be:	f000 fa29 	bl	8013d14 <uxr_seq_num_add>
 80138c2:	8028      	strh	r0, [r5, #0]
 80138c4:	8922      	ldrh	r2, [r4, #8]
 80138c6:	fbb0 f3f2 	udiv	r3, r0, r2
 80138ca:	fb02 0c13 	mls	ip, r2, r3, r0
 80138ce:	fa1f fc8c 	uxth.w	ip, ip
 80138d2:	6863      	ldr	r3, [r4, #4]
 80138d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80138d8:	fb0c fc03 	mul.w	ip, ip, r3
 80138dc:	6823      	ldr	r3, [r4, #0]
 80138de:	89e1      	ldrh	r1, [r4, #14]
 80138e0:	f10c 0c04 	add.w	ip, ip, #4
 80138e4:	4463      	add	r3, ip
 80138e6:	603b      	str	r3, [r7, #0]
 80138e8:	6823      	ldr	r3, [r4, #0]
 80138ea:	449c      	add	ip, r3
 80138ec:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80138f0:	6033      	str	r3, [r6, #0]
 80138f2:	f000 fa17 	bl	8013d24 <uxr_seq_num_cmp>
 80138f6:	2800      	cmp	r0, #0
 80138f8:	dd01      	ble.n	80138fe <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80138fa:	2000      	movs	r0, #0
 80138fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138fe:	7b23      	ldrb	r3, [r4, #12]
 8013900:	6832      	ldr	r2, [r6, #0]
 8013902:	429a      	cmp	r2, r3
 8013904:	d9f9      	bls.n	80138fa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013906:	8a61      	ldrh	r1, [r4, #18]
 8013908:	8a20      	ldrh	r0, [r4, #16]
 801390a:	f000 fa07 	bl	8013d1c <uxr_seq_num_sub>
 801390e:	8923      	ldrh	r3, [r4, #8]
 8013910:	4283      	cmp	r3, r0
 8013912:	d0f2      	beq.n	80138fa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013914:	8828      	ldrh	r0, [r5, #0]
 8013916:	89e3      	ldrh	r3, [r4, #14]
 8013918:	8220      	strh	r0, [r4, #16]
 801391a:	4298      	cmp	r0, r3
 801391c:	d001      	beq.n	8013922 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801391e:	2001      	movs	r0, #1
 8013920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013922:	2101      	movs	r1, #1
 8013924:	f000 f9f6 	bl	8013d14 <uxr_seq_num_add>
 8013928:	81e0      	strh	r0, [r4, #14]
 801392a:	2001      	movs	r0, #1
 801392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801392e:	bf00      	nop

08013930 <uxr_update_output_stream_heartbeat_timestamp>:
 8013930:	b570      	push	{r4, r5, r6, lr}
 8013932:	8a01      	ldrh	r1, [r0, #16]
 8013934:	4604      	mov	r4, r0
 8013936:	8a40      	ldrh	r0, [r0, #18]
 8013938:	4615      	mov	r5, r2
 801393a:	461e      	mov	r6, r3
 801393c:	f000 f9f2 	bl	8013d24 <uxr_seq_num_cmp>
 8013940:	2800      	cmp	r0, #0
 8013942:	db07      	blt.n	8013954 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8013944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013948:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801394c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8013950:	2000      	movs	r0, #0
 8013952:	bd70      	pop	{r4, r5, r6, pc}
 8013954:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013958:	b940      	cbnz	r0, 801396c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801395a:	2301      	movs	r3, #1
 801395c:	f884 3020 	strb.w	r3, [r4, #32]
 8013960:	3564      	adds	r5, #100	@ 0x64
 8013962:	f146 0600 	adc.w	r6, r6, #0
 8013966:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801396a:	bd70      	pop	{r4, r5, r6, pc}
 801396c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013970:	4295      	cmp	r5, r2
 8013972:	eb76 0303 	sbcs.w	r3, r6, r3
 8013976:	bfa5      	ittet	ge
 8013978:	3001      	addge	r0, #1
 801397a:	f884 0020 	strbge.w	r0, [r4, #32]
 801397e:	2000      	movlt	r0, #0
 8013980:	2001      	movge	r0, #1
 8013982:	e7ed      	b.n	8013960 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08013984 <uxr_begin_output_nack_buffer_it>:
 8013984:	8a40      	ldrh	r0, [r0, #18]
 8013986:	4770      	bx	lr

08013988 <uxr_next_reliable_nack_buffer_to_send>:
 8013988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801398c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8013990:	b082      	sub	sp, #8
 8013992:	f1b8 0f00 	cmp.w	r8, #0
 8013996:	d011      	beq.n	80139bc <uxr_next_reliable_nack_buffer_to_send+0x34>
 8013998:	4604      	mov	r4, r0
 801399a:	8818      	ldrh	r0, [r3, #0]
 801399c:	460e      	mov	r6, r1
 801399e:	4617      	mov	r7, r2
 80139a0:	461d      	mov	r5, r3
 80139a2:	2101      	movs	r1, #1
 80139a4:	f000 f9b6 	bl	8013d14 <uxr_seq_num_add>
 80139a8:	8028      	strh	r0, [r5, #0]
 80139aa:	8a21      	ldrh	r1, [r4, #16]
 80139ac:	f000 f9ba 	bl	8013d24 <uxr_seq_num_cmp>
 80139b0:	2800      	cmp	r0, #0
 80139b2:	dd07      	ble.n	80139c4 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80139b4:	f04f 0800 	mov.w	r8, #0
 80139b8:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80139bc:	4640      	mov	r0, r8
 80139be:	b002      	add	sp, #8
 80139c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139c4:	8921      	ldrh	r1, [r4, #8]
 80139c6:	8828      	ldrh	r0, [r5, #0]
 80139c8:	6823      	ldr	r3, [r4, #0]
 80139ca:	fbb0 f2f1 	udiv	r2, r0, r1
 80139ce:	fb01 0c12 	mls	ip, r1, r2, r0
 80139d2:	fa1f f28c 	uxth.w	r2, ip
 80139d6:	9301      	str	r3, [sp, #4]
 80139d8:	6863      	ldr	r3, [r4, #4]
 80139da:	fbb3 fcf1 	udiv	ip, r3, r1
 80139de:	9b01      	ldr	r3, [sp, #4]
 80139e0:	fb02 fc0c 	mul.w	ip, r2, ip
 80139e4:	f10c 0c04 	add.w	ip, ip, #4
 80139e8:	4463      	add	r3, ip
 80139ea:	6033      	str	r3, [r6, #0]
 80139ec:	6823      	ldr	r3, [r4, #0]
 80139ee:	4463      	add	r3, ip
 80139f0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80139f4:	603b      	str	r3, [r7, #0]
 80139f6:	7b22      	ldrb	r2, [r4, #12]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d0d2      	beq.n	80139a2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80139fc:	4640      	mov	r0, r8
 80139fe:	b002      	add	sp, #8
 8013a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a04 <uxr_process_acknack>:
 8013a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a06:	4604      	mov	r4, r0
 8013a08:	460e      	mov	r6, r1
 8013a0a:	4610      	mov	r0, r2
 8013a0c:	2101      	movs	r1, #1
 8013a0e:	f000 f985 	bl	8013d1c <uxr_seq_num_sub>
 8013a12:	8a61      	ldrh	r1, [r4, #18]
 8013a14:	f000 f982 	bl	8013d1c <uxr_seq_num_sub>
 8013a18:	b1c0      	cbz	r0, 8013a4c <uxr_process_acknack+0x48>
 8013a1a:	4605      	mov	r5, r0
 8013a1c:	2700      	movs	r7, #0
 8013a1e:	2101      	movs	r1, #1
 8013a20:	8a60      	ldrh	r0, [r4, #18]
 8013a22:	f000 f977 	bl	8013d14 <uxr_seq_num_add>
 8013a26:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013a2a:	fbb0 f1fc 	udiv	r1, r0, ip
 8013a2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013a32:	fb0c 0111 	mls	r1, ip, r1, r0
 8013a36:	b289      	uxth	r1, r1
 8013a38:	3701      	adds	r7, #1
 8013a3a:	fbb3 f3fc 	udiv	r3, r3, ip
 8013a3e:	fb01 f303 	mul.w	r3, r1, r3
 8013a42:	42bd      	cmp	r5, r7
 8013a44:	7b21      	ldrb	r1, [r4, #12]
 8013a46:	8260      	strh	r0, [r4, #18]
 8013a48:	50d1      	str	r1, [r2, r3]
 8013a4a:	d1e8      	bne.n	8013a1e <uxr_process_acknack+0x1a>
 8013a4c:	3e00      	subs	r6, #0
 8013a4e:	f04f 0300 	mov.w	r3, #0
 8013a52:	bf18      	it	ne
 8013a54:	2601      	movne	r6, #1
 8013a56:	f884 3020 	strb.w	r3, [r4, #32]
 8013a5a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8013a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013a60 <uxr_is_output_up_to_date>:
 8013a60:	8a01      	ldrh	r1, [r0, #16]
 8013a62:	8a40      	ldrh	r0, [r0, #18]
 8013a64:	b508      	push	{r3, lr}
 8013a66:	f000 f95d 	bl	8013d24 <uxr_seq_num_cmp>
 8013a6a:	fab0 f080 	clz	r0, r0
 8013a6e:	0940      	lsrs	r0, r0, #5
 8013a70:	bd08      	pop	{r3, pc}
 8013a72:	bf00      	nop

08013a74 <get_available_free_slots>:
 8013a74:	8902      	ldrh	r2, [r0, #8]
 8013a76:	b1da      	cbz	r2, 8013ab0 <get_available_free_slots+0x3c>
 8013a78:	b530      	push	{r4, r5, lr}
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	6843      	ldr	r3, [r0, #4]
 8013a7e:	6805      	ldr	r5, [r0, #0]
 8013a80:	7b04      	ldrb	r4, [r0, #12]
 8013a82:	fbb3 fef2 	udiv	lr, r3, r2
 8013a86:	4608      	mov	r0, r1
 8013a88:	460b      	mov	r3, r1
 8013a8a:	fbb3 fcf2 	udiv	ip, r3, r2
 8013a8e:	fb02 331c 	mls	r3, r2, ip, r3
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	fb0e f303 	mul.w	r3, lr, r3
 8013a98:	3101      	adds	r1, #1
 8013a9a:	f855 c003 	ldr.w	ip, [r5, r3]
 8013a9e:	4564      	cmp	r4, ip
 8013aa0:	bf08      	it	eq
 8013aa2:	3001      	addeq	r0, #1
 8013aa4:	b28b      	uxth	r3, r1
 8013aa6:	bf08      	it	eq
 8013aa8:	b280      	uxtheq	r0, r0
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d3ed      	bcc.n	8013a8a <get_available_free_slots+0x16>
 8013aae:	bd30      	pop	{r4, r5, pc}
 8013ab0:	4610      	mov	r0, r2
 8013ab2:	4770      	bx	lr

08013ab4 <uxr_buffer_request_data>:
 8013ab4:	b530      	push	{r4, r5, lr}
 8013ab6:	b095      	sub	sp, #84	@ 0x54
 8013ab8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013abc:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8013abe:	9303      	str	r3, [sp, #12]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	2d00      	cmp	r5, #0
 8013ac4:	bf14      	ite	ne
 8013ac6:	2101      	movne	r1, #1
 8013ac8:	4611      	moveq	r1, r2
 8013aca:	4604      	mov	r4, r0
 8013acc:	f88d 301c 	strb.w	r3, [sp, #28]
 8013ad0:	f88d 201d 	strb.w	r2, [sp, #29]
 8013ad4:	f88d 201e 	strb.w	r2, [sp, #30]
 8013ad8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8013adc:	d021      	beq.n	8013b22 <uxr_buffer_request_data+0x6e>
 8013ade:	682a      	ldr	r2, [r5, #0]
 8013ae0:	686b      	ldr	r3, [r5, #4]
 8013ae2:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8013ae6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013aea:	2210      	movs	r2, #16
 8013aec:	2308      	movs	r3, #8
 8013aee:	2100      	movs	r1, #0
 8013af0:	e9cd 3100 	strd	r3, r1, [sp]
 8013af4:	4620      	mov	r0, r4
 8013af6:	9905      	ldr	r1, [sp, #20]
 8013af8:	ab0c      	add	r3, sp, #48	@ 0x30
 8013afa:	f7f8 fd27 	bl	800c54c <uxr_prepare_stream_to_write_submessage>
 8013afe:	b918      	cbnz	r0, 8013b08 <uxr_buffer_request_data+0x54>
 8013b00:	4604      	mov	r4, r0
 8013b02:	4620      	mov	r0, r4
 8013b04:	b015      	add	sp, #84	@ 0x54
 8013b06:	bd30      	pop	{r4, r5, pc}
 8013b08:	9904      	ldr	r1, [sp, #16]
 8013b0a:	aa06      	add	r2, sp, #24
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f7f8 fe53 	bl	800c7b8 <uxr_init_base_object_request>
 8013b12:	a906      	add	r1, sp, #24
 8013b14:	4604      	mov	r4, r0
 8013b16:	a80c      	add	r0, sp, #48	@ 0x30
 8013b18:	f7fa f94e 	bl	800ddb8 <uxr_serialize_READ_DATA_Payload>
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	b015      	add	sp, #84	@ 0x54
 8013b20:	bd30      	pop	{r4, r5, pc}
 8013b22:	2208      	movs	r2, #8
 8013b24:	e7e2      	b.n	8013aec <uxr_buffer_request_data+0x38>
 8013b26:	bf00      	nop

08013b28 <uxr_buffer_cancel_data>:
 8013b28:	b510      	push	{r4, lr}
 8013b2a:	b094      	sub	sp, #80	@ 0x50
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	9202      	str	r2, [sp, #8]
 8013b30:	9205      	str	r2, [sp, #20]
 8013b32:	9301      	str	r3, [sp, #4]
 8013b34:	2201      	movs	r2, #1
 8013b36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013b3a:	f88d 301e 	strb.w	r3, [sp, #30]
 8013b3e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8013b42:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013b46:	2308      	movs	r3, #8
 8013b48:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8013b4c:	9300      	str	r3, [sp, #0]
 8013b4e:	2210      	movs	r2, #16
 8013b50:	ab0c      	add	r3, sp, #48	@ 0x30
 8013b52:	4604      	mov	r4, r0
 8013b54:	9103      	str	r1, [sp, #12]
 8013b56:	f7f8 fcf9 	bl	800c54c <uxr_prepare_stream_to_write_submessage>
 8013b5a:	b918      	cbnz	r0, 8013b64 <uxr_buffer_cancel_data+0x3c>
 8013b5c:	4604      	mov	r4, r0
 8013b5e:	4620      	mov	r0, r4
 8013b60:	b014      	add	sp, #80	@ 0x50
 8013b62:	bd10      	pop	{r4, pc}
 8013b64:	9905      	ldr	r1, [sp, #20]
 8013b66:	aa06      	add	r2, sp, #24
 8013b68:	4620      	mov	r0, r4
 8013b6a:	f7f8 fe25 	bl	800c7b8 <uxr_init_base_object_request>
 8013b6e:	a906      	add	r1, sp, #24
 8013b70:	4604      	mov	r4, r0
 8013b72:	a80c      	add	r0, sp, #48	@ 0x30
 8013b74:	f7fa f920 	bl	800ddb8 <uxr_serialize_READ_DATA_Payload>
 8013b78:	4620      	mov	r0, r4
 8013b7a:	b014      	add	sp, #80	@ 0x50
 8013b7c:	bd10      	pop	{r4, pc}
 8013b7e:	bf00      	nop

08013b80 <read_submessage_format>:
 8013b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b84:	b095      	sub	sp, #84	@ 0x54
 8013b86:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8013b8a:	b113      	cbz	r3, 8013b92 <read_submessage_format+0x12>
 8013b8c:	b015      	add	sp, #84	@ 0x54
 8013b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b92:	460c      	mov	r4, r1
 8013b94:	4615      	mov	r5, r2
 8013b96:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013b9a:	4607      	mov	r7, r0
 8013b9c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013b9e:	9004      	str	r0, [sp, #16]
 8013ba0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8013ba2:	9005      	str	r0, [sp, #20]
 8013ba4:	1a52      	subs	r2, r2, r1
 8013ba6:	a80c      	add	r0, sp, #48	@ 0x30
 8013ba8:	4699      	mov	r9, r3
 8013baa:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8013bae:	f7f5 f837 	bl	8008c20 <ucdr_init_buffer>
 8013bb2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013bb6:	a80c      	add	r0, sp, #48	@ 0x30
 8013bb8:	f7f5 f806 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 8013bbc:	69e2      	ldr	r2, [r4, #28]
 8013bbe:	b19a      	cbz	r2, 8013be8 <read_submessage_format+0x68>
 8013bc0:	f1b8 0f07 	cmp.w	r8, #7
 8013bc4:	f882 9014 	strb.w	r9, [r2, #20]
 8013bc8:	d040      	beq.n	8013c4c <read_submessage_format+0xcc>
 8013bca:	f1b8 0f08 	cmp.w	r8, #8
 8013bce:	d02e      	beq.n	8013c2e <read_submessage_format+0xae>
 8013bd0:	f1b8 0f06 	cmp.w	r8, #6
 8013bd4:	d011      	beq.n	8013bfa <read_submessage_format+0x7a>
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	7513      	strb	r3, [r2, #20]
 8013bda:	4629      	mov	r1, r5
 8013bdc:	4620      	mov	r0, r4
 8013bde:	f7f5 f86f 	bl	8008cc0 <ucdr_advance_buffer>
 8013be2:	b015      	add	sp, #84	@ 0x54
 8013be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013be8:	f1b8 0f07 	cmp.w	r8, #7
 8013bec:	d02e      	beq.n	8013c4c <read_submessage_format+0xcc>
 8013bee:	f1b8 0f08 	cmp.w	r8, #8
 8013bf2:	d01c      	beq.n	8013c2e <read_submessage_format+0xae>
 8013bf4:	f1b8 0f06 	cmp.w	r8, #6
 8013bf8:	d1ef      	bne.n	8013bda <read_submessage_format+0x5a>
 8013bfa:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8013bfe:	f1b8 0f00 	cmp.w	r8, #0
 8013c02:	d011      	beq.n	8013c28 <read_submessage_format+0xa8>
 8013c04:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c06:	e9cd 3500 	strd	r3, r5, [sp]
 8013c0a:	2306      	movs	r3, #6
 8013c0c:	f88d 3016 	strb.w	r3, [sp, #22]
 8013c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c14:	9302      	str	r3, [sp, #8]
 8013c16:	4632      	mov	r2, r6
 8013c18:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013c1c:	4638      	mov	r0, r7
 8013c1e:	47c0      	blx	r8
 8013c20:	2301      	movs	r3, #1
 8013c22:	69e2      	ldr	r2, [r4, #28]
 8013c24:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013c28:	2a00      	cmp	r2, #0
 8013c2a:	d1d4      	bne.n	8013bd6 <read_submessage_format+0x56>
 8013c2c:	e7d5      	b.n	8013bda <read_submessage_format+0x5a>
 8013c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d0f8      	beq.n	8013c28 <read_submessage_format+0xa8>
 8013c36:	a906      	add	r1, sp, #24
 8013c38:	a80c      	add	r0, sp, #48	@ 0x30
 8013c3a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013c3e:	f7fa f981 	bl	800df44 <uxr_deserialize_SampleIdentity>
 8013c42:	b9a0      	cbnz	r0, 8013c6e <read_submessage_format+0xee>
 8013c44:	69e2      	ldr	r2, [r4, #28]
 8013c46:	2a00      	cmp	r2, #0
 8013c48:	d1c5      	bne.n	8013bd6 <read_submessage_format+0x56>
 8013c4a:	e7c6      	b.n	8013bda <read_submessage_format+0x5a>
 8013c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013c50:	b13b      	cbz	r3, 8013c62 <read_submessage_format+0xe2>
 8013c52:	a906      	add	r1, sp, #24
 8013c54:	a80c      	add	r0, sp, #48	@ 0x30
 8013c56:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013c5a:	f7f9 fe47 	bl	800d8ec <uxr_deserialize_BaseObjectRequest>
 8013c5e:	bb60      	cbnz	r0, 8013cba <read_submessage_format+0x13a>
 8013c60:	69e2      	ldr	r2, [r4, #28]
 8013c62:	68a3      	ldr	r3, [r4, #8]
 8013c64:	442b      	add	r3, r5
 8013c66:	60a3      	str	r3, [r4, #8]
 8013c68:	2a00      	cmp	r2, #0
 8013c6a:	d1b4      	bne.n	8013bd6 <read_submessage_format+0x56>
 8013c6c:	e7b5      	b.n	8013bda <read_submessage_format+0x5a>
 8013c6e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013c72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013c74:	1a52      	subs	r2, r2, r1
 8013c76:	eba8 0803 	sub.w	r8, r8, r3
 8013c7a:	a80c      	add	r0, sp, #48	@ 0x30
 8013c7c:	f7f4 ffd0 	bl	8008c20 <ucdr_init_buffer>
 8013c80:	44a8      	add	r8, r5
 8013c82:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013c86:	a80c      	add	r0, sp, #48	@ 0x30
 8013c88:	f7f4 ff9e 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 8013c8c:	fa1f f888 	uxth.w	r8, r8
 8013c90:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c92:	9300      	str	r3, [sp, #0]
 8013c94:	f8cd 8004 	str.w	r8, [sp, #4]
 8013c98:	2108      	movs	r1, #8
 8013c9a:	f88d 1016 	strb.w	r1, [sp, #22]
 8013c9e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8013ca2:	9102      	str	r1, [sp, #8]
 8013ca4:	ab06      	add	r3, sp, #24
 8013ca6:	4632      	mov	r2, r6
 8013ca8:	9905      	ldr	r1, [sp, #20]
 8013caa:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8013cae:	4638      	mov	r0, r7
 8013cb0:	47b0      	blx	r6
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013cb8:	e7c4      	b.n	8013c44 <read_submessage_format+0xc4>
 8013cba:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013cbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013cc0:	1a52      	subs	r2, r2, r1
 8013cc2:	a80c      	add	r0, sp, #48	@ 0x30
 8013cc4:	eba8 0803 	sub.w	r8, r8, r3
 8013cc8:	f7f4 ffaa 	bl	8008c20 <ucdr_init_buffer>
 8013ccc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013cd0:	a80c      	add	r0, sp, #48	@ 0x30
 8013cd2:	f7f4 ff79 	bl	8008bc8 <ucdr_set_on_full_buffer_callback>
 8013cd6:	ab0c      	add	r3, sp, #48	@ 0x30
 8013cd8:	9300      	str	r3, [sp, #0]
 8013cda:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013cde:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013ce2:	44a8      	add	r8, r5
 8013ce4:	fa1f f888 	uxth.w	r8, r8
 8013ce8:	f8cd 8004 	str.w	r8, [sp, #4]
 8013cec:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013cf0:	2107      	movs	r1, #7
 8013cf2:	f88d 1016 	strb.w	r1, [sp, #22]
 8013cf6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8013cfa:	9102      	str	r1, [sp, #8]
 8013cfc:	4632      	mov	r2, r6
 8013cfe:	b29b      	uxth	r3, r3
 8013d00:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8013d04:	9905      	ldr	r1, [sp, #20]
 8013d06:	4638      	mov	r0, r7
 8013d08:	47b0      	blx	r6
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013d10:	e7a6      	b.n	8013c60 <read_submessage_format+0xe0>
 8013d12:	bf00      	nop

08013d14 <uxr_seq_num_add>:
 8013d14:	4408      	add	r0, r1
 8013d16:	b280      	uxth	r0, r0
 8013d18:	4770      	bx	lr
 8013d1a:	bf00      	nop

08013d1c <uxr_seq_num_sub>:
 8013d1c:	1a40      	subs	r0, r0, r1
 8013d1e:	b280      	uxth	r0, r0
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop

08013d24 <uxr_seq_num_cmp>:
 8013d24:	4288      	cmp	r0, r1
 8013d26:	d011      	beq.n	8013d4c <uxr_seq_num_cmp+0x28>
 8013d28:	d309      	bcc.n	8013d3e <uxr_seq_num_cmp+0x1a>
 8013d2a:	4288      	cmp	r0, r1
 8013d2c:	d910      	bls.n	8013d50 <uxr_seq_num_cmp+0x2c>
 8013d2e:	1a40      	subs	r0, r0, r1
 8013d30:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8013d34:	bfd4      	ite	le
 8013d36:	2001      	movle	r0, #1
 8013d38:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8013d3c:	4770      	bx	lr
 8013d3e:	1a0b      	subs	r3, r1, r0
 8013d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013d44:	daf1      	bge.n	8013d2a <uxr_seq_num_cmp+0x6>
 8013d46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d4a:	4770      	bx	lr
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	4770      	bx	lr
 8013d50:	2001      	movs	r0, #1
 8013d52:	4770      	bx	lr

08013d54 <uxr_init_framing_io>:
 8013d54:	2300      	movs	r3, #0
 8013d56:	7041      	strb	r1, [r0, #1]
 8013d58:	7003      	strb	r3, [r0, #0]
 8013d5a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013d5c:	4770      	bx	lr
 8013d5e:	bf00      	nop

08013d60 <uxr_write_framed_msg>:
 8013d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d64:	4617      	mov	r7, r2
 8013d66:	7842      	ldrb	r2, [r0, #1]
 8013d68:	b083      	sub	sp, #12
 8013d6a:	460e      	mov	r6, r1
 8013d6c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8013d70:	469a      	mov	sl, r3
 8013d72:	2901      	cmp	r1, #1
 8013d74:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8013d78:	4604      	mov	r4, r0
 8013d7a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013d7e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8013d82:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8013d86:	f240 8137 	bls.w	8013ff8 <uxr_write_framed_msg+0x298>
 8013d8a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8013d8e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8013d92:	2901      	cmp	r1, #1
 8013d94:	f04f 0202 	mov.w	r2, #2
 8013d98:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013d9c:	f240 808f 	bls.w	8013ebe <uxr_write_framed_msg+0x15e>
 8013da0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013da2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8013da6:	b2dd      	uxtb	r5, r3
 8013da8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013dac:	2203      	movs	r2, #3
 8013dae:	2901      	cmp	r1, #1
 8013db0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013db4:	f240 809a 	bls.w	8013eec <uxr_write_framed_msg+0x18c>
 8013db8:	18a1      	adds	r1, r4, r2
 8013dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013dbc:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8013dc0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013dc4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013dc8:	3201      	adds	r2, #1
 8013dca:	2801      	cmp	r0, #1
 8013dcc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013dd0:	f240 80a0 	bls.w	8013f14 <uxr_write_framed_msg+0x1b4>
 8013dd4:	18a0      	adds	r0, r4, r2
 8013dd6:	3201      	adds	r2, #1
 8013dd8:	b2d2      	uxtb	r2, r2
 8013dda:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013dde:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	f000 80a9 	beq.w	8013f3a <uxr_write_framed_msg+0x1da>
 8013de8:	f04f 0900 	mov.w	r9, #0
 8013dec:	46c8      	mov	r8, r9
 8013dee:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013df2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8013df6:	2901      	cmp	r1, #1
 8013df8:	f240 80c3 	bls.w	8013f82 <uxr_write_framed_msg+0x222>
 8013dfc:	2a29      	cmp	r2, #41	@ 0x29
 8013dfe:	f200 809f 	bhi.w	8013f40 <uxr_write_framed_msg+0x1e0>
 8013e02:	18a1      	adds	r1, r4, r2
 8013e04:	3201      	adds	r2, #1
 8013e06:	b2d2      	uxtb	r2, r2
 8013e08:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8013e0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013e10:	ea89 0303 	eor.w	r3, r9, r3
 8013e14:	498c      	ldr	r1, [pc, #560]	@ (8014048 <uxr_write_framed_msg+0x2e8>)
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	f108 0801 	add.w	r8, r8, #1
 8013e1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013e20:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013e24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e26:	4543      	cmp	r3, r8
 8013e28:	d8e1      	bhi.n	8013dee <uxr_write_framed_msg+0x8e>
 8013e2a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013e2e:	fa5f f889 	uxtb.w	r8, r9
 8013e32:	9301      	str	r3, [sp, #4]
 8013e34:	f04f 0900 	mov.w	r9, #0
 8013e38:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8013e3c:	fa5f f18a 	uxtb.w	r1, sl
 8013e40:	2901      	cmp	r1, #1
 8013e42:	d921      	bls.n	8013e88 <uxr_write_framed_msg+0x128>
 8013e44:	2a29      	cmp	r2, #41	@ 0x29
 8013e46:	f240 80af 	bls.w	8013fa8 <uxr_write_framed_msg+0x248>
 8013e4a:	2500      	movs	r5, #0
 8013e4c:	e000      	b.n	8013e50 <uxr_write_framed_msg+0xf0>
 8013e4e:	b160      	cbz	r0, 8013e6a <uxr_write_framed_msg+0x10a>
 8013e50:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013e54:	1b52      	subs	r2, r2, r5
 8013e56:	465b      	mov	r3, fp
 8013e58:	4421      	add	r1, r4
 8013e5a:	4638      	mov	r0, r7
 8013e5c:	47b0      	blx	r6
 8013e5e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013e62:	4405      	add	r5, r0
 8013e64:	4295      	cmp	r5, r2
 8013e66:	d3f2      	bcc.n	8013e4e <uxr_write_framed_msg+0xee>
 8013e68:	d003      	beq.n	8013e72 <uxr_write_framed_msg+0x112>
 8013e6a:	2000      	movs	r0, #0
 8013e6c:	b003      	add	sp, #12
 8013e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e72:	fa5f f18a 	uxtb.w	r1, sl
 8013e76:	f04f 0300 	mov.w	r3, #0
 8013e7a:	2901      	cmp	r1, #1
 8013e7c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013e80:	f04f 0200 	mov.w	r2, #0
 8013e84:	f200 8090 	bhi.w	8013fa8 <uxr_write_framed_msg+0x248>
 8013e88:	1c51      	adds	r1, r2, #1
 8013e8a:	b2c9      	uxtb	r1, r1
 8013e8c:	2929      	cmp	r1, #41	@ 0x29
 8013e8e:	d8dc      	bhi.n	8013e4a <uxr_write_framed_msg+0xea>
 8013e90:	18a5      	adds	r5, r4, r2
 8013e92:	4421      	add	r1, r4
 8013e94:	3202      	adds	r2, #2
 8013e96:	f088 0820 	eor.w	r8, r8, #32
 8013e9a:	4648      	mov	r0, r9
 8013e9c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8013ea0:	b2d2      	uxtb	r2, r2
 8013ea2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8013ea6:	f04f 0901 	mov.w	r9, #1
 8013eaa:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013eae:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	f040 8085 	bne.w	8013fc2 <uxr_write_framed_msg+0x262>
 8013eb8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013ebc:	e7bc      	b.n	8013e38 <uxr_write_framed_msg+0xd8>
 8013ebe:	4611      	mov	r1, r2
 8013ec0:	f04f 0c03 	mov.w	ip, #3
 8013ec4:	2204      	movs	r2, #4
 8013ec6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ec8:	4421      	add	r1, r4
 8013eca:	b2dd      	uxtb	r5, r3
 8013ecc:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8013ed0:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8013ed4:	44a4      	add	ip, r4
 8013ed6:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013eda:	f080 0020 	eor.w	r0, r0, #32
 8013ede:	2901      	cmp	r1, #1
 8013ee0:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8013ee4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013ee8:	f63f af66 	bhi.w	8013db8 <uxr_write_framed_msg+0x58>
 8013eec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013eee:	18a0      	adds	r0, r4, r2
 8013ef0:	f085 0520 	eor.w	r5, r5, #32
 8013ef4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013ef8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013efc:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8013f00:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8013f04:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013f08:	3202      	adds	r2, #2
 8013f0a:	2801      	cmp	r0, #1
 8013f0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f10:	f63f af60 	bhi.w	8013dd4 <uxr_write_framed_msg+0x74>
 8013f14:	1c50      	adds	r0, r2, #1
 8013f16:	18a5      	adds	r5, r4, r2
 8013f18:	fa54 f080 	uxtab	r0, r4, r0
 8013f1c:	3202      	adds	r2, #2
 8013f1e:	f081 0120 	eor.w	r1, r1, #32
 8013f22:	b2d2      	uxtb	r2, r2
 8013f24:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013f28:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8013f2c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013f30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	f47f af57 	bne.w	8013de8 <uxr_write_framed_msg+0x88>
 8013f3a:	9301      	str	r3, [sp, #4]
 8013f3c:	4698      	mov	r8, r3
 8013f3e:	e779      	b.n	8013e34 <uxr_write_framed_msg+0xd4>
 8013f40:	2500      	movs	r5, #0
 8013f42:	e001      	b.n	8013f48 <uxr_write_framed_msg+0x1e8>
 8013f44:	2800      	cmp	r0, #0
 8013f46:	d090      	beq.n	8013e6a <uxr_write_framed_msg+0x10a>
 8013f48:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013f4c:	1b52      	subs	r2, r2, r5
 8013f4e:	465b      	mov	r3, fp
 8013f50:	4421      	add	r1, r4
 8013f52:	4638      	mov	r0, r7
 8013f54:	47b0      	blx	r6
 8013f56:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013f5a:	4405      	add	r5, r0
 8013f5c:	4295      	cmp	r5, r2
 8013f5e:	d3f1      	bcc.n	8013f44 <uxr_write_framed_msg+0x1e4>
 8013f60:	d183      	bne.n	8013e6a <uxr_write_framed_msg+0x10a>
 8013f62:	f04f 0300 	mov.w	r3, #0
 8013f66:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013f6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f6c:	4543      	cmp	r3, r8
 8013f6e:	d964      	bls.n	801403a <uxr_write_framed_msg+0x2da>
 8013f70:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013f74:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8013f78:	2901      	cmp	r1, #1
 8013f7a:	f04f 0200 	mov.w	r2, #0
 8013f7e:	f63f af3d 	bhi.w	8013dfc <uxr_write_framed_msg+0x9c>
 8013f82:	1c51      	adds	r1, r2, #1
 8013f84:	b2c9      	uxtb	r1, r1
 8013f86:	2929      	cmp	r1, #41	@ 0x29
 8013f88:	d8da      	bhi.n	8013f40 <uxr_write_framed_msg+0x1e0>
 8013f8a:	18a0      	adds	r0, r4, r2
 8013f8c:	4421      	add	r1, r4
 8013f8e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8013f92:	3202      	adds	r2, #2
 8013f94:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8013f98:	b2d2      	uxtb	r2, r2
 8013f9a:	f083 0020 	eor.w	r0, r3, #32
 8013f9e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8013fa2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013fa6:	e733      	b.n	8013e10 <uxr_write_framed_msg+0xb0>
 8013fa8:	18a1      	adds	r1, r4, r2
 8013faa:	3201      	adds	r2, #1
 8013fac:	4648      	mov	r0, r9
 8013fae:	b2d2      	uxtb	r2, r2
 8013fb0:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013fb4:	f04f 0901 	mov.w	r9, #1
 8013fb8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	f43f af7b 	beq.w	8013eb8 <uxr_write_framed_msg+0x158>
 8013fc2:	2500      	movs	r5, #0
 8013fc4:	e002      	b.n	8013fcc <uxr_write_framed_msg+0x26c>
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	f43f af4f 	beq.w	8013e6a <uxr_write_framed_msg+0x10a>
 8013fcc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013fd0:	1b52      	subs	r2, r2, r5
 8013fd2:	465b      	mov	r3, fp
 8013fd4:	4421      	add	r1, r4
 8013fd6:	4638      	mov	r0, r7
 8013fd8:	47b0      	blx	r6
 8013fda:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013fde:	4405      	add	r5, r0
 8013fe0:	4295      	cmp	r5, r2
 8013fe2:	d3f0      	bcc.n	8013fc6 <uxr_write_framed_msg+0x266>
 8013fe4:	f47f af41 	bne.w	8013e6a <uxr_write_framed_msg+0x10a>
 8013fe8:	2300      	movs	r3, #0
 8013fea:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013fee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ff0:	b298      	uxth	r0, r3
 8013ff2:	b003      	add	sp, #12
 8013ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ff8:	217d      	movs	r1, #125	@ 0x7d
 8013ffa:	f082 0220 	eor.w	r2, r2, #32
 8013ffe:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014002:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014006:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801400a:	2901      	cmp	r1, #1
 801400c:	f04f 0203 	mov.w	r2, #3
 8014010:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014014:	d804      	bhi.n	8014020 <uxr_write_framed_msg+0x2c0>
 8014016:	4611      	mov	r1, r2
 8014018:	f04f 0c04 	mov.w	ip, #4
 801401c:	2205      	movs	r2, #5
 801401e:	e752      	b.n	8013ec6 <uxr_write_framed_msg+0x166>
 8014020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014022:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014026:	b2dd      	uxtb	r5, r3
 8014028:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801402c:	2204      	movs	r2, #4
 801402e:	2901      	cmp	r1, #1
 8014030:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014034:	f63f aec0 	bhi.w	8013db8 <uxr_write_framed_msg+0x58>
 8014038:	e758      	b.n	8013eec <uxr_write_framed_msg+0x18c>
 801403a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801403e:	fa5f f889 	uxtb.w	r8, r9
 8014042:	9301      	str	r3, [sp, #4]
 8014044:	2200      	movs	r2, #0
 8014046:	e6f5      	b.n	8013e34 <uxr_write_framed_msg+0xd4>
 8014048:	08017564 	.word	0x08017564

0801404c <uxr_framing_read_transport>:
 801404c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014050:	4604      	mov	r4, r0
 8014052:	b083      	sub	sp, #12
 8014054:	461f      	mov	r7, r3
 8014056:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801405a:	4689      	mov	r9, r1
 801405c:	4692      	mov	sl, r2
 801405e:	f7f8 fd59 	bl	800cb14 <uxr_millis>
 8014062:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014066:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801406a:	42b3      	cmp	r3, r6
 801406c:	4680      	mov	r8, r0
 801406e:	d061      	beq.n	8014134 <uxr_framing_read_transport+0xe8>
 8014070:	d81c      	bhi.n	80140ac <uxr_framing_read_transport+0x60>
 8014072:	1e75      	subs	r5, r6, #1
 8014074:	1aed      	subs	r5, r5, r3
 8014076:	b2ed      	uxtb	r5, r5
 8014078:	2600      	movs	r6, #0
 801407a:	455d      	cmp	r5, fp
 801407c:	d81f      	bhi.n	80140be <uxr_framing_read_transport+0x72>
 801407e:	19ab      	adds	r3, r5, r6
 8014080:	455b      	cmp	r3, fp
 8014082:	bf84      	itt	hi
 8014084:	ebab 0605 	subhi.w	r6, fp, r5
 8014088:	b2f6      	uxtbhi	r6, r6
 801408a:	b9ed      	cbnz	r5, 80140c8 <uxr_framing_read_transport+0x7c>
 801408c:	f04f 0b00 	mov.w	fp, #0
 8014090:	f7f8 fd40 	bl	800cb14 <uxr_millis>
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	eba0 0808 	sub.w	r8, r0, r8
 801409a:	eba3 0308 	sub.w	r3, r3, r8
 801409e:	4658      	mov	r0, fp
 80140a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80140a4:	603b      	str	r3, [r7, #0]
 80140a6:	b003      	add	sp, #12
 80140a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ac:	2e00      	cmp	r6, #0
 80140ae:	d049      	beq.n	8014144 <uxr_framing_read_transport+0xf8>
 80140b0:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80140b4:	b2ed      	uxtb	r5, r5
 80140b6:	3e01      	subs	r6, #1
 80140b8:	455d      	cmp	r5, fp
 80140ba:	b2f6      	uxtb	r6, r6
 80140bc:	d9df      	bls.n	801407e <uxr_framing_read_transport+0x32>
 80140be:	fa5f f58b 	uxtb.w	r5, fp
 80140c2:	2600      	movs	r6, #0
 80140c4:	2d00      	cmp	r5, #0
 80140c6:	d0e1      	beq.n	801408c <uxr_framing_read_transport+0x40>
 80140c8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80140cc:	3102      	adds	r1, #2
 80140ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140d0:	9300      	str	r3, [sp, #0]
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	4421      	add	r1, r4
 80140d6:	462a      	mov	r2, r5
 80140d8:	4650      	mov	r0, sl
 80140da:	47c8      	blx	r9
 80140dc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80140e0:	4a1a      	ldr	r2, [pc, #104]	@ (801414c <uxr_framing_read_transport+0x100>)
 80140e2:	4403      	add	r3, r0
 80140e4:	0859      	lsrs	r1, r3, #1
 80140e6:	fba2 2101 	umull	r2, r1, r2, r1
 80140ea:	0889      	lsrs	r1, r1, #2
 80140ec:	222a      	movs	r2, #42	@ 0x2a
 80140ee:	fb02 3111 	mls	r1, r2, r1, r3
 80140f2:	4683      	mov	fp, r0
 80140f4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80140f8:	2800      	cmp	r0, #0
 80140fa:	d0c7      	beq.n	801408c <uxr_framing_read_transport+0x40>
 80140fc:	42a8      	cmp	r0, r5
 80140fe:	d1c7      	bne.n	8014090 <uxr_framing_read_transport+0x44>
 8014100:	2e00      	cmp	r6, #0
 8014102:	d0c5      	beq.n	8014090 <uxr_framing_read_transport+0x44>
 8014104:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	3102      	adds	r1, #2
 801410a:	4632      	mov	r2, r6
 801410c:	4421      	add	r1, r4
 801410e:	2300      	movs	r3, #0
 8014110:	4650      	mov	r0, sl
 8014112:	47c8      	blx	r9
 8014114:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014118:	4a0c      	ldr	r2, [pc, #48]	@ (801414c <uxr_framing_read_transport+0x100>)
 801411a:	180b      	adds	r3, r1, r0
 801411c:	0859      	lsrs	r1, r3, #1
 801411e:	fba2 1201 	umull	r1, r2, r2, r1
 8014122:	0892      	lsrs	r2, r2, #2
 8014124:	212a      	movs	r1, #42	@ 0x2a
 8014126:	fb01 3312 	mls	r3, r1, r2, r3
 801412a:	eb00 0b05 	add.w	fp, r0, r5
 801412e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014132:	e7ad      	b.n	8014090 <uxr_framing_read_transport+0x44>
 8014134:	2600      	movs	r6, #0
 8014136:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801413a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801413c:	d9bf      	bls.n	80140be <uxr_framing_read_transport+0x72>
 801413e:	2102      	movs	r1, #2
 8014140:	2529      	movs	r5, #41	@ 0x29
 8014142:	e7c4      	b.n	80140ce <uxr_framing_read_transport+0x82>
 8014144:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8014148:	b2ed      	uxtb	r5, r5
 801414a:	e796      	b.n	801407a <uxr_framing_read_transport+0x2e>
 801414c:	30c30c31 	.word	0x30c30c31

08014150 <uxr_read_framed_msg>:
 8014150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014154:	461e      	mov	r6, r3
 8014156:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801415a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801415e:	429d      	cmp	r5, r3
 8014160:	b083      	sub	sp, #12
 8014162:	4604      	mov	r4, r0
 8014164:	4688      	mov	r8, r1
 8014166:	4691      	mov	r9, r2
 8014168:	f000 8188 	beq.w	801447c <uxr_read_framed_msg+0x32c>
 801416c:	7823      	ldrb	r3, [r4, #0]
 801416e:	4dc1      	ldr	r5, [pc, #772]	@ (8014474 <uxr_read_framed_msg+0x324>)
 8014170:	4fc1      	ldr	r7, [pc, #772]	@ (8014478 <uxr_read_framed_msg+0x328>)
 8014172:	2b07      	cmp	r3, #7
 8014174:	d8fd      	bhi.n	8014172 <uxr_read_framed_msg+0x22>
 8014176:	e8df f013 	tbh	[pc, r3, lsl #1]
 801417a:	0115      	.short	0x0115
 801417c:	00d600f6 	.word	0x00d600f6
 8014180:	009000b9 	.word	0x009000b9
 8014184:	0030004d 	.word	0x0030004d
 8014188:	0008      	.short	0x0008
 801418a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801418e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014192:	4299      	cmp	r1, r3
 8014194:	f000 814a 	beq.w	801442c <uxr_read_framed_msg+0x2dc>
 8014198:	18e2      	adds	r2, r4, r3
 801419a:	7892      	ldrb	r2, [r2, #2]
 801419c:	2a7d      	cmp	r2, #125	@ 0x7d
 801419e:	f000 8199 	beq.w	80144d4 <uxr_read_framed_msg+0x384>
 80141a2:	3301      	adds	r3, #1
 80141a4:	0858      	lsrs	r0, r3, #1
 80141a6:	fba5 1000 	umull	r1, r0, r5, r0
 80141aa:	0880      	lsrs	r0, r0, #2
 80141ac:	212a      	movs	r1, #42	@ 0x2a
 80141ae:	fb01 3310 	mls	r3, r1, r0, r3
 80141b2:	2a7e      	cmp	r2, #126	@ 0x7e
 80141b4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80141b8:	f000 8252 	beq.w	8014660 <uxr_read_framed_msg+0x510>
 80141bc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80141be:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80141c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80141c4:	b29b      	uxth	r3, r3
 80141c6:	2200      	movs	r2, #0
 80141c8:	4299      	cmp	r1, r3
 80141ca:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80141cc:	7022      	strb	r2, [r4, #0]
 80141ce:	f000 8179 	beq.w	80144c4 <uxr_read_framed_msg+0x374>
 80141d2:	2000      	movs	r0, #0
 80141d4:	b003      	add	sp, #12
 80141d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141da:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80141de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80141e2:	4299      	cmp	r1, r3
 80141e4:	f000 8131 	beq.w	801444a <uxr_read_framed_msg+0x2fa>
 80141e8:	18e2      	adds	r2, r4, r3
 80141ea:	7890      	ldrb	r0, [r2, #2]
 80141ec:	287d      	cmp	r0, #125	@ 0x7d
 80141ee:	f000 8190 	beq.w	8014512 <uxr_read_framed_msg+0x3c2>
 80141f2:	3301      	adds	r3, #1
 80141f4:	085a      	lsrs	r2, r3, #1
 80141f6:	fba5 1202 	umull	r1, r2, r5, r2
 80141fa:	0892      	lsrs	r2, r2, #2
 80141fc:	212a      	movs	r1, #42	@ 0x2a
 80141fe:	fb01 3312 	mls	r3, r1, r2, r3
 8014202:	287e      	cmp	r0, #126	@ 0x7e
 8014204:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014208:	f000 821a 	beq.w	8014640 <uxr_read_framed_msg+0x4f0>
 801420c:	2307      	movs	r3, #7
 801420e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8014210:	7023      	strb	r3, [r4, #0]
 8014212:	e7ae      	b.n	8014172 <uxr_read_framed_msg+0x22>
 8014214:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014216:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801421a:	459e      	cmp	lr, r3
 801421c:	d938      	bls.n	8014290 <uxr_read_framed_msg+0x140>
 801421e:	ee07 8a90 	vmov	s15, r8
 8014222:	212a      	movs	r1, #42	@ 0x2a
 8014224:	e020      	b.n	8014268 <uxr_read_framed_msg+0x118>
 8014226:	f89b c002 	ldrb.w	ip, [fp, #2]
 801422a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801422e:	f000 80d4 	beq.w	80143da <uxr_read_framed_msg+0x28a>
 8014232:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014236:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801423a:	f000 8219 	beq.w	8014670 <uxr_read_framed_msg+0x520>
 801423e:	f806 c003 	strb.w	ip, [r6, r3]
 8014242:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8014246:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014248:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801424c:	ea8a 000c 	eor.w	r0, sl, ip
 8014250:	b2c0      	uxtb	r0, r0
 8014252:	3301      	adds	r3, #1
 8014254:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8014258:	b29b      	uxth	r3, r3
 801425a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801425e:	4573      	cmp	r3, lr
 8014260:	8663      	strh	r3, [r4, #50]	@ 0x32
 8014262:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8014264:	f080 8120 	bcs.w	80144a8 <uxr_read_framed_msg+0x358>
 8014268:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801426c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014270:	f100 0c01 	add.w	ip, r0, #1
 8014274:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014278:	fba5 8202 	umull	r8, r2, r5, r2
 801427c:	0892      	lsrs	r2, r2, #2
 801427e:	4582      	cmp	sl, r0
 8014280:	eb04 0b00 	add.w	fp, r4, r0
 8014284:	fb01 c212 	mls	r2, r1, r2, ip
 8014288:	d1cd      	bne.n	8014226 <uxr_read_framed_msg+0xd6>
 801428a:	ee17 8a90 	vmov	r8, s15
 801428e:	459e      	cmp	lr, r3
 8014290:	f040 8111 	bne.w	80144b6 <uxr_read_framed_msg+0x366>
 8014294:	2306      	movs	r3, #6
 8014296:	7023      	strb	r3, [r4, #0]
 8014298:	e76b      	b.n	8014172 <uxr_read_framed_msg+0x22>
 801429a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801429e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80142a2:	4298      	cmp	r0, r3
 80142a4:	f000 80c2 	beq.w	801442c <uxr_read_framed_msg+0x2dc>
 80142a8:	18e2      	adds	r2, r4, r3
 80142aa:	7891      	ldrb	r1, [r2, #2]
 80142ac:	297d      	cmp	r1, #125	@ 0x7d
 80142ae:	f000 814c 	beq.w	801454a <uxr_read_framed_msg+0x3fa>
 80142b2:	3301      	adds	r3, #1
 80142b4:	085a      	lsrs	r2, r3, #1
 80142b6:	fba5 0202 	umull	r0, r2, r5, r2
 80142ba:	0892      	lsrs	r2, r2, #2
 80142bc:	202a      	movs	r0, #42	@ 0x2a
 80142be:	fb00 3312 	mls	r3, r0, r2, r3
 80142c2:	297e      	cmp	r1, #126	@ 0x7e
 80142c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80142c8:	f000 81ca 	beq.w	8014660 <uxr_read_framed_msg+0x510>
 80142cc:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80142ce:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80142d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80142d4:	b29b      	uxth	r3, r3
 80142d6:	2000      	movs	r0, #0
 80142d8:	428b      	cmp	r3, r1
 80142da:	8623      	strh	r3, [r4, #48]	@ 0x30
 80142dc:	8660      	strh	r0, [r4, #50]	@ 0x32
 80142de:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80142e0:	f240 80df 	bls.w	80144a2 <uxr_read_framed_msg+0x352>
 80142e4:	7020      	strb	r0, [r4, #0]
 80142e6:	b003      	add	sp, #12
 80142e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ec:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80142f0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80142f4:	4299      	cmp	r1, r3
 80142f6:	f000 80a8 	beq.w	801444a <uxr_read_framed_msg+0x2fa>
 80142fa:	18e2      	adds	r2, r4, r3
 80142fc:	7890      	ldrb	r0, [r2, #2]
 80142fe:	287d      	cmp	r0, #125	@ 0x7d
 8014300:	f000 8164 	beq.w	80145cc <uxr_read_framed_msg+0x47c>
 8014304:	3301      	adds	r3, #1
 8014306:	085a      	lsrs	r2, r3, #1
 8014308:	fba5 1202 	umull	r1, r2, r5, r2
 801430c:	0892      	lsrs	r2, r2, #2
 801430e:	212a      	movs	r1, #42	@ 0x2a
 8014310:	fb01 3312 	mls	r3, r1, r2, r3
 8014314:	287e      	cmp	r0, #126	@ 0x7e
 8014316:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801431a:	f000 8191 	beq.w	8014640 <uxr_read_framed_msg+0x4f0>
 801431e:	2304      	movs	r3, #4
 8014320:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014322:	7023      	strb	r3, [r4, #0]
 8014324:	e725      	b.n	8014172 <uxr_read_framed_msg+0x22>
 8014326:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801432a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801432e:	4290      	cmp	r0, r2
 8014330:	f000 80b3 	beq.w	801449a <uxr_read_framed_msg+0x34a>
 8014334:	18a3      	adds	r3, r4, r2
 8014336:	7899      	ldrb	r1, [r3, #2]
 8014338:	297d      	cmp	r1, #125	@ 0x7d
 801433a:	f000 8164 	beq.w	8014606 <uxr_read_framed_msg+0x4b6>
 801433e:	3201      	adds	r2, #1
 8014340:	0850      	lsrs	r0, r2, #1
 8014342:	fba5 3000 	umull	r3, r0, r5, r0
 8014346:	0880      	lsrs	r0, r0, #2
 8014348:	232a      	movs	r3, #42	@ 0x2a
 801434a:	fb03 2210 	mls	r2, r3, r0, r2
 801434e:	297e      	cmp	r1, #126	@ 0x7e
 8014350:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014354:	f000 8188 	beq.w	8014668 <uxr_read_framed_msg+0x518>
 8014358:	7863      	ldrb	r3, [r4, #1]
 801435a:	428b      	cmp	r3, r1
 801435c:	bf0c      	ite	eq
 801435e:	2303      	moveq	r3, #3
 8014360:	2300      	movne	r3, #0
 8014362:	7023      	strb	r3, [r4, #0]
 8014364:	e705      	b.n	8014172 <uxr_read_framed_msg+0x22>
 8014366:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801436a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801436e:	2200      	movs	r2, #0
 8014370:	4299      	cmp	r1, r3
 8014372:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8014376:	d06c      	beq.n	8014452 <uxr_read_framed_msg+0x302>
 8014378:	18e2      	adds	r2, r4, r3
 801437a:	7890      	ldrb	r0, [r2, #2]
 801437c:	287d      	cmp	r0, #125	@ 0x7d
 801437e:	f000 8101 	beq.w	8014584 <uxr_read_framed_msg+0x434>
 8014382:	3301      	adds	r3, #1
 8014384:	085a      	lsrs	r2, r3, #1
 8014386:	fba5 1202 	umull	r1, r2, r5, r2
 801438a:	0892      	lsrs	r2, r2, #2
 801438c:	212a      	movs	r1, #42	@ 0x2a
 801438e:	fb01 3312 	mls	r3, r1, r2, r3
 8014392:	287e      	cmp	r0, #126	@ 0x7e
 8014394:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014398:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801439c:	d059      	beq.n	8014452 <uxr_read_framed_msg+0x302>
 801439e:	2302      	movs	r3, #2
 80143a0:	7023      	strb	r3, [r4, #0]
 80143a2:	e6e6      	b.n	8014172 <uxr_read_framed_msg+0x22>
 80143a4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80143a8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80143ac:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80143b0:	1c51      	adds	r1, r2, #1
 80143b2:	084b      	lsrs	r3, r1, #1
 80143b4:	fba5 c303 	umull	ip, r3, r5, r3
 80143b8:	089b      	lsrs	r3, r3, #2
 80143ba:	fb0e 1313 	mls	r3, lr, r3, r1
 80143be:	4592      	cmp	sl, r2
 80143c0:	eb04 0002 	add.w	r0, r4, r2
 80143c4:	b2da      	uxtb	r2, r3
 80143c6:	f43f af04 	beq.w	80141d2 <uxr_read_framed_msg+0x82>
 80143ca:	7883      	ldrb	r3, [r0, #2]
 80143cc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80143d0:	2b7e      	cmp	r3, #126	@ 0x7e
 80143d2:	d1ed      	bne.n	80143b0 <uxr_read_framed_msg+0x260>
 80143d4:	2301      	movs	r3, #1
 80143d6:	7023      	strb	r3, [r4, #0]
 80143d8:	e6cb      	b.n	8014172 <uxr_read_framed_msg+0x22>
 80143da:	f100 0c01 	add.w	ip, r0, #1
 80143de:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80143e2:	fba5 8202 	umull	r8, r2, r5, r2
 80143e6:	0892      	lsrs	r2, r2, #2
 80143e8:	fb01 c212 	mls	r2, r1, r2, ip
 80143ec:	eb04 0c02 	add.w	ip, r4, r2
 80143f0:	b2d2      	uxtb	r2, r2
 80143f2:	4592      	cmp	sl, r2
 80143f4:	f100 0002 	add.w	r0, r0, #2
 80143f8:	f43f af47 	beq.w	801428a <uxr_read_framed_msg+0x13a>
 80143fc:	0842      	lsrs	r2, r0, #1
 80143fe:	f89c a002 	ldrb.w	sl, [ip, #2]
 8014402:	fba5 8202 	umull	r8, r2, r5, r2
 8014406:	0892      	lsrs	r2, r2, #2
 8014408:	fb01 0012 	mls	r0, r1, r2, r0
 801440c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8014410:	f08a 0c20 	eor.w	ip, sl, #32
 8014414:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8014418:	f47f af11 	bne.w	801423e <uxr_read_framed_msg+0xee>
 801441c:	459e      	cmp	lr, r3
 801441e:	ee17 8a90 	vmov	r8, s15
 8014422:	f43f af37 	beq.w	8014294 <uxr_read_framed_msg+0x144>
 8014426:	2301      	movs	r3, #1
 8014428:	7023      	strb	r3, [r4, #0]
 801442a:	e6a2      	b.n	8014172 <uxr_read_framed_msg+0x22>
 801442c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801442e:	9300      	str	r3, [sp, #0]
 8014430:	2301      	movs	r3, #1
 8014432:	9301      	str	r3, [sp, #4]
 8014434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014436:	464a      	mov	r2, r9
 8014438:	4641      	mov	r1, r8
 801443a:	4620      	mov	r0, r4
 801443c:	f7ff fe06 	bl	801404c <uxr_framing_read_transport>
 8014440:	2800      	cmp	r0, #0
 8014442:	f43f aec6 	beq.w	80141d2 <uxr_read_framed_msg+0x82>
 8014446:	7823      	ldrb	r3, [r4, #0]
 8014448:	e693      	b.n	8014172 <uxr_read_framed_msg+0x22>
 801444a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801444c:	9300      	str	r3, [sp, #0]
 801444e:	2302      	movs	r3, #2
 8014450:	e7ef      	b.n	8014432 <uxr_read_framed_msg+0x2e2>
 8014452:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014454:	9300      	str	r3, [sp, #0]
 8014456:	2304      	movs	r3, #4
 8014458:	9301      	str	r3, [sp, #4]
 801445a:	464a      	mov	r2, r9
 801445c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801445e:	4641      	mov	r1, r8
 8014460:	4620      	mov	r0, r4
 8014462:	f7ff fdf3 	bl	801404c <uxr_framing_read_transport>
 8014466:	2800      	cmp	r0, #0
 8014468:	d1ed      	bne.n	8014446 <uxr_read_framed_msg+0x2f6>
 801446a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801446e:	2b7e      	cmp	r3, #126	@ 0x7e
 8014470:	d0e9      	beq.n	8014446 <uxr_read_framed_msg+0x2f6>
 8014472:	e6ae      	b.n	80141d2 <uxr_read_framed_msg+0x82>
 8014474:	30c30c31 	.word	0x30c30c31
 8014478:	08017564 	.word	0x08017564
 801447c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801447e:	9300      	str	r3, [sp, #0]
 8014480:	2305      	movs	r3, #5
 8014482:	9301      	str	r3, [sp, #4]
 8014484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014486:	f7ff fde1 	bl	801404c <uxr_framing_read_transport>
 801448a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801448e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014492:	429a      	cmp	r2, r3
 8014494:	f43f ae9d 	beq.w	80141d2 <uxr_read_framed_msg+0x82>
 8014498:	e668      	b.n	801416c <uxr_read_framed_msg+0x1c>
 801449a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801449c:	9300      	str	r3, [sp, #0]
 801449e:	2303      	movs	r3, #3
 80144a0:	e7c7      	b.n	8014432 <uxr_read_framed_msg+0x2e2>
 80144a2:	2305      	movs	r3, #5
 80144a4:	7023      	strb	r3, [r4, #0]
 80144a6:	e664      	b.n	8014172 <uxr_read_framed_msg+0x22>
 80144a8:	ee17 8a90 	vmov	r8, s15
 80144ac:	f43f aef2 	beq.w	8014294 <uxr_read_framed_msg+0x144>
 80144b0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80144b4:	d08e      	beq.n	80143d4 <uxr_read_framed_msg+0x284>
 80144b6:	ebae 0303 	sub.w	r3, lr, r3
 80144ba:	3302      	adds	r3, #2
 80144bc:	9301      	str	r3, [sp, #4]
 80144be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144c0:	9300      	str	r3, [sp, #0]
 80144c2:	e7b7      	b.n	8014434 <uxr_read_framed_msg+0x2e4>
 80144c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80144c6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80144ca:	7013      	strb	r3, [r2, #0]
 80144cc:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80144ce:	b003      	add	sp, #12
 80144d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d4:	f103 0c01 	add.w	ip, r3, #1
 80144d8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80144dc:	fba5 0202 	umull	r0, r2, r5, r2
 80144e0:	0892      	lsrs	r2, r2, #2
 80144e2:	202a      	movs	r0, #42	@ 0x2a
 80144e4:	fb00 c212 	mls	r2, r0, r2, ip
 80144e8:	fa5f fc82 	uxtb.w	ip, r2
 80144ec:	4561      	cmp	r1, ip
 80144ee:	d09d      	beq.n	801442c <uxr_read_framed_msg+0x2dc>
 80144f0:	3302      	adds	r3, #2
 80144f2:	4422      	add	r2, r4
 80144f4:	0859      	lsrs	r1, r3, #1
 80144f6:	7892      	ldrb	r2, [r2, #2]
 80144f8:	fba5 c101 	umull	ip, r1, r5, r1
 80144fc:	0889      	lsrs	r1, r1, #2
 80144fe:	fb00 3311 	mls	r3, r0, r1, r3
 8014502:	2a7e      	cmp	r2, #126	@ 0x7e
 8014504:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014508:	f000 80aa 	beq.w	8014660 <uxr_read_framed_msg+0x510>
 801450c:	f082 0220 	eor.w	r2, r2, #32
 8014510:	e654      	b.n	80141bc <uxr_read_framed_msg+0x6c>
 8014512:	1c58      	adds	r0, r3, #1
 8014514:	0842      	lsrs	r2, r0, #1
 8014516:	fba5 c202 	umull	ip, r2, r5, r2
 801451a:	0892      	lsrs	r2, r2, #2
 801451c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014520:	fb0c 0212 	mls	r2, ip, r2, r0
 8014524:	b2d0      	uxtb	r0, r2
 8014526:	4281      	cmp	r1, r0
 8014528:	d08f      	beq.n	801444a <uxr_read_framed_msg+0x2fa>
 801452a:	4422      	add	r2, r4
 801452c:	3302      	adds	r3, #2
 801452e:	7890      	ldrb	r0, [r2, #2]
 8014530:	085a      	lsrs	r2, r3, #1
 8014532:	fba5 1202 	umull	r1, r2, r5, r2
 8014536:	0892      	lsrs	r2, r2, #2
 8014538:	fb0c 3312 	mls	r3, ip, r2, r3
 801453c:	287e      	cmp	r0, #126	@ 0x7e
 801453e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014542:	d07d      	beq.n	8014640 <uxr_read_framed_msg+0x4f0>
 8014544:	f080 0020 	eor.w	r0, r0, #32
 8014548:	e660      	b.n	801420c <uxr_read_framed_msg+0xbc>
 801454a:	1c59      	adds	r1, r3, #1
 801454c:	084a      	lsrs	r2, r1, #1
 801454e:	fba5 c202 	umull	ip, r2, r5, r2
 8014552:	0892      	lsrs	r2, r2, #2
 8014554:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014558:	fb0c 1212 	mls	r2, ip, r2, r1
 801455c:	b2d1      	uxtb	r1, r2
 801455e:	4288      	cmp	r0, r1
 8014560:	f43f af64 	beq.w	801442c <uxr_read_framed_msg+0x2dc>
 8014564:	4422      	add	r2, r4
 8014566:	3302      	adds	r3, #2
 8014568:	7891      	ldrb	r1, [r2, #2]
 801456a:	085a      	lsrs	r2, r3, #1
 801456c:	fba5 0202 	umull	r0, r2, r5, r2
 8014570:	0892      	lsrs	r2, r2, #2
 8014572:	fb0c 3312 	mls	r3, ip, r2, r3
 8014576:	297e      	cmp	r1, #126	@ 0x7e
 8014578:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801457c:	d070      	beq.n	8014660 <uxr_read_framed_msg+0x510>
 801457e:	f081 0120 	eor.w	r1, r1, #32
 8014582:	e6a3      	b.n	80142cc <uxr_read_framed_msg+0x17c>
 8014584:	f103 0c01 	add.w	ip, r3, #1
 8014588:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801458c:	fba5 0202 	umull	r0, r2, r5, r2
 8014590:	0892      	lsrs	r2, r2, #2
 8014592:	202a      	movs	r0, #42	@ 0x2a
 8014594:	fb00 c212 	mls	r2, r0, r2, ip
 8014598:	fa5f fc82 	uxtb.w	ip, r2
 801459c:	4561      	cmp	r1, ip
 801459e:	f43f af58 	beq.w	8014452 <uxr_read_framed_msg+0x302>
 80145a2:	4422      	add	r2, r4
 80145a4:	3302      	adds	r3, #2
 80145a6:	7891      	ldrb	r1, [r2, #2]
 80145a8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80145ac:	085a      	lsrs	r2, r3, #1
 80145ae:	fba5 c202 	umull	ip, r2, r5, r2
 80145b2:	0892      	lsrs	r2, r2, #2
 80145b4:	fb00 3312 	mls	r3, r0, r2, r3
 80145b8:	297e      	cmp	r1, #126	@ 0x7e
 80145ba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80145be:	f43f af48 	beq.w	8014452 <uxr_read_framed_msg+0x302>
 80145c2:	f081 0120 	eor.w	r1, r1, #32
 80145c6:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80145ca:	e6e8      	b.n	801439e <uxr_read_framed_msg+0x24e>
 80145cc:	1c58      	adds	r0, r3, #1
 80145ce:	0842      	lsrs	r2, r0, #1
 80145d0:	fba5 c202 	umull	ip, r2, r5, r2
 80145d4:	0892      	lsrs	r2, r2, #2
 80145d6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80145da:	fb0c 0212 	mls	r2, ip, r2, r0
 80145de:	b2d0      	uxtb	r0, r2
 80145e0:	4281      	cmp	r1, r0
 80145e2:	f43f af32 	beq.w	801444a <uxr_read_framed_msg+0x2fa>
 80145e6:	4422      	add	r2, r4
 80145e8:	3302      	adds	r3, #2
 80145ea:	7890      	ldrb	r0, [r2, #2]
 80145ec:	085a      	lsrs	r2, r3, #1
 80145ee:	fba5 1202 	umull	r1, r2, r5, r2
 80145f2:	0892      	lsrs	r2, r2, #2
 80145f4:	fb0c 3312 	mls	r3, ip, r2, r3
 80145f8:	287e      	cmp	r0, #126	@ 0x7e
 80145fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80145fe:	d01f      	beq.n	8014640 <uxr_read_framed_msg+0x4f0>
 8014600:	f080 0020 	eor.w	r0, r0, #32
 8014604:	e68b      	b.n	801431e <uxr_read_framed_msg+0x1ce>
 8014606:	1c51      	adds	r1, r2, #1
 8014608:	084b      	lsrs	r3, r1, #1
 801460a:	fba5 c303 	umull	ip, r3, r5, r3
 801460e:	089b      	lsrs	r3, r3, #2
 8014610:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014614:	fb0c 1313 	mls	r3, ip, r3, r1
 8014618:	b2d9      	uxtb	r1, r3
 801461a:	4288      	cmp	r0, r1
 801461c:	f43f af3d 	beq.w	801449a <uxr_read_framed_msg+0x34a>
 8014620:	3202      	adds	r2, #2
 8014622:	4423      	add	r3, r4
 8014624:	0850      	lsrs	r0, r2, #1
 8014626:	789b      	ldrb	r3, [r3, #2]
 8014628:	fba5 1000 	umull	r1, r0, r5, r0
 801462c:	0880      	lsrs	r0, r0, #2
 801462e:	fb0c 2210 	mls	r2, ip, r0, r2
 8014632:	2b7e      	cmp	r3, #126	@ 0x7e
 8014634:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014638:	d016      	beq.n	8014668 <uxr_read_framed_msg+0x518>
 801463a:	f083 0120 	eor.w	r1, r3, #32
 801463e:	e68b      	b.n	8014358 <uxr_read_framed_msg+0x208>
 8014640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	2302      	movs	r3, #2
 8014646:	9301      	str	r3, [sp, #4]
 8014648:	464a      	mov	r2, r9
 801464a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801464c:	4641      	mov	r1, r8
 801464e:	4620      	mov	r0, r4
 8014650:	f7ff fcfc 	bl	801404c <uxr_framing_read_transport>
 8014654:	2800      	cmp	r0, #0
 8014656:	f47f aef6 	bne.w	8014446 <uxr_read_framed_msg+0x2f6>
 801465a:	2301      	movs	r3, #1
 801465c:	7023      	strb	r3, [r4, #0]
 801465e:	e588      	b.n	8014172 <uxr_read_framed_msg+0x22>
 8014660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014662:	9300      	str	r3, [sp, #0]
 8014664:	2301      	movs	r3, #1
 8014666:	e7ee      	b.n	8014646 <uxr_read_framed_msg+0x4f6>
 8014668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	2303      	movs	r3, #3
 801466e:	e7ea      	b.n	8014646 <uxr_read_framed_msg+0x4f6>
 8014670:	ee17 8a90 	vmov	r8, s15
 8014674:	e6ae      	b.n	80143d4 <uxr_read_framed_msg+0x284>
 8014676:	bf00      	nop

08014678 <rcl_get_automatic_discovery_range>:
 8014678:	b530      	push	{r4, r5, lr}
 801467a:	b083      	sub	sp, #12
 801467c:	2300      	movs	r3, #0
 801467e:	9301      	str	r3, [sp, #4]
 8014680:	b1c0      	cbz	r0, 80146b4 <rcl_get_automatic_discovery_range+0x3c>
 8014682:	4604      	mov	r4, r0
 8014684:	a901      	add	r1, sp, #4
 8014686:	4818      	ldr	r0, [pc, #96]	@ (80146e8 <rcl_get_automatic_discovery_range+0x70>)
 8014688:	f7fc fc1e 	bl	8010ec8 <rcutils_get_env>
 801468c:	b110      	cbz	r0, 8014694 <rcl_get_automatic_discovery_range+0x1c>
 801468e:	2001      	movs	r0, #1
 8014690:	b003      	add	sp, #12
 8014692:	bd30      	pop	{r4, r5, pc}
 8014694:	9d01      	ldr	r5, [sp, #4]
 8014696:	782b      	ldrb	r3, [r5, #0]
 8014698:	b13b      	cbz	r3, 80146aa <rcl_get_automatic_discovery_range+0x32>
 801469a:	4914      	ldr	r1, [pc, #80]	@ (80146ec <rcl_get_automatic_discovery_range+0x74>)
 801469c:	4628      	mov	r0, r5
 801469e:	f7eb fd9f 	bl	80001e0 <strcmp>
 80146a2:	b950      	cbnz	r0, 80146ba <rcl_get_automatic_discovery_range+0x42>
 80146a4:	2301      	movs	r3, #1
 80146a6:	7023      	strb	r3, [r4, #0]
 80146a8:	e7f2      	b.n	8014690 <rcl_get_automatic_discovery_range+0x18>
 80146aa:	2303      	movs	r3, #3
 80146ac:	2000      	movs	r0, #0
 80146ae:	7023      	strb	r3, [r4, #0]
 80146b0:	b003      	add	sp, #12
 80146b2:	bd30      	pop	{r4, r5, pc}
 80146b4:	200b      	movs	r0, #11
 80146b6:	b003      	add	sp, #12
 80146b8:	bd30      	pop	{r4, r5, pc}
 80146ba:	490d      	ldr	r1, [pc, #52]	@ (80146f0 <rcl_get_automatic_discovery_range+0x78>)
 80146bc:	4628      	mov	r0, r5
 80146be:	f7eb fd8f 	bl	80001e0 <strcmp>
 80146c2:	b168      	cbz	r0, 80146e0 <rcl_get_automatic_discovery_range+0x68>
 80146c4:	490b      	ldr	r1, [pc, #44]	@ (80146f4 <rcl_get_automatic_discovery_range+0x7c>)
 80146c6:	4628      	mov	r0, r5
 80146c8:	f7eb fd8a 	bl	80001e0 <strcmp>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d0ec      	beq.n	80146aa <rcl_get_automatic_discovery_range+0x32>
 80146d0:	4909      	ldr	r1, [pc, #36]	@ (80146f8 <rcl_get_automatic_discovery_range+0x80>)
 80146d2:	4628      	mov	r0, r5
 80146d4:	f7eb fd84 	bl	80001e0 <strcmp>
 80146d8:	b910      	cbnz	r0, 80146e0 <rcl_get_automatic_discovery_range+0x68>
 80146da:	2304      	movs	r3, #4
 80146dc:	7023      	strb	r3, [r4, #0]
 80146de:	e7d7      	b.n	8014690 <rcl_get_automatic_discovery_range+0x18>
 80146e0:	2302      	movs	r3, #2
 80146e2:	7023      	strb	r3, [r4, #0]
 80146e4:	2000      	movs	r0, #0
 80146e6:	e7d3      	b.n	8014690 <rcl_get_automatic_discovery_range+0x18>
 80146e8:	08017764 	.word	0x08017764
 80146ec:	08017784 	.word	0x08017784
 80146f0:	08017788 	.word	0x08017788
 80146f4:	08017794 	.word	0x08017794
 80146f8:	0801779c 	.word	0x0801779c

080146fc <rcl_automatic_discovery_range_to_string>:
 80146fc:	2804      	cmp	r0, #4
 80146fe:	bf9a      	itte	ls
 8014700:	4b02      	ldrls	r3, [pc, #8]	@ (801470c <rcl_automatic_discovery_range_to_string+0x10>)
 8014702:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014706:	2000      	movhi	r0, #0
 8014708:	4770      	bx	lr
 801470a:	bf00      	nop
 801470c:	0801788c 	.word	0x0801788c

08014710 <rcl_get_discovery_static_peers>:
 8014710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014714:	b08e      	sub	sp, #56	@ 0x38
 8014716:	2300      	movs	r3, #0
 8014718:	9306      	str	r3, [sp, #24]
 801471a:	2800      	cmp	r0, #0
 801471c:	d04b      	beq.n	80147b6 <rcl_get_discovery_static_peers+0xa6>
 801471e:	460d      	mov	r5, r1
 8014720:	2900      	cmp	r1, #0
 8014722:	d048      	beq.n	80147b6 <rcl_get_discovery_static_peers+0xa6>
 8014724:	4604      	mov	r4, r0
 8014726:	a906      	add	r1, sp, #24
 8014728:	482b      	ldr	r0, [pc, #172]	@ (80147d8 <rcl_get_discovery_static_peers+0xc8>)
 801472a:	f7fc fbcd 	bl	8010ec8 <rcutils_get_env>
 801472e:	b118      	cbz	r0, 8014738 <rcl_get_discovery_static_peers+0x28>
 8014730:	2001      	movs	r0, #1
 8014732:	b00e      	add	sp, #56	@ 0x38
 8014734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014738:	9b06      	ldr	r3, [sp, #24]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d0f8      	beq.n	8014730 <rcl_get_discovery_static_peers+0x20>
 801473e:	af07      	add	r7, sp, #28
 8014740:	4638      	mov	r0, r7
 8014742:	f000 fb73 	bl	8014e2c <rcutils_get_zero_initialized_string_array>
 8014746:	f105 0308 	add.w	r3, r5, #8
 801474a:	9703      	str	r7, [sp, #12]
 801474c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014750:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014754:	9806      	ldr	r0, [sp, #24]
 8014756:	e895 000c 	ldmia.w	r5, {r2, r3}
 801475a:	213b      	movs	r1, #59	@ 0x3b
 801475c:	f000 faa8 	bl	8014cb0 <rcutils_split>
 8014760:	2800      	cmp	r0, #0
 8014762:	d1e5      	bne.n	8014730 <rcl_get_discovery_static_peers+0x20>
 8014764:	462a      	mov	r2, r5
 8014766:	9907      	ldr	r1, [sp, #28]
 8014768:	4620      	mov	r0, r4
 801476a:	f000 fbad 	bl	8014ec8 <rmw_discovery_options_init>
 801476e:	4605      	mov	r5, r0
 8014770:	bb78      	cbnz	r0, 80147d2 <rcl_get_discovery_static_peers+0xc2>
 8014772:	9e07      	ldr	r6, [sp, #28]
 8014774:	b336      	cbz	r6, 80147c4 <rcl_get_discovery_static_peers+0xb4>
 8014776:	f8dd a020 	ldr.w	sl, [sp, #32]
 801477a:	4680      	mov	r8, r0
 801477c:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8014780:	9105      	str	r1, [sp, #20]
 8014782:	4608      	mov	r0, r1
 8014784:	f7eb fd8c 	bl	80002a0 <strlen>
 8014788:	28ff      	cmp	r0, #255	@ 0xff
 801478a:	9905      	ldr	r1, [sp, #20]
 801478c:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8014790:	d815      	bhi.n	80147be <rcl_get_discovery_static_peers+0xae>
 8014792:	6860      	ldr	r0, [r4, #4]
 8014794:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014798:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 801479c:	f001 f8bb 	bl	8015916 <strncpy>
 80147a0:	6863      	ldr	r3, [r4, #4]
 80147a2:	9e07      	ldr	r6, [sp, #28]
 80147a4:	3501      	adds	r5, #1
 80147a6:	444b      	add	r3, r9
 80147a8:	42b5      	cmp	r5, r6
 80147aa:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 80147ae:	d209      	bcs.n	80147c4 <rcl_get_discovery_static_peers+0xb4>
 80147b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80147b4:	e7e2      	b.n	801477c <rcl_get_discovery_static_peers+0x6c>
 80147b6:	200b      	movs	r0, #11
 80147b8:	b00e      	add	sp, #56	@ 0x38
 80147ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147be:	3501      	adds	r5, #1
 80147c0:	42b5      	cmp	r5, r6
 80147c2:	d3db      	bcc.n	801477c <rcl_get_discovery_static_peers+0x6c>
 80147c4:	4638      	mov	r0, r7
 80147c6:	f000 fb4f 	bl	8014e68 <rcutils_string_array_fini>
 80147ca:	3800      	subs	r0, #0
 80147cc:	bf18      	it	ne
 80147ce:	2001      	movne	r0, #1
 80147d0:	e7af      	b.n	8014732 <rcl_get_discovery_static_peers+0x22>
 80147d2:	f7f9 fcab 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 80147d6:	e7ac      	b.n	8014732 <rcl_get_discovery_static_peers+0x22>
 80147d8:	080177ac 	.word	0x080177ac

080147dc <rcl_get_default_domain_id>:
 80147dc:	b530      	push	{r4, r5, lr}
 80147de:	b083      	sub	sp, #12
 80147e0:	2300      	movs	r3, #0
 80147e2:	9300      	str	r3, [sp, #0]
 80147e4:	b1d0      	cbz	r0, 801481c <rcl_get_default_domain_id+0x40>
 80147e6:	4604      	mov	r4, r0
 80147e8:	4669      	mov	r1, sp
 80147ea:	4815      	ldr	r0, [pc, #84]	@ (8014840 <rcl_get_default_domain_id+0x64>)
 80147ec:	f7fc fb6c 	bl	8010ec8 <rcutils_get_env>
 80147f0:	4602      	mov	r2, r0
 80147f2:	b110      	cbz	r0, 80147fa <rcl_get_default_domain_id+0x1e>
 80147f4:	2001      	movs	r0, #1
 80147f6:	b003      	add	sp, #12
 80147f8:	bd30      	pop	{r4, r5, pc}
 80147fa:	9b00      	ldr	r3, [sp, #0]
 80147fc:	b18b      	cbz	r3, 8014822 <rcl_get_default_domain_id+0x46>
 80147fe:	7818      	ldrb	r0, [r3, #0]
 8014800:	2800      	cmp	r0, #0
 8014802:	d0f8      	beq.n	80147f6 <rcl_get_default_domain_id+0x1a>
 8014804:	a901      	add	r1, sp, #4
 8014806:	4618      	mov	r0, r3
 8014808:	9201      	str	r2, [sp, #4]
 801480a:	f000 fea5 	bl	8015558 <strtoul>
 801480e:	4605      	mov	r5, r0
 8014810:	b150      	cbz	r0, 8014828 <rcl_get_default_domain_id+0x4c>
 8014812:	1c43      	adds	r3, r0, #1
 8014814:	d00d      	beq.n	8014832 <rcl_get_default_domain_id+0x56>
 8014816:	6025      	str	r5, [r4, #0]
 8014818:	2000      	movs	r0, #0
 801481a:	e7ec      	b.n	80147f6 <rcl_get_default_domain_id+0x1a>
 801481c:	200b      	movs	r0, #11
 801481e:	b003      	add	sp, #12
 8014820:	bd30      	pop	{r4, r5, pc}
 8014822:	4618      	mov	r0, r3
 8014824:	b003      	add	sp, #12
 8014826:	bd30      	pop	{r4, r5, pc}
 8014828:	9b01      	ldr	r3, [sp, #4]
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d0f2      	beq.n	8014816 <rcl_get_default_domain_id+0x3a>
 8014830:	e7e0      	b.n	80147f4 <rcl_get_default_domain_id+0x18>
 8014832:	f001 f8ef 	bl	8015a14 <__errno>
 8014836:	6803      	ldr	r3, [r0, #0]
 8014838:	2b22      	cmp	r3, #34	@ 0x22
 801483a:	d1ec      	bne.n	8014816 <rcl_get_default_domain_id+0x3a>
 801483c:	e7da      	b.n	80147f4 <rcl_get_default_domain_id+0x18>
 801483e:	bf00      	nop
 8014840:	080178a0 	.word	0x080178a0

08014844 <rcl_expand_topic_name>:
 8014844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014848:	b08b      	sub	sp, #44	@ 0x2c
 801484a:	9306      	str	r3, [sp, #24]
 801484c:	2800      	cmp	r0, #0
 801484e:	f000 80ad 	beq.w	80149ac <rcl_expand_topic_name+0x168>
 8014852:	460e      	mov	r6, r1
 8014854:	2900      	cmp	r1, #0
 8014856:	f000 80a9 	beq.w	80149ac <rcl_expand_topic_name+0x168>
 801485a:	4617      	mov	r7, r2
 801485c:	2a00      	cmp	r2, #0
 801485e:	f000 80a5 	beq.w	80149ac <rcl_expand_topic_name+0x168>
 8014862:	2b00      	cmp	r3, #0
 8014864:	f000 80a2 	beq.w	80149ac <rcl_expand_topic_name+0x168>
 8014868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801486a:	2b00      	cmp	r3, #0
 801486c:	f000 809e 	beq.w	80149ac <rcl_expand_topic_name+0x168>
 8014870:	2200      	movs	r2, #0
 8014872:	a909      	add	r1, sp, #36	@ 0x24
 8014874:	4680      	mov	r8, r0
 8014876:	f000 f949 	bl	8014b0c <rcl_validate_topic_name>
 801487a:	4604      	mov	r4, r0
 801487c:	2800      	cmp	r0, #0
 801487e:	f040 8096 	bne.w	80149ae <rcl_expand_topic_name+0x16a>
 8014882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014884:	2b00      	cmp	r3, #0
 8014886:	f040 809a 	bne.w	80149be <rcl_expand_topic_name+0x17a>
 801488a:	4602      	mov	r2, r0
 801488c:	a909      	add	r1, sp, #36	@ 0x24
 801488e:	4630      	mov	r0, r6
 8014890:	f7fc ff5e 	bl	8011750 <rmw_validate_node_name>
 8014894:	2800      	cmp	r0, #0
 8014896:	f040 808e 	bne.w	80149b6 <rcl_expand_topic_name+0x172>
 801489a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801489c:	2a00      	cmp	r2, #0
 801489e:	f040 8093 	bne.w	80149c8 <rcl_expand_topic_name+0x184>
 80148a2:	a909      	add	r1, sp, #36	@ 0x24
 80148a4:	4638      	mov	r0, r7
 80148a6:	f7fc ff35 	bl	8011714 <rmw_validate_namespace>
 80148aa:	2800      	cmp	r0, #0
 80148ac:	f040 8083 	bne.w	80149b6 <rcl_expand_topic_name+0x172>
 80148b0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80148b2:	2c00      	cmp	r4, #0
 80148b4:	f040 80ed 	bne.w	8014a92 <rcl_expand_topic_name+0x24e>
 80148b8:	217b      	movs	r1, #123	@ 0x7b
 80148ba:	4640      	mov	r0, r8
 80148bc:	f001 f80c 	bl	80158d8 <strchr>
 80148c0:	f898 3000 	ldrb.w	r3, [r8]
 80148c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80148c6:	4605      	mov	r5, r0
 80148c8:	f000 809e 	beq.w	8014a08 <rcl_expand_topic_name+0x1c4>
 80148cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80148ce:	f040 80a2 	bne.w	8014a16 <rcl_expand_topic_name+0x1d2>
 80148d2:	4638      	mov	r0, r7
 80148d4:	f7eb fce4 	bl	80002a0 <strlen>
 80148d8:	4a82      	ldr	r2, [pc, #520]	@ (8014ae4 <rcl_expand_topic_name+0x2a0>)
 80148da:	4b83      	ldr	r3, [pc, #524]	@ (8014ae8 <rcl_expand_topic_name+0x2a4>)
 80148dc:	2801      	cmp	r0, #1
 80148de:	bf18      	it	ne
 80148e0:	4613      	movne	r3, r2
 80148e2:	9302      	str	r3, [sp, #8]
 80148e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80148e6:	9300      	str	r3, [sp, #0]
 80148e8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80148ec:	f108 0301 	add.w	r3, r8, #1
 80148f0:	9305      	str	r3, [sp, #20]
 80148f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80148f6:	9301      	str	r3, [sp, #4]
 80148f8:	ab14      	add	r3, sp, #80	@ 0x50
 80148fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80148fc:	f7fc fb0c 	bl	8010f18 <rcutils_format_string_limit>
 8014900:	4682      	mov	sl, r0
 8014902:	2800      	cmp	r0, #0
 8014904:	f000 80c7 	beq.w	8014a96 <rcl_expand_topic_name+0x252>
 8014908:	2d00      	cmp	r5, #0
 801490a:	f000 80a2 	beq.w	8014a52 <rcl_expand_topic_name+0x20e>
 801490e:	217b      	movs	r1, #123	@ 0x7b
 8014910:	f000 ffe2 	bl	80158d8 <strchr>
 8014914:	46d1      	mov	r9, sl
 8014916:	4605      	mov	r5, r0
 8014918:	9407      	str	r4, [sp, #28]
 801491a:	46d3      	mov	fp, sl
 801491c:	464c      	mov	r4, r9
 801491e:	2d00      	cmp	r5, #0
 8014920:	f000 80be 	beq.w	8014aa0 <rcl_expand_topic_name+0x25c>
 8014924:	217d      	movs	r1, #125	@ 0x7d
 8014926:	4620      	mov	r0, r4
 8014928:	f000 ffd6 	bl	80158d8 <strchr>
 801492c:	eba0 0905 	sub.w	r9, r0, r5
 8014930:	f109 0a01 	add.w	sl, r9, #1
 8014934:	486d      	ldr	r0, [pc, #436]	@ (8014aec <rcl_expand_topic_name+0x2a8>)
 8014936:	4652      	mov	r2, sl
 8014938:	4629      	mov	r1, r5
 801493a:	f000 ffda 	bl	80158f2 <strncmp>
 801493e:	2800      	cmp	r0, #0
 8014940:	d067      	beq.n	8014a12 <rcl_expand_topic_name+0x1ce>
 8014942:	486b      	ldr	r0, [pc, #428]	@ (8014af0 <rcl_expand_topic_name+0x2ac>)
 8014944:	4652      	mov	r2, sl
 8014946:	4629      	mov	r1, r5
 8014948:	f000 ffd3 	bl	80158f2 <strncmp>
 801494c:	b130      	cbz	r0, 801495c <rcl_expand_topic_name+0x118>
 801494e:	4869      	ldr	r0, [pc, #420]	@ (8014af4 <rcl_expand_topic_name+0x2b0>)
 8014950:	4652      	mov	r2, sl
 8014952:	4629      	mov	r1, r5
 8014954:	f000 ffcd 	bl	80158f2 <strncmp>
 8014958:	2800      	cmp	r0, #0
 801495a:	d137      	bne.n	80149cc <rcl_expand_topic_name+0x188>
 801495c:	46b9      	mov	r9, r7
 801495e:	ab16      	add	r3, sp, #88	@ 0x58
 8014960:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014964:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014968:	ab14      	add	r3, sp, #80	@ 0x50
 801496a:	4628      	mov	r0, r5
 801496c:	cb0c      	ldmia	r3, {r2, r3}
 801496e:	4651      	mov	r1, sl
 8014970:	f7fc fc12 	bl	8011198 <rcutils_strndup>
 8014974:	4605      	mov	r5, r0
 8014976:	2800      	cmp	r0, #0
 8014978:	f000 809c 	beq.w	8014ab4 <rcl_expand_topic_name+0x270>
 801497c:	464a      	mov	r2, r9
 801497e:	4620      	mov	r0, r4
 8014980:	ab14      	add	r3, sp, #80	@ 0x50
 8014982:	4629      	mov	r1, r5
 8014984:	f7fc fb02 	bl	8010f8c <rcutils_repl_str>
 8014988:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801498a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801498c:	4604      	mov	r4, r0
 801498e:	4628      	mov	r0, r5
 8014990:	4798      	blx	r3
 8014992:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014994:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014996:	4658      	mov	r0, fp
 8014998:	4798      	blx	r3
 801499a:	2c00      	cmp	r4, #0
 801499c:	d07b      	beq.n	8014a96 <rcl_expand_topic_name+0x252>
 801499e:	217b      	movs	r1, #123	@ 0x7b
 80149a0:	4620      	mov	r0, r4
 80149a2:	f000 ff99 	bl	80158d8 <strchr>
 80149a6:	46a3      	mov	fp, r4
 80149a8:	4605      	mov	r5, r0
 80149aa:	e7b8      	b.n	801491e <rcl_expand_topic_name+0xda>
 80149ac:	240b      	movs	r4, #11
 80149ae:	4620      	mov	r0, r4
 80149b0:	b00b      	add	sp, #44	@ 0x2c
 80149b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b6:	f7f9 fbb9 	bl	800e12c <rcl_convert_rmw_ret_to_rcl_ret>
 80149ba:	4604      	mov	r4, r0
 80149bc:	e7f7      	b.n	80149ae <rcl_expand_topic_name+0x16a>
 80149be:	2467      	movs	r4, #103	@ 0x67
 80149c0:	4620      	mov	r0, r4
 80149c2:	b00b      	add	sp, #44	@ 0x2c
 80149c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c8:	24c9      	movs	r4, #201	@ 0xc9
 80149ca:	e7f0      	b.n	80149ae <rcl_expand_topic_name+0x16a>
 80149cc:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80149d0:	9806      	ldr	r0, [sp, #24]
 80149d2:	1c69      	adds	r1, r5, #1
 80149d4:	f7fc fcdc 	bl	8011390 <rcutils_string_map_getn>
 80149d8:	4681      	mov	r9, r0
 80149da:	2800      	cmp	r0, #0
 80149dc:	d1bf      	bne.n	801495e <rcl_expand_topic_name+0x11a>
 80149de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80149e0:	aa16      	add	r2, sp, #88	@ 0x58
 80149e2:	6018      	str	r0, [r3, #0]
 80149e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80149e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80149ea:	ab14      	add	r3, sp, #80	@ 0x50
 80149ec:	cb0c      	ldmia	r3, {r2, r3}
 80149ee:	4651      	mov	r1, sl
 80149f0:	4628      	mov	r0, r5
 80149f2:	f7fc fbd1 	bl	8011198 <rcutils_strndup>
 80149f6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80149f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80149fa:	4798      	blx	r3
 80149fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80149fe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014a00:	4658      	mov	r0, fp
 8014a02:	2469      	movs	r4, #105	@ 0x69
 8014a04:	4798      	blx	r3
 8014a06:	e7d2      	b.n	80149ae <rcl_expand_topic_name+0x16a>
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	d05b      	beq.n	8014ac4 <rcl_expand_topic_name+0x280>
 8014a0c:	46c1      	mov	r9, r8
 8014a0e:	46a2      	mov	sl, r4
 8014a10:	e782      	b.n	8014918 <rcl_expand_topic_name+0xd4>
 8014a12:	46b1      	mov	r9, r6
 8014a14:	e7a3      	b.n	801495e <rcl_expand_topic_name+0x11a>
 8014a16:	2800      	cmp	r0, #0
 8014a18:	d1f8      	bne.n	8014a0c <rcl_expand_topic_name+0x1c8>
 8014a1a:	4638      	mov	r0, r7
 8014a1c:	f7eb fc40 	bl	80002a0 <strlen>
 8014a20:	4a35      	ldr	r2, [pc, #212]	@ (8014af8 <rcl_expand_topic_name+0x2b4>)
 8014a22:	4b36      	ldr	r3, [pc, #216]	@ (8014afc <rcl_expand_topic_name+0x2b8>)
 8014a24:	f8cd 8010 	str.w	r8, [sp, #16]
 8014a28:	2801      	cmp	r0, #1
 8014a2a:	bf18      	it	ne
 8014a2c:	4613      	movne	r3, r2
 8014a2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014a32:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014a36:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014a38:	9703      	str	r7, [sp, #12]
 8014a3a:	9200      	str	r2, [sp, #0]
 8014a3c:	ab14      	add	r3, sp, #80	@ 0x50
 8014a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a40:	f7fc fa6a 	bl	8010f18 <rcutils_format_string_limit>
 8014a44:	4682      	mov	sl, r0
 8014a46:	4653      	mov	r3, sl
 8014a48:	b32b      	cbz	r3, 8014a96 <rcl_expand_topic_name+0x252>
 8014a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014a4c:	f8c3 a000 	str.w	sl, [r3]
 8014a50:	e7ad      	b.n	80149ae <rcl_expand_topic_name+0x16a>
 8014a52:	f89a 3000 	ldrb.w	r3, [sl]
 8014a56:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a58:	d0f7      	beq.n	8014a4a <rcl_expand_topic_name+0x206>
 8014a5a:	4638      	mov	r0, r7
 8014a5c:	f7eb fc20 	bl	80002a0 <strlen>
 8014a60:	4a25      	ldr	r2, [pc, #148]	@ (8014af8 <rcl_expand_topic_name+0x2b4>)
 8014a62:	4b26      	ldr	r3, [pc, #152]	@ (8014afc <rcl_expand_topic_name+0x2b8>)
 8014a64:	f8cd a010 	str.w	sl, [sp, #16]
 8014a68:	2801      	cmp	r0, #1
 8014a6a:	bf18      	it	ne
 8014a6c:	4613      	movne	r3, r2
 8014a6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014a72:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014a76:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014a78:	9703      	str	r7, [sp, #12]
 8014a7a:	9200      	str	r2, [sp, #0]
 8014a7c:	ab14      	add	r3, sp, #80	@ 0x50
 8014a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a80:	f7fc fa4a 	bl	8010f18 <rcutils_format_string_limit>
 8014a84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a86:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014a88:	4605      	mov	r5, r0
 8014a8a:	4650      	mov	r0, sl
 8014a8c:	4798      	blx	r3
 8014a8e:	46aa      	mov	sl, r5
 8014a90:	e7d9      	b.n	8014a46 <rcl_expand_topic_name+0x202>
 8014a92:	24ca      	movs	r4, #202	@ 0xca
 8014a94:	e78b      	b.n	80149ae <rcl_expand_topic_name+0x16a>
 8014a96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014a98:	2300      	movs	r3, #0
 8014a9a:	6013      	str	r3, [r2, #0]
 8014a9c:	240a      	movs	r4, #10
 8014a9e:	e786      	b.n	80149ae <rcl_expand_topic_name+0x16a>
 8014aa0:	465b      	mov	r3, fp
 8014aa2:	9c07      	ldr	r4, [sp, #28]
 8014aa4:	46da      	mov	sl, fp
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d1d3      	bne.n	8014a52 <rcl_expand_topic_name+0x20e>
 8014aaa:	f898 3000 	ldrb.w	r3, [r8]
 8014aae:	2b2f      	cmp	r3, #47	@ 0x2f
 8014ab0:	d0cb      	beq.n	8014a4a <rcl_expand_topic_name+0x206>
 8014ab2:	e7b2      	b.n	8014a1a <rcl_expand_topic_name+0x1d6>
 8014ab4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8014ab8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014aba:	6015      	str	r5, [r2, #0]
 8014abc:	4658      	mov	r0, fp
 8014abe:	4798      	blx	r3
 8014ac0:	240a      	movs	r4, #10
 8014ac2:	e774      	b.n	80149ae <rcl_expand_topic_name+0x16a>
 8014ac4:	ab17      	add	r3, sp, #92	@ 0x5c
 8014ac6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014aca:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014ace:	ab14      	add	r3, sp, #80	@ 0x50
 8014ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014ad2:	4640      	mov	r0, r8
 8014ad4:	f7fc fb3a 	bl	801114c <rcutils_strdup>
 8014ad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014ada:	2800      	cmp	r0, #0
 8014adc:	6018      	str	r0, [r3, #0]
 8014ade:	bf08      	it	eq
 8014ae0:	240a      	moveq	r4, #10
 8014ae2:	e764      	b.n	80149ae <rcl_expand_topic_name+0x16a>
 8014ae4:	080178b0 	.word	0x080178b0
 8014ae8:	08016d24 	.word	0x08016d24
 8014aec:	080178b8 	.word	0x080178b8
 8014af0:	080178c0 	.word	0x080178c0
 8014af4:	080178c8 	.word	0x080178c8
 8014af8:	08016f5c 	.word	0x08016f5c
 8014afc:	08016d34 	.word	0x08016d34

08014b00 <rcl_get_default_topic_name_substitutions>:
 8014b00:	2800      	cmp	r0, #0
 8014b02:	bf0c      	ite	eq
 8014b04:	200b      	moveq	r0, #11
 8014b06:	2000      	movne	r0, #0
 8014b08:	4770      	bx	lr
 8014b0a:	bf00      	nop

08014b0c <rcl_validate_topic_name>:
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	d07a      	beq.n	8014c06 <rcl_validate_topic_name+0xfa>
 8014b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b14:	460e      	mov	r6, r1
 8014b16:	2900      	cmp	r1, #0
 8014b18:	d07c      	beq.n	8014c14 <rcl_validate_topic_name+0x108>
 8014b1a:	4617      	mov	r7, r2
 8014b1c:	4605      	mov	r5, r0
 8014b1e:	f7eb fbbf 	bl	80002a0 <strlen>
 8014b22:	b1b0      	cbz	r0, 8014b52 <rcl_validate_topic_name+0x46>
 8014b24:	f895 9000 	ldrb.w	r9, [r5]
 8014b28:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8014cac <rcl_validate_topic_name+0x1a0>
 8014b2c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014b30:	f013 0304 	ands.w	r3, r3, #4
 8014b34:	d169      	bne.n	8014c0a <rcl_validate_topic_name+0xfe>
 8014b36:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8014b3a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014b3e:	2a2f      	cmp	r2, #47	@ 0x2f
 8014b40:	d10e      	bne.n	8014b60 <rcl_validate_topic_name+0x54>
 8014b42:	2202      	movs	r2, #2
 8014b44:	6032      	str	r2, [r6, #0]
 8014b46:	b36f      	cbz	r7, 8014ba4 <rcl_validate_topic_name+0x98>
 8014b48:	f8c7 8000 	str.w	r8, [r7]
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b52:	2301      	movs	r3, #1
 8014b54:	6033      	str	r3, [r6, #0]
 8014b56:	b32f      	cbz	r7, 8014ba4 <rcl_validate_topic_name+0x98>
 8014b58:	2000      	movs	r0, #0
 8014b5a:	6038      	str	r0, [r7, #0]
 8014b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b60:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8014b64:	461c      	mov	r4, r3
 8014b66:	4619      	mov	r1, r3
 8014b68:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014b6c:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014b70:	f1be 0f09 	cmp.w	lr, #9
 8014b74:	d919      	bls.n	8014baa <rcl_validate_topic_name+0x9e>
 8014b76:	f022 0e20 	bic.w	lr, r2, #32
 8014b7a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8014b7e:	f1be 0f19 	cmp.w	lr, #25
 8014b82:	d912      	bls.n	8014baa <rcl_validate_topic_name+0x9e>
 8014b84:	2a5f      	cmp	r2, #95	@ 0x5f
 8014b86:	d019      	beq.n	8014bbc <rcl_validate_topic_name+0xb0>
 8014b88:	2a2f      	cmp	r2, #47	@ 0x2f
 8014b8a:	d051      	beq.n	8014c30 <rcl_validate_topic_name+0x124>
 8014b8c:	2a7e      	cmp	r2, #126	@ 0x7e
 8014b8e:	d048      	beq.n	8014c22 <rcl_validate_topic_name+0x116>
 8014b90:	2a7b      	cmp	r2, #123	@ 0x7b
 8014b92:	d054      	beq.n	8014c3e <rcl_validate_topic_name+0x132>
 8014b94:	2a7d      	cmp	r2, #125	@ 0x7d
 8014b96:	d161      	bne.n	8014c5c <rcl_validate_topic_name+0x150>
 8014b98:	2c00      	cmp	r4, #0
 8014b9a:	d155      	bne.n	8014c48 <rcl_validate_topic_name+0x13c>
 8014b9c:	2305      	movs	r3, #5
 8014b9e:	6033      	str	r3, [r6, #0]
 8014ba0:	b107      	cbz	r7, 8014ba4 <rcl_validate_topic_name+0x98>
 8014ba2:	6039      	str	r1, [r7, #0]
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014baa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014bae:	0752      	lsls	r2, r2, #29
 8014bb0:	d504      	bpl.n	8014bbc <rcl_validate_topic_name+0xb0>
 8014bb2:	b11c      	cbz	r4, 8014bbc <rcl_validate_topic_name+0xb0>
 8014bb4:	b111      	cbz	r1, 8014bbc <rcl_validate_topic_name+0xb0>
 8014bb6:	1e4a      	subs	r2, r1, #1
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d02d      	beq.n	8014c18 <rcl_validate_topic_name+0x10c>
 8014bbc:	3101      	adds	r1, #1
 8014bbe:	4288      	cmp	r0, r1
 8014bc0:	d1d2      	bne.n	8014b68 <rcl_validate_topic_name+0x5c>
 8014bc2:	2c00      	cmp	r4, #0
 8014bc4:	d145      	bne.n	8014c52 <rcl_validate_topic_name+0x146>
 8014bc6:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8014bca:	d04f      	beq.n	8014c6c <rcl_validate_topic_name+0x160>
 8014bcc:	4620      	mov	r0, r4
 8014bce:	2301      	movs	r3, #1
 8014bd0:	e006      	b.n	8014be0 <rcl_validate_topic_name+0xd4>
 8014bd2:	428b      	cmp	r3, r1
 8014bd4:	f105 0501 	add.w	r5, r5, #1
 8014bd8:	f103 0201 	add.w	r2, r3, #1
 8014bdc:	d236      	bcs.n	8014c4c <rcl_validate_topic_name+0x140>
 8014bde:	4613      	mov	r3, r2
 8014be0:	4580      	cmp	r8, r0
 8014be2:	f100 0001 	add.w	r0, r0, #1
 8014be6:	d0f4      	beq.n	8014bd2 <rcl_validate_topic_name+0xc6>
 8014be8:	782a      	ldrb	r2, [r5, #0]
 8014bea:	2a2f      	cmp	r2, #47	@ 0x2f
 8014bec:	d1f1      	bne.n	8014bd2 <rcl_validate_topic_name+0xc6>
 8014bee:	786a      	ldrb	r2, [r5, #1]
 8014bf0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014bf4:	0754      	lsls	r4, r2, #29
 8014bf6:	d5ec      	bpl.n	8014bd2 <rcl_validate_topic_name+0xc6>
 8014bf8:	2204      	movs	r2, #4
 8014bfa:	6032      	str	r2, [r6, #0]
 8014bfc:	2f00      	cmp	r7, #0
 8014bfe:	d0d1      	beq.n	8014ba4 <rcl_validate_topic_name+0x98>
 8014c00:	603b      	str	r3, [r7, #0]
 8014c02:	2000      	movs	r0, #0
 8014c04:	e7aa      	b.n	8014b5c <rcl_validate_topic_name+0x50>
 8014c06:	200b      	movs	r0, #11
 8014c08:	4770      	bx	lr
 8014c0a:	2304      	movs	r3, #4
 8014c0c:	6033      	str	r3, [r6, #0]
 8014c0e:	2f00      	cmp	r7, #0
 8014c10:	d1a2      	bne.n	8014b58 <rcl_validate_topic_name+0x4c>
 8014c12:	e7c7      	b.n	8014ba4 <rcl_validate_topic_name+0x98>
 8014c14:	200b      	movs	r0, #11
 8014c16:	e7a1      	b.n	8014b5c <rcl_validate_topic_name+0x50>
 8014c18:	2309      	movs	r3, #9
 8014c1a:	6033      	str	r3, [r6, #0]
 8014c1c:	2f00      	cmp	r7, #0
 8014c1e:	d1c0      	bne.n	8014ba2 <rcl_validate_topic_name+0x96>
 8014c20:	e7c0      	b.n	8014ba4 <rcl_validate_topic_name+0x98>
 8014c22:	2900      	cmp	r1, #0
 8014c24:	d0ca      	beq.n	8014bbc <rcl_validate_topic_name+0xb0>
 8014c26:	2306      	movs	r3, #6
 8014c28:	6033      	str	r3, [r6, #0]
 8014c2a:	2f00      	cmp	r7, #0
 8014c2c:	d1b9      	bne.n	8014ba2 <rcl_validate_topic_name+0x96>
 8014c2e:	e7b9      	b.n	8014ba4 <rcl_validate_topic_name+0x98>
 8014c30:	2c00      	cmp	r4, #0
 8014c32:	d0c3      	beq.n	8014bbc <rcl_validate_topic_name+0xb0>
 8014c34:	2308      	movs	r3, #8
 8014c36:	6033      	str	r3, [r6, #0]
 8014c38:	2f00      	cmp	r7, #0
 8014c3a:	d1b2      	bne.n	8014ba2 <rcl_validate_topic_name+0x96>
 8014c3c:	e7b2      	b.n	8014ba4 <rcl_validate_topic_name+0x98>
 8014c3e:	2c00      	cmp	r4, #0
 8014c40:	d1f8      	bne.n	8014c34 <rcl_validate_topic_name+0x128>
 8014c42:	460b      	mov	r3, r1
 8014c44:	2401      	movs	r4, #1
 8014c46:	e7b9      	b.n	8014bbc <rcl_validate_topic_name+0xb0>
 8014c48:	2400      	movs	r4, #0
 8014c4a:	e7b7      	b.n	8014bbc <rcl_validate_topic_name+0xb0>
 8014c4c:	2000      	movs	r0, #0
 8014c4e:	6030      	str	r0, [r6, #0]
 8014c50:	e784      	b.n	8014b5c <rcl_validate_topic_name+0x50>
 8014c52:	2205      	movs	r2, #5
 8014c54:	6032      	str	r2, [r6, #0]
 8014c56:	2f00      	cmp	r7, #0
 8014c58:	d1d2      	bne.n	8014c00 <rcl_validate_topic_name+0xf4>
 8014c5a:	e7a3      	b.n	8014ba4 <rcl_validate_topic_name+0x98>
 8014c5c:	2c00      	cmp	r4, #0
 8014c5e:	bf14      	ite	ne
 8014c60:	2308      	movne	r3, #8
 8014c62:	2303      	moveq	r3, #3
 8014c64:	6033      	str	r3, [r6, #0]
 8014c66:	2f00      	cmp	r7, #0
 8014c68:	d19b      	bne.n	8014ba2 <rcl_validate_topic_name+0x96>
 8014c6a:	e79b      	b.n	8014ba4 <rcl_validate_topic_name+0x98>
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	e00a      	b.n	8014c86 <rcl_validate_topic_name+0x17a>
 8014c70:	2c01      	cmp	r4, #1
 8014c72:	d013      	beq.n	8014c9c <rcl_validate_topic_name+0x190>
 8014c74:	4299      	cmp	r1, r3
 8014c76:	f104 0401 	add.w	r4, r4, #1
 8014c7a:	f105 0501 	add.w	r5, r5, #1
 8014c7e:	f103 0201 	add.w	r2, r3, #1
 8014c82:	d9e3      	bls.n	8014c4c <rcl_validate_topic_name+0x140>
 8014c84:	4613      	mov	r3, r2
 8014c86:	45a0      	cmp	r8, r4
 8014c88:	d0f4      	beq.n	8014c74 <rcl_validate_topic_name+0x168>
 8014c8a:	782a      	ldrb	r2, [r5, #0]
 8014c8c:	2a2f      	cmp	r2, #47	@ 0x2f
 8014c8e:	d1ef      	bne.n	8014c70 <rcl_validate_topic_name+0x164>
 8014c90:	786a      	ldrb	r2, [r5, #1]
 8014c92:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014c96:	0752      	lsls	r2, r2, #29
 8014c98:	d5ec      	bpl.n	8014c74 <rcl_validate_topic_name+0x168>
 8014c9a:	e7ad      	b.n	8014bf8 <rcl_validate_topic_name+0xec>
 8014c9c:	2307      	movs	r3, #7
 8014c9e:	6033      	str	r3, [r6, #0]
 8014ca0:	2f00      	cmp	r7, #0
 8014ca2:	f43f af7f 	beq.w	8014ba4 <rcl_validate_topic_name+0x98>
 8014ca6:	603c      	str	r4, [r7, #0]
 8014ca8:	2000      	movs	r0, #0
 8014caa:	e757      	b.n	8014b5c <rcl_validate_topic_name+0x50>
 8014cac:	08017944 	.word	0x08017944

08014cb0 <rcutils_split>:
 8014cb0:	b082      	sub	sp, #8
 8014cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb6:	b08d      	sub	sp, #52	@ 0x34
 8014cb8:	ac16      	add	r4, sp, #88	@ 0x58
 8014cba:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8014cbc:	e884 000c 	stmia.w	r4, {r2, r3}
 8014cc0:	2f00      	cmp	r7, #0
 8014cc2:	f000 80a8 	beq.w	8014e16 <rcutils_split+0x166>
 8014cc6:	4605      	mov	r5, r0
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	d07e      	beq.n	8014dca <rcutils_split+0x11a>
 8014ccc:	7803      	ldrb	r3, [r0, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d07b      	beq.n	8014dca <rcutils_split+0x11a>
 8014cd2:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 8014cd6:	460e      	mov	r6, r1
 8014cd8:	9203      	str	r2, [sp, #12]
 8014cda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014cde:	f107 0408 	add.w	r4, r7, #8
 8014ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ce4:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 8014ce8:	f8c4 b000 	str.w	fp, [r4]
 8014cec:	4628      	mov	r0, r5
 8014cee:	f7eb fad7 	bl	80002a0 <strlen>
 8014cf2:	782c      	ldrb	r4, [r5, #0]
 8014cf4:	182b      	adds	r3, r5, r0
 8014cf6:	1ba4      	subs	r4, r4, r6
 8014cf8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014cfc:	fab4 f484 	clz	r4, r4
 8014d00:	42b3      	cmp	r3, r6
 8014d02:	bf14      	ite	ne
 8014d04:	4680      	movne	r8, r0
 8014d06:	f1a0 0801 	subeq.w	r8, r0, #1
 8014d0a:	0964      	lsrs	r4, r4, #5
 8014d0c:	2001      	movs	r0, #1
 8014d0e:	4544      	cmp	r4, r8
 8014d10:	6038      	str	r0, [r7, #0]
 8014d12:	d26b      	bcs.n	8014dec <rcutils_split+0x13c>
 8014d14:	192b      	adds	r3, r5, r4
 8014d16:	eb05 0108 	add.w	r1, r5, r8
 8014d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d1e:	42b2      	cmp	r2, r6
 8014d20:	bf04      	itt	eq
 8014d22:	3001      	addeq	r0, #1
 8014d24:	6038      	streq	r0, [r7, #0]
 8014d26:	4299      	cmp	r1, r3
 8014d28:	d1f7      	bne.n	8014d1a <rcutils_split+0x6a>
 8014d2a:	9b03      	ldr	r3, [sp, #12]
 8014d2c:	0080      	lsls	r0, r0, #2
 8014d2e:	4659      	mov	r1, fp
 8014d30:	4798      	blx	r3
 8014d32:	4603      	mov	r3, r0
 8014d34:	6078      	str	r0, [r7, #4]
 8014d36:	2800      	cmp	r0, #0
 8014d38:	d05f      	beq.n	8014dfa <rcutils_split+0x14a>
 8014d3a:	f04f 0a00 	mov.w	sl, #0
 8014d3e:	46a1      	mov	r9, r4
 8014d40:	e002      	b.n	8014d48 <rcutils_split+0x98>
 8014d42:	3401      	adds	r4, #1
 8014d44:	45a0      	cmp	r8, r4
 8014d46:	d922      	bls.n	8014d8e <rcutils_split+0xde>
 8014d48:	5d2a      	ldrb	r2, [r5, r4]
 8014d4a:	42b2      	cmp	r2, r6
 8014d4c:	d1f9      	bne.n	8014d42 <rcutils_split+0x92>
 8014d4e:	45a1      	cmp	r9, r4
 8014d50:	eba4 0209 	sub.w	r2, r4, r9
 8014d54:	d032      	beq.n	8014dbc <rcutils_split+0x10c>
 8014d56:	9302      	str	r3, [sp, #8]
 8014d58:	4659      	mov	r1, fp
 8014d5a:	9b03      	ldr	r3, [sp, #12]
 8014d5c:	9201      	str	r2, [sp, #4]
 8014d5e:	1c90      	adds	r0, r2, #2
 8014d60:	4798      	blx	r3
 8014d62:	9b02      	ldr	r3, [sp, #8]
 8014d64:	9a01      	ldr	r2, [sp, #4]
 8014d66:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8014d6a:	1c51      	adds	r1, r2, #1
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8014d72:	eb05 0309 	add.w	r3, r5, r9
 8014d76:	2800      	cmp	r0, #0
 8014d78:	d04f      	beq.n	8014e1a <rcutils_split+0x16a>
 8014d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8014e28 <rcutils_split+0x178>)
 8014d7c:	f000 fcca 	bl	8015714 <sniprintf>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f10a 0a01 	add.w	sl, sl, #1
 8014d86:	3401      	adds	r4, #1
 8014d88:	45a0      	cmp	r8, r4
 8014d8a:	46a1      	mov	r9, r4
 8014d8c:	d8dc      	bhi.n	8014d48 <rcutils_split+0x98>
 8014d8e:	45a1      	cmp	r9, r4
 8014d90:	d039      	beq.n	8014e06 <rcutils_split+0x156>
 8014d92:	eba4 0409 	sub.w	r4, r4, r9
 8014d96:	9301      	str	r3, [sp, #4]
 8014d98:	4659      	mov	r1, fp
 8014d9a:	9b03      	ldr	r3, [sp, #12]
 8014d9c:	1ca0      	adds	r0, r4, #2
 8014d9e:	4798      	blx	r3
 8014da0:	9b01      	ldr	r3, [sp, #4]
 8014da2:	6879      	ldr	r1, [r7, #4]
 8014da4:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8014da8:	4a1f      	ldr	r2, [pc, #124]	@ (8014e28 <rcutils_split+0x178>)
 8014daa:	f851 002a 	ldr.w	r0, [r1, sl, lsl #2]
 8014dae:	eb05 0309 	add.w	r3, r5, r9
 8014db2:	1c61      	adds	r1, r4, #1
 8014db4:	f000 fcae 	bl	8015714 <sniprintf>
 8014db8:	2400      	movs	r4, #0
 8014dba:	e011      	b.n	8014de0 <rcutils_split+0x130>
 8014dbc:	683a      	ldr	r2, [r7, #0]
 8014dbe:	3a01      	subs	r2, #1
 8014dc0:	2100      	movs	r1, #0
 8014dc2:	603a      	str	r2, [r7, #0]
 8014dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014dc8:	e7dd      	b.n	8014d86 <rcutils_split+0xd6>
 8014dca:	a804      	add	r0, sp, #16
 8014dcc:	ac04      	add	r4, sp, #16
 8014dce:	f000 f82d 	bl	8014e2c <rcutils_get_zero_initialized_string_array>
 8014dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dd4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014dd6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8014dda:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8014dde:	2400      	movs	r4, #0
 8014de0:	4620      	mov	r0, r4
 8014de2:	b00d      	add	sp, #52	@ 0x34
 8014de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014de8:	b002      	add	sp, #8
 8014dea:	4770      	bx	lr
 8014dec:	9b03      	ldr	r3, [sp, #12]
 8014dee:	4659      	mov	r1, fp
 8014df0:	2004      	movs	r0, #4
 8014df2:	4798      	blx	r3
 8014df4:	4603      	mov	r3, r0
 8014df6:	6078      	str	r0, [r7, #4]
 8014df8:	b928      	cbnz	r0, 8014e06 <rcutils_split+0x156>
 8014dfa:	4638      	mov	r0, r7
 8014dfc:	f000 f834 	bl	8014e68 <rcutils_string_array_fini>
 8014e00:	b970      	cbnz	r0, 8014e20 <rcutils_split+0x170>
 8014e02:	2402      	movs	r4, #2
 8014e04:	e7ec      	b.n	8014de0 <rcutils_split+0x130>
 8014e06:	683a      	ldr	r2, [r7, #0]
 8014e08:	3a01      	subs	r2, #1
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	603a      	str	r2, [r7, #0]
 8014e0e:	460c      	mov	r4, r1
 8014e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014e14:	e7e4      	b.n	8014de0 <rcutils_split+0x130>
 8014e16:	240b      	movs	r4, #11
 8014e18:	e7e2      	b.n	8014de0 <rcutils_split+0x130>
 8014e1a:	f8c7 a000 	str.w	sl, [r7]
 8014e1e:	e7ec      	b.n	8014dfa <rcutils_split+0x14a>
 8014e20:	f7f5 fb66 	bl	800a4f0 <rcutils_reset_error>
 8014e24:	2402      	movs	r4, #2
 8014e26:	e7db      	b.n	8014de0 <rcutils_split+0x130>
 8014e28:	08016d28 	.word	0x08016d28

08014e2c <rcutils_get_zero_initialized_string_array>:
 8014e2c:	b570      	push	{r4, r5, r6, lr}
 8014e2e:	b086      	sub	sp, #24
 8014e30:	4606      	mov	r6, r0
 8014e32:	4668      	mov	r0, sp
 8014e34:	f7f5 fa5a 	bl	800a2ec <rcutils_get_zero_initialized_allocator>
 8014e38:	4b0a      	ldr	r3, [pc, #40]	@ (8014e64 <rcutils_get_zero_initialized_string_array+0x38>)
 8014e3a:	46ee      	mov	lr, sp
 8014e3c:	f103 0508 	add.w	r5, r3, #8
 8014e40:	469c      	mov	ip, r3
 8014e42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014e48:	f8de 3000 	ldr.w	r3, [lr]
 8014e4c:	602b      	str	r3, [r5, #0]
 8014e4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e52:	4634      	mov	r4, r6
 8014e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e56:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014e5e:	4630      	mov	r0, r6
 8014e60:	b006      	add	sp, #24
 8014e62:	bd70      	pop	{r4, r5, r6, pc}
 8014e64:	200112a4 	.word	0x200112a4

08014e68 <rcutils_string_array_fini>:
 8014e68:	b320      	cbz	r0, 8014eb4 <rcutils_string_array_fini+0x4c>
 8014e6a:	b570      	push	{r4, r5, r6, lr}
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	6840      	ldr	r0, [r0, #4]
 8014e70:	b1d8      	cbz	r0, 8014eaa <rcutils_string_array_fini+0x42>
 8014e72:	f104 0008 	add.w	r0, r4, #8
 8014e76:	f7f5 fa73 	bl	800a360 <rcutils_allocator_is_valid>
 8014e7a:	b1b8      	cbz	r0, 8014eac <rcutils_string_array_fini+0x44>
 8014e7c:	6823      	ldr	r3, [r4, #0]
 8014e7e:	b1bb      	cbz	r3, 8014eb0 <rcutils_string_array_fini+0x48>
 8014e80:	2500      	movs	r5, #0
 8014e82:	6860      	ldr	r0, [r4, #4]
 8014e84:	462e      	mov	r6, r5
 8014e86:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014e8a:	68e3      	ldr	r3, [r4, #12]
 8014e8c:	69a1      	ldr	r1, [r4, #24]
 8014e8e:	4798      	blx	r3
 8014e90:	e9d4 3000 	ldrd	r3, r0, [r4]
 8014e94:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8014e98:	3501      	adds	r5, #1
 8014e9a:	429d      	cmp	r5, r3
 8014e9c:	d3f3      	bcc.n	8014e86 <rcutils_string_array_fini+0x1e>
 8014e9e:	68e3      	ldr	r3, [r4, #12]
 8014ea0:	69a1      	ldr	r1, [r4, #24]
 8014ea2:	4798      	blx	r3
 8014ea4:	2000      	movs	r0, #0
 8014ea6:	e9c4 0000 	strd	r0, r0, [r4]
 8014eaa:	bd70      	pop	{r4, r5, r6, pc}
 8014eac:	200b      	movs	r0, #11
 8014eae:	bd70      	pop	{r4, r5, r6, pc}
 8014eb0:	6860      	ldr	r0, [r4, #4]
 8014eb2:	e7f4      	b.n	8014e9e <rcutils_string_array_fini+0x36>
 8014eb4:	200b      	movs	r0, #11
 8014eb6:	4770      	bx	lr

08014eb8 <rmw_get_zero_initialized_discovery_options>:
 8014eb8:	b510      	push	{r4, lr}
 8014eba:	2220      	movs	r2, #32
 8014ebc:	4604      	mov	r4, r0
 8014ebe:	2100      	movs	r1, #0
 8014ec0:	f000 fd02 	bl	80158c8 <memset>
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	bd10      	pop	{r4, pc}

08014ec8 <rmw_discovery_options_init>:
 8014ec8:	b338      	cbz	r0, 8014f1a <rmw_discovery_options_init+0x52>
 8014eca:	b570      	push	{r4, r5, r6, lr}
 8014ecc:	4604      	mov	r4, r0
 8014ece:	4610      	mov	r0, r2
 8014ed0:	460e      	mov	r6, r1
 8014ed2:	4615      	mov	r5, r2
 8014ed4:	f7f5 fa44 	bl	800a360 <rcutils_allocator_is_valid>
 8014ed8:	b1d8      	cbz	r0, 8014f12 <rmw_discovery_options_init+0x4a>
 8014eda:	68a3      	ldr	r3, [r4, #8]
 8014edc:	b9cb      	cbnz	r3, 8014f12 <rmw_discovery_options_init+0x4a>
 8014ede:	6863      	ldr	r3, [r4, #4]
 8014ee0:	b9bb      	cbnz	r3, 8014f12 <rmw_discovery_options_init+0x4a>
 8014ee2:	7823      	ldrb	r3, [r4, #0]
 8014ee4:	b90b      	cbnz	r3, 8014eea <rmw_discovery_options_init+0x22>
 8014ee6:	2302      	movs	r3, #2
 8014ee8:	7023      	strb	r3, [r4, #0]
 8014eea:	b1a6      	cbz	r6, 8014f16 <rmw_discovery_options_init+0x4e>
 8014eec:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8014ef0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014ef4:	4630      	mov	r0, r6
 8014ef6:	4798      	blx	r3
 8014ef8:	6060      	str	r0, [r4, #4]
 8014efa:	b180      	cbz	r0, 8014f1e <rmw_discovery_options_init+0x56>
 8014efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014efe:	f104 0c0c 	add.w	ip, r4, #12
 8014f02:	60a6      	str	r6, [r4, #8]
 8014f04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f08:	682b      	ldr	r3, [r5, #0]
 8014f0a:	f8cc 3000 	str.w	r3, [ip]
 8014f0e:	2000      	movs	r0, #0
 8014f10:	bd70      	pop	{r4, r5, r6, pc}
 8014f12:	200b      	movs	r0, #11
 8014f14:	bd70      	pop	{r4, r5, r6, pc}
 8014f16:	4630      	mov	r0, r6
 8014f18:	bd70      	pop	{r4, r5, r6, pc}
 8014f1a:	200b      	movs	r0, #11
 8014f1c:	4770      	bx	lr
 8014f1e:	200a      	movs	r0, #10
 8014f20:	bd70      	pop	{r4, r5, r6, pc}
 8014f22:	bf00      	nop

08014f24 <on_status>:
 8014f24:	b082      	sub	sp, #8
 8014f26:	b002      	add	sp, #8
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop

08014f2c <on_topic>:
 8014f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f30:	4a22      	ldr	r2, [pc, #136]	@ (8014fbc <on_topic+0x90>)
 8014f32:	b094      	sub	sp, #80	@ 0x50
 8014f34:	6812      	ldr	r2, [r2, #0]
 8014f36:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8014f38:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014f3c:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8014f40:	b3c2      	cbz	r2, 8014fb4 <on_topic+0x88>
 8014f42:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8014f46:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8014f4a:	e001      	b.n	8014f50 <on_topic+0x24>
 8014f4c:	6852      	ldr	r2, [r2, #4]
 8014f4e:	b38a      	cbz	r2, 8014fb4 <on_topic+0x88>
 8014f50:	6894      	ldr	r4, [r2, #8]
 8014f52:	8aa3      	ldrh	r3, [r4, #20]
 8014f54:	428b      	cmp	r3, r1
 8014f56:	d1f9      	bne.n	8014f4c <on_topic+0x20>
 8014f58:	7da3      	ldrb	r3, [r4, #22]
 8014f5a:	4283      	cmp	r3, r0
 8014f5c:	d1f6      	bne.n	8014f4c <on_topic+0x20>
 8014f5e:	2248      	movs	r2, #72	@ 0x48
 8014f60:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014f64:	4668      	mov	r0, sp
 8014f66:	f000 fd8a 	bl	8015a7e <memcpy>
 8014f6a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8014f6e:	cb0c      	ldmia	r3, {r2, r3}
 8014f70:	4620      	mov	r0, r4
 8014f72:	f7f5 fecd 	bl	800ad10 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014f76:	4607      	mov	r7, r0
 8014f78:	b1e0      	cbz	r0, 8014fb4 <on_topic+0x88>
 8014f7a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8014f7e:	4632      	mov	r2, r6
 8014f80:	4628      	mov	r0, r5
 8014f82:	f108 0110 	add.w	r1, r8, #16
 8014f86:	f7fd feb7 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 8014f8a:	b930      	cbnz	r0, 8014f9a <on_topic+0x6e>
 8014f8c:	480c      	ldr	r0, [pc, #48]	@ (8014fc0 <on_topic+0x94>)
 8014f8e:	4639      	mov	r1, r7
 8014f90:	b014      	add	sp, #80	@ 0x50
 8014f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f96:	f7fc bc49 	b.w	801182c <put_memory>
 8014f9a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8014f9e:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8014fa2:	f7fd fda1 	bl	8012ae8 <rmw_uros_epoch_nanos>
 8014fa6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8014faa:	2305      	movs	r3, #5
 8014fac:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014fb0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8014fb4:	b014      	add	sp, #80	@ 0x50
 8014fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fba:	bf00      	nop
 8014fbc:	20011064 	.word	0x20011064
 8014fc0:	20011054 	.word	0x20011054

08014fc4 <on_request>:
 8014fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fc8:	4823      	ldr	r0, [pc, #140]	@ (8015058 <on_request+0x94>)
 8014fca:	b094      	sub	sp, #80	@ 0x50
 8014fcc:	6800      	ldr	r0, [r0, #0]
 8014fce:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014fd0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014fd4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d03b      	beq.n	8015052 <on_request+0x8e>
 8014fda:	461d      	mov	r5, r3
 8014fdc:	e001      	b.n	8014fe2 <on_request+0x1e>
 8014fde:	6840      	ldr	r0, [r0, #4]
 8014fe0:	b3b8      	cbz	r0, 8015052 <on_request+0x8e>
 8014fe2:	6884      	ldr	r4, [r0, #8]
 8014fe4:	8b21      	ldrh	r1, [r4, #24]
 8014fe6:	4291      	cmp	r1, r2
 8014fe8:	d1f9      	bne.n	8014fde <on_request+0x1a>
 8014fea:	2248      	movs	r2, #72	@ 0x48
 8014fec:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014ff0:	4668      	mov	r0, sp
 8014ff2:	f000 fd44 	bl	8015a7e <memcpy>
 8014ff6:	f104 0320 	add.w	r3, r4, #32
 8014ffa:	cb0c      	ldmia	r3, {r2, r3}
 8014ffc:	4620      	mov	r0, r4
 8014ffe:	f7f5 fe87 	bl	800ad10 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015002:	4680      	mov	r8, r0
 8015004:	b328      	cbz	r0, 8015052 <on_request+0x8e>
 8015006:	4638      	mov	r0, r7
 8015008:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801500c:	4632      	mov	r2, r6
 801500e:	f107 0110 	add.w	r1, r7, #16
 8015012:	f7fd fe71 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 8015016:	b930      	cbnz	r0, 8015026 <on_request+0x62>
 8015018:	4810      	ldr	r0, [pc, #64]	@ (801505c <on_request+0x98>)
 801501a:	4641      	mov	r1, r8
 801501c:	b014      	add	sp, #80	@ 0x50
 801501e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015022:	f7fc bc03 	b.w	801182c <put_memory>
 8015026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015028:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801502c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015030:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015038:	e895 0003 	ldmia.w	r5, {r0, r1}
 801503c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015040:	f7fd fd52 	bl	8012ae8 <rmw_uros_epoch_nanos>
 8015044:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015048:	2303      	movs	r3, #3
 801504a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801504e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015052:	b014      	add	sp, #80	@ 0x50
 8015054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015058:	20011034 	.word	0x20011034
 801505c:	20011054 	.word	0x20011054

08015060 <on_reply>:
 8015060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015064:	4821      	ldr	r0, [pc, #132]	@ (80150ec <on_reply+0x8c>)
 8015066:	b094      	sub	sp, #80	@ 0x50
 8015068:	6800      	ldr	r0, [r0, #0]
 801506a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801506c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015070:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015072:	b3b8      	cbz	r0, 80150e4 <on_reply+0x84>
 8015074:	461d      	mov	r5, r3
 8015076:	e001      	b.n	801507c <on_reply+0x1c>
 8015078:	6840      	ldr	r0, [r0, #4]
 801507a:	b398      	cbz	r0, 80150e4 <on_reply+0x84>
 801507c:	6884      	ldr	r4, [r0, #8]
 801507e:	8b21      	ldrh	r1, [r4, #24]
 8015080:	4291      	cmp	r1, r2
 8015082:	d1f9      	bne.n	8015078 <on_reply+0x18>
 8015084:	2248      	movs	r2, #72	@ 0x48
 8015086:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801508a:	4668      	mov	r0, sp
 801508c:	f000 fcf7 	bl	8015a7e <memcpy>
 8015090:	f104 0320 	add.w	r3, r4, #32
 8015094:	cb0c      	ldmia	r3, {r2, r3}
 8015096:	4620      	mov	r0, r4
 8015098:	f7f5 fe3a 	bl	800ad10 <rmw_uxrce_get_static_input_buffer_for_entity>
 801509c:	4680      	mov	r8, r0
 801509e:	b308      	cbz	r0, 80150e4 <on_reply+0x84>
 80150a0:	4638      	mov	r0, r7
 80150a2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80150a6:	4632      	mov	r2, r6
 80150a8:	f107 0110 	add.w	r1, r7, #16
 80150ac:	f7fd fe24 	bl	8012cf8 <ucdr_deserialize_array_uint8_t>
 80150b0:	b930      	cbnz	r0, 80150c0 <on_reply+0x60>
 80150b2:	480f      	ldr	r0, [pc, #60]	@ (80150f0 <on_reply+0x90>)
 80150b4:	4641      	mov	r1, r8
 80150b6:	b014      	add	sp, #80	@ 0x50
 80150b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150bc:	f7fc bbb6 	b.w	801182c <put_memory>
 80150c0:	2200      	movs	r2, #0
 80150c2:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80150c6:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80150ca:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80150ce:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80150d2:	f7fd fd09 	bl	8012ae8 <rmw_uros_epoch_nanos>
 80150d6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80150da:	2304      	movs	r3, #4
 80150dc:	e942 0102 	strd	r0, r1, [r2, #-8]
 80150e0:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80150e4:	b014      	add	sp, #80	@ 0x50
 80150e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150ea:	bf00      	nop
 80150ec:	2000c748 	.word	0x2000c748
 80150f0:	20011054 	.word	0x20011054

080150f4 <calloc>:
 80150f4:	4b02      	ldr	r3, [pc, #8]	@ (8015100 <calloc+0xc>)
 80150f6:	460a      	mov	r2, r1
 80150f8:	4601      	mov	r1, r0
 80150fa:	6818      	ldr	r0, [r3, #0]
 80150fc:	f000 b802 	b.w	8015104 <_calloc_r>
 8015100:	20000810 	.word	0x20000810

08015104 <_calloc_r>:
 8015104:	b570      	push	{r4, r5, r6, lr}
 8015106:	fba1 5402 	umull	r5, r4, r1, r2
 801510a:	b93c      	cbnz	r4, 801511c <_calloc_r+0x18>
 801510c:	4629      	mov	r1, r5
 801510e:	f000 f887 	bl	8015220 <_malloc_r>
 8015112:	4606      	mov	r6, r0
 8015114:	b928      	cbnz	r0, 8015122 <_calloc_r+0x1e>
 8015116:	2600      	movs	r6, #0
 8015118:	4630      	mov	r0, r6
 801511a:	bd70      	pop	{r4, r5, r6, pc}
 801511c:	220c      	movs	r2, #12
 801511e:	6002      	str	r2, [r0, #0]
 8015120:	e7f9      	b.n	8015116 <_calloc_r+0x12>
 8015122:	462a      	mov	r2, r5
 8015124:	4621      	mov	r1, r4
 8015126:	f000 fbcf 	bl	80158c8 <memset>
 801512a:	e7f5      	b.n	8015118 <_calloc_r+0x14>

0801512c <getenv>:
 801512c:	b507      	push	{r0, r1, r2, lr}
 801512e:	4b04      	ldr	r3, [pc, #16]	@ (8015140 <getenv+0x14>)
 8015130:	4601      	mov	r1, r0
 8015132:	aa01      	add	r2, sp, #4
 8015134:	6818      	ldr	r0, [r3, #0]
 8015136:	f000 f805 	bl	8015144 <_findenv_r>
 801513a:	b003      	add	sp, #12
 801513c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015140:	20000810 	.word	0x20000810

08015144 <_findenv_r>:
 8015144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015148:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80151b8 <_findenv_r+0x74>
 801514c:	4606      	mov	r6, r0
 801514e:	4689      	mov	r9, r1
 8015150:	4617      	mov	r7, r2
 8015152:	f000 fcc1 	bl	8015ad8 <__env_lock>
 8015156:	f8da 4000 	ldr.w	r4, [sl]
 801515a:	b134      	cbz	r4, 801516a <_findenv_r+0x26>
 801515c:	464b      	mov	r3, r9
 801515e:	4698      	mov	r8, r3
 8015160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015164:	b13a      	cbz	r2, 8015176 <_findenv_r+0x32>
 8015166:	2a3d      	cmp	r2, #61	@ 0x3d
 8015168:	d1f9      	bne.n	801515e <_findenv_r+0x1a>
 801516a:	4630      	mov	r0, r6
 801516c:	f000 fcba 	bl	8015ae4 <__env_unlock>
 8015170:	2000      	movs	r0, #0
 8015172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015176:	eba8 0809 	sub.w	r8, r8, r9
 801517a:	46a3      	mov	fp, r4
 801517c:	f854 0b04 	ldr.w	r0, [r4], #4
 8015180:	2800      	cmp	r0, #0
 8015182:	d0f2      	beq.n	801516a <_findenv_r+0x26>
 8015184:	4642      	mov	r2, r8
 8015186:	4649      	mov	r1, r9
 8015188:	f000 fbb3 	bl	80158f2 <strncmp>
 801518c:	2800      	cmp	r0, #0
 801518e:	d1f4      	bne.n	801517a <_findenv_r+0x36>
 8015190:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015194:	eb03 0508 	add.w	r5, r3, r8
 8015198:	f813 3008 	ldrb.w	r3, [r3, r8]
 801519c:	2b3d      	cmp	r3, #61	@ 0x3d
 801519e:	d1ec      	bne.n	801517a <_findenv_r+0x36>
 80151a0:	f8da 3000 	ldr.w	r3, [sl]
 80151a4:	ebab 0303 	sub.w	r3, fp, r3
 80151a8:	109b      	asrs	r3, r3, #2
 80151aa:	4630      	mov	r0, r6
 80151ac:	603b      	str	r3, [r7, #0]
 80151ae:	f000 fc99 	bl	8015ae4 <__env_unlock>
 80151b2:	1c68      	adds	r0, r5, #1
 80151b4:	e7dd      	b.n	8015172 <_findenv_r+0x2e>
 80151b6:	bf00      	nop
 80151b8:	20000000 	.word	0x20000000

080151bc <malloc>:
 80151bc:	4b02      	ldr	r3, [pc, #8]	@ (80151c8 <malloc+0xc>)
 80151be:	4601      	mov	r1, r0
 80151c0:	6818      	ldr	r0, [r3, #0]
 80151c2:	f000 b82d 	b.w	8015220 <_malloc_r>
 80151c6:	bf00      	nop
 80151c8:	20000810 	.word	0x20000810

080151cc <free>:
 80151cc:	4b02      	ldr	r3, [pc, #8]	@ (80151d8 <free+0xc>)
 80151ce:	4601      	mov	r1, r0
 80151d0:	6818      	ldr	r0, [r3, #0]
 80151d2:	f000 bc8d 	b.w	8015af0 <_free_r>
 80151d6:	bf00      	nop
 80151d8:	20000810 	.word	0x20000810

080151dc <sbrk_aligned>:
 80151dc:	b570      	push	{r4, r5, r6, lr}
 80151de:	4e0f      	ldr	r6, [pc, #60]	@ (801521c <sbrk_aligned+0x40>)
 80151e0:	460c      	mov	r4, r1
 80151e2:	6831      	ldr	r1, [r6, #0]
 80151e4:	4605      	mov	r5, r0
 80151e6:	b911      	cbnz	r1, 80151ee <sbrk_aligned+0x12>
 80151e8:	f000 fbf2 	bl	80159d0 <_sbrk_r>
 80151ec:	6030      	str	r0, [r6, #0]
 80151ee:	4621      	mov	r1, r4
 80151f0:	4628      	mov	r0, r5
 80151f2:	f000 fbed 	bl	80159d0 <_sbrk_r>
 80151f6:	1c43      	adds	r3, r0, #1
 80151f8:	d103      	bne.n	8015202 <sbrk_aligned+0x26>
 80151fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80151fe:	4620      	mov	r0, r4
 8015200:	bd70      	pop	{r4, r5, r6, pc}
 8015202:	1cc4      	adds	r4, r0, #3
 8015204:	f024 0403 	bic.w	r4, r4, #3
 8015208:	42a0      	cmp	r0, r4
 801520a:	d0f8      	beq.n	80151fe <sbrk_aligned+0x22>
 801520c:	1a21      	subs	r1, r4, r0
 801520e:	4628      	mov	r0, r5
 8015210:	f000 fbde 	bl	80159d0 <_sbrk_r>
 8015214:	3001      	adds	r0, #1
 8015216:	d1f2      	bne.n	80151fe <sbrk_aligned+0x22>
 8015218:	e7ef      	b.n	80151fa <sbrk_aligned+0x1e>
 801521a:	bf00      	nop
 801521c:	200112c0 	.word	0x200112c0

08015220 <_malloc_r>:
 8015220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015224:	1ccd      	adds	r5, r1, #3
 8015226:	f025 0503 	bic.w	r5, r5, #3
 801522a:	3508      	adds	r5, #8
 801522c:	2d0c      	cmp	r5, #12
 801522e:	bf38      	it	cc
 8015230:	250c      	movcc	r5, #12
 8015232:	2d00      	cmp	r5, #0
 8015234:	4606      	mov	r6, r0
 8015236:	db01      	blt.n	801523c <_malloc_r+0x1c>
 8015238:	42a9      	cmp	r1, r5
 801523a:	d904      	bls.n	8015246 <_malloc_r+0x26>
 801523c:	230c      	movs	r3, #12
 801523e:	6033      	str	r3, [r6, #0]
 8015240:	2000      	movs	r0, #0
 8015242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015246:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801531c <_malloc_r+0xfc>
 801524a:	f000 f869 	bl	8015320 <__malloc_lock>
 801524e:	f8d8 3000 	ldr.w	r3, [r8]
 8015252:	461c      	mov	r4, r3
 8015254:	bb44      	cbnz	r4, 80152a8 <_malloc_r+0x88>
 8015256:	4629      	mov	r1, r5
 8015258:	4630      	mov	r0, r6
 801525a:	f7ff ffbf 	bl	80151dc <sbrk_aligned>
 801525e:	1c43      	adds	r3, r0, #1
 8015260:	4604      	mov	r4, r0
 8015262:	d158      	bne.n	8015316 <_malloc_r+0xf6>
 8015264:	f8d8 4000 	ldr.w	r4, [r8]
 8015268:	4627      	mov	r7, r4
 801526a:	2f00      	cmp	r7, #0
 801526c:	d143      	bne.n	80152f6 <_malloc_r+0xd6>
 801526e:	2c00      	cmp	r4, #0
 8015270:	d04b      	beq.n	801530a <_malloc_r+0xea>
 8015272:	6823      	ldr	r3, [r4, #0]
 8015274:	4639      	mov	r1, r7
 8015276:	4630      	mov	r0, r6
 8015278:	eb04 0903 	add.w	r9, r4, r3
 801527c:	f000 fba8 	bl	80159d0 <_sbrk_r>
 8015280:	4581      	cmp	r9, r0
 8015282:	d142      	bne.n	801530a <_malloc_r+0xea>
 8015284:	6821      	ldr	r1, [r4, #0]
 8015286:	1a6d      	subs	r5, r5, r1
 8015288:	4629      	mov	r1, r5
 801528a:	4630      	mov	r0, r6
 801528c:	f7ff ffa6 	bl	80151dc <sbrk_aligned>
 8015290:	3001      	adds	r0, #1
 8015292:	d03a      	beq.n	801530a <_malloc_r+0xea>
 8015294:	6823      	ldr	r3, [r4, #0]
 8015296:	442b      	add	r3, r5
 8015298:	6023      	str	r3, [r4, #0]
 801529a:	f8d8 3000 	ldr.w	r3, [r8]
 801529e:	685a      	ldr	r2, [r3, #4]
 80152a0:	bb62      	cbnz	r2, 80152fc <_malloc_r+0xdc>
 80152a2:	f8c8 7000 	str.w	r7, [r8]
 80152a6:	e00f      	b.n	80152c8 <_malloc_r+0xa8>
 80152a8:	6822      	ldr	r2, [r4, #0]
 80152aa:	1b52      	subs	r2, r2, r5
 80152ac:	d420      	bmi.n	80152f0 <_malloc_r+0xd0>
 80152ae:	2a0b      	cmp	r2, #11
 80152b0:	d917      	bls.n	80152e2 <_malloc_r+0xc2>
 80152b2:	1961      	adds	r1, r4, r5
 80152b4:	42a3      	cmp	r3, r4
 80152b6:	6025      	str	r5, [r4, #0]
 80152b8:	bf18      	it	ne
 80152ba:	6059      	strne	r1, [r3, #4]
 80152bc:	6863      	ldr	r3, [r4, #4]
 80152be:	bf08      	it	eq
 80152c0:	f8c8 1000 	streq.w	r1, [r8]
 80152c4:	5162      	str	r2, [r4, r5]
 80152c6:	604b      	str	r3, [r1, #4]
 80152c8:	4630      	mov	r0, r6
 80152ca:	f000 f82f 	bl	801532c <__malloc_unlock>
 80152ce:	f104 000b 	add.w	r0, r4, #11
 80152d2:	1d23      	adds	r3, r4, #4
 80152d4:	f020 0007 	bic.w	r0, r0, #7
 80152d8:	1ac2      	subs	r2, r0, r3
 80152da:	bf1c      	itt	ne
 80152dc:	1a1b      	subne	r3, r3, r0
 80152de:	50a3      	strne	r3, [r4, r2]
 80152e0:	e7af      	b.n	8015242 <_malloc_r+0x22>
 80152e2:	6862      	ldr	r2, [r4, #4]
 80152e4:	42a3      	cmp	r3, r4
 80152e6:	bf0c      	ite	eq
 80152e8:	f8c8 2000 	streq.w	r2, [r8]
 80152ec:	605a      	strne	r2, [r3, #4]
 80152ee:	e7eb      	b.n	80152c8 <_malloc_r+0xa8>
 80152f0:	4623      	mov	r3, r4
 80152f2:	6864      	ldr	r4, [r4, #4]
 80152f4:	e7ae      	b.n	8015254 <_malloc_r+0x34>
 80152f6:	463c      	mov	r4, r7
 80152f8:	687f      	ldr	r7, [r7, #4]
 80152fa:	e7b6      	b.n	801526a <_malloc_r+0x4a>
 80152fc:	461a      	mov	r2, r3
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	42a3      	cmp	r3, r4
 8015302:	d1fb      	bne.n	80152fc <_malloc_r+0xdc>
 8015304:	2300      	movs	r3, #0
 8015306:	6053      	str	r3, [r2, #4]
 8015308:	e7de      	b.n	80152c8 <_malloc_r+0xa8>
 801530a:	230c      	movs	r3, #12
 801530c:	6033      	str	r3, [r6, #0]
 801530e:	4630      	mov	r0, r6
 8015310:	f000 f80c 	bl	801532c <__malloc_unlock>
 8015314:	e794      	b.n	8015240 <_malloc_r+0x20>
 8015316:	6005      	str	r5, [r0, #0]
 8015318:	e7d6      	b.n	80152c8 <_malloc_r+0xa8>
 801531a:	bf00      	nop
 801531c:	200112c4 	.word	0x200112c4

08015320 <__malloc_lock>:
 8015320:	4801      	ldr	r0, [pc, #4]	@ (8015328 <__malloc_lock+0x8>)
 8015322:	f000 bba2 	b.w	8015a6a <__retarget_lock_acquire_recursive>
 8015326:	bf00      	nop
 8015328:	20011409 	.word	0x20011409

0801532c <__malloc_unlock>:
 801532c:	4801      	ldr	r0, [pc, #4]	@ (8015334 <__malloc_unlock+0x8>)
 801532e:	f000 bb9d 	b.w	8015a6c <__retarget_lock_release_recursive>
 8015332:	bf00      	nop
 8015334:	20011409 	.word	0x20011409

08015338 <srand>:
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	4b10      	ldr	r3, [pc, #64]	@ (801537c <srand+0x44>)
 801533c:	681d      	ldr	r5, [r3, #0]
 801533e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015340:	4604      	mov	r4, r0
 8015342:	b9b3      	cbnz	r3, 8015372 <srand+0x3a>
 8015344:	2018      	movs	r0, #24
 8015346:	f7ff ff39 	bl	80151bc <malloc>
 801534a:	4602      	mov	r2, r0
 801534c:	6328      	str	r0, [r5, #48]	@ 0x30
 801534e:	b920      	cbnz	r0, 801535a <srand+0x22>
 8015350:	4b0b      	ldr	r3, [pc, #44]	@ (8015380 <srand+0x48>)
 8015352:	480c      	ldr	r0, [pc, #48]	@ (8015384 <srand+0x4c>)
 8015354:	2146      	movs	r1, #70	@ 0x46
 8015356:	f000 fba1 	bl	8015a9c <__assert_func>
 801535a:	490b      	ldr	r1, [pc, #44]	@ (8015388 <srand+0x50>)
 801535c:	4b0b      	ldr	r3, [pc, #44]	@ (801538c <srand+0x54>)
 801535e:	e9c0 1300 	strd	r1, r3, [r0]
 8015362:	4b0b      	ldr	r3, [pc, #44]	@ (8015390 <srand+0x58>)
 8015364:	6083      	str	r3, [r0, #8]
 8015366:	230b      	movs	r3, #11
 8015368:	8183      	strh	r3, [r0, #12]
 801536a:	2100      	movs	r1, #0
 801536c:	2001      	movs	r0, #1
 801536e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015372:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015374:	2200      	movs	r2, #0
 8015376:	611c      	str	r4, [r3, #16]
 8015378:	615a      	str	r2, [r3, #20]
 801537a:	bd38      	pop	{r3, r4, r5, pc}
 801537c:	20000810 	.word	0x20000810
 8015380:	080178d4 	.word	0x080178d4
 8015384:	080178eb 	.word	0x080178eb
 8015388:	abcd330e 	.word	0xabcd330e
 801538c:	e66d1234 	.word	0xe66d1234
 8015390:	0005deec 	.word	0x0005deec

08015394 <rand>:
 8015394:	4b16      	ldr	r3, [pc, #88]	@ (80153f0 <rand+0x5c>)
 8015396:	b510      	push	{r4, lr}
 8015398:	681c      	ldr	r4, [r3, #0]
 801539a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801539c:	b9b3      	cbnz	r3, 80153cc <rand+0x38>
 801539e:	2018      	movs	r0, #24
 80153a0:	f7ff ff0c 	bl	80151bc <malloc>
 80153a4:	4602      	mov	r2, r0
 80153a6:	6320      	str	r0, [r4, #48]	@ 0x30
 80153a8:	b920      	cbnz	r0, 80153b4 <rand+0x20>
 80153aa:	4b12      	ldr	r3, [pc, #72]	@ (80153f4 <rand+0x60>)
 80153ac:	4812      	ldr	r0, [pc, #72]	@ (80153f8 <rand+0x64>)
 80153ae:	2152      	movs	r1, #82	@ 0x52
 80153b0:	f000 fb74 	bl	8015a9c <__assert_func>
 80153b4:	4911      	ldr	r1, [pc, #68]	@ (80153fc <rand+0x68>)
 80153b6:	4b12      	ldr	r3, [pc, #72]	@ (8015400 <rand+0x6c>)
 80153b8:	e9c0 1300 	strd	r1, r3, [r0]
 80153bc:	4b11      	ldr	r3, [pc, #68]	@ (8015404 <rand+0x70>)
 80153be:	6083      	str	r3, [r0, #8]
 80153c0:	230b      	movs	r3, #11
 80153c2:	8183      	strh	r3, [r0, #12]
 80153c4:	2100      	movs	r1, #0
 80153c6:	2001      	movs	r0, #1
 80153c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80153cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80153ce:	480e      	ldr	r0, [pc, #56]	@ (8015408 <rand+0x74>)
 80153d0:	690b      	ldr	r3, [r1, #16]
 80153d2:	694c      	ldr	r4, [r1, #20]
 80153d4:	4a0d      	ldr	r2, [pc, #52]	@ (801540c <rand+0x78>)
 80153d6:	4358      	muls	r0, r3
 80153d8:	fb02 0004 	mla	r0, r2, r4, r0
 80153dc:	fba3 3202 	umull	r3, r2, r3, r2
 80153e0:	3301      	adds	r3, #1
 80153e2:	eb40 0002 	adc.w	r0, r0, r2
 80153e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80153ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80153ee:	bd10      	pop	{r4, pc}
 80153f0:	20000810 	.word	0x20000810
 80153f4:	080178d4 	.word	0x080178d4
 80153f8:	080178eb 	.word	0x080178eb
 80153fc:	abcd330e 	.word	0xabcd330e
 8015400:	e66d1234 	.word	0xe66d1234
 8015404:	0005deec 	.word	0x0005deec
 8015408:	5851f42d 	.word	0x5851f42d
 801540c:	4c957f2d 	.word	0x4c957f2d

08015410 <realloc>:
 8015410:	4b02      	ldr	r3, [pc, #8]	@ (801541c <realloc+0xc>)
 8015412:	460a      	mov	r2, r1
 8015414:	4601      	mov	r1, r0
 8015416:	6818      	ldr	r0, [r3, #0]
 8015418:	f000 b802 	b.w	8015420 <_realloc_r>
 801541c:	20000810 	.word	0x20000810

08015420 <_realloc_r>:
 8015420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015424:	4680      	mov	r8, r0
 8015426:	4615      	mov	r5, r2
 8015428:	460c      	mov	r4, r1
 801542a:	b921      	cbnz	r1, 8015436 <_realloc_r+0x16>
 801542c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015430:	4611      	mov	r1, r2
 8015432:	f7ff bef5 	b.w	8015220 <_malloc_r>
 8015436:	b92a      	cbnz	r2, 8015444 <_realloc_r+0x24>
 8015438:	f000 fb5a 	bl	8015af0 <_free_r>
 801543c:	2400      	movs	r4, #0
 801543e:	4620      	mov	r0, r4
 8015440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015444:	f000 fb9e 	bl	8015b84 <_malloc_usable_size_r>
 8015448:	4285      	cmp	r5, r0
 801544a:	4606      	mov	r6, r0
 801544c:	d802      	bhi.n	8015454 <_realloc_r+0x34>
 801544e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015452:	d8f4      	bhi.n	801543e <_realloc_r+0x1e>
 8015454:	4629      	mov	r1, r5
 8015456:	4640      	mov	r0, r8
 8015458:	f7ff fee2 	bl	8015220 <_malloc_r>
 801545c:	4607      	mov	r7, r0
 801545e:	2800      	cmp	r0, #0
 8015460:	d0ec      	beq.n	801543c <_realloc_r+0x1c>
 8015462:	42b5      	cmp	r5, r6
 8015464:	462a      	mov	r2, r5
 8015466:	4621      	mov	r1, r4
 8015468:	bf28      	it	cs
 801546a:	4632      	movcs	r2, r6
 801546c:	f000 fb07 	bl	8015a7e <memcpy>
 8015470:	4621      	mov	r1, r4
 8015472:	4640      	mov	r0, r8
 8015474:	f000 fb3c 	bl	8015af0 <_free_r>
 8015478:	463c      	mov	r4, r7
 801547a:	e7e0      	b.n	801543e <_realloc_r+0x1e>

0801547c <_strtoul_l.constprop.0>:
 801547c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015480:	4e34      	ldr	r6, [pc, #208]	@ (8015554 <_strtoul_l.constprop.0+0xd8>)
 8015482:	4686      	mov	lr, r0
 8015484:	460d      	mov	r5, r1
 8015486:	4628      	mov	r0, r5
 8015488:	f815 4b01 	ldrb.w	r4, [r5], #1
 801548c:	5d37      	ldrb	r7, [r6, r4]
 801548e:	f017 0708 	ands.w	r7, r7, #8
 8015492:	d1f8      	bne.n	8015486 <_strtoul_l.constprop.0+0xa>
 8015494:	2c2d      	cmp	r4, #45	@ 0x2d
 8015496:	d12f      	bne.n	80154f8 <_strtoul_l.constprop.0+0x7c>
 8015498:	782c      	ldrb	r4, [r5, #0]
 801549a:	2701      	movs	r7, #1
 801549c:	1c85      	adds	r5, r0, #2
 801549e:	f033 0010 	bics.w	r0, r3, #16
 80154a2:	d109      	bne.n	80154b8 <_strtoul_l.constprop.0+0x3c>
 80154a4:	2c30      	cmp	r4, #48	@ 0x30
 80154a6:	d12c      	bne.n	8015502 <_strtoul_l.constprop.0+0x86>
 80154a8:	7828      	ldrb	r0, [r5, #0]
 80154aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80154ae:	2858      	cmp	r0, #88	@ 0x58
 80154b0:	d127      	bne.n	8015502 <_strtoul_l.constprop.0+0x86>
 80154b2:	786c      	ldrb	r4, [r5, #1]
 80154b4:	2310      	movs	r3, #16
 80154b6:	3502      	adds	r5, #2
 80154b8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80154bc:	2600      	movs	r6, #0
 80154be:	fbb8 f8f3 	udiv	r8, r8, r3
 80154c2:	fb03 f908 	mul.w	r9, r3, r8
 80154c6:	ea6f 0909 	mvn.w	r9, r9
 80154ca:	4630      	mov	r0, r6
 80154cc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80154d0:	f1bc 0f09 	cmp.w	ip, #9
 80154d4:	d81c      	bhi.n	8015510 <_strtoul_l.constprop.0+0x94>
 80154d6:	4664      	mov	r4, ip
 80154d8:	42a3      	cmp	r3, r4
 80154da:	dd2a      	ble.n	8015532 <_strtoul_l.constprop.0+0xb6>
 80154dc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80154e0:	d007      	beq.n	80154f2 <_strtoul_l.constprop.0+0x76>
 80154e2:	4580      	cmp	r8, r0
 80154e4:	d322      	bcc.n	801552c <_strtoul_l.constprop.0+0xb0>
 80154e6:	d101      	bne.n	80154ec <_strtoul_l.constprop.0+0x70>
 80154e8:	45a1      	cmp	r9, r4
 80154ea:	db1f      	blt.n	801552c <_strtoul_l.constprop.0+0xb0>
 80154ec:	fb00 4003 	mla	r0, r0, r3, r4
 80154f0:	2601      	movs	r6, #1
 80154f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80154f6:	e7e9      	b.n	80154cc <_strtoul_l.constprop.0+0x50>
 80154f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80154fa:	bf04      	itt	eq
 80154fc:	782c      	ldrbeq	r4, [r5, #0]
 80154fe:	1c85      	addeq	r5, r0, #2
 8015500:	e7cd      	b.n	801549e <_strtoul_l.constprop.0+0x22>
 8015502:	2b00      	cmp	r3, #0
 8015504:	d1d8      	bne.n	80154b8 <_strtoul_l.constprop.0+0x3c>
 8015506:	2c30      	cmp	r4, #48	@ 0x30
 8015508:	bf0c      	ite	eq
 801550a:	2308      	moveq	r3, #8
 801550c:	230a      	movne	r3, #10
 801550e:	e7d3      	b.n	80154b8 <_strtoul_l.constprop.0+0x3c>
 8015510:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015514:	f1bc 0f19 	cmp.w	ip, #25
 8015518:	d801      	bhi.n	801551e <_strtoul_l.constprop.0+0xa2>
 801551a:	3c37      	subs	r4, #55	@ 0x37
 801551c:	e7dc      	b.n	80154d8 <_strtoul_l.constprop.0+0x5c>
 801551e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015522:	f1bc 0f19 	cmp.w	ip, #25
 8015526:	d804      	bhi.n	8015532 <_strtoul_l.constprop.0+0xb6>
 8015528:	3c57      	subs	r4, #87	@ 0x57
 801552a:	e7d5      	b.n	80154d8 <_strtoul_l.constprop.0+0x5c>
 801552c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015530:	e7df      	b.n	80154f2 <_strtoul_l.constprop.0+0x76>
 8015532:	1c73      	adds	r3, r6, #1
 8015534:	d106      	bne.n	8015544 <_strtoul_l.constprop.0+0xc8>
 8015536:	2322      	movs	r3, #34	@ 0x22
 8015538:	f8ce 3000 	str.w	r3, [lr]
 801553c:	4630      	mov	r0, r6
 801553e:	b932      	cbnz	r2, 801554e <_strtoul_l.constprop.0+0xd2>
 8015540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015544:	b107      	cbz	r7, 8015548 <_strtoul_l.constprop.0+0xcc>
 8015546:	4240      	negs	r0, r0
 8015548:	2a00      	cmp	r2, #0
 801554a:	d0f9      	beq.n	8015540 <_strtoul_l.constprop.0+0xc4>
 801554c:	b106      	cbz	r6, 8015550 <_strtoul_l.constprop.0+0xd4>
 801554e:	1e69      	subs	r1, r5, #1
 8015550:	6011      	str	r1, [r2, #0]
 8015552:	e7f5      	b.n	8015540 <_strtoul_l.constprop.0+0xc4>
 8015554:	08017944 	.word	0x08017944

08015558 <strtoul>:
 8015558:	4613      	mov	r3, r2
 801555a:	460a      	mov	r2, r1
 801555c:	4601      	mov	r1, r0
 801555e:	4802      	ldr	r0, [pc, #8]	@ (8015568 <strtoul+0x10>)
 8015560:	6800      	ldr	r0, [r0, #0]
 8015562:	f7ff bf8b 	b.w	801547c <_strtoul_l.constprop.0>
 8015566:	bf00      	nop
 8015568:	20000810 	.word	0x20000810

0801556c <std>:
 801556c:	2300      	movs	r3, #0
 801556e:	b510      	push	{r4, lr}
 8015570:	4604      	mov	r4, r0
 8015572:	e9c0 3300 	strd	r3, r3, [r0]
 8015576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801557a:	6083      	str	r3, [r0, #8]
 801557c:	8181      	strh	r1, [r0, #12]
 801557e:	6643      	str	r3, [r0, #100]	@ 0x64
 8015580:	81c2      	strh	r2, [r0, #14]
 8015582:	6183      	str	r3, [r0, #24]
 8015584:	4619      	mov	r1, r3
 8015586:	2208      	movs	r2, #8
 8015588:	305c      	adds	r0, #92	@ 0x5c
 801558a:	f000 f99d 	bl	80158c8 <memset>
 801558e:	4b0d      	ldr	r3, [pc, #52]	@ (80155c4 <std+0x58>)
 8015590:	6263      	str	r3, [r4, #36]	@ 0x24
 8015592:	4b0d      	ldr	r3, [pc, #52]	@ (80155c8 <std+0x5c>)
 8015594:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015596:	4b0d      	ldr	r3, [pc, #52]	@ (80155cc <std+0x60>)
 8015598:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801559a:	4b0d      	ldr	r3, [pc, #52]	@ (80155d0 <std+0x64>)
 801559c:	6323      	str	r3, [r4, #48]	@ 0x30
 801559e:	4b0d      	ldr	r3, [pc, #52]	@ (80155d4 <std+0x68>)
 80155a0:	6224      	str	r4, [r4, #32]
 80155a2:	429c      	cmp	r4, r3
 80155a4:	d006      	beq.n	80155b4 <std+0x48>
 80155a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80155aa:	4294      	cmp	r4, r2
 80155ac:	d002      	beq.n	80155b4 <std+0x48>
 80155ae:	33d0      	adds	r3, #208	@ 0xd0
 80155b0:	429c      	cmp	r4, r3
 80155b2:	d105      	bne.n	80155c0 <std+0x54>
 80155b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80155b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155bc:	f000 ba54 	b.w	8015a68 <__retarget_lock_init_recursive>
 80155c0:	bd10      	pop	{r4, pc}
 80155c2:	bf00      	nop
 80155c4:	0801577d 	.word	0x0801577d
 80155c8:	0801579f 	.word	0x0801579f
 80155cc:	080157d7 	.word	0x080157d7
 80155d0:	080157fb 	.word	0x080157fb
 80155d4:	200112c8 	.word	0x200112c8

080155d8 <stdio_exit_handler>:
 80155d8:	4a02      	ldr	r2, [pc, #8]	@ (80155e4 <stdio_exit_handler+0xc>)
 80155da:	4903      	ldr	r1, [pc, #12]	@ (80155e8 <stdio_exit_handler+0x10>)
 80155dc:	4803      	ldr	r0, [pc, #12]	@ (80155ec <stdio_exit_handler+0x14>)
 80155de:	f000 b869 	b.w	80156b4 <_fwalk_sglue>
 80155e2:	bf00      	nop
 80155e4:	20000804 	.word	0x20000804
 80155e8:	080164ed 	.word	0x080164ed
 80155ec:	20000814 	.word	0x20000814

080155f0 <cleanup_stdio>:
 80155f0:	6841      	ldr	r1, [r0, #4]
 80155f2:	4b0c      	ldr	r3, [pc, #48]	@ (8015624 <cleanup_stdio+0x34>)
 80155f4:	4299      	cmp	r1, r3
 80155f6:	b510      	push	{r4, lr}
 80155f8:	4604      	mov	r4, r0
 80155fa:	d001      	beq.n	8015600 <cleanup_stdio+0x10>
 80155fc:	f000 ff76 	bl	80164ec <_fflush_r>
 8015600:	68a1      	ldr	r1, [r4, #8]
 8015602:	4b09      	ldr	r3, [pc, #36]	@ (8015628 <cleanup_stdio+0x38>)
 8015604:	4299      	cmp	r1, r3
 8015606:	d002      	beq.n	801560e <cleanup_stdio+0x1e>
 8015608:	4620      	mov	r0, r4
 801560a:	f000 ff6f 	bl	80164ec <_fflush_r>
 801560e:	68e1      	ldr	r1, [r4, #12]
 8015610:	4b06      	ldr	r3, [pc, #24]	@ (801562c <cleanup_stdio+0x3c>)
 8015612:	4299      	cmp	r1, r3
 8015614:	d004      	beq.n	8015620 <cleanup_stdio+0x30>
 8015616:	4620      	mov	r0, r4
 8015618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801561c:	f000 bf66 	b.w	80164ec <_fflush_r>
 8015620:	bd10      	pop	{r4, pc}
 8015622:	bf00      	nop
 8015624:	200112c8 	.word	0x200112c8
 8015628:	20011330 	.word	0x20011330
 801562c:	20011398 	.word	0x20011398

08015630 <global_stdio_init.part.0>:
 8015630:	b510      	push	{r4, lr}
 8015632:	4b0b      	ldr	r3, [pc, #44]	@ (8015660 <global_stdio_init.part.0+0x30>)
 8015634:	4c0b      	ldr	r4, [pc, #44]	@ (8015664 <global_stdio_init.part.0+0x34>)
 8015636:	4a0c      	ldr	r2, [pc, #48]	@ (8015668 <global_stdio_init.part.0+0x38>)
 8015638:	601a      	str	r2, [r3, #0]
 801563a:	4620      	mov	r0, r4
 801563c:	2200      	movs	r2, #0
 801563e:	2104      	movs	r1, #4
 8015640:	f7ff ff94 	bl	801556c <std>
 8015644:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015648:	2201      	movs	r2, #1
 801564a:	2109      	movs	r1, #9
 801564c:	f7ff ff8e 	bl	801556c <std>
 8015650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015654:	2202      	movs	r2, #2
 8015656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801565a:	2112      	movs	r1, #18
 801565c:	f7ff bf86 	b.w	801556c <std>
 8015660:	20011400 	.word	0x20011400
 8015664:	200112c8 	.word	0x200112c8
 8015668:	080155d9 	.word	0x080155d9

0801566c <__sfp_lock_acquire>:
 801566c:	4801      	ldr	r0, [pc, #4]	@ (8015674 <__sfp_lock_acquire+0x8>)
 801566e:	f000 b9fc 	b.w	8015a6a <__retarget_lock_acquire_recursive>
 8015672:	bf00      	nop
 8015674:	2001140a 	.word	0x2001140a

08015678 <__sfp_lock_release>:
 8015678:	4801      	ldr	r0, [pc, #4]	@ (8015680 <__sfp_lock_release+0x8>)
 801567a:	f000 b9f7 	b.w	8015a6c <__retarget_lock_release_recursive>
 801567e:	bf00      	nop
 8015680:	2001140a 	.word	0x2001140a

08015684 <__sinit>:
 8015684:	b510      	push	{r4, lr}
 8015686:	4604      	mov	r4, r0
 8015688:	f7ff fff0 	bl	801566c <__sfp_lock_acquire>
 801568c:	6a23      	ldr	r3, [r4, #32]
 801568e:	b11b      	cbz	r3, 8015698 <__sinit+0x14>
 8015690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015694:	f7ff bff0 	b.w	8015678 <__sfp_lock_release>
 8015698:	4b04      	ldr	r3, [pc, #16]	@ (80156ac <__sinit+0x28>)
 801569a:	6223      	str	r3, [r4, #32]
 801569c:	4b04      	ldr	r3, [pc, #16]	@ (80156b0 <__sinit+0x2c>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d1f5      	bne.n	8015690 <__sinit+0xc>
 80156a4:	f7ff ffc4 	bl	8015630 <global_stdio_init.part.0>
 80156a8:	e7f2      	b.n	8015690 <__sinit+0xc>
 80156aa:	bf00      	nop
 80156ac:	080155f1 	.word	0x080155f1
 80156b0:	20011400 	.word	0x20011400

080156b4 <_fwalk_sglue>:
 80156b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156b8:	4607      	mov	r7, r0
 80156ba:	4688      	mov	r8, r1
 80156bc:	4614      	mov	r4, r2
 80156be:	2600      	movs	r6, #0
 80156c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80156c4:	f1b9 0901 	subs.w	r9, r9, #1
 80156c8:	d505      	bpl.n	80156d6 <_fwalk_sglue+0x22>
 80156ca:	6824      	ldr	r4, [r4, #0]
 80156cc:	2c00      	cmp	r4, #0
 80156ce:	d1f7      	bne.n	80156c0 <_fwalk_sglue+0xc>
 80156d0:	4630      	mov	r0, r6
 80156d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156d6:	89ab      	ldrh	r3, [r5, #12]
 80156d8:	2b01      	cmp	r3, #1
 80156da:	d907      	bls.n	80156ec <_fwalk_sglue+0x38>
 80156dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80156e0:	3301      	adds	r3, #1
 80156e2:	d003      	beq.n	80156ec <_fwalk_sglue+0x38>
 80156e4:	4629      	mov	r1, r5
 80156e6:	4638      	mov	r0, r7
 80156e8:	47c0      	blx	r8
 80156ea:	4306      	orrs	r6, r0
 80156ec:	3568      	adds	r5, #104	@ 0x68
 80156ee:	e7e9      	b.n	80156c4 <_fwalk_sglue+0x10>

080156f0 <iprintf>:
 80156f0:	b40f      	push	{r0, r1, r2, r3}
 80156f2:	b507      	push	{r0, r1, r2, lr}
 80156f4:	4906      	ldr	r1, [pc, #24]	@ (8015710 <iprintf+0x20>)
 80156f6:	ab04      	add	r3, sp, #16
 80156f8:	6808      	ldr	r0, [r1, #0]
 80156fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80156fe:	6881      	ldr	r1, [r0, #8]
 8015700:	9301      	str	r3, [sp, #4]
 8015702:	f000 fbc9 	bl	8015e98 <_vfiprintf_r>
 8015706:	b003      	add	sp, #12
 8015708:	f85d eb04 	ldr.w	lr, [sp], #4
 801570c:	b004      	add	sp, #16
 801570e:	4770      	bx	lr
 8015710:	20000810 	.word	0x20000810

08015714 <sniprintf>:
 8015714:	b40c      	push	{r2, r3}
 8015716:	b530      	push	{r4, r5, lr}
 8015718:	4b17      	ldr	r3, [pc, #92]	@ (8015778 <sniprintf+0x64>)
 801571a:	1e0c      	subs	r4, r1, #0
 801571c:	681d      	ldr	r5, [r3, #0]
 801571e:	b09d      	sub	sp, #116	@ 0x74
 8015720:	da08      	bge.n	8015734 <sniprintf+0x20>
 8015722:	238b      	movs	r3, #139	@ 0x8b
 8015724:	602b      	str	r3, [r5, #0]
 8015726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801572a:	b01d      	add	sp, #116	@ 0x74
 801572c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015730:	b002      	add	sp, #8
 8015732:	4770      	bx	lr
 8015734:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015738:	f8ad 3014 	strh.w	r3, [sp, #20]
 801573c:	bf14      	ite	ne
 801573e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015742:	4623      	moveq	r3, r4
 8015744:	9304      	str	r3, [sp, #16]
 8015746:	9307      	str	r3, [sp, #28]
 8015748:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801574c:	9002      	str	r0, [sp, #8]
 801574e:	9006      	str	r0, [sp, #24]
 8015750:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015754:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015756:	ab21      	add	r3, sp, #132	@ 0x84
 8015758:	a902      	add	r1, sp, #8
 801575a:	4628      	mov	r0, r5
 801575c:	9301      	str	r3, [sp, #4]
 801575e:	f000 fa75 	bl	8015c4c <_svfiprintf_r>
 8015762:	1c43      	adds	r3, r0, #1
 8015764:	bfbc      	itt	lt
 8015766:	238b      	movlt	r3, #139	@ 0x8b
 8015768:	602b      	strlt	r3, [r5, #0]
 801576a:	2c00      	cmp	r4, #0
 801576c:	d0dd      	beq.n	801572a <sniprintf+0x16>
 801576e:	9b02      	ldr	r3, [sp, #8]
 8015770:	2200      	movs	r2, #0
 8015772:	701a      	strb	r2, [r3, #0]
 8015774:	e7d9      	b.n	801572a <sniprintf+0x16>
 8015776:	bf00      	nop
 8015778:	20000810 	.word	0x20000810

0801577c <__sread>:
 801577c:	b510      	push	{r4, lr}
 801577e:	460c      	mov	r4, r1
 8015780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015784:	f000 f912 	bl	80159ac <_read_r>
 8015788:	2800      	cmp	r0, #0
 801578a:	bfab      	itete	ge
 801578c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801578e:	89a3      	ldrhlt	r3, [r4, #12]
 8015790:	181b      	addge	r3, r3, r0
 8015792:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015796:	bfac      	ite	ge
 8015798:	6563      	strge	r3, [r4, #84]	@ 0x54
 801579a:	81a3      	strhlt	r3, [r4, #12]
 801579c:	bd10      	pop	{r4, pc}

0801579e <__swrite>:
 801579e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157a2:	461f      	mov	r7, r3
 80157a4:	898b      	ldrh	r3, [r1, #12]
 80157a6:	05db      	lsls	r3, r3, #23
 80157a8:	4605      	mov	r5, r0
 80157aa:	460c      	mov	r4, r1
 80157ac:	4616      	mov	r6, r2
 80157ae:	d505      	bpl.n	80157bc <__swrite+0x1e>
 80157b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157b4:	2302      	movs	r3, #2
 80157b6:	2200      	movs	r2, #0
 80157b8:	f000 f8e6 	bl	8015988 <_lseek_r>
 80157bc:	89a3      	ldrh	r3, [r4, #12]
 80157be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80157c6:	81a3      	strh	r3, [r4, #12]
 80157c8:	4632      	mov	r2, r6
 80157ca:	463b      	mov	r3, r7
 80157cc:	4628      	mov	r0, r5
 80157ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157d2:	f000 b90d 	b.w	80159f0 <_write_r>

080157d6 <__sseek>:
 80157d6:	b510      	push	{r4, lr}
 80157d8:	460c      	mov	r4, r1
 80157da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157de:	f000 f8d3 	bl	8015988 <_lseek_r>
 80157e2:	1c43      	adds	r3, r0, #1
 80157e4:	89a3      	ldrh	r3, [r4, #12]
 80157e6:	bf15      	itete	ne
 80157e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80157ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80157ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80157f2:	81a3      	strheq	r3, [r4, #12]
 80157f4:	bf18      	it	ne
 80157f6:	81a3      	strhne	r3, [r4, #12]
 80157f8:	bd10      	pop	{r4, pc}

080157fa <__sclose>:
 80157fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157fe:	f000 b8b3 	b.w	8015968 <_close_r>

08015802 <_vsniprintf_r>:
 8015802:	b530      	push	{r4, r5, lr}
 8015804:	4614      	mov	r4, r2
 8015806:	2c00      	cmp	r4, #0
 8015808:	b09b      	sub	sp, #108	@ 0x6c
 801580a:	4605      	mov	r5, r0
 801580c:	461a      	mov	r2, r3
 801580e:	da05      	bge.n	801581c <_vsniprintf_r+0x1a>
 8015810:	238b      	movs	r3, #139	@ 0x8b
 8015812:	6003      	str	r3, [r0, #0]
 8015814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015818:	b01b      	add	sp, #108	@ 0x6c
 801581a:	bd30      	pop	{r4, r5, pc}
 801581c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015820:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015824:	bf14      	ite	ne
 8015826:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801582a:	4623      	moveq	r3, r4
 801582c:	9302      	str	r3, [sp, #8]
 801582e:	9305      	str	r3, [sp, #20]
 8015830:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015834:	9100      	str	r1, [sp, #0]
 8015836:	9104      	str	r1, [sp, #16]
 8015838:	f8ad 300e 	strh.w	r3, [sp, #14]
 801583c:	4669      	mov	r1, sp
 801583e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015840:	f000 fa04 	bl	8015c4c <_svfiprintf_r>
 8015844:	1c43      	adds	r3, r0, #1
 8015846:	bfbc      	itt	lt
 8015848:	238b      	movlt	r3, #139	@ 0x8b
 801584a:	602b      	strlt	r3, [r5, #0]
 801584c:	2c00      	cmp	r4, #0
 801584e:	d0e3      	beq.n	8015818 <_vsniprintf_r+0x16>
 8015850:	9b00      	ldr	r3, [sp, #0]
 8015852:	2200      	movs	r2, #0
 8015854:	701a      	strb	r2, [r3, #0]
 8015856:	e7df      	b.n	8015818 <_vsniprintf_r+0x16>

08015858 <vsniprintf>:
 8015858:	b507      	push	{r0, r1, r2, lr}
 801585a:	9300      	str	r3, [sp, #0]
 801585c:	4613      	mov	r3, r2
 801585e:	460a      	mov	r2, r1
 8015860:	4601      	mov	r1, r0
 8015862:	4803      	ldr	r0, [pc, #12]	@ (8015870 <vsniprintf+0x18>)
 8015864:	6800      	ldr	r0, [r0, #0]
 8015866:	f7ff ffcc 	bl	8015802 <_vsniprintf_r>
 801586a:	b003      	add	sp, #12
 801586c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015870:	20000810 	.word	0x20000810

08015874 <memcmp>:
 8015874:	b510      	push	{r4, lr}
 8015876:	3901      	subs	r1, #1
 8015878:	4402      	add	r2, r0
 801587a:	4290      	cmp	r0, r2
 801587c:	d101      	bne.n	8015882 <memcmp+0xe>
 801587e:	2000      	movs	r0, #0
 8015880:	e005      	b.n	801588e <memcmp+0x1a>
 8015882:	7803      	ldrb	r3, [r0, #0]
 8015884:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015888:	42a3      	cmp	r3, r4
 801588a:	d001      	beq.n	8015890 <memcmp+0x1c>
 801588c:	1b18      	subs	r0, r3, r4
 801588e:	bd10      	pop	{r4, pc}
 8015890:	3001      	adds	r0, #1
 8015892:	e7f2      	b.n	801587a <memcmp+0x6>

08015894 <memmove>:
 8015894:	4288      	cmp	r0, r1
 8015896:	b510      	push	{r4, lr}
 8015898:	eb01 0402 	add.w	r4, r1, r2
 801589c:	d902      	bls.n	80158a4 <memmove+0x10>
 801589e:	4284      	cmp	r4, r0
 80158a0:	4623      	mov	r3, r4
 80158a2:	d807      	bhi.n	80158b4 <memmove+0x20>
 80158a4:	1e43      	subs	r3, r0, #1
 80158a6:	42a1      	cmp	r1, r4
 80158a8:	d008      	beq.n	80158bc <memmove+0x28>
 80158aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80158ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80158b2:	e7f8      	b.n	80158a6 <memmove+0x12>
 80158b4:	4402      	add	r2, r0
 80158b6:	4601      	mov	r1, r0
 80158b8:	428a      	cmp	r2, r1
 80158ba:	d100      	bne.n	80158be <memmove+0x2a>
 80158bc:	bd10      	pop	{r4, pc}
 80158be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80158c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80158c6:	e7f7      	b.n	80158b8 <memmove+0x24>

080158c8 <memset>:
 80158c8:	4402      	add	r2, r0
 80158ca:	4603      	mov	r3, r0
 80158cc:	4293      	cmp	r3, r2
 80158ce:	d100      	bne.n	80158d2 <memset+0xa>
 80158d0:	4770      	bx	lr
 80158d2:	f803 1b01 	strb.w	r1, [r3], #1
 80158d6:	e7f9      	b.n	80158cc <memset+0x4>

080158d8 <strchr>:
 80158d8:	b2c9      	uxtb	r1, r1
 80158da:	4603      	mov	r3, r0
 80158dc:	4618      	mov	r0, r3
 80158de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158e2:	b112      	cbz	r2, 80158ea <strchr+0x12>
 80158e4:	428a      	cmp	r2, r1
 80158e6:	d1f9      	bne.n	80158dc <strchr+0x4>
 80158e8:	4770      	bx	lr
 80158ea:	2900      	cmp	r1, #0
 80158ec:	bf18      	it	ne
 80158ee:	2000      	movne	r0, #0
 80158f0:	4770      	bx	lr

080158f2 <strncmp>:
 80158f2:	b510      	push	{r4, lr}
 80158f4:	b16a      	cbz	r2, 8015912 <strncmp+0x20>
 80158f6:	3901      	subs	r1, #1
 80158f8:	1884      	adds	r4, r0, r2
 80158fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015902:	429a      	cmp	r2, r3
 8015904:	d103      	bne.n	801590e <strncmp+0x1c>
 8015906:	42a0      	cmp	r0, r4
 8015908:	d001      	beq.n	801590e <strncmp+0x1c>
 801590a:	2a00      	cmp	r2, #0
 801590c:	d1f5      	bne.n	80158fa <strncmp+0x8>
 801590e:	1ad0      	subs	r0, r2, r3
 8015910:	bd10      	pop	{r4, pc}
 8015912:	4610      	mov	r0, r2
 8015914:	e7fc      	b.n	8015910 <strncmp+0x1e>

08015916 <strncpy>:
 8015916:	b510      	push	{r4, lr}
 8015918:	3901      	subs	r1, #1
 801591a:	4603      	mov	r3, r0
 801591c:	b132      	cbz	r2, 801592c <strncpy+0x16>
 801591e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015922:	f803 4b01 	strb.w	r4, [r3], #1
 8015926:	3a01      	subs	r2, #1
 8015928:	2c00      	cmp	r4, #0
 801592a:	d1f7      	bne.n	801591c <strncpy+0x6>
 801592c:	441a      	add	r2, r3
 801592e:	2100      	movs	r1, #0
 8015930:	4293      	cmp	r3, r2
 8015932:	d100      	bne.n	8015936 <strncpy+0x20>
 8015934:	bd10      	pop	{r4, pc}
 8015936:	f803 1b01 	strb.w	r1, [r3], #1
 801593a:	e7f9      	b.n	8015930 <strncpy+0x1a>

0801593c <strstr>:
 801593c:	780a      	ldrb	r2, [r1, #0]
 801593e:	b570      	push	{r4, r5, r6, lr}
 8015940:	b96a      	cbnz	r2, 801595e <strstr+0x22>
 8015942:	bd70      	pop	{r4, r5, r6, pc}
 8015944:	429a      	cmp	r2, r3
 8015946:	d109      	bne.n	801595c <strstr+0x20>
 8015948:	460c      	mov	r4, r1
 801594a:	4605      	mov	r5, r0
 801594c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015950:	2b00      	cmp	r3, #0
 8015952:	d0f6      	beq.n	8015942 <strstr+0x6>
 8015954:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015958:	429e      	cmp	r6, r3
 801595a:	d0f7      	beq.n	801594c <strstr+0x10>
 801595c:	3001      	adds	r0, #1
 801595e:	7803      	ldrb	r3, [r0, #0]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d1ef      	bne.n	8015944 <strstr+0x8>
 8015964:	4618      	mov	r0, r3
 8015966:	e7ec      	b.n	8015942 <strstr+0x6>

08015968 <_close_r>:
 8015968:	b538      	push	{r3, r4, r5, lr}
 801596a:	4d06      	ldr	r5, [pc, #24]	@ (8015984 <_close_r+0x1c>)
 801596c:	2300      	movs	r3, #0
 801596e:	4604      	mov	r4, r0
 8015970:	4608      	mov	r0, r1
 8015972:	602b      	str	r3, [r5, #0]
 8015974:	f7eb ff0c 	bl	8001790 <_close>
 8015978:	1c43      	adds	r3, r0, #1
 801597a:	d102      	bne.n	8015982 <_close_r+0x1a>
 801597c:	682b      	ldr	r3, [r5, #0]
 801597e:	b103      	cbz	r3, 8015982 <_close_r+0x1a>
 8015980:	6023      	str	r3, [r4, #0]
 8015982:	bd38      	pop	{r3, r4, r5, pc}
 8015984:	20011404 	.word	0x20011404

08015988 <_lseek_r>:
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	4d07      	ldr	r5, [pc, #28]	@ (80159a8 <_lseek_r+0x20>)
 801598c:	4604      	mov	r4, r0
 801598e:	4608      	mov	r0, r1
 8015990:	4611      	mov	r1, r2
 8015992:	2200      	movs	r2, #0
 8015994:	602a      	str	r2, [r5, #0]
 8015996:	461a      	mov	r2, r3
 8015998:	f7eb ff21 	bl	80017de <_lseek>
 801599c:	1c43      	adds	r3, r0, #1
 801599e:	d102      	bne.n	80159a6 <_lseek_r+0x1e>
 80159a0:	682b      	ldr	r3, [r5, #0]
 80159a2:	b103      	cbz	r3, 80159a6 <_lseek_r+0x1e>
 80159a4:	6023      	str	r3, [r4, #0]
 80159a6:	bd38      	pop	{r3, r4, r5, pc}
 80159a8:	20011404 	.word	0x20011404

080159ac <_read_r>:
 80159ac:	b538      	push	{r3, r4, r5, lr}
 80159ae:	4d07      	ldr	r5, [pc, #28]	@ (80159cc <_read_r+0x20>)
 80159b0:	4604      	mov	r4, r0
 80159b2:	4608      	mov	r0, r1
 80159b4:	4611      	mov	r1, r2
 80159b6:	2200      	movs	r2, #0
 80159b8:	602a      	str	r2, [r5, #0]
 80159ba:	461a      	mov	r2, r3
 80159bc:	f7eb feaf 	bl	800171e <_read>
 80159c0:	1c43      	adds	r3, r0, #1
 80159c2:	d102      	bne.n	80159ca <_read_r+0x1e>
 80159c4:	682b      	ldr	r3, [r5, #0]
 80159c6:	b103      	cbz	r3, 80159ca <_read_r+0x1e>
 80159c8:	6023      	str	r3, [r4, #0]
 80159ca:	bd38      	pop	{r3, r4, r5, pc}
 80159cc:	20011404 	.word	0x20011404

080159d0 <_sbrk_r>:
 80159d0:	b538      	push	{r3, r4, r5, lr}
 80159d2:	4d06      	ldr	r5, [pc, #24]	@ (80159ec <_sbrk_r+0x1c>)
 80159d4:	2300      	movs	r3, #0
 80159d6:	4604      	mov	r4, r0
 80159d8:	4608      	mov	r0, r1
 80159da:	602b      	str	r3, [r5, #0]
 80159dc:	f7eb ff0c 	bl	80017f8 <_sbrk>
 80159e0:	1c43      	adds	r3, r0, #1
 80159e2:	d102      	bne.n	80159ea <_sbrk_r+0x1a>
 80159e4:	682b      	ldr	r3, [r5, #0]
 80159e6:	b103      	cbz	r3, 80159ea <_sbrk_r+0x1a>
 80159e8:	6023      	str	r3, [r4, #0]
 80159ea:	bd38      	pop	{r3, r4, r5, pc}
 80159ec:	20011404 	.word	0x20011404

080159f0 <_write_r>:
 80159f0:	b538      	push	{r3, r4, r5, lr}
 80159f2:	4d07      	ldr	r5, [pc, #28]	@ (8015a10 <_write_r+0x20>)
 80159f4:	4604      	mov	r4, r0
 80159f6:	4608      	mov	r0, r1
 80159f8:	4611      	mov	r1, r2
 80159fa:	2200      	movs	r2, #0
 80159fc:	602a      	str	r2, [r5, #0]
 80159fe:	461a      	mov	r2, r3
 8015a00:	f7eb feaa 	bl	8001758 <_write>
 8015a04:	1c43      	adds	r3, r0, #1
 8015a06:	d102      	bne.n	8015a0e <_write_r+0x1e>
 8015a08:	682b      	ldr	r3, [r5, #0]
 8015a0a:	b103      	cbz	r3, 8015a0e <_write_r+0x1e>
 8015a0c:	6023      	str	r3, [r4, #0]
 8015a0e:	bd38      	pop	{r3, r4, r5, pc}
 8015a10:	20011404 	.word	0x20011404

08015a14 <__errno>:
 8015a14:	4b01      	ldr	r3, [pc, #4]	@ (8015a1c <__errno+0x8>)
 8015a16:	6818      	ldr	r0, [r3, #0]
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	20000810 	.word	0x20000810

08015a20 <__libc_init_array>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	4d0d      	ldr	r5, [pc, #52]	@ (8015a58 <__libc_init_array+0x38>)
 8015a24:	4c0d      	ldr	r4, [pc, #52]	@ (8015a5c <__libc_init_array+0x3c>)
 8015a26:	1b64      	subs	r4, r4, r5
 8015a28:	10a4      	asrs	r4, r4, #2
 8015a2a:	2600      	movs	r6, #0
 8015a2c:	42a6      	cmp	r6, r4
 8015a2e:	d109      	bne.n	8015a44 <__libc_init_array+0x24>
 8015a30:	4d0b      	ldr	r5, [pc, #44]	@ (8015a60 <__libc_init_array+0x40>)
 8015a32:	4c0c      	ldr	r4, [pc, #48]	@ (8015a64 <__libc_init_array+0x44>)
 8015a34:	f000 fef8 	bl	8016828 <_init>
 8015a38:	1b64      	subs	r4, r4, r5
 8015a3a:	10a4      	asrs	r4, r4, #2
 8015a3c:	2600      	movs	r6, #0
 8015a3e:	42a6      	cmp	r6, r4
 8015a40:	d105      	bne.n	8015a4e <__libc_init_array+0x2e>
 8015a42:	bd70      	pop	{r4, r5, r6, pc}
 8015a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a48:	4798      	blx	r3
 8015a4a:	3601      	adds	r6, #1
 8015a4c:	e7ee      	b.n	8015a2c <__libc_init_array+0xc>
 8015a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a52:	4798      	blx	r3
 8015a54:	3601      	adds	r6, #1
 8015a56:	e7f2      	b.n	8015a3e <__libc_init_array+0x1e>
 8015a58:	08017abc 	.word	0x08017abc
 8015a5c:	08017abc 	.word	0x08017abc
 8015a60:	08017abc 	.word	0x08017abc
 8015a64:	08017ac8 	.word	0x08017ac8

08015a68 <__retarget_lock_init_recursive>:
 8015a68:	4770      	bx	lr

08015a6a <__retarget_lock_acquire_recursive>:
 8015a6a:	4770      	bx	lr

08015a6c <__retarget_lock_release_recursive>:
 8015a6c:	4770      	bx	lr

08015a6e <strcpy>:
 8015a6e:	4603      	mov	r3, r0
 8015a70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a74:	f803 2b01 	strb.w	r2, [r3], #1
 8015a78:	2a00      	cmp	r2, #0
 8015a7a:	d1f9      	bne.n	8015a70 <strcpy+0x2>
 8015a7c:	4770      	bx	lr

08015a7e <memcpy>:
 8015a7e:	440a      	add	r2, r1
 8015a80:	4291      	cmp	r1, r2
 8015a82:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015a86:	d100      	bne.n	8015a8a <memcpy+0xc>
 8015a88:	4770      	bx	lr
 8015a8a:	b510      	push	{r4, lr}
 8015a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a94:	4291      	cmp	r1, r2
 8015a96:	d1f9      	bne.n	8015a8c <memcpy+0xe>
 8015a98:	bd10      	pop	{r4, pc}
	...

08015a9c <__assert_func>:
 8015a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a9e:	4614      	mov	r4, r2
 8015aa0:	461a      	mov	r2, r3
 8015aa2:	4b09      	ldr	r3, [pc, #36]	@ (8015ac8 <__assert_func+0x2c>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	4605      	mov	r5, r0
 8015aa8:	68d8      	ldr	r0, [r3, #12]
 8015aaa:	b954      	cbnz	r4, 8015ac2 <__assert_func+0x26>
 8015aac:	4b07      	ldr	r3, [pc, #28]	@ (8015acc <__assert_func+0x30>)
 8015aae:	461c      	mov	r4, r3
 8015ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015ab4:	9100      	str	r1, [sp, #0]
 8015ab6:	462b      	mov	r3, r5
 8015ab8:	4905      	ldr	r1, [pc, #20]	@ (8015ad0 <__assert_func+0x34>)
 8015aba:	f000 fd3f 	bl	801653c <fiprintf>
 8015abe:	f000 fde3 	bl	8016688 <abort>
 8015ac2:	4b04      	ldr	r3, [pc, #16]	@ (8015ad4 <__assert_func+0x38>)
 8015ac4:	e7f4      	b.n	8015ab0 <__assert_func+0x14>
 8015ac6:	bf00      	nop
 8015ac8:	20000810 	.word	0x20000810
 8015acc:	08017a7f 	.word	0x08017a7f
 8015ad0:	08017a51 	.word	0x08017a51
 8015ad4:	08017a44 	.word	0x08017a44

08015ad8 <__env_lock>:
 8015ad8:	4801      	ldr	r0, [pc, #4]	@ (8015ae0 <__env_lock+0x8>)
 8015ada:	f7ff bfc6 	b.w	8015a6a <__retarget_lock_acquire_recursive>
 8015ade:	bf00      	nop
 8015ae0:	20011408 	.word	0x20011408

08015ae4 <__env_unlock>:
 8015ae4:	4801      	ldr	r0, [pc, #4]	@ (8015aec <__env_unlock+0x8>)
 8015ae6:	f7ff bfc1 	b.w	8015a6c <__retarget_lock_release_recursive>
 8015aea:	bf00      	nop
 8015aec:	20011408 	.word	0x20011408

08015af0 <_free_r>:
 8015af0:	b538      	push	{r3, r4, r5, lr}
 8015af2:	4605      	mov	r5, r0
 8015af4:	2900      	cmp	r1, #0
 8015af6:	d041      	beq.n	8015b7c <_free_r+0x8c>
 8015af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015afc:	1f0c      	subs	r4, r1, #4
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	bfb8      	it	lt
 8015b02:	18e4      	addlt	r4, r4, r3
 8015b04:	f7ff fc0c 	bl	8015320 <__malloc_lock>
 8015b08:	4a1d      	ldr	r2, [pc, #116]	@ (8015b80 <_free_r+0x90>)
 8015b0a:	6813      	ldr	r3, [r2, #0]
 8015b0c:	b933      	cbnz	r3, 8015b1c <_free_r+0x2c>
 8015b0e:	6063      	str	r3, [r4, #4]
 8015b10:	6014      	str	r4, [r2, #0]
 8015b12:	4628      	mov	r0, r5
 8015b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b18:	f7ff bc08 	b.w	801532c <__malloc_unlock>
 8015b1c:	42a3      	cmp	r3, r4
 8015b1e:	d908      	bls.n	8015b32 <_free_r+0x42>
 8015b20:	6820      	ldr	r0, [r4, #0]
 8015b22:	1821      	adds	r1, r4, r0
 8015b24:	428b      	cmp	r3, r1
 8015b26:	bf01      	itttt	eq
 8015b28:	6819      	ldreq	r1, [r3, #0]
 8015b2a:	685b      	ldreq	r3, [r3, #4]
 8015b2c:	1809      	addeq	r1, r1, r0
 8015b2e:	6021      	streq	r1, [r4, #0]
 8015b30:	e7ed      	b.n	8015b0e <_free_r+0x1e>
 8015b32:	461a      	mov	r2, r3
 8015b34:	685b      	ldr	r3, [r3, #4]
 8015b36:	b10b      	cbz	r3, 8015b3c <_free_r+0x4c>
 8015b38:	42a3      	cmp	r3, r4
 8015b3a:	d9fa      	bls.n	8015b32 <_free_r+0x42>
 8015b3c:	6811      	ldr	r1, [r2, #0]
 8015b3e:	1850      	adds	r0, r2, r1
 8015b40:	42a0      	cmp	r0, r4
 8015b42:	d10b      	bne.n	8015b5c <_free_r+0x6c>
 8015b44:	6820      	ldr	r0, [r4, #0]
 8015b46:	4401      	add	r1, r0
 8015b48:	1850      	adds	r0, r2, r1
 8015b4a:	4283      	cmp	r3, r0
 8015b4c:	6011      	str	r1, [r2, #0]
 8015b4e:	d1e0      	bne.n	8015b12 <_free_r+0x22>
 8015b50:	6818      	ldr	r0, [r3, #0]
 8015b52:	685b      	ldr	r3, [r3, #4]
 8015b54:	6053      	str	r3, [r2, #4]
 8015b56:	4408      	add	r0, r1
 8015b58:	6010      	str	r0, [r2, #0]
 8015b5a:	e7da      	b.n	8015b12 <_free_r+0x22>
 8015b5c:	d902      	bls.n	8015b64 <_free_r+0x74>
 8015b5e:	230c      	movs	r3, #12
 8015b60:	602b      	str	r3, [r5, #0]
 8015b62:	e7d6      	b.n	8015b12 <_free_r+0x22>
 8015b64:	6820      	ldr	r0, [r4, #0]
 8015b66:	1821      	adds	r1, r4, r0
 8015b68:	428b      	cmp	r3, r1
 8015b6a:	bf04      	itt	eq
 8015b6c:	6819      	ldreq	r1, [r3, #0]
 8015b6e:	685b      	ldreq	r3, [r3, #4]
 8015b70:	6063      	str	r3, [r4, #4]
 8015b72:	bf04      	itt	eq
 8015b74:	1809      	addeq	r1, r1, r0
 8015b76:	6021      	streq	r1, [r4, #0]
 8015b78:	6054      	str	r4, [r2, #4]
 8015b7a:	e7ca      	b.n	8015b12 <_free_r+0x22>
 8015b7c:	bd38      	pop	{r3, r4, r5, pc}
 8015b7e:	bf00      	nop
 8015b80:	200112c4 	.word	0x200112c4

08015b84 <_malloc_usable_size_r>:
 8015b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b88:	1f18      	subs	r0, r3, #4
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	bfbc      	itt	lt
 8015b8e:	580b      	ldrlt	r3, [r1, r0]
 8015b90:	18c0      	addlt	r0, r0, r3
 8015b92:	4770      	bx	lr

08015b94 <__ssputs_r>:
 8015b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b98:	688e      	ldr	r6, [r1, #8]
 8015b9a:	461f      	mov	r7, r3
 8015b9c:	42be      	cmp	r6, r7
 8015b9e:	680b      	ldr	r3, [r1, #0]
 8015ba0:	4682      	mov	sl, r0
 8015ba2:	460c      	mov	r4, r1
 8015ba4:	4690      	mov	r8, r2
 8015ba6:	d82d      	bhi.n	8015c04 <__ssputs_r+0x70>
 8015ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015bac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015bb0:	d026      	beq.n	8015c00 <__ssputs_r+0x6c>
 8015bb2:	6965      	ldr	r5, [r4, #20]
 8015bb4:	6909      	ldr	r1, [r1, #16]
 8015bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015bba:	eba3 0901 	sub.w	r9, r3, r1
 8015bbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015bc2:	1c7b      	adds	r3, r7, #1
 8015bc4:	444b      	add	r3, r9
 8015bc6:	106d      	asrs	r5, r5, #1
 8015bc8:	429d      	cmp	r5, r3
 8015bca:	bf38      	it	cc
 8015bcc:	461d      	movcc	r5, r3
 8015bce:	0553      	lsls	r3, r2, #21
 8015bd0:	d527      	bpl.n	8015c22 <__ssputs_r+0x8e>
 8015bd2:	4629      	mov	r1, r5
 8015bd4:	f7ff fb24 	bl	8015220 <_malloc_r>
 8015bd8:	4606      	mov	r6, r0
 8015bda:	b360      	cbz	r0, 8015c36 <__ssputs_r+0xa2>
 8015bdc:	6921      	ldr	r1, [r4, #16]
 8015bde:	464a      	mov	r2, r9
 8015be0:	f7ff ff4d 	bl	8015a7e <memcpy>
 8015be4:	89a3      	ldrh	r3, [r4, #12]
 8015be6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015bee:	81a3      	strh	r3, [r4, #12]
 8015bf0:	6126      	str	r6, [r4, #16]
 8015bf2:	6165      	str	r5, [r4, #20]
 8015bf4:	444e      	add	r6, r9
 8015bf6:	eba5 0509 	sub.w	r5, r5, r9
 8015bfa:	6026      	str	r6, [r4, #0]
 8015bfc:	60a5      	str	r5, [r4, #8]
 8015bfe:	463e      	mov	r6, r7
 8015c00:	42be      	cmp	r6, r7
 8015c02:	d900      	bls.n	8015c06 <__ssputs_r+0x72>
 8015c04:	463e      	mov	r6, r7
 8015c06:	6820      	ldr	r0, [r4, #0]
 8015c08:	4632      	mov	r2, r6
 8015c0a:	4641      	mov	r1, r8
 8015c0c:	f7ff fe42 	bl	8015894 <memmove>
 8015c10:	68a3      	ldr	r3, [r4, #8]
 8015c12:	1b9b      	subs	r3, r3, r6
 8015c14:	60a3      	str	r3, [r4, #8]
 8015c16:	6823      	ldr	r3, [r4, #0]
 8015c18:	4433      	add	r3, r6
 8015c1a:	6023      	str	r3, [r4, #0]
 8015c1c:	2000      	movs	r0, #0
 8015c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c22:	462a      	mov	r2, r5
 8015c24:	f7ff fbfc 	bl	8015420 <_realloc_r>
 8015c28:	4606      	mov	r6, r0
 8015c2a:	2800      	cmp	r0, #0
 8015c2c:	d1e0      	bne.n	8015bf0 <__ssputs_r+0x5c>
 8015c2e:	6921      	ldr	r1, [r4, #16]
 8015c30:	4650      	mov	r0, sl
 8015c32:	f7ff ff5d 	bl	8015af0 <_free_r>
 8015c36:	230c      	movs	r3, #12
 8015c38:	f8ca 3000 	str.w	r3, [sl]
 8015c3c:	89a3      	ldrh	r3, [r4, #12]
 8015c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c42:	81a3      	strh	r3, [r4, #12]
 8015c44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c48:	e7e9      	b.n	8015c1e <__ssputs_r+0x8a>
	...

08015c4c <_svfiprintf_r>:
 8015c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c50:	4698      	mov	r8, r3
 8015c52:	898b      	ldrh	r3, [r1, #12]
 8015c54:	061b      	lsls	r3, r3, #24
 8015c56:	b09d      	sub	sp, #116	@ 0x74
 8015c58:	4607      	mov	r7, r0
 8015c5a:	460d      	mov	r5, r1
 8015c5c:	4614      	mov	r4, r2
 8015c5e:	d510      	bpl.n	8015c82 <_svfiprintf_r+0x36>
 8015c60:	690b      	ldr	r3, [r1, #16]
 8015c62:	b973      	cbnz	r3, 8015c82 <_svfiprintf_r+0x36>
 8015c64:	2140      	movs	r1, #64	@ 0x40
 8015c66:	f7ff fadb 	bl	8015220 <_malloc_r>
 8015c6a:	6028      	str	r0, [r5, #0]
 8015c6c:	6128      	str	r0, [r5, #16]
 8015c6e:	b930      	cbnz	r0, 8015c7e <_svfiprintf_r+0x32>
 8015c70:	230c      	movs	r3, #12
 8015c72:	603b      	str	r3, [r7, #0]
 8015c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c78:	b01d      	add	sp, #116	@ 0x74
 8015c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c7e:	2340      	movs	r3, #64	@ 0x40
 8015c80:	616b      	str	r3, [r5, #20]
 8015c82:	2300      	movs	r3, #0
 8015c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c86:	2320      	movs	r3, #32
 8015c88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c90:	2330      	movs	r3, #48	@ 0x30
 8015c92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015e30 <_svfiprintf_r+0x1e4>
 8015c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015c9a:	f04f 0901 	mov.w	r9, #1
 8015c9e:	4623      	mov	r3, r4
 8015ca0:	469a      	mov	sl, r3
 8015ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ca6:	b10a      	cbz	r2, 8015cac <_svfiprintf_r+0x60>
 8015ca8:	2a25      	cmp	r2, #37	@ 0x25
 8015caa:	d1f9      	bne.n	8015ca0 <_svfiprintf_r+0x54>
 8015cac:	ebba 0b04 	subs.w	fp, sl, r4
 8015cb0:	d00b      	beq.n	8015cca <_svfiprintf_r+0x7e>
 8015cb2:	465b      	mov	r3, fp
 8015cb4:	4622      	mov	r2, r4
 8015cb6:	4629      	mov	r1, r5
 8015cb8:	4638      	mov	r0, r7
 8015cba:	f7ff ff6b 	bl	8015b94 <__ssputs_r>
 8015cbe:	3001      	adds	r0, #1
 8015cc0:	f000 80a7 	beq.w	8015e12 <_svfiprintf_r+0x1c6>
 8015cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015cc6:	445a      	add	r2, fp
 8015cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8015cca:	f89a 3000 	ldrb.w	r3, [sl]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	f000 809f 	beq.w	8015e12 <_svfiprintf_r+0x1c6>
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015cde:	f10a 0a01 	add.w	sl, sl, #1
 8015ce2:	9304      	str	r3, [sp, #16]
 8015ce4:	9307      	str	r3, [sp, #28]
 8015ce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015cea:	931a      	str	r3, [sp, #104]	@ 0x68
 8015cec:	4654      	mov	r4, sl
 8015cee:	2205      	movs	r2, #5
 8015cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cf4:	484e      	ldr	r0, [pc, #312]	@ (8015e30 <_svfiprintf_r+0x1e4>)
 8015cf6:	f7ea fa83 	bl	8000200 <memchr>
 8015cfa:	9a04      	ldr	r2, [sp, #16]
 8015cfc:	b9d8      	cbnz	r0, 8015d36 <_svfiprintf_r+0xea>
 8015cfe:	06d0      	lsls	r0, r2, #27
 8015d00:	bf44      	itt	mi
 8015d02:	2320      	movmi	r3, #32
 8015d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d08:	0711      	lsls	r1, r2, #28
 8015d0a:	bf44      	itt	mi
 8015d0c:	232b      	movmi	r3, #43	@ 0x2b
 8015d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d12:	f89a 3000 	ldrb.w	r3, [sl]
 8015d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d18:	d015      	beq.n	8015d46 <_svfiprintf_r+0xfa>
 8015d1a:	9a07      	ldr	r2, [sp, #28]
 8015d1c:	4654      	mov	r4, sl
 8015d1e:	2000      	movs	r0, #0
 8015d20:	f04f 0c0a 	mov.w	ip, #10
 8015d24:	4621      	mov	r1, r4
 8015d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d2a:	3b30      	subs	r3, #48	@ 0x30
 8015d2c:	2b09      	cmp	r3, #9
 8015d2e:	d94b      	bls.n	8015dc8 <_svfiprintf_r+0x17c>
 8015d30:	b1b0      	cbz	r0, 8015d60 <_svfiprintf_r+0x114>
 8015d32:	9207      	str	r2, [sp, #28]
 8015d34:	e014      	b.n	8015d60 <_svfiprintf_r+0x114>
 8015d36:	eba0 0308 	sub.w	r3, r0, r8
 8015d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8015d3e:	4313      	orrs	r3, r2
 8015d40:	9304      	str	r3, [sp, #16]
 8015d42:	46a2      	mov	sl, r4
 8015d44:	e7d2      	b.n	8015cec <_svfiprintf_r+0xa0>
 8015d46:	9b03      	ldr	r3, [sp, #12]
 8015d48:	1d19      	adds	r1, r3, #4
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	9103      	str	r1, [sp, #12]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	bfbb      	ittet	lt
 8015d52:	425b      	neglt	r3, r3
 8015d54:	f042 0202 	orrlt.w	r2, r2, #2
 8015d58:	9307      	strge	r3, [sp, #28]
 8015d5a:	9307      	strlt	r3, [sp, #28]
 8015d5c:	bfb8      	it	lt
 8015d5e:	9204      	strlt	r2, [sp, #16]
 8015d60:	7823      	ldrb	r3, [r4, #0]
 8015d62:	2b2e      	cmp	r3, #46	@ 0x2e
 8015d64:	d10a      	bne.n	8015d7c <_svfiprintf_r+0x130>
 8015d66:	7863      	ldrb	r3, [r4, #1]
 8015d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d6a:	d132      	bne.n	8015dd2 <_svfiprintf_r+0x186>
 8015d6c:	9b03      	ldr	r3, [sp, #12]
 8015d6e:	1d1a      	adds	r2, r3, #4
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	9203      	str	r2, [sp, #12]
 8015d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015d78:	3402      	adds	r4, #2
 8015d7a:	9305      	str	r3, [sp, #20]
 8015d7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015e40 <_svfiprintf_r+0x1f4>
 8015d80:	7821      	ldrb	r1, [r4, #0]
 8015d82:	2203      	movs	r2, #3
 8015d84:	4650      	mov	r0, sl
 8015d86:	f7ea fa3b 	bl	8000200 <memchr>
 8015d8a:	b138      	cbz	r0, 8015d9c <_svfiprintf_r+0x150>
 8015d8c:	9b04      	ldr	r3, [sp, #16]
 8015d8e:	eba0 000a 	sub.w	r0, r0, sl
 8015d92:	2240      	movs	r2, #64	@ 0x40
 8015d94:	4082      	lsls	r2, r0
 8015d96:	4313      	orrs	r3, r2
 8015d98:	3401      	adds	r4, #1
 8015d9a:	9304      	str	r3, [sp, #16]
 8015d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015da0:	4824      	ldr	r0, [pc, #144]	@ (8015e34 <_svfiprintf_r+0x1e8>)
 8015da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015da6:	2206      	movs	r2, #6
 8015da8:	f7ea fa2a 	bl	8000200 <memchr>
 8015dac:	2800      	cmp	r0, #0
 8015dae:	d036      	beq.n	8015e1e <_svfiprintf_r+0x1d2>
 8015db0:	4b21      	ldr	r3, [pc, #132]	@ (8015e38 <_svfiprintf_r+0x1ec>)
 8015db2:	bb1b      	cbnz	r3, 8015dfc <_svfiprintf_r+0x1b0>
 8015db4:	9b03      	ldr	r3, [sp, #12]
 8015db6:	3307      	adds	r3, #7
 8015db8:	f023 0307 	bic.w	r3, r3, #7
 8015dbc:	3308      	adds	r3, #8
 8015dbe:	9303      	str	r3, [sp, #12]
 8015dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015dc2:	4433      	add	r3, r6
 8015dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8015dc6:	e76a      	b.n	8015c9e <_svfiprintf_r+0x52>
 8015dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8015dcc:	460c      	mov	r4, r1
 8015dce:	2001      	movs	r0, #1
 8015dd0:	e7a8      	b.n	8015d24 <_svfiprintf_r+0xd8>
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	3401      	adds	r4, #1
 8015dd6:	9305      	str	r3, [sp, #20]
 8015dd8:	4619      	mov	r1, r3
 8015dda:	f04f 0c0a 	mov.w	ip, #10
 8015dde:	4620      	mov	r0, r4
 8015de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015de4:	3a30      	subs	r2, #48	@ 0x30
 8015de6:	2a09      	cmp	r2, #9
 8015de8:	d903      	bls.n	8015df2 <_svfiprintf_r+0x1a6>
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d0c6      	beq.n	8015d7c <_svfiprintf_r+0x130>
 8015dee:	9105      	str	r1, [sp, #20]
 8015df0:	e7c4      	b.n	8015d7c <_svfiprintf_r+0x130>
 8015df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8015df6:	4604      	mov	r4, r0
 8015df8:	2301      	movs	r3, #1
 8015dfa:	e7f0      	b.n	8015dde <_svfiprintf_r+0x192>
 8015dfc:	ab03      	add	r3, sp, #12
 8015dfe:	9300      	str	r3, [sp, #0]
 8015e00:	462a      	mov	r2, r5
 8015e02:	4b0e      	ldr	r3, [pc, #56]	@ (8015e3c <_svfiprintf_r+0x1f0>)
 8015e04:	a904      	add	r1, sp, #16
 8015e06:	4638      	mov	r0, r7
 8015e08:	f3af 8000 	nop.w
 8015e0c:	1c42      	adds	r2, r0, #1
 8015e0e:	4606      	mov	r6, r0
 8015e10:	d1d6      	bne.n	8015dc0 <_svfiprintf_r+0x174>
 8015e12:	89ab      	ldrh	r3, [r5, #12]
 8015e14:	065b      	lsls	r3, r3, #25
 8015e16:	f53f af2d 	bmi.w	8015c74 <_svfiprintf_r+0x28>
 8015e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e1c:	e72c      	b.n	8015c78 <_svfiprintf_r+0x2c>
 8015e1e:	ab03      	add	r3, sp, #12
 8015e20:	9300      	str	r3, [sp, #0]
 8015e22:	462a      	mov	r2, r5
 8015e24:	4b05      	ldr	r3, [pc, #20]	@ (8015e3c <_svfiprintf_r+0x1f0>)
 8015e26:	a904      	add	r1, sp, #16
 8015e28:	4638      	mov	r0, r7
 8015e2a:	f000 f9bb 	bl	80161a4 <_printf_i>
 8015e2e:	e7ed      	b.n	8015e0c <_svfiprintf_r+0x1c0>
 8015e30:	08017a80 	.word	0x08017a80
 8015e34:	08017a8a 	.word	0x08017a8a
 8015e38:	00000000 	.word	0x00000000
 8015e3c:	08015b95 	.word	0x08015b95
 8015e40:	08017a86 	.word	0x08017a86

08015e44 <__sfputc_r>:
 8015e44:	6893      	ldr	r3, [r2, #8]
 8015e46:	3b01      	subs	r3, #1
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	b410      	push	{r4}
 8015e4c:	6093      	str	r3, [r2, #8]
 8015e4e:	da08      	bge.n	8015e62 <__sfputc_r+0x1e>
 8015e50:	6994      	ldr	r4, [r2, #24]
 8015e52:	42a3      	cmp	r3, r4
 8015e54:	db01      	blt.n	8015e5a <__sfputc_r+0x16>
 8015e56:	290a      	cmp	r1, #10
 8015e58:	d103      	bne.n	8015e62 <__sfputc_r+0x1e>
 8015e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e5e:	f000 bb7f 	b.w	8016560 <__swbuf_r>
 8015e62:	6813      	ldr	r3, [r2, #0]
 8015e64:	1c58      	adds	r0, r3, #1
 8015e66:	6010      	str	r0, [r2, #0]
 8015e68:	7019      	strb	r1, [r3, #0]
 8015e6a:	4608      	mov	r0, r1
 8015e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e70:	4770      	bx	lr

08015e72 <__sfputs_r>:
 8015e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e74:	4606      	mov	r6, r0
 8015e76:	460f      	mov	r7, r1
 8015e78:	4614      	mov	r4, r2
 8015e7a:	18d5      	adds	r5, r2, r3
 8015e7c:	42ac      	cmp	r4, r5
 8015e7e:	d101      	bne.n	8015e84 <__sfputs_r+0x12>
 8015e80:	2000      	movs	r0, #0
 8015e82:	e007      	b.n	8015e94 <__sfputs_r+0x22>
 8015e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e88:	463a      	mov	r2, r7
 8015e8a:	4630      	mov	r0, r6
 8015e8c:	f7ff ffda 	bl	8015e44 <__sfputc_r>
 8015e90:	1c43      	adds	r3, r0, #1
 8015e92:	d1f3      	bne.n	8015e7c <__sfputs_r+0xa>
 8015e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015e98 <_vfiprintf_r>:
 8015e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e9c:	460d      	mov	r5, r1
 8015e9e:	b09d      	sub	sp, #116	@ 0x74
 8015ea0:	4614      	mov	r4, r2
 8015ea2:	4698      	mov	r8, r3
 8015ea4:	4606      	mov	r6, r0
 8015ea6:	b118      	cbz	r0, 8015eb0 <_vfiprintf_r+0x18>
 8015ea8:	6a03      	ldr	r3, [r0, #32]
 8015eaa:	b90b      	cbnz	r3, 8015eb0 <_vfiprintf_r+0x18>
 8015eac:	f7ff fbea 	bl	8015684 <__sinit>
 8015eb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015eb2:	07d9      	lsls	r1, r3, #31
 8015eb4:	d405      	bmi.n	8015ec2 <_vfiprintf_r+0x2a>
 8015eb6:	89ab      	ldrh	r3, [r5, #12]
 8015eb8:	059a      	lsls	r2, r3, #22
 8015eba:	d402      	bmi.n	8015ec2 <_vfiprintf_r+0x2a>
 8015ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015ebe:	f7ff fdd4 	bl	8015a6a <__retarget_lock_acquire_recursive>
 8015ec2:	89ab      	ldrh	r3, [r5, #12]
 8015ec4:	071b      	lsls	r3, r3, #28
 8015ec6:	d501      	bpl.n	8015ecc <_vfiprintf_r+0x34>
 8015ec8:	692b      	ldr	r3, [r5, #16]
 8015eca:	b99b      	cbnz	r3, 8015ef4 <_vfiprintf_r+0x5c>
 8015ecc:	4629      	mov	r1, r5
 8015ece:	4630      	mov	r0, r6
 8015ed0:	f000 fb84 	bl	80165dc <__swsetup_r>
 8015ed4:	b170      	cbz	r0, 8015ef4 <_vfiprintf_r+0x5c>
 8015ed6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015ed8:	07dc      	lsls	r4, r3, #31
 8015eda:	d504      	bpl.n	8015ee6 <_vfiprintf_r+0x4e>
 8015edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015ee0:	b01d      	add	sp, #116	@ 0x74
 8015ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ee6:	89ab      	ldrh	r3, [r5, #12]
 8015ee8:	0598      	lsls	r0, r3, #22
 8015eea:	d4f7      	bmi.n	8015edc <_vfiprintf_r+0x44>
 8015eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015eee:	f7ff fdbd 	bl	8015a6c <__retarget_lock_release_recursive>
 8015ef2:	e7f3      	b.n	8015edc <_vfiprintf_r+0x44>
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ef8:	2320      	movs	r3, #32
 8015efa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f02:	2330      	movs	r3, #48	@ 0x30
 8015f04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80160b4 <_vfiprintf_r+0x21c>
 8015f08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f0c:	f04f 0901 	mov.w	r9, #1
 8015f10:	4623      	mov	r3, r4
 8015f12:	469a      	mov	sl, r3
 8015f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f18:	b10a      	cbz	r2, 8015f1e <_vfiprintf_r+0x86>
 8015f1a:	2a25      	cmp	r2, #37	@ 0x25
 8015f1c:	d1f9      	bne.n	8015f12 <_vfiprintf_r+0x7a>
 8015f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8015f22:	d00b      	beq.n	8015f3c <_vfiprintf_r+0xa4>
 8015f24:	465b      	mov	r3, fp
 8015f26:	4622      	mov	r2, r4
 8015f28:	4629      	mov	r1, r5
 8015f2a:	4630      	mov	r0, r6
 8015f2c:	f7ff ffa1 	bl	8015e72 <__sfputs_r>
 8015f30:	3001      	adds	r0, #1
 8015f32:	f000 80a7 	beq.w	8016084 <_vfiprintf_r+0x1ec>
 8015f36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f38:	445a      	add	r2, fp
 8015f3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	f000 809f 	beq.w	8016084 <_vfiprintf_r+0x1ec>
 8015f46:	2300      	movs	r3, #0
 8015f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f50:	f10a 0a01 	add.w	sl, sl, #1
 8015f54:	9304      	str	r3, [sp, #16]
 8015f56:	9307      	str	r3, [sp, #28]
 8015f58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015f5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8015f5e:	4654      	mov	r4, sl
 8015f60:	2205      	movs	r2, #5
 8015f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f66:	4853      	ldr	r0, [pc, #332]	@ (80160b4 <_vfiprintf_r+0x21c>)
 8015f68:	f7ea f94a 	bl	8000200 <memchr>
 8015f6c:	9a04      	ldr	r2, [sp, #16]
 8015f6e:	b9d8      	cbnz	r0, 8015fa8 <_vfiprintf_r+0x110>
 8015f70:	06d1      	lsls	r1, r2, #27
 8015f72:	bf44      	itt	mi
 8015f74:	2320      	movmi	r3, #32
 8015f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015f7a:	0713      	lsls	r3, r2, #28
 8015f7c:	bf44      	itt	mi
 8015f7e:	232b      	movmi	r3, #43	@ 0x2b
 8015f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015f84:	f89a 3000 	ldrb.w	r3, [sl]
 8015f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f8a:	d015      	beq.n	8015fb8 <_vfiprintf_r+0x120>
 8015f8c:	9a07      	ldr	r2, [sp, #28]
 8015f8e:	4654      	mov	r4, sl
 8015f90:	2000      	movs	r0, #0
 8015f92:	f04f 0c0a 	mov.w	ip, #10
 8015f96:	4621      	mov	r1, r4
 8015f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f9c:	3b30      	subs	r3, #48	@ 0x30
 8015f9e:	2b09      	cmp	r3, #9
 8015fa0:	d94b      	bls.n	801603a <_vfiprintf_r+0x1a2>
 8015fa2:	b1b0      	cbz	r0, 8015fd2 <_vfiprintf_r+0x13a>
 8015fa4:	9207      	str	r2, [sp, #28]
 8015fa6:	e014      	b.n	8015fd2 <_vfiprintf_r+0x13a>
 8015fa8:	eba0 0308 	sub.w	r3, r0, r8
 8015fac:	fa09 f303 	lsl.w	r3, r9, r3
 8015fb0:	4313      	orrs	r3, r2
 8015fb2:	9304      	str	r3, [sp, #16]
 8015fb4:	46a2      	mov	sl, r4
 8015fb6:	e7d2      	b.n	8015f5e <_vfiprintf_r+0xc6>
 8015fb8:	9b03      	ldr	r3, [sp, #12]
 8015fba:	1d19      	adds	r1, r3, #4
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	9103      	str	r1, [sp, #12]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	bfbb      	ittet	lt
 8015fc4:	425b      	neglt	r3, r3
 8015fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8015fca:	9307      	strge	r3, [sp, #28]
 8015fcc:	9307      	strlt	r3, [sp, #28]
 8015fce:	bfb8      	it	lt
 8015fd0:	9204      	strlt	r2, [sp, #16]
 8015fd2:	7823      	ldrb	r3, [r4, #0]
 8015fd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8015fd6:	d10a      	bne.n	8015fee <_vfiprintf_r+0x156>
 8015fd8:	7863      	ldrb	r3, [r4, #1]
 8015fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fdc:	d132      	bne.n	8016044 <_vfiprintf_r+0x1ac>
 8015fde:	9b03      	ldr	r3, [sp, #12]
 8015fe0:	1d1a      	adds	r2, r3, #4
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	9203      	str	r2, [sp, #12]
 8015fe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015fea:	3402      	adds	r4, #2
 8015fec:	9305      	str	r3, [sp, #20]
 8015fee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80160c4 <_vfiprintf_r+0x22c>
 8015ff2:	7821      	ldrb	r1, [r4, #0]
 8015ff4:	2203      	movs	r2, #3
 8015ff6:	4650      	mov	r0, sl
 8015ff8:	f7ea f902 	bl	8000200 <memchr>
 8015ffc:	b138      	cbz	r0, 801600e <_vfiprintf_r+0x176>
 8015ffe:	9b04      	ldr	r3, [sp, #16]
 8016000:	eba0 000a 	sub.w	r0, r0, sl
 8016004:	2240      	movs	r2, #64	@ 0x40
 8016006:	4082      	lsls	r2, r0
 8016008:	4313      	orrs	r3, r2
 801600a:	3401      	adds	r4, #1
 801600c:	9304      	str	r3, [sp, #16]
 801600e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016012:	4829      	ldr	r0, [pc, #164]	@ (80160b8 <_vfiprintf_r+0x220>)
 8016014:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016018:	2206      	movs	r2, #6
 801601a:	f7ea f8f1 	bl	8000200 <memchr>
 801601e:	2800      	cmp	r0, #0
 8016020:	d03f      	beq.n	80160a2 <_vfiprintf_r+0x20a>
 8016022:	4b26      	ldr	r3, [pc, #152]	@ (80160bc <_vfiprintf_r+0x224>)
 8016024:	bb1b      	cbnz	r3, 801606e <_vfiprintf_r+0x1d6>
 8016026:	9b03      	ldr	r3, [sp, #12]
 8016028:	3307      	adds	r3, #7
 801602a:	f023 0307 	bic.w	r3, r3, #7
 801602e:	3308      	adds	r3, #8
 8016030:	9303      	str	r3, [sp, #12]
 8016032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016034:	443b      	add	r3, r7
 8016036:	9309      	str	r3, [sp, #36]	@ 0x24
 8016038:	e76a      	b.n	8015f10 <_vfiprintf_r+0x78>
 801603a:	fb0c 3202 	mla	r2, ip, r2, r3
 801603e:	460c      	mov	r4, r1
 8016040:	2001      	movs	r0, #1
 8016042:	e7a8      	b.n	8015f96 <_vfiprintf_r+0xfe>
 8016044:	2300      	movs	r3, #0
 8016046:	3401      	adds	r4, #1
 8016048:	9305      	str	r3, [sp, #20]
 801604a:	4619      	mov	r1, r3
 801604c:	f04f 0c0a 	mov.w	ip, #10
 8016050:	4620      	mov	r0, r4
 8016052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016056:	3a30      	subs	r2, #48	@ 0x30
 8016058:	2a09      	cmp	r2, #9
 801605a:	d903      	bls.n	8016064 <_vfiprintf_r+0x1cc>
 801605c:	2b00      	cmp	r3, #0
 801605e:	d0c6      	beq.n	8015fee <_vfiprintf_r+0x156>
 8016060:	9105      	str	r1, [sp, #20]
 8016062:	e7c4      	b.n	8015fee <_vfiprintf_r+0x156>
 8016064:	fb0c 2101 	mla	r1, ip, r1, r2
 8016068:	4604      	mov	r4, r0
 801606a:	2301      	movs	r3, #1
 801606c:	e7f0      	b.n	8016050 <_vfiprintf_r+0x1b8>
 801606e:	ab03      	add	r3, sp, #12
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	462a      	mov	r2, r5
 8016074:	4b12      	ldr	r3, [pc, #72]	@ (80160c0 <_vfiprintf_r+0x228>)
 8016076:	a904      	add	r1, sp, #16
 8016078:	4630      	mov	r0, r6
 801607a:	f3af 8000 	nop.w
 801607e:	4607      	mov	r7, r0
 8016080:	1c78      	adds	r0, r7, #1
 8016082:	d1d6      	bne.n	8016032 <_vfiprintf_r+0x19a>
 8016084:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016086:	07d9      	lsls	r1, r3, #31
 8016088:	d405      	bmi.n	8016096 <_vfiprintf_r+0x1fe>
 801608a:	89ab      	ldrh	r3, [r5, #12]
 801608c:	059a      	lsls	r2, r3, #22
 801608e:	d402      	bmi.n	8016096 <_vfiprintf_r+0x1fe>
 8016090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016092:	f7ff fceb 	bl	8015a6c <__retarget_lock_release_recursive>
 8016096:	89ab      	ldrh	r3, [r5, #12]
 8016098:	065b      	lsls	r3, r3, #25
 801609a:	f53f af1f 	bmi.w	8015edc <_vfiprintf_r+0x44>
 801609e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160a0:	e71e      	b.n	8015ee0 <_vfiprintf_r+0x48>
 80160a2:	ab03      	add	r3, sp, #12
 80160a4:	9300      	str	r3, [sp, #0]
 80160a6:	462a      	mov	r2, r5
 80160a8:	4b05      	ldr	r3, [pc, #20]	@ (80160c0 <_vfiprintf_r+0x228>)
 80160aa:	a904      	add	r1, sp, #16
 80160ac:	4630      	mov	r0, r6
 80160ae:	f000 f879 	bl	80161a4 <_printf_i>
 80160b2:	e7e4      	b.n	801607e <_vfiprintf_r+0x1e6>
 80160b4:	08017a80 	.word	0x08017a80
 80160b8:	08017a8a 	.word	0x08017a8a
 80160bc:	00000000 	.word	0x00000000
 80160c0:	08015e73 	.word	0x08015e73
 80160c4:	08017a86 	.word	0x08017a86

080160c8 <_printf_common>:
 80160c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160cc:	4616      	mov	r6, r2
 80160ce:	4698      	mov	r8, r3
 80160d0:	688a      	ldr	r2, [r1, #8]
 80160d2:	690b      	ldr	r3, [r1, #16]
 80160d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80160d8:	4293      	cmp	r3, r2
 80160da:	bfb8      	it	lt
 80160dc:	4613      	movlt	r3, r2
 80160de:	6033      	str	r3, [r6, #0]
 80160e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80160e4:	4607      	mov	r7, r0
 80160e6:	460c      	mov	r4, r1
 80160e8:	b10a      	cbz	r2, 80160ee <_printf_common+0x26>
 80160ea:	3301      	adds	r3, #1
 80160ec:	6033      	str	r3, [r6, #0]
 80160ee:	6823      	ldr	r3, [r4, #0]
 80160f0:	0699      	lsls	r1, r3, #26
 80160f2:	bf42      	ittt	mi
 80160f4:	6833      	ldrmi	r3, [r6, #0]
 80160f6:	3302      	addmi	r3, #2
 80160f8:	6033      	strmi	r3, [r6, #0]
 80160fa:	6825      	ldr	r5, [r4, #0]
 80160fc:	f015 0506 	ands.w	r5, r5, #6
 8016100:	d106      	bne.n	8016110 <_printf_common+0x48>
 8016102:	f104 0a19 	add.w	sl, r4, #25
 8016106:	68e3      	ldr	r3, [r4, #12]
 8016108:	6832      	ldr	r2, [r6, #0]
 801610a:	1a9b      	subs	r3, r3, r2
 801610c:	42ab      	cmp	r3, r5
 801610e:	dc26      	bgt.n	801615e <_printf_common+0x96>
 8016110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016114:	6822      	ldr	r2, [r4, #0]
 8016116:	3b00      	subs	r3, #0
 8016118:	bf18      	it	ne
 801611a:	2301      	movne	r3, #1
 801611c:	0692      	lsls	r2, r2, #26
 801611e:	d42b      	bmi.n	8016178 <_printf_common+0xb0>
 8016120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016124:	4641      	mov	r1, r8
 8016126:	4638      	mov	r0, r7
 8016128:	47c8      	blx	r9
 801612a:	3001      	adds	r0, #1
 801612c:	d01e      	beq.n	801616c <_printf_common+0xa4>
 801612e:	6823      	ldr	r3, [r4, #0]
 8016130:	6922      	ldr	r2, [r4, #16]
 8016132:	f003 0306 	and.w	r3, r3, #6
 8016136:	2b04      	cmp	r3, #4
 8016138:	bf02      	ittt	eq
 801613a:	68e5      	ldreq	r5, [r4, #12]
 801613c:	6833      	ldreq	r3, [r6, #0]
 801613e:	1aed      	subeq	r5, r5, r3
 8016140:	68a3      	ldr	r3, [r4, #8]
 8016142:	bf0c      	ite	eq
 8016144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016148:	2500      	movne	r5, #0
 801614a:	4293      	cmp	r3, r2
 801614c:	bfc4      	itt	gt
 801614e:	1a9b      	subgt	r3, r3, r2
 8016150:	18ed      	addgt	r5, r5, r3
 8016152:	2600      	movs	r6, #0
 8016154:	341a      	adds	r4, #26
 8016156:	42b5      	cmp	r5, r6
 8016158:	d11a      	bne.n	8016190 <_printf_common+0xc8>
 801615a:	2000      	movs	r0, #0
 801615c:	e008      	b.n	8016170 <_printf_common+0xa8>
 801615e:	2301      	movs	r3, #1
 8016160:	4652      	mov	r2, sl
 8016162:	4641      	mov	r1, r8
 8016164:	4638      	mov	r0, r7
 8016166:	47c8      	blx	r9
 8016168:	3001      	adds	r0, #1
 801616a:	d103      	bne.n	8016174 <_printf_common+0xac>
 801616c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016174:	3501      	adds	r5, #1
 8016176:	e7c6      	b.n	8016106 <_printf_common+0x3e>
 8016178:	18e1      	adds	r1, r4, r3
 801617a:	1c5a      	adds	r2, r3, #1
 801617c:	2030      	movs	r0, #48	@ 0x30
 801617e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016182:	4422      	add	r2, r4
 8016184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801618c:	3302      	adds	r3, #2
 801618e:	e7c7      	b.n	8016120 <_printf_common+0x58>
 8016190:	2301      	movs	r3, #1
 8016192:	4622      	mov	r2, r4
 8016194:	4641      	mov	r1, r8
 8016196:	4638      	mov	r0, r7
 8016198:	47c8      	blx	r9
 801619a:	3001      	adds	r0, #1
 801619c:	d0e6      	beq.n	801616c <_printf_common+0xa4>
 801619e:	3601      	adds	r6, #1
 80161a0:	e7d9      	b.n	8016156 <_printf_common+0x8e>
	...

080161a4 <_printf_i>:
 80161a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80161a8:	7e0f      	ldrb	r7, [r1, #24]
 80161aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80161ac:	2f78      	cmp	r7, #120	@ 0x78
 80161ae:	4691      	mov	r9, r2
 80161b0:	4680      	mov	r8, r0
 80161b2:	460c      	mov	r4, r1
 80161b4:	469a      	mov	sl, r3
 80161b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80161ba:	d807      	bhi.n	80161cc <_printf_i+0x28>
 80161bc:	2f62      	cmp	r7, #98	@ 0x62
 80161be:	d80a      	bhi.n	80161d6 <_printf_i+0x32>
 80161c0:	2f00      	cmp	r7, #0
 80161c2:	f000 80d2 	beq.w	801636a <_printf_i+0x1c6>
 80161c6:	2f58      	cmp	r7, #88	@ 0x58
 80161c8:	f000 80b9 	beq.w	801633e <_printf_i+0x19a>
 80161cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80161d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80161d4:	e03a      	b.n	801624c <_printf_i+0xa8>
 80161d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80161da:	2b15      	cmp	r3, #21
 80161dc:	d8f6      	bhi.n	80161cc <_printf_i+0x28>
 80161de:	a101      	add	r1, pc, #4	@ (adr r1, 80161e4 <_printf_i+0x40>)
 80161e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80161e4:	0801623d 	.word	0x0801623d
 80161e8:	08016251 	.word	0x08016251
 80161ec:	080161cd 	.word	0x080161cd
 80161f0:	080161cd 	.word	0x080161cd
 80161f4:	080161cd 	.word	0x080161cd
 80161f8:	080161cd 	.word	0x080161cd
 80161fc:	08016251 	.word	0x08016251
 8016200:	080161cd 	.word	0x080161cd
 8016204:	080161cd 	.word	0x080161cd
 8016208:	080161cd 	.word	0x080161cd
 801620c:	080161cd 	.word	0x080161cd
 8016210:	08016351 	.word	0x08016351
 8016214:	0801627b 	.word	0x0801627b
 8016218:	0801630b 	.word	0x0801630b
 801621c:	080161cd 	.word	0x080161cd
 8016220:	080161cd 	.word	0x080161cd
 8016224:	08016373 	.word	0x08016373
 8016228:	080161cd 	.word	0x080161cd
 801622c:	0801627b 	.word	0x0801627b
 8016230:	080161cd 	.word	0x080161cd
 8016234:	080161cd 	.word	0x080161cd
 8016238:	08016313 	.word	0x08016313
 801623c:	6833      	ldr	r3, [r6, #0]
 801623e:	1d1a      	adds	r2, r3, #4
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	6032      	str	r2, [r6, #0]
 8016244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801624c:	2301      	movs	r3, #1
 801624e:	e09d      	b.n	801638c <_printf_i+0x1e8>
 8016250:	6833      	ldr	r3, [r6, #0]
 8016252:	6820      	ldr	r0, [r4, #0]
 8016254:	1d19      	adds	r1, r3, #4
 8016256:	6031      	str	r1, [r6, #0]
 8016258:	0606      	lsls	r6, r0, #24
 801625a:	d501      	bpl.n	8016260 <_printf_i+0xbc>
 801625c:	681d      	ldr	r5, [r3, #0]
 801625e:	e003      	b.n	8016268 <_printf_i+0xc4>
 8016260:	0645      	lsls	r5, r0, #25
 8016262:	d5fb      	bpl.n	801625c <_printf_i+0xb8>
 8016264:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016268:	2d00      	cmp	r5, #0
 801626a:	da03      	bge.n	8016274 <_printf_i+0xd0>
 801626c:	232d      	movs	r3, #45	@ 0x2d
 801626e:	426d      	negs	r5, r5
 8016270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016274:	4859      	ldr	r0, [pc, #356]	@ (80163dc <_printf_i+0x238>)
 8016276:	230a      	movs	r3, #10
 8016278:	e011      	b.n	801629e <_printf_i+0xfa>
 801627a:	6821      	ldr	r1, [r4, #0]
 801627c:	6833      	ldr	r3, [r6, #0]
 801627e:	0608      	lsls	r0, r1, #24
 8016280:	f853 5b04 	ldr.w	r5, [r3], #4
 8016284:	d402      	bmi.n	801628c <_printf_i+0xe8>
 8016286:	0649      	lsls	r1, r1, #25
 8016288:	bf48      	it	mi
 801628a:	b2ad      	uxthmi	r5, r5
 801628c:	2f6f      	cmp	r7, #111	@ 0x6f
 801628e:	4853      	ldr	r0, [pc, #332]	@ (80163dc <_printf_i+0x238>)
 8016290:	6033      	str	r3, [r6, #0]
 8016292:	bf14      	ite	ne
 8016294:	230a      	movne	r3, #10
 8016296:	2308      	moveq	r3, #8
 8016298:	2100      	movs	r1, #0
 801629a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801629e:	6866      	ldr	r6, [r4, #4]
 80162a0:	60a6      	str	r6, [r4, #8]
 80162a2:	2e00      	cmp	r6, #0
 80162a4:	bfa2      	ittt	ge
 80162a6:	6821      	ldrge	r1, [r4, #0]
 80162a8:	f021 0104 	bicge.w	r1, r1, #4
 80162ac:	6021      	strge	r1, [r4, #0]
 80162ae:	b90d      	cbnz	r5, 80162b4 <_printf_i+0x110>
 80162b0:	2e00      	cmp	r6, #0
 80162b2:	d04b      	beq.n	801634c <_printf_i+0x1a8>
 80162b4:	4616      	mov	r6, r2
 80162b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80162ba:	fb03 5711 	mls	r7, r3, r1, r5
 80162be:	5dc7      	ldrb	r7, [r0, r7]
 80162c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80162c4:	462f      	mov	r7, r5
 80162c6:	42bb      	cmp	r3, r7
 80162c8:	460d      	mov	r5, r1
 80162ca:	d9f4      	bls.n	80162b6 <_printf_i+0x112>
 80162cc:	2b08      	cmp	r3, #8
 80162ce:	d10b      	bne.n	80162e8 <_printf_i+0x144>
 80162d0:	6823      	ldr	r3, [r4, #0]
 80162d2:	07df      	lsls	r7, r3, #31
 80162d4:	d508      	bpl.n	80162e8 <_printf_i+0x144>
 80162d6:	6923      	ldr	r3, [r4, #16]
 80162d8:	6861      	ldr	r1, [r4, #4]
 80162da:	4299      	cmp	r1, r3
 80162dc:	bfde      	ittt	le
 80162de:	2330      	movle	r3, #48	@ 0x30
 80162e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80162e4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80162e8:	1b92      	subs	r2, r2, r6
 80162ea:	6122      	str	r2, [r4, #16]
 80162ec:	f8cd a000 	str.w	sl, [sp]
 80162f0:	464b      	mov	r3, r9
 80162f2:	aa03      	add	r2, sp, #12
 80162f4:	4621      	mov	r1, r4
 80162f6:	4640      	mov	r0, r8
 80162f8:	f7ff fee6 	bl	80160c8 <_printf_common>
 80162fc:	3001      	adds	r0, #1
 80162fe:	d14a      	bne.n	8016396 <_printf_i+0x1f2>
 8016300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016304:	b004      	add	sp, #16
 8016306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801630a:	6823      	ldr	r3, [r4, #0]
 801630c:	f043 0320 	orr.w	r3, r3, #32
 8016310:	6023      	str	r3, [r4, #0]
 8016312:	4833      	ldr	r0, [pc, #204]	@ (80163e0 <_printf_i+0x23c>)
 8016314:	2778      	movs	r7, #120	@ 0x78
 8016316:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801631a:	6823      	ldr	r3, [r4, #0]
 801631c:	6831      	ldr	r1, [r6, #0]
 801631e:	061f      	lsls	r7, r3, #24
 8016320:	f851 5b04 	ldr.w	r5, [r1], #4
 8016324:	d402      	bmi.n	801632c <_printf_i+0x188>
 8016326:	065f      	lsls	r7, r3, #25
 8016328:	bf48      	it	mi
 801632a:	b2ad      	uxthmi	r5, r5
 801632c:	6031      	str	r1, [r6, #0]
 801632e:	07d9      	lsls	r1, r3, #31
 8016330:	bf44      	itt	mi
 8016332:	f043 0320 	orrmi.w	r3, r3, #32
 8016336:	6023      	strmi	r3, [r4, #0]
 8016338:	b11d      	cbz	r5, 8016342 <_printf_i+0x19e>
 801633a:	2310      	movs	r3, #16
 801633c:	e7ac      	b.n	8016298 <_printf_i+0xf4>
 801633e:	4827      	ldr	r0, [pc, #156]	@ (80163dc <_printf_i+0x238>)
 8016340:	e7e9      	b.n	8016316 <_printf_i+0x172>
 8016342:	6823      	ldr	r3, [r4, #0]
 8016344:	f023 0320 	bic.w	r3, r3, #32
 8016348:	6023      	str	r3, [r4, #0]
 801634a:	e7f6      	b.n	801633a <_printf_i+0x196>
 801634c:	4616      	mov	r6, r2
 801634e:	e7bd      	b.n	80162cc <_printf_i+0x128>
 8016350:	6833      	ldr	r3, [r6, #0]
 8016352:	6825      	ldr	r5, [r4, #0]
 8016354:	6961      	ldr	r1, [r4, #20]
 8016356:	1d18      	adds	r0, r3, #4
 8016358:	6030      	str	r0, [r6, #0]
 801635a:	062e      	lsls	r6, r5, #24
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	d501      	bpl.n	8016364 <_printf_i+0x1c0>
 8016360:	6019      	str	r1, [r3, #0]
 8016362:	e002      	b.n	801636a <_printf_i+0x1c6>
 8016364:	0668      	lsls	r0, r5, #25
 8016366:	d5fb      	bpl.n	8016360 <_printf_i+0x1bc>
 8016368:	8019      	strh	r1, [r3, #0]
 801636a:	2300      	movs	r3, #0
 801636c:	6123      	str	r3, [r4, #16]
 801636e:	4616      	mov	r6, r2
 8016370:	e7bc      	b.n	80162ec <_printf_i+0x148>
 8016372:	6833      	ldr	r3, [r6, #0]
 8016374:	1d1a      	adds	r2, r3, #4
 8016376:	6032      	str	r2, [r6, #0]
 8016378:	681e      	ldr	r6, [r3, #0]
 801637a:	6862      	ldr	r2, [r4, #4]
 801637c:	2100      	movs	r1, #0
 801637e:	4630      	mov	r0, r6
 8016380:	f7e9 ff3e 	bl	8000200 <memchr>
 8016384:	b108      	cbz	r0, 801638a <_printf_i+0x1e6>
 8016386:	1b80      	subs	r0, r0, r6
 8016388:	6060      	str	r0, [r4, #4]
 801638a:	6863      	ldr	r3, [r4, #4]
 801638c:	6123      	str	r3, [r4, #16]
 801638e:	2300      	movs	r3, #0
 8016390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016394:	e7aa      	b.n	80162ec <_printf_i+0x148>
 8016396:	6923      	ldr	r3, [r4, #16]
 8016398:	4632      	mov	r2, r6
 801639a:	4649      	mov	r1, r9
 801639c:	4640      	mov	r0, r8
 801639e:	47d0      	blx	sl
 80163a0:	3001      	adds	r0, #1
 80163a2:	d0ad      	beq.n	8016300 <_printf_i+0x15c>
 80163a4:	6823      	ldr	r3, [r4, #0]
 80163a6:	079b      	lsls	r3, r3, #30
 80163a8:	d413      	bmi.n	80163d2 <_printf_i+0x22e>
 80163aa:	68e0      	ldr	r0, [r4, #12]
 80163ac:	9b03      	ldr	r3, [sp, #12]
 80163ae:	4298      	cmp	r0, r3
 80163b0:	bfb8      	it	lt
 80163b2:	4618      	movlt	r0, r3
 80163b4:	e7a6      	b.n	8016304 <_printf_i+0x160>
 80163b6:	2301      	movs	r3, #1
 80163b8:	4632      	mov	r2, r6
 80163ba:	4649      	mov	r1, r9
 80163bc:	4640      	mov	r0, r8
 80163be:	47d0      	blx	sl
 80163c0:	3001      	adds	r0, #1
 80163c2:	d09d      	beq.n	8016300 <_printf_i+0x15c>
 80163c4:	3501      	adds	r5, #1
 80163c6:	68e3      	ldr	r3, [r4, #12]
 80163c8:	9903      	ldr	r1, [sp, #12]
 80163ca:	1a5b      	subs	r3, r3, r1
 80163cc:	42ab      	cmp	r3, r5
 80163ce:	dcf2      	bgt.n	80163b6 <_printf_i+0x212>
 80163d0:	e7eb      	b.n	80163aa <_printf_i+0x206>
 80163d2:	2500      	movs	r5, #0
 80163d4:	f104 0619 	add.w	r6, r4, #25
 80163d8:	e7f5      	b.n	80163c6 <_printf_i+0x222>
 80163da:	bf00      	nop
 80163dc:	08017a91 	.word	0x08017a91
 80163e0:	08017aa2 	.word	0x08017aa2

080163e4 <__sflush_r>:
 80163e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80163e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ec:	0716      	lsls	r6, r2, #28
 80163ee:	4605      	mov	r5, r0
 80163f0:	460c      	mov	r4, r1
 80163f2:	d454      	bmi.n	801649e <__sflush_r+0xba>
 80163f4:	684b      	ldr	r3, [r1, #4]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	dc02      	bgt.n	8016400 <__sflush_r+0x1c>
 80163fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	dd48      	ble.n	8016492 <__sflush_r+0xae>
 8016400:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016402:	2e00      	cmp	r6, #0
 8016404:	d045      	beq.n	8016492 <__sflush_r+0xae>
 8016406:	2300      	movs	r3, #0
 8016408:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801640c:	682f      	ldr	r7, [r5, #0]
 801640e:	6a21      	ldr	r1, [r4, #32]
 8016410:	602b      	str	r3, [r5, #0]
 8016412:	d030      	beq.n	8016476 <__sflush_r+0x92>
 8016414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016416:	89a3      	ldrh	r3, [r4, #12]
 8016418:	0759      	lsls	r1, r3, #29
 801641a:	d505      	bpl.n	8016428 <__sflush_r+0x44>
 801641c:	6863      	ldr	r3, [r4, #4]
 801641e:	1ad2      	subs	r2, r2, r3
 8016420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016422:	b10b      	cbz	r3, 8016428 <__sflush_r+0x44>
 8016424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016426:	1ad2      	subs	r2, r2, r3
 8016428:	2300      	movs	r3, #0
 801642a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801642c:	6a21      	ldr	r1, [r4, #32]
 801642e:	4628      	mov	r0, r5
 8016430:	47b0      	blx	r6
 8016432:	1c43      	adds	r3, r0, #1
 8016434:	89a3      	ldrh	r3, [r4, #12]
 8016436:	d106      	bne.n	8016446 <__sflush_r+0x62>
 8016438:	6829      	ldr	r1, [r5, #0]
 801643a:	291d      	cmp	r1, #29
 801643c:	d82b      	bhi.n	8016496 <__sflush_r+0xb2>
 801643e:	4a2a      	ldr	r2, [pc, #168]	@ (80164e8 <__sflush_r+0x104>)
 8016440:	410a      	asrs	r2, r1
 8016442:	07d6      	lsls	r6, r2, #31
 8016444:	d427      	bmi.n	8016496 <__sflush_r+0xb2>
 8016446:	2200      	movs	r2, #0
 8016448:	6062      	str	r2, [r4, #4]
 801644a:	04d9      	lsls	r1, r3, #19
 801644c:	6922      	ldr	r2, [r4, #16]
 801644e:	6022      	str	r2, [r4, #0]
 8016450:	d504      	bpl.n	801645c <__sflush_r+0x78>
 8016452:	1c42      	adds	r2, r0, #1
 8016454:	d101      	bne.n	801645a <__sflush_r+0x76>
 8016456:	682b      	ldr	r3, [r5, #0]
 8016458:	b903      	cbnz	r3, 801645c <__sflush_r+0x78>
 801645a:	6560      	str	r0, [r4, #84]	@ 0x54
 801645c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801645e:	602f      	str	r7, [r5, #0]
 8016460:	b1b9      	cbz	r1, 8016492 <__sflush_r+0xae>
 8016462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016466:	4299      	cmp	r1, r3
 8016468:	d002      	beq.n	8016470 <__sflush_r+0x8c>
 801646a:	4628      	mov	r0, r5
 801646c:	f7ff fb40 	bl	8015af0 <_free_r>
 8016470:	2300      	movs	r3, #0
 8016472:	6363      	str	r3, [r4, #52]	@ 0x34
 8016474:	e00d      	b.n	8016492 <__sflush_r+0xae>
 8016476:	2301      	movs	r3, #1
 8016478:	4628      	mov	r0, r5
 801647a:	47b0      	blx	r6
 801647c:	4602      	mov	r2, r0
 801647e:	1c50      	adds	r0, r2, #1
 8016480:	d1c9      	bne.n	8016416 <__sflush_r+0x32>
 8016482:	682b      	ldr	r3, [r5, #0]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d0c6      	beq.n	8016416 <__sflush_r+0x32>
 8016488:	2b1d      	cmp	r3, #29
 801648a:	d001      	beq.n	8016490 <__sflush_r+0xac>
 801648c:	2b16      	cmp	r3, #22
 801648e:	d11e      	bne.n	80164ce <__sflush_r+0xea>
 8016490:	602f      	str	r7, [r5, #0]
 8016492:	2000      	movs	r0, #0
 8016494:	e022      	b.n	80164dc <__sflush_r+0xf8>
 8016496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801649a:	b21b      	sxth	r3, r3
 801649c:	e01b      	b.n	80164d6 <__sflush_r+0xf2>
 801649e:	690f      	ldr	r7, [r1, #16]
 80164a0:	2f00      	cmp	r7, #0
 80164a2:	d0f6      	beq.n	8016492 <__sflush_r+0xae>
 80164a4:	0793      	lsls	r3, r2, #30
 80164a6:	680e      	ldr	r6, [r1, #0]
 80164a8:	bf08      	it	eq
 80164aa:	694b      	ldreq	r3, [r1, #20]
 80164ac:	600f      	str	r7, [r1, #0]
 80164ae:	bf18      	it	ne
 80164b0:	2300      	movne	r3, #0
 80164b2:	eba6 0807 	sub.w	r8, r6, r7
 80164b6:	608b      	str	r3, [r1, #8]
 80164b8:	f1b8 0f00 	cmp.w	r8, #0
 80164bc:	dde9      	ble.n	8016492 <__sflush_r+0xae>
 80164be:	6a21      	ldr	r1, [r4, #32]
 80164c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80164c2:	4643      	mov	r3, r8
 80164c4:	463a      	mov	r2, r7
 80164c6:	4628      	mov	r0, r5
 80164c8:	47b0      	blx	r6
 80164ca:	2800      	cmp	r0, #0
 80164cc:	dc08      	bgt.n	80164e0 <__sflush_r+0xfc>
 80164ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80164d6:	81a3      	strh	r3, [r4, #12]
 80164d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80164dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164e0:	4407      	add	r7, r0
 80164e2:	eba8 0800 	sub.w	r8, r8, r0
 80164e6:	e7e7      	b.n	80164b8 <__sflush_r+0xd4>
 80164e8:	dfbffffe 	.word	0xdfbffffe

080164ec <_fflush_r>:
 80164ec:	b538      	push	{r3, r4, r5, lr}
 80164ee:	690b      	ldr	r3, [r1, #16]
 80164f0:	4605      	mov	r5, r0
 80164f2:	460c      	mov	r4, r1
 80164f4:	b913      	cbnz	r3, 80164fc <_fflush_r+0x10>
 80164f6:	2500      	movs	r5, #0
 80164f8:	4628      	mov	r0, r5
 80164fa:	bd38      	pop	{r3, r4, r5, pc}
 80164fc:	b118      	cbz	r0, 8016506 <_fflush_r+0x1a>
 80164fe:	6a03      	ldr	r3, [r0, #32]
 8016500:	b90b      	cbnz	r3, 8016506 <_fflush_r+0x1a>
 8016502:	f7ff f8bf 	bl	8015684 <__sinit>
 8016506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d0f3      	beq.n	80164f6 <_fflush_r+0xa>
 801650e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016510:	07d0      	lsls	r0, r2, #31
 8016512:	d404      	bmi.n	801651e <_fflush_r+0x32>
 8016514:	0599      	lsls	r1, r3, #22
 8016516:	d402      	bmi.n	801651e <_fflush_r+0x32>
 8016518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801651a:	f7ff faa6 	bl	8015a6a <__retarget_lock_acquire_recursive>
 801651e:	4628      	mov	r0, r5
 8016520:	4621      	mov	r1, r4
 8016522:	f7ff ff5f 	bl	80163e4 <__sflush_r>
 8016526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016528:	07da      	lsls	r2, r3, #31
 801652a:	4605      	mov	r5, r0
 801652c:	d4e4      	bmi.n	80164f8 <_fflush_r+0xc>
 801652e:	89a3      	ldrh	r3, [r4, #12]
 8016530:	059b      	lsls	r3, r3, #22
 8016532:	d4e1      	bmi.n	80164f8 <_fflush_r+0xc>
 8016534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016536:	f7ff fa99 	bl	8015a6c <__retarget_lock_release_recursive>
 801653a:	e7dd      	b.n	80164f8 <_fflush_r+0xc>

0801653c <fiprintf>:
 801653c:	b40e      	push	{r1, r2, r3}
 801653e:	b503      	push	{r0, r1, lr}
 8016540:	4601      	mov	r1, r0
 8016542:	ab03      	add	r3, sp, #12
 8016544:	4805      	ldr	r0, [pc, #20]	@ (801655c <fiprintf+0x20>)
 8016546:	f853 2b04 	ldr.w	r2, [r3], #4
 801654a:	6800      	ldr	r0, [r0, #0]
 801654c:	9301      	str	r3, [sp, #4]
 801654e:	f7ff fca3 	bl	8015e98 <_vfiprintf_r>
 8016552:	b002      	add	sp, #8
 8016554:	f85d eb04 	ldr.w	lr, [sp], #4
 8016558:	b003      	add	sp, #12
 801655a:	4770      	bx	lr
 801655c:	20000810 	.word	0x20000810

08016560 <__swbuf_r>:
 8016560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016562:	460e      	mov	r6, r1
 8016564:	4614      	mov	r4, r2
 8016566:	4605      	mov	r5, r0
 8016568:	b118      	cbz	r0, 8016572 <__swbuf_r+0x12>
 801656a:	6a03      	ldr	r3, [r0, #32]
 801656c:	b90b      	cbnz	r3, 8016572 <__swbuf_r+0x12>
 801656e:	f7ff f889 	bl	8015684 <__sinit>
 8016572:	69a3      	ldr	r3, [r4, #24]
 8016574:	60a3      	str	r3, [r4, #8]
 8016576:	89a3      	ldrh	r3, [r4, #12]
 8016578:	071a      	lsls	r2, r3, #28
 801657a:	d501      	bpl.n	8016580 <__swbuf_r+0x20>
 801657c:	6923      	ldr	r3, [r4, #16]
 801657e:	b943      	cbnz	r3, 8016592 <__swbuf_r+0x32>
 8016580:	4621      	mov	r1, r4
 8016582:	4628      	mov	r0, r5
 8016584:	f000 f82a 	bl	80165dc <__swsetup_r>
 8016588:	b118      	cbz	r0, 8016592 <__swbuf_r+0x32>
 801658a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801658e:	4638      	mov	r0, r7
 8016590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016592:	6823      	ldr	r3, [r4, #0]
 8016594:	6922      	ldr	r2, [r4, #16]
 8016596:	1a98      	subs	r0, r3, r2
 8016598:	6963      	ldr	r3, [r4, #20]
 801659a:	b2f6      	uxtb	r6, r6
 801659c:	4283      	cmp	r3, r0
 801659e:	4637      	mov	r7, r6
 80165a0:	dc05      	bgt.n	80165ae <__swbuf_r+0x4e>
 80165a2:	4621      	mov	r1, r4
 80165a4:	4628      	mov	r0, r5
 80165a6:	f7ff ffa1 	bl	80164ec <_fflush_r>
 80165aa:	2800      	cmp	r0, #0
 80165ac:	d1ed      	bne.n	801658a <__swbuf_r+0x2a>
 80165ae:	68a3      	ldr	r3, [r4, #8]
 80165b0:	3b01      	subs	r3, #1
 80165b2:	60a3      	str	r3, [r4, #8]
 80165b4:	6823      	ldr	r3, [r4, #0]
 80165b6:	1c5a      	adds	r2, r3, #1
 80165b8:	6022      	str	r2, [r4, #0]
 80165ba:	701e      	strb	r6, [r3, #0]
 80165bc:	6962      	ldr	r2, [r4, #20]
 80165be:	1c43      	adds	r3, r0, #1
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d004      	beq.n	80165ce <__swbuf_r+0x6e>
 80165c4:	89a3      	ldrh	r3, [r4, #12]
 80165c6:	07db      	lsls	r3, r3, #31
 80165c8:	d5e1      	bpl.n	801658e <__swbuf_r+0x2e>
 80165ca:	2e0a      	cmp	r6, #10
 80165cc:	d1df      	bne.n	801658e <__swbuf_r+0x2e>
 80165ce:	4621      	mov	r1, r4
 80165d0:	4628      	mov	r0, r5
 80165d2:	f7ff ff8b 	bl	80164ec <_fflush_r>
 80165d6:	2800      	cmp	r0, #0
 80165d8:	d0d9      	beq.n	801658e <__swbuf_r+0x2e>
 80165da:	e7d6      	b.n	801658a <__swbuf_r+0x2a>

080165dc <__swsetup_r>:
 80165dc:	b538      	push	{r3, r4, r5, lr}
 80165de:	4b29      	ldr	r3, [pc, #164]	@ (8016684 <__swsetup_r+0xa8>)
 80165e0:	4605      	mov	r5, r0
 80165e2:	6818      	ldr	r0, [r3, #0]
 80165e4:	460c      	mov	r4, r1
 80165e6:	b118      	cbz	r0, 80165f0 <__swsetup_r+0x14>
 80165e8:	6a03      	ldr	r3, [r0, #32]
 80165ea:	b90b      	cbnz	r3, 80165f0 <__swsetup_r+0x14>
 80165ec:	f7ff f84a 	bl	8015684 <__sinit>
 80165f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165f4:	0719      	lsls	r1, r3, #28
 80165f6:	d422      	bmi.n	801663e <__swsetup_r+0x62>
 80165f8:	06da      	lsls	r2, r3, #27
 80165fa:	d407      	bmi.n	801660c <__swsetup_r+0x30>
 80165fc:	2209      	movs	r2, #9
 80165fe:	602a      	str	r2, [r5, #0]
 8016600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016604:	81a3      	strh	r3, [r4, #12]
 8016606:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801660a:	e033      	b.n	8016674 <__swsetup_r+0x98>
 801660c:	0758      	lsls	r0, r3, #29
 801660e:	d512      	bpl.n	8016636 <__swsetup_r+0x5a>
 8016610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016612:	b141      	cbz	r1, 8016626 <__swsetup_r+0x4a>
 8016614:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016618:	4299      	cmp	r1, r3
 801661a:	d002      	beq.n	8016622 <__swsetup_r+0x46>
 801661c:	4628      	mov	r0, r5
 801661e:	f7ff fa67 	bl	8015af0 <_free_r>
 8016622:	2300      	movs	r3, #0
 8016624:	6363      	str	r3, [r4, #52]	@ 0x34
 8016626:	89a3      	ldrh	r3, [r4, #12]
 8016628:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801662c:	81a3      	strh	r3, [r4, #12]
 801662e:	2300      	movs	r3, #0
 8016630:	6063      	str	r3, [r4, #4]
 8016632:	6923      	ldr	r3, [r4, #16]
 8016634:	6023      	str	r3, [r4, #0]
 8016636:	89a3      	ldrh	r3, [r4, #12]
 8016638:	f043 0308 	orr.w	r3, r3, #8
 801663c:	81a3      	strh	r3, [r4, #12]
 801663e:	6923      	ldr	r3, [r4, #16]
 8016640:	b94b      	cbnz	r3, 8016656 <__swsetup_r+0x7a>
 8016642:	89a3      	ldrh	r3, [r4, #12]
 8016644:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801664c:	d003      	beq.n	8016656 <__swsetup_r+0x7a>
 801664e:	4621      	mov	r1, r4
 8016650:	4628      	mov	r0, r5
 8016652:	f000 f846 	bl	80166e2 <__smakebuf_r>
 8016656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801665a:	f013 0201 	ands.w	r2, r3, #1
 801665e:	d00a      	beq.n	8016676 <__swsetup_r+0x9a>
 8016660:	2200      	movs	r2, #0
 8016662:	60a2      	str	r2, [r4, #8]
 8016664:	6962      	ldr	r2, [r4, #20]
 8016666:	4252      	negs	r2, r2
 8016668:	61a2      	str	r2, [r4, #24]
 801666a:	6922      	ldr	r2, [r4, #16]
 801666c:	b942      	cbnz	r2, 8016680 <__swsetup_r+0xa4>
 801666e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016672:	d1c5      	bne.n	8016600 <__swsetup_r+0x24>
 8016674:	bd38      	pop	{r3, r4, r5, pc}
 8016676:	0799      	lsls	r1, r3, #30
 8016678:	bf58      	it	pl
 801667a:	6962      	ldrpl	r2, [r4, #20]
 801667c:	60a2      	str	r2, [r4, #8]
 801667e:	e7f4      	b.n	801666a <__swsetup_r+0x8e>
 8016680:	2000      	movs	r0, #0
 8016682:	e7f7      	b.n	8016674 <__swsetup_r+0x98>
 8016684:	20000810 	.word	0x20000810

08016688 <abort>:
 8016688:	b508      	push	{r3, lr}
 801668a:	2006      	movs	r0, #6
 801668c:	f000 f88e 	bl	80167ac <raise>
 8016690:	2001      	movs	r0, #1
 8016692:	f7eb f839 	bl	8001708 <_exit>

08016696 <__swhatbuf_r>:
 8016696:	b570      	push	{r4, r5, r6, lr}
 8016698:	460c      	mov	r4, r1
 801669a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801669e:	2900      	cmp	r1, #0
 80166a0:	b096      	sub	sp, #88	@ 0x58
 80166a2:	4615      	mov	r5, r2
 80166a4:	461e      	mov	r6, r3
 80166a6:	da0d      	bge.n	80166c4 <__swhatbuf_r+0x2e>
 80166a8:	89a3      	ldrh	r3, [r4, #12]
 80166aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80166ae:	f04f 0100 	mov.w	r1, #0
 80166b2:	bf14      	ite	ne
 80166b4:	2340      	movne	r3, #64	@ 0x40
 80166b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80166ba:	2000      	movs	r0, #0
 80166bc:	6031      	str	r1, [r6, #0]
 80166be:	602b      	str	r3, [r5, #0]
 80166c0:	b016      	add	sp, #88	@ 0x58
 80166c2:	bd70      	pop	{r4, r5, r6, pc}
 80166c4:	466a      	mov	r2, sp
 80166c6:	f000 f879 	bl	80167bc <_fstat_r>
 80166ca:	2800      	cmp	r0, #0
 80166cc:	dbec      	blt.n	80166a8 <__swhatbuf_r+0x12>
 80166ce:	9901      	ldr	r1, [sp, #4]
 80166d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80166d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80166d8:	4259      	negs	r1, r3
 80166da:	4159      	adcs	r1, r3
 80166dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80166e0:	e7eb      	b.n	80166ba <__swhatbuf_r+0x24>

080166e2 <__smakebuf_r>:
 80166e2:	898b      	ldrh	r3, [r1, #12]
 80166e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166e6:	079d      	lsls	r5, r3, #30
 80166e8:	4606      	mov	r6, r0
 80166ea:	460c      	mov	r4, r1
 80166ec:	d507      	bpl.n	80166fe <__smakebuf_r+0x1c>
 80166ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80166f2:	6023      	str	r3, [r4, #0]
 80166f4:	6123      	str	r3, [r4, #16]
 80166f6:	2301      	movs	r3, #1
 80166f8:	6163      	str	r3, [r4, #20]
 80166fa:	b003      	add	sp, #12
 80166fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166fe:	ab01      	add	r3, sp, #4
 8016700:	466a      	mov	r2, sp
 8016702:	f7ff ffc8 	bl	8016696 <__swhatbuf_r>
 8016706:	9f00      	ldr	r7, [sp, #0]
 8016708:	4605      	mov	r5, r0
 801670a:	4639      	mov	r1, r7
 801670c:	4630      	mov	r0, r6
 801670e:	f7fe fd87 	bl	8015220 <_malloc_r>
 8016712:	b948      	cbnz	r0, 8016728 <__smakebuf_r+0x46>
 8016714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016718:	059a      	lsls	r2, r3, #22
 801671a:	d4ee      	bmi.n	80166fa <__smakebuf_r+0x18>
 801671c:	f023 0303 	bic.w	r3, r3, #3
 8016720:	f043 0302 	orr.w	r3, r3, #2
 8016724:	81a3      	strh	r3, [r4, #12]
 8016726:	e7e2      	b.n	80166ee <__smakebuf_r+0xc>
 8016728:	89a3      	ldrh	r3, [r4, #12]
 801672a:	6020      	str	r0, [r4, #0]
 801672c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016730:	81a3      	strh	r3, [r4, #12]
 8016732:	9b01      	ldr	r3, [sp, #4]
 8016734:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016738:	b15b      	cbz	r3, 8016752 <__smakebuf_r+0x70>
 801673a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801673e:	4630      	mov	r0, r6
 8016740:	f000 f84e 	bl	80167e0 <_isatty_r>
 8016744:	b128      	cbz	r0, 8016752 <__smakebuf_r+0x70>
 8016746:	89a3      	ldrh	r3, [r4, #12]
 8016748:	f023 0303 	bic.w	r3, r3, #3
 801674c:	f043 0301 	orr.w	r3, r3, #1
 8016750:	81a3      	strh	r3, [r4, #12]
 8016752:	89a3      	ldrh	r3, [r4, #12]
 8016754:	431d      	orrs	r5, r3
 8016756:	81a5      	strh	r5, [r4, #12]
 8016758:	e7cf      	b.n	80166fa <__smakebuf_r+0x18>

0801675a <_raise_r>:
 801675a:	291f      	cmp	r1, #31
 801675c:	b538      	push	{r3, r4, r5, lr}
 801675e:	4605      	mov	r5, r0
 8016760:	460c      	mov	r4, r1
 8016762:	d904      	bls.n	801676e <_raise_r+0x14>
 8016764:	2316      	movs	r3, #22
 8016766:	6003      	str	r3, [r0, #0]
 8016768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801676c:	bd38      	pop	{r3, r4, r5, pc}
 801676e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016770:	b112      	cbz	r2, 8016778 <_raise_r+0x1e>
 8016772:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016776:	b94b      	cbnz	r3, 801678c <_raise_r+0x32>
 8016778:	4628      	mov	r0, r5
 801677a:	f000 f853 	bl	8016824 <_getpid_r>
 801677e:	4622      	mov	r2, r4
 8016780:	4601      	mov	r1, r0
 8016782:	4628      	mov	r0, r5
 8016784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016788:	f000 b83a 	b.w	8016800 <_kill_r>
 801678c:	2b01      	cmp	r3, #1
 801678e:	d00a      	beq.n	80167a6 <_raise_r+0x4c>
 8016790:	1c59      	adds	r1, r3, #1
 8016792:	d103      	bne.n	801679c <_raise_r+0x42>
 8016794:	2316      	movs	r3, #22
 8016796:	6003      	str	r3, [r0, #0]
 8016798:	2001      	movs	r0, #1
 801679a:	e7e7      	b.n	801676c <_raise_r+0x12>
 801679c:	2100      	movs	r1, #0
 801679e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80167a2:	4620      	mov	r0, r4
 80167a4:	4798      	blx	r3
 80167a6:	2000      	movs	r0, #0
 80167a8:	e7e0      	b.n	801676c <_raise_r+0x12>
	...

080167ac <raise>:
 80167ac:	4b02      	ldr	r3, [pc, #8]	@ (80167b8 <raise+0xc>)
 80167ae:	4601      	mov	r1, r0
 80167b0:	6818      	ldr	r0, [r3, #0]
 80167b2:	f7ff bfd2 	b.w	801675a <_raise_r>
 80167b6:	bf00      	nop
 80167b8:	20000810 	.word	0x20000810

080167bc <_fstat_r>:
 80167bc:	b538      	push	{r3, r4, r5, lr}
 80167be:	4d07      	ldr	r5, [pc, #28]	@ (80167dc <_fstat_r+0x20>)
 80167c0:	2300      	movs	r3, #0
 80167c2:	4604      	mov	r4, r0
 80167c4:	4608      	mov	r0, r1
 80167c6:	4611      	mov	r1, r2
 80167c8:	602b      	str	r3, [r5, #0]
 80167ca:	f7ea ffed 	bl	80017a8 <_fstat>
 80167ce:	1c43      	adds	r3, r0, #1
 80167d0:	d102      	bne.n	80167d8 <_fstat_r+0x1c>
 80167d2:	682b      	ldr	r3, [r5, #0]
 80167d4:	b103      	cbz	r3, 80167d8 <_fstat_r+0x1c>
 80167d6:	6023      	str	r3, [r4, #0]
 80167d8:	bd38      	pop	{r3, r4, r5, pc}
 80167da:	bf00      	nop
 80167dc:	20011404 	.word	0x20011404

080167e0 <_isatty_r>:
 80167e0:	b538      	push	{r3, r4, r5, lr}
 80167e2:	4d06      	ldr	r5, [pc, #24]	@ (80167fc <_isatty_r+0x1c>)
 80167e4:	2300      	movs	r3, #0
 80167e6:	4604      	mov	r4, r0
 80167e8:	4608      	mov	r0, r1
 80167ea:	602b      	str	r3, [r5, #0]
 80167ec:	f7ea ffec 	bl	80017c8 <_isatty>
 80167f0:	1c43      	adds	r3, r0, #1
 80167f2:	d102      	bne.n	80167fa <_isatty_r+0x1a>
 80167f4:	682b      	ldr	r3, [r5, #0]
 80167f6:	b103      	cbz	r3, 80167fa <_isatty_r+0x1a>
 80167f8:	6023      	str	r3, [r4, #0]
 80167fa:	bd38      	pop	{r3, r4, r5, pc}
 80167fc:	20011404 	.word	0x20011404

08016800 <_kill_r>:
 8016800:	b538      	push	{r3, r4, r5, lr}
 8016802:	4d07      	ldr	r5, [pc, #28]	@ (8016820 <_kill_r+0x20>)
 8016804:	2300      	movs	r3, #0
 8016806:	4604      	mov	r4, r0
 8016808:	4608      	mov	r0, r1
 801680a:	4611      	mov	r1, r2
 801680c:	602b      	str	r3, [r5, #0]
 801680e:	f7ea ff6b 	bl	80016e8 <_kill>
 8016812:	1c43      	adds	r3, r0, #1
 8016814:	d102      	bne.n	801681c <_kill_r+0x1c>
 8016816:	682b      	ldr	r3, [r5, #0]
 8016818:	b103      	cbz	r3, 801681c <_kill_r+0x1c>
 801681a:	6023      	str	r3, [r4, #0]
 801681c:	bd38      	pop	{r3, r4, r5, pc}
 801681e:	bf00      	nop
 8016820:	20011404 	.word	0x20011404

08016824 <_getpid_r>:
 8016824:	f7ea bf58 	b.w	80016d8 <_getpid>

08016828 <_init>:
 8016828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801682a:	bf00      	nop
 801682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801682e:	bc08      	pop	{r3}
 8016830:	469e      	mov	lr, r3
 8016832:	4770      	bx	lr

08016834 <_fini>:
 8016834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016836:	bf00      	nop
 8016838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801683a:	bc08      	pop	{r3}
 801683c:	469e      	mov	lr, r3
 801683e:	4770      	bx	lr
